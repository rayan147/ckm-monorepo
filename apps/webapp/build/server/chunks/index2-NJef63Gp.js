import { z as z$2 } from 'zod';

const isZodType = (obj) => {
  return typeof (obj === null || obj === void 0 ? void 0 : obj.safeParse) === "function";
};
z$2.object({
  name: z$2.literal("ZodError"),
  issues: z$2.array(z$2.object({
    path: z$2.array(z$2.union([z$2.string(), z$2.number()])),
    message: z$2.string().optional(),
    code: z$2.nativeEnum(z$2.ZodIssueCode)
  }).catchall(z$2.any()))
});
const isAppRoute$1 = (obj) => {
  return "method" in obj && "path" in obj;
};
const insertParamsIntoPath = ({ path, params }) => {
  return path.replace(/:([^/]+)/g, (_, p) => {
    return params[p] || "";
  }).replace(/\/\//g, "/");
};
const convertQueryParamsToUrlString = (query, json = false) => {
  const queryString = json ? encodeQueryParamsJson(query) : encodeQueryParams(query);
  return (queryString === null || queryString === void 0 ? void 0 : queryString.length) > 0 ? "?" + queryString : "";
};
const encodeQueryParamsJson = (query) => {
  if (!query) {
    return "";
  }
  return Object.entries(query).filter(([, value]) => value !== void 0).map(([key, value]) => {
    let encodedValue;
    if (typeof value === "string" && !["true", "false", "null"].includes(value.trim()) && isNaN(Number(value))) {
      encodedValue = value;
    } else {
      encodedValue = JSON.stringify(value);
    }
    return `${encodeURIComponent(key)}=${encodeURIComponent(encodedValue)}`;
  }).join("&");
};
const encodeQueryParams = (query) => {
  if (!query) {
    return "";
  }
  return Object.keys(query).flatMap((key) => tokeniseValue(key, query[key])).map(([key, value]) => {
    return `${encodeURIComponent(key)}=${encodeURIComponent(value)}`;
  }).join("&");
};
const tokeniseValue = (key, value) => {
  if (Array.isArray(value)) {
    return value.flatMap((v, idx) => tokeniseValue(`${key}[${idx}]`, v));
  }
  if (value instanceof Date) {
    return [[`${key}`, value.toISOString()]];
  }
  if (value === null) {
    return [[`${key}`, ""]];
  }
  if (value === void 0) {
    return [];
  }
  if (typeof value === "object") {
    return Object.keys(value).flatMap((k) => (
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore
      tokeniseValue(`${key}[${k}]`, value[k])
    ));
  }
  return [[`${key}`, `${value}`]];
};
class UnknownStatusError extends Error {
  constructor(response, knownResponseStatuses) {
    const expectedStatuses = knownResponseStatuses.join(",");
    super(`Server returned unexpected response. Expected one of: ${expectedStatuses} got: ${response.status}`);
    this.response = response;
  }
}
const tsRestFetchApi = async ({ route, path, method, headers, body, validateResponse, fetchOptions }) => {
  const result = await fetch(path, {
    ...fetchOptions,
    method,
    headers,
    body
  });
  const contentType = result.headers.get("content-type");
  if ((contentType === null || contentType === void 0 ? void 0 : contentType.includes("application/")) && (contentType === null || contentType === void 0 ? void 0 : contentType.includes("json"))) {
    const response = {
      status: result.status,
      body: await result.json(),
      headers: result.headers
    };
    const responseSchema = route.responses[response.status];
    if ((validateResponse !== null && validateResponse !== void 0 ? validateResponse : route.validateResponseOnClient) && isZodType(responseSchema)) {
      return {
        ...response,
        body: responseSchema.parse(response.body)
      };
    }
    return response;
  }
  if (contentType === null || contentType === void 0 ? void 0 : contentType.includes("text/")) {
    return {
      status: result.status,
      body: await result.text(),
      headers: result.headers
    };
  }
  return {
    status: result.status,
    body: await result.blob(),
    headers: result.headers
  };
};
const createFormData = (body) => {
  const formData = new FormData();
  const appendToFormData = (key, value) => {
    if (value instanceof File) {
      formData.append(key, value);
    } else {
      formData.append(key, JSON.stringify(value));
    }
  };
  Object.entries(body).forEach(([key, value]) => {
    if (Array.isArray(value)) {
      for (const item of value) {
        appendToFormData(key, item);
      }
    } else {
      appendToFormData(key, value);
    }
  });
  return formData;
};
const normalizeHeaders = (headers) => {
  return Object.fromEntries(Object.entries(headers).map(([k, v]) => [k.toLowerCase(), v]));
};
const fetchApi = (options) => {
  const { path, clientArgs, route, body, query, extraInputArgs, headers, fetchOptions } = options;
  const apiFetcher = clientArgs.api || tsRestFetchApi;
  const baseHeaders = clientArgs.baseHeaders && Object.fromEntries(Object.entries(clientArgs.baseHeaders).map(([name, valueOrFunction]) => {
    if (typeof valueOrFunction === "function") {
      return [name, valueOrFunction(options)];
    } else {
      return [name, valueOrFunction];
    }
  }));
  const combinedHeaders = {
    ...baseHeaders && normalizeHeaders(baseHeaders),
    ...normalizeHeaders(headers)
  };
  Object.keys(combinedHeaders).forEach((key) => {
    if (combinedHeaders[key] === void 0) {
      delete combinedHeaders[key];
    }
  });
  let fetcherArgs = {
    route,
    path,
    method: route.method,
    headers: combinedHeaders,
    body: void 0,
    rawBody: body,
    rawQuery: query,
    contentType: void 0,
    validateResponse: clientArgs.validateResponse,
    fetchOptions: {
      ...clientArgs.credentials && { credentials: clientArgs.credentials },
      ...fetchOptions
    },
    ...(fetchOptions === null || fetchOptions === void 0 ? void 0 : fetchOptions.signal) && { signal: fetchOptions.signal },
    ...(fetchOptions === null || fetchOptions === void 0 ? void 0 : fetchOptions.cache) && { cache: fetchOptions.cache },
    ...fetchOptions && "next" in fetchOptions && !!(fetchOptions === null || fetchOptions === void 0 ? void 0 : fetchOptions.next) && { next: fetchOptions.next }
  };
  if (route.method !== "GET") {
    if ("contentType" in route && route.contentType === "multipart/form-data") {
      fetcherArgs = {
        ...fetcherArgs,
        contentType: "multipart/form-data",
        body: body instanceof FormData ? body : createFormData(body)
      };
    } else if ("contentType" in route && route.contentType === "application/x-www-form-urlencoded") {
      fetcherArgs = {
        ...fetcherArgs,
        contentType: "application/x-www-form-urlencoded",
        headers: {
          "content-type": "application/x-www-form-urlencoded",
          ...fetcherArgs.headers
        },
        body: typeof body === "string" ? body : new URLSearchParams(body)
      };
    } else if (body !== null && body !== void 0) {
      fetcherArgs = {
        ...fetcherArgs,
        contentType: "application/json",
        headers: {
          "content-type": "application/json",
          ...fetcherArgs.headers
        },
        body: JSON.stringify(body)
      };
    }
  }
  return apiFetcher({
    ...fetcherArgs,
    ...extraInputArgs
  });
};
const evaluateFetchApiArgs = (route, clientArgs, inputArgs) => {
  const {
    query,
    params,
    body,
    headers,
    extraHeaders,
    overrideClientOptions,
    fetchOptions,
    // TODO: remove in 4.0
    cache,
    // TODO: remove in 4.0
    next,
    // extra input args
    ...extraInputArgs
  } = inputArgs || {};
  const overriddenClientArgs = {
    ...clientArgs,
    ...overrideClientOptions
  };
  const completeUrl = getCompleteUrl(query, overriddenClientArgs.baseUrl, params, route, !!overriddenClientArgs.jsonQuery);
  return {
    path: completeUrl,
    clientArgs: overriddenClientArgs,
    route,
    body,
    query,
    extraInputArgs,
    fetchOptions: {
      ...cache && { cache },
      ...next && { next },
      ...fetchOptions
    },
    headers: {
      ...extraHeaders,
      ...headers
    }
  };
};
const getCompleteUrl = (query, baseUrl, params, route, jsonQuery) => {
  const path = insertParamsIntoPath({
    path: route.path,
    params
  });
  const queryComponent = convertQueryParamsToUrlString(query, jsonQuery);
  return `${baseUrl}${path}${queryComponent}`;
};
const getRouteQuery = (route, clientArgs) => {
  const knownResponseStatuses = Object.keys(route.responses);
  return async (inputArgs) => {
    const fetchApiArgs = evaluateFetchApiArgs(route, clientArgs, inputArgs);
    const response = await fetchApi(fetchApiArgs);
    if (!clientArgs.throwOnUnknownStatus) {
      return response;
    }
    if (knownResponseStatuses.includes(response.status.toString())) {
      return response;
    }
    throw new UnknownStatusError(response, knownResponseStatuses);
  };
};
const initClient = (router, args) => {
  return Object.fromEntries(Object.entries(router).map(([key, subRouter]) => {
    if (isAppRoute$1(subRouter)) {
      return [key, getRouteQuery(subRouter, args)];
    } else {
      return [key, initClient(subRouter, args)];
    }
  }));
};
var __defProp = Object.defineProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var zod_exports = {};
__export(zod_exports, {
  AllergenAggregateArgsSchema: () => AllergenAggregateArgsSchema,
  AllergenArgsSchema: () => AllergenArgsSchema,
  AllergenAvgOrderByAggregateInputSchema: () => AllergenAvgOrderByAggregateInputSchema,
  AllergenCountOrderByAggregateInputSchema: () => AllergenCountOrderByAggregateInputSchema,
  AllergenCountOutputTypeArgsSchema: () => AllergenCountOutputTypeArgsSchema,
  AllergenCountOutputTypeSelectSchema: () => AllergenCountOutputTypeSelectSchema,
  AllergenCreateArgsSchema: () => AllergenCreateArgsSchema,
  AllergenCreateInputSchema: () => AllergenCreateInputSchema,
  AllergenCreateManyAndReturnArgsSchema: () => AllergenCreateManyAndReturnArgsSchema,
  AllergenCreateManyArgsSchema: () => AllergenCreateManyArgsSchema,
  AllergenCreateManyInputSchema: () => AllergenCreateManyInputSchema,
  AllergenCreateNestedOneWithoutIngredientsInputSchema: () => AllergenCreateNestedOneWithoutIngredientsInputSchema,
  AllergenCreateOrConnectWithoutIngredientsInputSchema: () => AllergenCreateOrConnectWithoutIngredientsInputSchema,
  AllergenCreateWithoutIngredientsInputSchema: () => AllergenCreateWithoutIngredientsInputSchema,
  AllergenDeleteArgsSchema: () => AllergenDeleteArgsSchema,
  AllergenDeleteManyArgsSchema: () => AllergenDeleteManyArgsSchema,
  AllergenFindFirstArgsSchema: () => AllergenFindFirstArgsSchema,
  AllergenFindFirstOrThrowArgsSchema: () => AllergenFindFirstOrThrowArgsSchema,
  AllergenFindManyArgsSchema: () => AllergenFindManyArgsSchema,
  AllergenFindUniqueArgsSchema: () => AllergenFindUniqueArgsSchema,
  AllergenFindUniqueOrThrowArgsSchema: () => AllergenFindUniqueOrThrowArgsSchema,
  AllergenGroupByArgsSchema: () => AllergenGroupByArgsSchema,
  AllergenIncludeSchema: () => AllergenIncludeSchema,
  AllergenMaxOrderByAggregateInputSchema: () => AllergenMaxOrderByAggregateInputSchema,
  AllergenMinOrderByAggregateInputSchema: () => AllergenMinOrderByAggregateInputSchema,
  AllergenOrderByWithAggregationInputSchema: () => AllergenOrderByWithAggregationInputSchema,
  AllergenOrderByWithRelationInputSchema: () => AllergenOrderByWithRelationInputSchema,
  AllergenRelationFilterSchema: () => AllergenRelationFilterSchema,
  AllergenScalarFieldEnumSchema: () => AllergenScalarFieldEnumSchema,
  AllergenScalarWhereWithAggregatesInputSchema: () => AllergenScalarWhereWithAggregatesInputSchema,
  AllergenSchema: () => AllergenSchema,
  AllergenSelectSchema: () => AllergenSelectSchema,
  AllergenSumOrderByAggregateInputSchema: () => AllergenSumOrderByAggregateInputSchema,
  AllergenUncheckedCreateInputSchema: () => AllergenUncheckedCreateInputSchema,
  AllergenUncheckedCreateWithoutIngredientsInputSchema: () => AllergenUncheckedCreateWithoutIngredientsInputSchema,
  AllergenUncheckedUpdateInputSchema: () => AllergenUncheckedUpdateInputSchema,
  AllergenUncheckedUpdateManyInputSchema: () => AllergenUncheckedUpdateManyInputSchema,
  AllergenUncheckedUpdateWithoutIngredientsInputSchema: () => AllergenUncheckedUpdateWithoutIngredientsInputSchema,
  AllergenUpdateArgsSchema: () => AllergenUpdateArgsSchema,
  AllergenUpdateInputSchema: () => AllergenUpdateInputSchema,
  AllergenUpdateManyArgsSchema: () => AllergenUpdateManyArgsSchema,
  AllergenUpdateManyMutationInputSchema: () => AllergenUpdateManyMutationInputSchema,
  AllergenUpdateOneRequiredWithoutIngredientsNestedInputSchema: () => AllergenUpdateOneRequiredWithoutIngredientsNestedInputSchema,
  AllergenUpdateToOneWithWhereWithoutIngredientsInputSchema: () => AllergenUpdateToOneWithWhereWithoutIngredientsInputSchema,
  AllergenUpdateWithoutIngredientsInputSchema: () => AllergenUpdateWithoutIngredientsInputSchema,
  AllergenUpsertArgsSchema: () => AllergenUpsertArgsSchema,
  AllergenUpsertWithoutIngredientsInputSchema: () => AllergenUpsertWithoutIngredientsInputSchema,
  AllergenWhereInputSchema: () => AllergenWhereInputSchema,
  AllergenWhereUniqueInputSchema: () => AllergenWhereUniqueInputSchema,
  AvailabilityAggregateArgsSchema: () => AvailabilityAggregateArgsSchema,
  AvailabilityArgsSchema: () => AvailabilityArgsSchema,
  AvailabilityAvgOrderByAggregateInputSchema: () => AvailabilityAvgOrderByAggregateInputSchema,
  AvailabilityCountOrderByAggregateInputSchema: () => AvailabilityCountOrderByAggregateInputSchema,
  AvailabilityCreateArgsSchema: () => AvailabilityCreateArgsSchema,
  AvailabilityCreateInputSchema: () => AvailabilityCreateInputSchema,
  AvailabilityCreateManyAndReturnArgsSchema: () => AvailabilityCreateManyAndReturnArgsSchema,
  AvailabilityCreateManyArgsSchema: () => AvailabilityCreateManyArgsSchema,
  AvailabilityCreateManyInputSchema: () => AvailabilityCreateManyInputSchema,
  AvailabilityCreateManyUserInputEnvelopeSchema: () => AvailabilityCreateManyUserInputEnvelopeSchema,
  AvailabilityCreateManyUserInputSchema: () => AvailabilityCreateManyUserInputSchema,
  AvailabilityCreateNestedManyWithoutUserInputSchema: () => AvailabilityCreateNestedManyWithoutUserInputSchema,
  AvailabilityCreateOrConnectWithoutUserInputSchema: () => AvailabilityCreateOrConnectWithoutUserInputSchema,
  AvailabilityCreateWithoutUserInputSchema: () => AvailabilityCreateWithoutUserInputSchema,
  AvailabilityDeleteArgsSchema: () => AvailabilityDeleteArgsSchema,
  AvailabilityDeleteManyArgsSchema: () => AvailabilityDeleteManyArgsSchema,
  AvailabilityFindFirstArgsSchema: () => AvailabilityFindFirstArgsSchema,
  AvailabilityFindFirstOrThrowArgsSchema: () => AvailabilityFindFirstOrThrowArgsSchema,
  AvailabilityFindManyArgsSchema: () => AvailabilityFindManyArgsSchema,
  AvailabilityFindUniqueArgsSchema: () => AvailabilityFindUniqueArgsSchema,
  AvailabilityFindUniqueOrThrowArgsSchema: () => AvailabilityFindUniqueOrThrowArgsSchema,
  AvailabilityGroupByArgsSchema: () => AvailabilityGroupByArgsSchema,
  AvailabilityIncludeSchema: () => AvailabilityIncludeSchema,
  AvailabilityListRelationFilterSchema: () => AvailabilityListRelationFilterSchema,
  AvailabilityMaxOrderByAggregateInputSchema: () => AvailabilityMaxOrderByAggregateInputSchema,
  AvailabilityMinOrderByAggregateInputSchema: () => AvailabilityMinOrderByAggregateInputSchema,
  AvailabilityOrderByRelationAggregateInputSchema: () => AvailabilityOrderByRelationAggregateInputSchema,
  AvailabilityOrderByWithAggregationInputSchema: () => AvailabilityOrderByWithAggregationInputSchema,
  AvailabilityOrderByWithRelationInputSchema: () => AvailabilityOrderByWithRelationInputSchema,
  AvailabilityScalarFieldEnumSchema: () => AvailabilityScalarFieldEnumSchema,
  AvailabilityScalarWhereInputSchema: () => AvailabilityScalarWhereInputSchema,
  AvailabilityScalarWhereWithAggregatesInputSchema: () => AvailabilityScalarWhereWithAggregatesInputSchema,
  AvailabilitySchema: () => AvailabilitySchema,
  AvailabilitySelectSchema: () => AvailabilitySelectSchema,
  AvailabilitySumOrderByAggregateInputSchema: () => AvailabilitySumOrderByAggregateInputSchema,
  AvailabilityUncheckedCreateInputSchema: () => AvailabilityUncheckedCreateInputSchema,
  AvailabilityUncheckedCreateNestedManyWithoutUserInputSchema: () => AvailabilityUncheckedCreateNestedManyWithoutUserInputSchema,
  AvailabilityUncheckedCreateWithoutUserInputSchema: () => AvailabilityUncheckedCreateWithoutUserInputSchema,
  AvailabilityUncheckedUpdateInputSchema: () => AvailabilityUncheckedUpdateInputSchema,
  AvailabilityUncheckedUpdateManyInputSchema: () => AvailabilityUncheckedUpdateManyInputSchema,
  AvailabilityUncheckedUpdateManyWithoutUserInputSchema: () => AvailabilityUncheckedUpdateManyWithoutUserInputSchema,
  AvailabilityUncheckedUpdateManyWithoutUserNestedInputSchema: () => AvailabilityUncheckedUpdateManyWithoutUserNestedInputSchema,
  AvailabilityUncheckedUpdateWithoutUserInputSchema: () => AvailabilityUncheckedUpdateWithoutUserInputSchema,
  AvailabilityUpdateArgsSchema: () => AvailabilityUpdateArgsSchema,
  AvailabilityUpdateInputSchema: () => AvailabilityUpdateInputSchema,
  AvailabilityUpdateManyArgsSchema: () => AvailabilityUpdateManyArgsSchema,
  AvailabilityUpdateManyMutationInputSchema: () => AvailabilityUpdateManyMutationInputSchema,
  AvailabilityUpdateManyWithWhereWithoutUserInputSchema: () => AvailabilityUpdateManyWithWhereWithoutUserInputSchema,
  AvailabilityUpdateManyWithoutUserNestedInputSchema: () => AvailabilityUpdateManyWithoutUserNestedInputSchema,
  AvailabilityUpdateWithWhereUniqueWithoutUserInputSchema: () => AvailabilityUpdateWithWhereUniqueWithoutUserInputSchema,
  AvailabilityUpdateWithoutUserInputSchema: () => AvailabilityUpdateWithoutUserInputSchema,
  AvailabilityUpsertArgsSchema: () => AvailabilityUpsertArgsSchema,
  AvailabilityUpsertWithWhereUniqueWithoutUserInputSchema: () => AvailabilityUpsertWithWhereUniqueWithoutUserInputSchema,
  AvailabilityWhereInputSchema: () => AvailabilityWhereInputSchema,
  AvailabilityWhereUniqueInputSchema: () => AvailabilityWhereUniqueInputSchema,
  BoolFieldUpdateOperationsInputSchema: () => BoolFieldUpdateOperationsInputSchema,
  BoolFilterSchema: () => BoolFilterSchema,
  BoolWithAggregatesFilterSchema: () => BoolWithAggregatesFilterSchema,
  ChecklistCompleteAggregateArgsSchema: () => ChecklistCompleteAggregateArgsSchema,
  ChecklistCompleteArgsSchema: () => ChecklistCompleteArgsSchema,
  ChecklistCompleteAvgOrderByAggregateInputSchema: () => ChecklistCompleteAvgOrderByAggregateInputSchema,
  ChecklistCompleteCountOrderByAggregateInputSchema: () => ChecklistCompleteCountOrderByAggregateInputSchema,
  ChecklistCompleteCountOutputTypeArgsSchema: () => ChecklistCompleteCountOutputTypeArgsSchema,
  ChecklistCompleteCountOutputTypeSelectSchema: () => ChecklistCompleteCountOutputTypeSelectSchema,
  ChecklistCompleteCreateArgsSchema: () => ChecklistCompleteCreateArgsSchema,
  ChecklistCompleteCreateInputSchema: () => ChecklistCompleteCreateInputSchema,
  ChecklistCompleteCreateManyAndReturnArgsSchema: () => ChecklistCompleteCreateManyAndReturnArgsSchema,
  ChecklistCompleteCreateManyArgsSchema: () => ChecklistCompleteCreateManyArgsSchema,
  ChecklistCompleteCreateManyChecklistInputEnvelopeSchema: () => ChecklistCompleteCreateManyChecklistInputEnvelopeSchema,
  ChecklistCompleteCreateManyChecklistInputSchema: () => ChecklistCompleteCreateManyChecklistInputSchema,
  ChecklistCompleteCreateManyCompletedByInputEnvelopeSchema: () => ChecklistCompleteCreateManyCompletedByInputEnvelopeSchema,
  ChecklistCompleteCreateManyCompletedByInputSchema: () => ChecklistCompleteCreateManyCompletedByInputSchema,
  ChecklistCompleteCreateManyInputSchema: () => ChecklistCompleteCreateManyInputSchema,
  ChecklistCompleteCreateNestedManyWithoutChecklistInputSchema: () => ChecklistCompleteCreateNestedManyWithoutChecklistInputSchema,
  ChecklistCompleteCreateNestedManyWithoutCompletedByInputSchema: () => ChecklistCompleteCreateNestedManyWithoutCompletedByInputSchema,
  ChecklistCompleteCreateNestedOneWithoutItemsInputSchema: () => ChecklistCompleteCreateNestedOneWithoutItemsInputSchema,
  ChecklistCompleteCreateOrConnectWithoutChecklistInputSchema: () => ChecklistCompleteCreateOrConnectWithoutChecklistInputSchema,
  ChecklistCompleteCreateOrConnectWithoutCompletedByInputSchema: () => ChecklistCompleteCreateOrConnectWithoutCompletedByInputSchema,
  ChecklistCompleteCreateOrConnectWithoutItemsInputSchema: () => ChecklistCompleteCreateOrConnectWithoutItemsInputSchema,
  ChecklistCompleteCreateWithoutChecklistInputSchema: () => ChecklistCompleteCreateWithoutChecklistInputSchema,
  ChecklistCompleteCreateWithoutCompletedByInputSchema: () => ChecklistCompleteCreateWithoutCompletedByInputSchema,
  ChecklistCompleteCreateWithoutItemsInputSchema: () => ChecklistCompleteCreateWithoutItemsInputSchema,
  ChecklistCompleteDeleteArgsSchema: () => ChecklistCompleteDeleteArgsSchema,
  ChecklistCompleteDeleteManyArgsSchema: () => ChecklistCompleteDeleteManyArgsSchema,
  ChecklistCompleteFindFirstArgsSchema: () => ChecklistCompleteFindFirstArgsSchema,
  ChecklistCompleteFindFirstOrThrowArgsSchema: () => ChecklistCompleteFindFirstOrThrowArgsSchema,
  ChecklistCompleteFindManyArgsSchema: () => ChecklistCompleteFindManyArgsSchema,
  ChecklistCompleteFindUniqueArgsSchema: () => ChecklistCompleteFindUniqueArgsSchema,
  ChecklistCompleteFindUniqueOrThrowArgsSchema: () => ChecklistCompleteFindUniqueOrThrowArgsSchema,
  ChecklistCompleteGroupByArgsSchema: () => ChecklistCompleteGroupByArgsSchema,
  ChecklistCompleteIncludeSchema: () => ChecklistCompleteIncludeSchema,
  ChecklistCompleteListRelationFilterSchema: () => ChecklistCompleteListRelationFilterSchema,
  ChecklistCompleteMaxOrderByAggregateInputSchema: () => ChecklistCompleteMaxOrderByAggregateInputSchema,
  ChecklistCompleteMinOrderByAggregateInputSchema: () => ChecklistCompleteMinOrderByAggregateInputSchema,
  ChecklistCompleteOrderByRelationAggregateInputSchema: () => ChecklistCompleteOrderByRelationAggregateInputSchema,
  ChecklistCompleteOrderByWithAggregationInputSchema: () => ChecklistCompleteOrderByWithAggregationInputSchema,
  ChecklistCompleteOrderByWithRelationInputSchema: () => ChecklistCompleteOrderByWithRelationInputSchema,
  ChecklistCompleteRelationFilterSchema: () => ChecklistCompleteRelationFilterSchema,
  ChecklistCompleteScalarFieldEnumSchema: () => ChecklistCompleteScalarFieldEnumSchema,
  ChecklistCompleteScalarWhereInputSchema: () => ChecklistCompleteScalarWhereInputSchema,
  ChecklistCompleteScalarWhereWithAggregatesInputSchema: () => ChecklistCompleteScalarWhereWithAggregatesInputSchema,
  ChecklistCompleteSchema: () => ChecklistCompleteSchema,
  ChecklistCompleteSelectSchema: () => ChecklistCompleteSelectSchema,
  ChecklistCompleteSumOrderByAggregateInputSchema: () => ChecklistCompleteSumOrderByAggregateInputSchema,
  ChecklistCompleteUncheckedCreateInputSchema: () => ChecklistCompleteUncheckedCreateInputSchema,
  ChecklistCompleteUncheckedCreateNestedManyWithoutChecklistInputSchema: () => ChecklistCompleteUncheckedCreateNestedManyWithoutChecklistInputSchema,
  ChecklistCompleteUncheckedCreateNestedManyWithoutCompletedByInputSchema: () => ChecklistCompleteUncheckedCreateNestedManyWithoutCompletedByInputSchema,
  ChecklistCompleteUncheckedCreateWithoutChecklistInputSchema: () => ChecklistCompleteUncheckedCreateWithoutChecklistInputSchema,
  ChecklistCompleteUncheckedCreateWithoutCompletedByInputSchema: () => ChecklistCompleteUncheckedCreateWithoutCompletedByInputSchema,
  ChecklistCompleteUncheckedCreateWithoutItemsInputSchema: () => ChecklistCompleteUncheckedCreateWithoutItemsInputSchema,
  ChecklistCompleteUncheckedUpdateInputSchema: () => ChecklistCompleteUncheckedUpdateInputSchema,
  ChecklistCompleteUncheckedUpdateManyInputSchema: () => ChecklistCompleteUncheckedUpdateManyInputSchema,
  ChecklistCompleteUncheckedUpdateManyWithoutChecklistInputSchema: () => ChecklistCompleteUncheckedUpdateManyWithoutChecklistInputSchema,
  ChecklistCompleteUncheckedUpdateManyWithoutChecklistNestedInputSchema: () => ChecklistCompleteUncheckedUpdateManyWithoutChecklistNestedInputSchema,
  ChecklistCompleteUncheckedUpdateManyWithoutCompletedByInputSchema: () => ChecklistCompleteUncheckedUpdateManyWithoutCompletedByInputSchema,
  ChecklistCompleteUncheckedUpdateManyWithoutCompletedByNestedInputSchema: () => ChecklistCompleteUncheckedUpdateManyWithoutCompletedByNestedInputSchema,
  ChecklistCompleteUncheckedUpdateWithoutChecklistInputSchema: () => ChecklistCompleteUncheckedUpdateWithoutChecklistInputSchema,
  ChecklistCompleteUncheckedUpdateWithoutCompletedByInputSchema: () => ChecklistCompleteUncheckedUpdateWithoutCompletedByInputSchema,
  ChecklistCompleteUncheckedUpdateWithoutItemsInputSchema: () => ChecklistCompleteUncheckedUpdateWithoutItemsInputSchema,
  ChecklistCompleteUpdateArgsSchema: () => ChecklistCompleteUpdateArgsSchema,
  ChecklistCompleteUpdateInputSchema: () => ChecklistCompleteUpdateInputSchema,
  ChecklistCompleteUpdateManyArgsSchema: () => ChecklistCompleteUpdateManyArgsSchema,
  ChecklistCompleteUpdateManyMutationInputSchema: () => ChecklistCompleteUpdateManyMutationInputSchema,
  ChecklistCompleteUpdateManyWithWhereWithoutChecklistInputSchema: () => ChecklistCompleteUpdateManyWithWhereWithoutChecklistInputSchema,
  ChecklistCompleteUpdateManyWithWhereWithoutCompletedByInputSchema: () => ChecklistCompleteUpdateManyWithWhereWithoutCompletedByInputSchema,
  ChecklistCompleteUpdateManyWithoutChecklistNestedInputSchema: () => ChecklistCompleteUpdateManyWithoutChecklistNestedInputSchema,
  ChecklistCompleteUpdateManyWithoutCompletedByNestedInputSchema: () => ChecklistCompleteUpdateManyWithoutCompletedByNestedInputSchema,
  ChecklistCompleteUpdateOneRequiredWithoutItemsNestedInputSchema: () => ChecklistCompleteUpdateOneRequiredWithoutItemsNestedInputSchema,
  ChecklistCompleteUpdateToOneWithWhereWithoutItemsInputSchema: () => ChecklistCompleteUpdateToOneWithWhereWithoutItemsInputSchema,
  ChecklistCompleteUpdateWithWhereUniqueWithoutChecklistInputSchema: () => ChecklistCompleteUpdateWithWhereUniqueWithoutChecklistInputSchema,
  ChecklistCompleteUpdateWithWhereUniqueWithoutCompletedByInputSchema: () => ChecklistCompleteUpdateWithWhereUniqueWithoutCompletedByInputSchema,
  ChecklistCompleteUpdateWithoutChecklistInputSchema: () => ChecklistCompleteUpdateWithoutChecklistInputSchema,
  ChecklistCompleteUpdateWithoutCompletedByInputSchema: () => ChecklistCompleteUpdateWithoutCompletedByInputSchema,
  ChecklistCompleteUpdateWithoutItemsInputSchema: () => ChecklistCompleteUpdateWithoutItemsInputSchema,
  ChecklistCompleteUpsertArgsSchema: () => ChecklistCompleteUpsertArgsSchema,
  ChecklistCompleteUpsertWithWhereUniqueWithoutChecklistInputSchema: () => ChecklistCompleteUpsertWithWhereUniqueWithoutChecklistInputSchema,
  ChecklistCompleteUpsertWithWhereUniqueWithoutCompletedByInputSchema: () => ChecklistCompleteUpsertWithWhereUniqueWithoutCompletedByInputSchema,
  ChecklistCompleteUpsertWithoutItemsInputSchema: () => ChecklistCompleteUpsertWithoutItemsInputSchema,
  ChecklistCompleteWhereInputSchema: () => ChecklistCompleteWhereInputSchema,
  ChecklistCompleteWhereUniqueInputSchema: () => ChecklistCompleteWhereUniqueInputSchema,
  ChecklistFrequencySchema: () => ChecklistFrequencySchema,
  ChecklistItemAggregateArgsSchema: () => ChecklistItemAggregateArgsSchema,
  ChecklistItemArgsSchema: () => ChecklistItemArgsSchema,
  ChecklistItemAvgOrderByAggregateInputSchema: () => ChecklistItemAvgOrderByAggregateInputSchema,
  ChecklistItemCompleteAggregateArgsSchema: () => ChecklistItemCompleteAggregateArgsSchema,
  ChecklistItemCompleteArgsSchema: () => ChecklistItemCompleteArgsSchema,
  ChecklistItemCompleteAvgOrderByAggregateInputSchema: () => ChecklistItemCompleteAvgOrderByAggregateInputSchema,
  ChecklistItemCompleteCountOrderByAggregateInputSchema: () => ChecklistItemCompleteCountOrderByAggregateInputSchema,
  ChecklistItemCompleteCreateArgsSchema: () => ChecklistItemCompleteCreateArgsSchema,
  ChecklistItemCompleteCreateInputSchema: () => ChecklistItemCompleteCreateInputSchema,
  ChecklistItemCompleteCreateManyAndReturnArgsSchema: () => ChecklistItemCompleteCreateManyAndReturnArgsSchema,
  ChecklistItemCompleteCreateManyArgsSchema: () => ChecklistItemCompleteCreateManyArgsSchema,
  ChecklistItemCompleteCreateManyChecklistCompleteInputEnvelopeSchema: () => ChecklistItemCompleteCreateManyChecklistCompleteInputEnvelopeSchema,
  ChecklistItemCompleteCreateManyChecklistCompleteInputSchema: () => ChecklistItemCompleteCreateManyChecklistCompleteInputSchema,
  ChecklistItemCompleteCreateManyChecklistItemInputEnvelopeSchema: () => ChecklistItemCompleteCreateManyChecklistItemInputEnvelopeSchema,
  ChecklistItemCompleteCreateManyChecklistItemInputSchema: () => ChecklistItemCompleteCreateManyChecklistItemInputSchema,
  ChecklistItemCompleteCreateManyInputSchema: () => ChecklistItemCompleteCreateManyInputSchema,
  ChecklistItemCompleteCreateNestedManyWithoutChecklistCompleteInputSchema: () => ChecklistItemCompleteCreateNestedManyWithoutChecklistCompleteInputSchema,
  ChecklistItemCompleteCreateNestedManyWithoutChecklistItemInputSchema: () => ChecklistItemCompleteCreateNestedManyWithoutChecklistItemInputSchema,
  ChecklistItemCompleteCreateOrConnectWithoutChecklistCompleteInputSchema: () => ChecklistItemCompleteCreateOrConnectWithoutChecklistCompleteInputSchema,
  ChecklistItemCompleteCreateOrConnectWithoutChecklistItemInputSchema: () => ChecklistItemCompleteCreateOrConnectWithoutChecklistItemInputSchema,
  ChecklistItemCompleteCreateWithoutChecklistCompleteInputSchema: () => ChecklistItemCompleteCreateWithoutChecklistCompleteInputSchema,
  ChecklistItemCompleteCreateWithoutChecklistItemInputSchema: () => ChecklistItemCompleteCreateWithoutChecklistItemInputSchema,
  ChecklistItemCompleteCreatephotoUrlsInputSchema: () => ChecklistItemCompleteCreatephotoUrlsInputSchema,
  ChecklistItemCompleteDeleteArgsSchema: () => ChecklistItemCompleteDeleteArgsSchema,
  ChecklistItemCompleteDeleteManyArgsSchema: () => ChecklistItemCompleteDeleteManyArgsSchema,
  ChecklistItemCompleteFindFirstArgsSchema: () => ChecklistItemCompleteFindFirstArgsSchema,
  ChecklistItemCompleteFindFirstOrThrowArgsSchema: () => ChecklistItemCompleteFindFirstOrThrowArgsSchema,
  ChecklistItemCompleteFindManyArgsSchema: () => ChecklistItemCompleteFindManyArgsSchema,
  ChecklistItemCompleteFindUniqueArgsSchema: () => ChecklistItemCompleteFindUniqueArgsSchema,
  ChecklistItemCompleteFindUniqueOrThrowArgsSchema: () => ChecklistItemCompleteFindUniqueOrThrowArgsSchema,
  ChecklistItemCompleteGroupByArgsSchema: () => ChecklistItemCompleteGroupByArgsSchema,
  ChecklistItemCompleteIncludeSchema: () => ChecklistItemCompleteIncludeSchema,
  ChecklistItemCompleteListRelationFilterSchema: () => ChecklistItemCompleteListRelationFilterSchema,
  ChecklistItemCompleteMaxOrderByAggregateInputSchema: () => ChecklistItemCompleteMaxOrderByAggregateInputSchema,
  ChecklistItemCompleteMinOrderByAggregateInputSchema: () => ChecklistItemCompleteMinOrderByAggregateInputSchema,
  ChecklistItemCompleteOrderByRelationAggregateInputSchema: () => ChecklistItemCompleteOrderByRelationAggregateInputSchema,
  ChecklistItemCompleteOrderByWithAggregationInputSchema: () => ChecklistItemCompleteOrderByWithAggregationInputSchema,
  ChecklistItemCompleteOrderByWithRelationInputSchema: () => ChecklistItemCompleteOrderByWithRelationInputSchema,
  ChecklistItemCompleteScalarFieldEnumSchema: () => ChecklistItemCompleteScalarFieldEnumSchema,
  ChecklistItemCompleteScalarWhereInputSchema: () => ChecklistItemCompleteScalarWhereInputSchema,
  ChecklistItemCompleteScalarWhereWithAggregatesInputSchema: () => ChecklistItemCompleteScalarWhereWithAggregatesInputSchema,
  ChecklistItemCompleteSchema: () => ChecklistItemCompleteSchema,
  ChecklistItemCompleteSelectSchema: () => ChecklistItemCompleteSelectSchema,
  ChecklistItemCompleteSumOrderByAggregateInputSchema: () => ChecklistItemCompleteSumOrderByAggregateInputSchema,
  ChecklistItemCompleteUncheckedCreateInputSchema: () => ChecklistItemCompleteUncheckedCreateInputSchema,
  ChecklistItemCompleteUncheckedCreateNestedManyWithoutChecklistCompleteInputSchema: () => ChecklistItemCompleteUncheckedCreateNestedManyWithoutChecklistCompleteInputSchema,
  ChecklistItemCompleteUncheckedCreateNestedManyWithoutChecklistItemInputSchema: () => ChecklistItemCompleteUncheckedCreateNestedManyWithoutChecklistItemInputSchema,
  ChecklistItemCompleteUncheckedCreateWithoutChecklistCompleteInputSchema: () => ChecklistItemCompleteUncheckedCreateWithoutChecklistCompleteInputSchema,
  ChecklistItemCompleteUncheckedCreateWithoutChecklistItemInputSchema: () => ChecklistItemCompleteUncheckedCreateWithoutChecklistItemInputSchema,
  ChecklistItemCompleteUncheckedUpdateInputSchema: () => ChecklistItemCompleteUncheckedUpdateInputSchema,
  ChecklistItemCompleteUncheckedUpdateManyInputSchema: () => ChecklistItemCompleteUncheckedUpdateManyInputSchema,
  ChecklistItemCompleteUncheckedUpdateManyWithoutChecklistCompleteInputSchema: () => ChecklistItemCompleteUncheckedUpdateManyWithoutChecklistCompleteInputSchema,
  ChecklistItemCompleteUncheckedUpdateManyWithoutChecklistCompleteNestedInputSchema: () => ChecklistItemCompleteUncheckedUpdateManyWithoutChecklistCompleteNestedInputSchema,
  ChecklistItemCompleteUncheckedUpdateManyWithoutChecklistItemInputSchema: () => ChecklistItemCompleteUncheckedUpdateManyWithoutChecklistItemInputSchema,
  ChecklistItemCompleteUncheckedUpdateManyWithoutChecklistItemNestedInputSchema: () => ChecklistItemCompleteUncheckedUpdateManyWithoutChecklistItemNestedInputSchema,
  ChecklistItemCompleteUncheckedUpdateWithoutChecklistCompleteInputSchema: () => ChecklistItemCompleteUncheckedUpdateWithoutChecklistCompleteInputSchema,
  ChecklistItemCompleteUncheckedUpdateWithoutChecklistItemInputSchema: () => ChecklistItemCompleteUncheckedUpdateWithoutChecklistItemInputSchema,
  ChecklistItemCompleteUpdateArgsSchema: () => ChecklistItemCompleteUpdateArgsSchema,
  ChecklistItemCompleteUpdateInputSchema: () => ChecklistItemCompleteUpdateInputSchema,
  ChecklistItemCompleteUpdateManyArgsSchema: () => ChecklistItemCompleteUpdateManyArgsSchema,
  ChecklistItemCompleteUpdateManyMutationInputSchema: () => ChecklistItemCompleteUpdateManyMutationInputSchema,
  ChecklistItemCompleteUpdateManyWithWhereWithoutChecklistCompleteInputSchema: () => ChecklistItemCompleteUpdateManyWithWhereWithoutChecklistCompleteInputSchema,
  ChecklistItemCompleteUpdateManyWithWhereWithoutChecklistItemInputSchema: () => ChecklistItemCompleteUpdateManyWithWhereWithoutChecklistItemInputSchema,
  ChecklistItemCompleteUpdateManyWithoutChecklistCompleteNestedInputSchema: () => ChecklistItemCompleteUpdateManyWithoutChecklistCompleteNestedInputSchema,
  ChecklistItemCompleteUpdateManyWithoutChecklistItemNestedInputSchema: () => ChecklistItemCompleteUpdateManyWithoutChecklistItemNestedInputSchema,
  ChecklistItemCompleteUpdateWithWhereUniqueWithoutChecklistCompleteInputSchema: () => ChecklistItemCompleteUpdateWithWhereUniqueWithoutChecklistCompleteInputSchema,
  ChecklistItemCompleteUpdateWithWhereUniqueWithoutChecklistItemInputSchema: () => ChecklistItemCompleteUpdateWithWhereUniqueWithoutChecklistItemInputSchema,
  ChecklistItemCompleteUpdateWithoutChecklistCompleteInputSchema: () => ChecklistItemCompleteUpdateWithoutChecklistCompleteInputSchema,
  ChecklistItemCompleteUpdateWithoutChecklistItemInputSchema: () => ChecklistItemCompleteUpdateWithoutChecklistItemInputSchema,
  ChecklistItemCompleteUpdatephotoUrlsInputSchema: () => ChecklistItemCompleteUpdatephotoUrlsInputSchema,
  ChecklistItemCompleteUpsertArgsSchema: () => ChecklistItemCompleteUpsertArgsSchema,
  ChecklistItemCompleteUpsertWithWhereUniqueWithoutChecklistCompleteInputSchema: () => ChecklistItemCompleteUpsertWithWhereUniqueWithoutChecklistCompleteInputSchema,
  ChecklistItemCompleteUpsertWithWhereUniqueWithoutChecklistItemInputSchema: () => ChecklistItemCompleteUpsertWithWhereUniqueWithoutChecklistItemInputSchema,
  ChecklistItemCompleteWhereInputSchema: () => ChecklistItemCompleteWhereInputSchema,
  ChecklistItemCompleteWhereUniqueInputSchema: () => ChecklistItemCompleteWhereUniqueInputSchema,
  ChecklistItemCountOrderByAggregateInputSchema: () => ChecklistItemCountOrderByAggregateInputSchema,
  ChecklistItemCountOutputTypeArgsSchema: () => ChecklistItemCountOutputTypeArgsSchema,
  ChecklistItemCountOutputTypeSelectSchema: () => ChecklistItemCountOutputTypeSelectSchema,
  ChecklistItemCreateArgsSchema: () => ChecklistItemCreateArgsSchema,
  ChecklistItemCreateInputSchema: () => ChecklistItemCreateInputSchema,
  ChecklistItemCreateManyAndReturnArgsSchema: () => ChecklistItemCreateManyAndReturnArgsSchema,
  ChecklistItemCreateManyArgsSchema: () => ChecklistItemCreateManyArgsSchema,
  ChecklistItemCreateManyChecklistInputEnvelopeSchema: () => ChecklistItemCreateManyChecklistInputEnvelopeSchema,
  ChecklistItemCreateManyChecklistInputSchema: () => ChecklistItemCreateManyChecklistInputSchema,
  ChecklistItemCreateManyInputSchema: () => ChecklistItemCreateManyInputSchema,
  ChecklistItemCreateNestedManyWithoutChecklistInputSchema: () => ChecklistItemCreateNestedManyWithoutChecklistInputSchema,
  ChecklistItemCreateNestedOneWithoutCompletionsInputSchema: () => ChecklistItemCreateNestedOneWithoutCompletionsInputSchema,
  ChecklistItemCreateOrConnectWithoutChecklistInputSchema: () => ChecklistItemCreateOrConnectWithoutChecklistInputSchema,
  ChecklistItemCreateOrConnectWithoutCompletionsInputSchema: () => ChecklistItemCreateOrConnectWithoutCompletionsInputSchema,
  ChecklistItemCreateWithoutChecklistInputSchema: () => ChecklistItemCreateWithoutChecklistInputSchema,
  ChecklistItemCreateWithoutCompletionsInputSchema: () => ChecklistItemCreateWithoutCompletionsInputSchema,
  ChecklistItemDeleteArgsSchema: () => ChecklistItemDeleteArgsSchema,
  ChecklistItemDeleteManyArgsSchema: () => ChecklistItemDeleteManyArgsSchema,
  ChecklistItemFindFirstArgsSchema: () => ChecklistItemFindFirstArgsSchema,
  ChecklistItemFindFirstOrThrowArgsSchema: () => ChecklistItemFindFirstOrThrowArgsSchema,
  ChecklistItemFindManyArgsSchema: () => ChecklistItemFindManyArgsSchema,
  ChecklistItemFindUniqueArgsSchema: () => ChecklistItemFindUniqueArgsSchema,
  ChecklistItemFindUniqueOrThrowArgsSchema: () => ChecklistItemFindUniqueOrThrowArgsSchema,
  ChecklistItemGroupByArgsSchema: () => ChecklistItemGroupByArgsSchema,
  ChecklistItemIncludeSchema: () => ChecklistItemIncludeSchema,
  ChecklistItemListRelationFilterSchema: () => ChecklistItemListRelationFilterSchema,
  ChecklistItemMaxOrderByAggregateInputSchema: () => ChecklistItemMaxOrderByAggregateInputSchema,
  ChecklistItemMinOrderByAggregateInputSchema: () => ChecklistItemMinOrderByAggregateInputSchema,
  ChecklistItemOrderByRelationAggregateInputSchema: () => ChecklistItemOrderByRelationAggregateInputSchema,
  ChecklistItemOrderByWithAggregationInputSchema: () => ChecklistItemOrderByWithAggregationInputSchema,
  ChecklistItemOrderByWithRelationInputSchema: () => ChecklistItemOrderByWithRelationInputSchema,
  ChecklistItemRelationFilterSchema: () => ChecklistItemRelationFilterSchema,
  ChecklistItemScalarFieldEnumSchema: () => ChecklistItemScalarFieldEnumSchema,
  ChecklistItemScalarWhereInputSchema: () => ChecklistItemScalarWhereInputSchema,
  ChecklistItemScalarWhereWithAggregatesInputSchema: () => ChecklistItemScalarWhereWithAggregatesInputSchema,
  ChecklistItemSchema: () => ChecklistItemSchema,
  ChecklistItemSelectSchema: () => ChecklistItemSelectSchema,
  ChecklistItemSumOrderByAggregateInputSchema: () => ChecklistItemSumOrderByAggregateInputSchema,
  ChecklistItemTypeSchema: () => ChecklistItemTypeSchema,
  ChecklistItemUncheckedCreateInputSchema: () => ChecklistItemUncheckedCreateInputSchema,
  ChecklistItemUncheckedCreateNestedManyWithoutChecklistInputSchema: () => ChecklistItemUncheckedCreateNestedManyWithoutChecklistInputSchema,
  ChecklistItemUncheckedCreateWithoutChecklistInputSchema: () => ChecklistItemUncheckedCreateWithoutChecklistInputSchema,
  ChecklistItemUncheckedCreateWithoutCompletionsInputSchema: () => ChecklistItemUncheckedCreateWithoutCompletionsInputSchema,
  ChecklistItemUncheckedUpdateInputSchema: () => ChecklistItemUncheckedUpdateInputSchema,
  ChecklistItemUncheckedUpdateManyInputSchema: () => ChecklistItemUncheckedUpdateManyInputSchema,
  ChecklistItemUncheckedUpdateManyWithoutChecklistInputSchema: () => ChecklistItemUncheckedUpdateManyWithoutChecklistInputSchema,
  ChecklistItemUncheckedUpdateManyWithoutChecklistNestedInputSchema: () => ChecklistItemUncheckedUpdateManyWithoutChecklistNestedInputSchema,
  ChecklistItemUncheckedUpdateWithoutChecklistInputSchema: () => ChecklistItemUncheckedUpdateWithoutChecklistInputSchema,
  ChecklistItemUncheckedUpdateWithoutCompletionsInputSchema: () => ChecklistItemUncheckedUpdateWithoutCompletionsInputSchema,
  ChecklistItemUpdateArgsSchema: () => ChecklistItemUpdateArgsSchema,
  ChecklistItemUpdateInputSchema: () => ChecklistItemUpdateInputSchema,
  ChecklistItemUpdateManyArgsSchema: () => ChecklistItemUpdateManyArgsSchema,
  ChecklistItemUpdateManyMutationInputSchema: () => ChecklistItemUpdateManyMutationInputSchema,
  ChecklistItemUpdateManyWithWhereWithoutChecklistInputSchema: () => ChecklistItemUpdateManyWithWhereWithoutChecklistInputSchema,
  ChecklistItemUpdateManyWithoutChecklistNestedInputSchema: () => ChecklistItemUpdateManyWithoutChecklistNestedInputSchema,
  ChecklistItemUpdateOneRequiredWithoutCompletionsNestedInputSchema: () => ChecklistItemUpdateOneRequiredWithoutCompletionsNestedInputSchema,
  ChecklistItemUpdateToOneWithWhereWithoutCompletionsInputSchema: () => ChecklistItemUpdateToOneWithWhereWithoutCompletionsInputSchema,
  ChecklistItemUpdateWithWhereUniqueWithoutChecklistInputSchema: () => ChecklistItemUpdateWithWhereUniqueWithoutChecklistInputSchema,
  ChecklistItemUpdateWithoutChecklistInputSchema: () => ChecklistItemUpdateWithoutChecklistInputSchema,
  ChecklistItemUpdateWithoutCompletionsInputSchema: () => ChecklistItemUpdateWithoutCompletionsInputSchema,
  ChecklistItemUpsertArgsSchema: () => ChecklistItemUpsertArgsSchema,
  ChecklistItemUpsertWithWhereUniqueWithoutChecklistInputSchema: () => ChecklistItemUpsertWithWhereUniqueWithoutChecklistInputSchema,
  ChecklistItemUpsertWithoutCompletionsInputSchema: () => ChecklistItemUpsertWithoutCompletionsInputSchema,
  ChecklistItemWhereInputSchema: () => ChecklistItemWhereInputSchema,
  ChecklistItemWhereUniqueInputSchema: () => ChecklistItemWhereUniqueInputSchema,
  ChecklistStatusSchema: () => ChecklistStatusSchema,
  ConstraintTypeSchema: () => ConstraintTypeSchema,
  CookBookAggregateArgsSchema: () => CookBookAggregateArgsSchema,
  CookBookArgsSchema: () => CookBookArgsSchema,
  CookBookAvgOrderByAggregateInputSchema: () => CookBookAvgOrderByAggregateInputSchema,
  CookBookCountOrderByAggregateInputSchema: () => CookBookCountOrderByAggregateInputSchema,
  CookBookCountOutputTypeArgsSchema: () => CookBookCountOutputTypeArgsSchema,
  CookBookCountOutputTypeSelectSchema: () => CookBookCountOutputTypeSelectSchema,
  CookBookCreateArgsSchema: () => CookBookCreateArgsSchema,
  CookBookCreateInputSchema: () => CookBookCreateInputSchema,
  CookBookCreateManyAndReturnArgsSchema: () => CookBookCreateManyAndReturnArgsSchema,
  CookBookCreateManyArgsSchema: () => CookBookCreateManyArgsSchema,
  CookBookCreateManyInputSchema: () => CookBookCreateManyInputSchema,
  CookBookCreateManyRestaurantInputEnvelopeSchema: () => CookBookCreateManyRestaurantInputEnvelopeSchema,
  CookBookCreateManyRestaurantInputSchema: () => CookBookCreateManyRestaurantInputSchema,
  CookBookCreateNestedManyWithoutRestaurantInputSchema: () => CookBookCreateNestedManyWithoutRestaurantInputSchema,
  CookBookCreateNestedOneWithoutRecipesInputSchema: () => CookBookCreateNestedOneWithoutRecipesInputSchema,
  CookBookCreateOrConnectWithoutRecipesInputSchema: () => CookBookCreateOrConnectWithoutRecipesInputSchema,
  CookBookCreateOrConnectWithoutRestaurantInputSchema: () => CookBookCreateOrConnectWithoutRestaurantInputSchema,
  CookBookCreateWithoutRecipesInputSchema: () => CookBookCreateWithoutRecipesInputSchema,
  CookBookCreateWithoutRestaurantInputSchema: () => CookBookCreateWithoutRestaurantInputSchema,
  CookBookDeleteArgsSchema: () => CookBookDeleteArgsSchema,
  CookBookDeleteManyArgsSchema: () => CookBookDeleteManyArgsSchema,
  CookBookFindFirstArgsSchema: () => CookBookFindFirstArgsSchema,
  CookBookFindFirstOrThrowArgsSchema: () => CookBookFindFirstOrThrowArgsSchema,
  CookBookFindManyArgsSchema: () => CookBookFindManyArgsSchema,
  CookBookFindUniqueArgsSchema: () => CookBookFindUniqueArgsSchema,
  CookBookFindUniqueOrThrowArgsSchema: () => CookBookFindUniqueOrThrowArgsSchema,
  CookBookGroupByArgsSchema: () => CookBookGroupByArgsSchema,
  CookBookIncludeSchema: () => CookBookIncludeSchema,
  CookBookListRelationFilterSchema: () => CookBookListRelationFilterSchema,
  CookBookMaxOrderByAggregateInputSchema: () => CookBookMaxOrderByAggregateInputSchema,
  CookBookMinOrderByAggregateInputSchema: () => CookBookMinOrderByAggregateInputSchema,
  CookBookOrderByRelationAggregateInputSchema: () => CookBookOrderByRelationAggregateInputSchema,
  CookBookOrderByWithAggregationInputSchema: () => CookBookOrderByWithAggregationInputSchema,
  CookBookOrderByWithRelationInputSchema: () => CookBookOrderByWithRelationInputSchema,
  CookBookRelationFilterSchema: () => CookBookRelationFilterSchema,
  CookBookScalarFieldEnumSchema: () => CookBookScalarFieldEnumSchema,
  CookBookScalarWhereInputSchema: () => CookBookScalarWhereInputSchema,
  CookBookScalarWhereWithAggregatesInputSchema: () => CookBookScalarWhereWithAggregatesInputSchema,
  CookBookSchema: () => CookBookSchema,
  CookBookSelectSchema: () => CookBookSelectSchema,
  CookBookSumOrderByAggregateInputSchema: () => CookBookSumOrderByAggregateInputSchema,
  CookBookUncheckedCreateInputSchema: () => CookBookUncheckedCreateInputSchema,
  CookBookUncheckedCreateNestedManyWithoutRestaurantInputSchema: () => CookBookUncheckedCreateNestedManyWithoutRestaurantInputSchema,
  CookBookUncheckedCreateWithoutRecipesInputSchema: () => CookBookUncheckedCreateWithoutRecipesInputSchema,
  CookBookUncheckedCreateWithoutRestaurantInputSchema: () => CookBookUncheckedCreateWithoutRestaurantInputSchema,
  CookBookUncheckedUpdateInputSchema: () => CookBookUncheckedUpdateInputSchema,
  CookBookUncheckedUpdateManyInputSchema: () => CookBookUncheckedUpdateManyInputSchema,
  CookBookUncheckedUpdateManyWithoutRestaurantInputSchema: () => CookBookUncheckedUpdateManyWithoutRestaurantInputSchema,
  CookBookUncheckedUpdateManyWithoutRestaurantNestedInputSchema: () => CookBookUncheckedUpdateManyWithoutRestaurantNestedInputSchema,
  CookBookUncheckedUpdateWithoutRecipesInputSchema: () => CookBookUncheckedUpdateWithoutRecipesInputSchema,
  CookBookUncheckedUpdateWithoutRestaurantInputSchema: () => CookBookUncheckedUpdateWithoutRestaurantInputSchema,
  CookBookUpdateArgsSchema: () => CookBookUpdateArgsSchema,
  CookBookUpdateInputSchema: () => CookBookUpdateInputSchema,
  CookBookUpdateManyArgsSchema: () => CookBookUpdateManyArgsSchema,
  CookBookUpdateManyMutationInputSchema: () => CookBookUpdateManyMutationInputSchema,
  CookBookUpdateManyWithWhereWithoutRestaurantInputSchema: () => CookBookUpdateManyWithWhereWithoutRestaurantInputSchema,
  CookBookUpdateManyWithoutRestaurantNestedInputSchema: () => CookBookUpdateManyWithoutRestaurantNestedInputSchema,
  CookBookUpdateOneRequiredWithoutRecipesNestedInputSchema: () => CookBookUpdateOneRequiredWithoutRecipesNestedInputSchema,
  CookBookUpdateToOneWithWhereWithoutRecipesInputSchema: () => CookBookUpdateToOneWithWhereWithoutRecipesInputSchema,
  CookBookUpdateWithWhereUniqueWithoutRestaurantInputSchema: () => CookBookUpdateWithWhereUniqueWithoutRestaurantInputSchema,
  CookBookUpdateWithoutRecipesInputSchema: () => CookBookUpdateWithoutRecipesInputSchema,
  CookBookUpdateWithoutRestaurantInputSchema: () => CookBookUpdateWithoutRestaurantInputSchema,
  CookBookUpsertArgsSchema: () => CookBookUpsertArgsSchema,
  CookBookUpsertWithWhereUniqueWithoutRestaurantInputSchema: () => CookBookUpsertWithWhereUniqueWithoutRestaurantInputSchema,
  CookBookUpsertWithoutRecipesInputSchema: () => CookBookUpsertWithoutRecipesInputSchema,
  CookBookWhereInputSchema: () => CookBookWhereInputSchema,
  CookBookWhereUniqueInputSchema: () => CookBookWhereUniqueInputSchema,
  CustomerFeedbackAggregateArgsSchema: () => CustomerFeedbackAggregateArgsSchema,
  CustomerFeedbackArgsSchema: () => CustomerFeedbackArgsSchema,
  CustomerFeedbackAvgOrderByAggregateInputSchema: () => CustomerFeedbackAvgOrderByAggregateInputSchema,
  CustomerFeedbackCountOrderByAggregateInputSchema: () => CustomerFeedbackCountOrderByAggregateInputSchema,
  CustomerFeedbackCreateArgsSchema: () => CustomerFeedbackCreateArgsSchema,
  CustomerFeedbackCreateInputSchema: () => CustomerFeedbackCreateInputSchema,
  CustomerFeedbackCreateManyAndReturnArgsSchema: () => CustomerFeedbackCreateManyAndReturnArgsSchema,
  CustomerFeedbackCreateManyArgsSchema: () => CustomerFeedbackCreateManyArgsSchema,
  CustomerFeedbackCreateManyInputSchema: () => CustomerFeedbackCreateManyInputSchema,
  CustomerFeedbackCreateManyMenuItemInputEnvelopeSchema: () => CustomerFeedbackCreateManyMenuItemInputEnvelopeSchema,
  CustomerFeedbackCreateManyMenuItemInputSchema: () => CustomerFeedbackCreateManyMenuItemInputSchema,
  CustomerFeedbackCreateManyRespondedByInputEnvelopeSchema: () => CustomerFeedbackCreateManyRespondedByInputEnvelopeSchema,
  CustomerFeedbackCreateManyRespondedByInputSchema: () => CustomerFeedbackCreateManyRespondedByInputSchema,
  CustomerFeedbackCreateManyRestaurantInputEnvelopeSchema: () => CustomerFeedbackCreateManyRestaurantInputEnvelopeSchema,
  CustomerFeedbackCreateManyRestaurantInputSchema: () => CustomerFeedbackCreateManyRestaurantInputSchema,
  CustomerFeedbackCreateNestedManyWithoutMenuItemInputSchema: () => CustomerFeedbackCreateNestedManyWithoutMenuItemInputSchema,
  CustomerFeedbackCreateNestedManyWithoutRespondedByInputSchema: () => CustomerFeedbackCreateNestedManyWithoutRespondedByInputSchema,
  CustomerFeedbackCreateNestedManyWithoutRestaurantInputSchema: () => CustomerFeedbackCreateNestedManyWithoutRestaurantInputSchema,
  CustomerFeedbackCreateOrConnectWithoutMenuItemInputSchema: () => CustomerFeedbackCreateOrConnectWithoutMenuItemInputSchema,
  CustomerFeedbackCreateOrConnectWithoutRespondedByInputSchema: () => CustomerFeedbackCreateOrConnectWithoutRespondedByInputSchema,
  CustomerFeedbackCreateOrConnectWithoutRestaurantInputSchema: () => CustomerFeedbackCreateOrConnectWithoutRestaurantInputSchema,
  CustomerFeedbackCreateWithoutMenuItemInputSchema: () => CustomerFeedbackCreateWithoutMenuItemInputSchema,
  CustomerFeedbackCreateWithoutRespondedByInputSchema: () => CustomerFeedbackCreateWithoutRespondedByInputSchema,
  CustomerFeedbackCreateWithoutRestaurantInputSchema: () => CustomerFeedbackCreateWithoutRestaurantInputSchema,
  CustomerFeedbackCreatetagsInputSchema: () => CustomerFeedbackCreatetagsInputSchema,
  CustomerFeedbackDeleteArgsSchema: () => CustomerFeedbackDeleteArgsSchema,
  CustomerFeedbackDeleteManyArgsSchema: () => CustomerFeedbackDeleteManyArgsSchema,
  CustomerFeedbackFindFirstArgsSchema: () => CustomerFeedbackFindFirstArgsSchema,
  CustomerFeedbackFindFirstOrThrowArgsSchema: () => CustomerFeedbackFindFirstOrThrowArgsSchema,
  CustomerFeedbackFindManyArgsSchema: () => CustomerFeedbackFindManyArgsSchema,
  CustomerFeedbackFindUniqueArgsSchema: () => CustomerFeedbackFindUniqueArgsSchema,
  CustomerFeedbackFindUniqueOrThrowArgsSchema: () => CustomerFeedbackFindUniqueOrThrowArgsSchema,
  CustomerFeedbackGroupByArgsSchema: () => CustomerFeedbackGroupByArgsSchema,
  CustomerFeedbackIncludeSchema: () => CustomerFeedbackIncludeSchema,
  CustomerFeedbackListRelationFilterSchema: () => CustomerFeedbackListRelationFilterSchema,
  CustomerFeedbackMaxOrderByAggregateInputSchema: () => CustomerFeedbackMaxOrderByAggregateInputSchema,
  CustomerFeedbackMinOrderByAggregateInputSchema: () => CustomerFeedbackMinOrderByAggregateInputSchema,
  CustomerFeedbackOrderByRelationAggregateInputSchema: () => CustomerFeedbackOrderByRelationAggregateInputSchema,
  CustomerFeedbackOrderByWithAggregationInputSchema: () => CustomerFeedbackOrderByWithAggregationInputSchema,
  CustomerFeedbackOrderByWithRelationInputSchema: () => CustomerFeedbackOrderByWithRelationInputSchema,
  CustomerFeedbackScalarFieldEnumSchema: () => CustomerFeedbackScalarFieldEnumSchema,
  CustomerFeedbackScalarWhereInputSchema: () => CustomerFeedbackScalarWhereInputSchema,
  CustomerFeedbackScalarWhereWithAggregatesInputSchema: () => CustomerFeedbackScalarWhereWithAggregatesInputSchema,
  CustomerFeedbackSchema: () => CustomerFeedbackSchema,
  CustomerFeedbackSelectSchema: () => CustomerFeedbackSelectSchema,
  CustomerFeedbackSumOrderByAggregateInputSchema: () => CustomerFeedbackSumOrderByAggregateInputSchema,
  CustomerFeedbackUncheckedCreateInputSchema: () => CustomerFeedbackUncheckedCreateInputSchema,
  CustomerFeedbackUncheckedCreateNestedManyWithoutMenuItemInputSchema: () => CustomerFeedbackUncheckedCreateNestedManyWithoutMenuItemInputSchema,
  CustomerFeedbackUncheckedCreateNestedManyWithoutRespondedByInputSchema: () => CustomerFeedbackUncheckedCreateNestedManyWithoutRespondedByInputSchema,
  CustomerFeedbackUncheckedCreateNestedManyWithoutRestaurantInputSchema: () => CustomerFeedbackUncheckedCreateNestedManyWithoutRestaurantInputSchema,
  CustomerFeedbackUncheckedCreateWithoutMenuItemInputSchema: () => CustomerFeedbackUncheckedCreateWithoutMenuItemInputSchema,
  CustomerFeedbackUncheckedCreateWithoutRespondedByInputSchema: () => CustomerFeedbackUncheckedCreateWithoutRespondedByInputSchema,
  CustomerFeedbackUncheckedCreateWithoutRestaurantInputSchema: () => CustomerFeedbackUncheckedCreateWithoutRestaurantInputSchema,
  CustomerFeedbackUncheckedUpdateInputSchema: () => CustomerFeedbackUncheckedUpdateInputSchema,
  CustomerFeedbackUncheckedUpdateManyInputSchema: () => CustomerFeedbackUncheckedUpdateManyInputSchema,
  CustomerFeedbackUncheckedUpdateManyWithoutMenuItemInputSchema: () => CustomerFeedbackUncheckedUpdateManyWithoutMenuItemInputSchema,
  CustomerFeedbackUncheckedUpdateManyWithoutMenuItemNestedInputSchema: () => CustomerFeedbackUncheckedUpdateManyWithoutMenuItemNestedInputSchema,
  CustomerFeedbackUncheckedUpdateManyWithoutRespondedByInputSchema: () => CustomerFeedbackUncheckedUpdateManyWithoutRespondedByInputSchema,
  CustomerFeedbackUncheckedUpdateManyWithoutRespondedByNestedInputSchema: () => CustomerFeedbackUncheckedUpdateManyWithoutRespondedByNestedInputSchema,
  CustomerFeedbackUncheckedUpdateManyWithoutRestaurantInputSchema: () => CustomerFeedbackUncheckedUpdateManyWithoutRestaurantInputSchema,
  CustomerFeedbackUncheckedUpdateManyWithoutRestaurantNestedInputSchema: () => CustomerFeedbackUncheckedUpdateManyWithoutRestaurantNestedInputSchema,
  CustomerFeedbackUncheckedUpdateWithoutMenuItemInputSchema: () => CustomerFeedbackUncheckedUpdateWithoutMenuItemInputSchema,
  CustomerFeedbackUncheckedUpdateWithoutRespondedByInputSchema: () => CustomerFeedbackUncheckedUpdateWithoutRespondedByInputSchema,
  CustomerFeedbackUncheckedUpdateWithoutRestaurantInputSchema: () => CustomerFeedbackUncheckedUpdateWithoutRestaurantInputSchema,
  CustomerFeedbackUpdateArgsSchema: () => CustomerFeedbackUpdateArgsSchema,
  CustomerFeedbackUpdateInputSchema: () => CustomerFeedbackUpdateInputSchema,
  CustomerFeedbackUpdateManyArgsSchema: () => CustomerFeedbackUpdateManyArgsSchema,
  CustomerFeedbackUpdateManyMutationInputSchema: () => CustomerFeedbackUpdateManyMutationInputSchema,
  CustomerFeedbackUpdateManyWithWhereWithoutMenuItemInputSchema: () => CustomerFeedbackUpdateManyWithWhereWithoutMenuItemInputSchema,
  CustomerFeedbackUpdateManyWithWhereWithoutRespondedByInputSchema: () => CustomerFeedbackUpdateManyWithWhereWithoutRespondedByInputSchema,
  CustomerFeedbackUpdateManyWithWhereWithoutRestaurantInputSchema: () => CustomerFeedbackUpdateManyWithWhereWithoutRestaurantInputSchema,
  CustomerFeedbackUpdateManyWithoutMenuItemNestedInputSchema: () => CustomerFeedbackUpdateManyWithoutMenuItemNestedInputSchema,
  CustomerFeedbackUpdateManyWithoutRespondedByNestedInputSchema: () => CustomerFeedbackUpdateManyWithoutRespondedByNestedInputSchema,
  CustomerFeedbackUpdateManyWithoutRestaurantNestedInputSchema: () => CustomerFeedbackUpdateManyWithoutRestaurantNestedInputSchema,
  CustomerFeedbackUpdateWithWhereUniqueWithoutMenuItemInputSchema: () => CustomerFeedbackUpdateWithWhereUniqueWithoutMenuItemInputSchema,
  CustomerFeedbackUpdateWithWhereUniqueWithoutRespondedByInputSchema: () => CustomerFeedbackUpdateWithWhereUniqueWithoutRespondedByInputSchema,
  CustomerFeedbackUpdateWithWhereUniqueWithoutRestaurantInputSchema: () => CustomerFeedbackUpdateWithWhereUniqueWithoutRestaurantInputSchema,
  CustomerFeedbackUpdateWithoutMenuItemInputSchema: () => CustomerFeedbackUpdateWithoutMenuItemInputSchema,
  CustomerFeedbackUpdateWithoutRespondedByInputSchema: () => CustomerFeedbackUpdateWithoutRespondedByInputSchema,
  CustomerFeedbackUpdateWithoutRestaurantInputSchema: () => CustomerFeedbackUpdateWithoutRestaurantInputSchema,
  CustomerFeedbackUpdatetagsInputSchema: () => CustomerFeedbackUpdatetagsInputSchema,
  CustomerFeedbackUpsertArgsSchema: () => CustomerFeedbackUpsertArgsSchema,
  CustomerFeedbackUpsertWithWhereUniqueWithoutMenuItemInputSchema: () => CustomerFeedbackUpsertWithWhereUniqueWithoutMenuItemInputSchema,
  CustomerFeedbackUpsertWithWhereUniqueWithoutRespondedByInputSchema: () => CustomerFeedbackUpsertWithWhereUniqueWithoutRespondedByInputSchema,
  CustomerFeedbackUpsertWithWhereUniqueWithoutRestaurantInputSchema: () => CustomerFeedbackUpsertWithWhereUniqueWithoutRestaurantInputSchema,
  CustomerFeedbackWhereInputSchema: () => CustomerFeedbackWhereInputSchema,
  CustomerFeedbackWhereUniqueInputSchema: () => CustomerFeedbackWhereUniqueInputSchema,
  DateTimeFieldUpdateOperationsInputSchema: () => DateTimeFieldUpdateOperationsInputSchema,
  DateTimeFilterSchema: () => DateTimeFilterSchema,
  DateTimeNullableFilterSchema: () => DateTimeNullableFilterSchema,
  DateTimeNullableWithAggregatesFilterSchema: () => DateTimeNullableWithAggregatesFilterSchema,
  DateTimeWithAggregatesFilterSchema: () => DateTimeWithAggregatesFilterSchema,
  DayOfWeekSchema: () => DayOfWeekSchema,
  DietaryRestrictionAggregateArgsSchema: () => DietaryRestrictionAggregateArgsSchema,
  DietaryRestrictionArgsSchema: () => DietaryRestrictionArgsSchema,
  DietaryRestrictionAvgOrderByAggregateInputSchema: () => DietaryRestrictionAvgOrderByAggregateInputSchema,
  DietaryRestrictionCountOrderByAggregateInputSchema: () => DietaryRestrictionCountOrderByAggregateInputSchema,
  DietaryRestrictionCountOutputTypeArgsSchema: () => DietaryRestrictionCountOutputTypeArgsSchema,
  DietaryRestrictionCountOutputTypeSelectSchema: () => DietaryRestrictionCountOutputTypeSelectSchema,
  DietaryRestrictionCreateArgsSchema: () => DietaryRestrictionCreateArgsSchema,
  DietaryRestrictionCreateInputSchema: () => DietaryRestrictionCreateInputSchema,
  DietaryRestrictionCreateManyAndReturnArgsSchema: () => DietaryRestrictionCreateManyAndReturnArgsSchema,
  DietaryRestrictionCreateManyArgsSchema: () => DietaryRestrictionCreateManyArgsSchema,
  DietaryRestrictionCreateManyInputSchema: () => DietaryRestrictionCreateManyInputSchema,
  DietaryRestrictionCreateNestedManyWithoutMenuItemsInputSchema: () => DietaryRestrictionCreateNestedManyWithoutMenuItemsInputSchema,
  DietaryRestrictionCreateNestedManyWithoutRecipesInputSchema: () => DietaryRestrictionCreateNestedManyWithoutRecipesInputSchema,
  DietaryRestrictionCreateNestedOneWithoutIngredientsInputSchema: () => DietaryRestrictionCreateNestedOneWithoutIngredientsInputSchema,
  DietaryRestrictionCreateOrConnectWithoutIngredientsInputSchema: () => DietaryRestrictionCreateOrConnectWithoutIngredientsInputSchema,
  DietaryRestrictionCreateOrConnectWithoutMenuItemsInputSchema: () => DietaryRestrictionCreateOrConnectWithoutMenuItemsInputSchema,
  DietaryRestrictionCreateOrConnectWithoutRecipesInputSchema: () => DietaryRestrictionCreateOrConnectWithoutRecipesInputSchema,
  DietaryRestrictionCreateWithoutIngredientsInputSchema: () => DietaryRestrictionCreateWithoutIngredientsInputSchema,
  DietaryRestrictionCreateWithoutMenuItemsInputSchema: () => DietaryRestrictionCreateWithoutMenuItemsInputSchema,
  DietaryRestrictionCreateWithoutRecipesInputSchema: () => DietaryRestrictionCreateWithoutRecipesInputSchema,
  DietaryRestrictionDeleteArgsSchema: () => DietaryRestrictionDeleteArgsSchema,
  DietaryRestrictionDeleteManyArgsSchema: () => DietaryRestrictionDeleteManyArgsSchema,
  DietaryRestrictionFindFirstArgsSchema: () => DietaryRestrictionFindFirstArgsSchema,
  DietaryRestrictionFindFirstOrThrowArgsSchema: () => DietaryRestrictionFindFirstOrThrowArgsSchema,
  DietaryRestrictionFindManyArgsSchema: () => DietaryRestrictionFindManyArgsSchema,
  DietaryRestrictionFindUniqueArgsSchema: () => DietaryRestrictionFindUniqueArgsSchema,
  DietaryRestrictionFindUniqueOrThrowArgsSchema: () => DietaryRestrictionFindUniqueOrThrowArgsSchema,
  DietaryRestrictionGroupByArgsSchema: () => DietaryRestrictionGroupByArgsSchema,
  DietaryRestrictionIncludeSchema: () => DietaryRestrictionIncludeSchema,
  DietaryRestrictionListRelationFilterSchema: () => DietaryRestrictionListRelationFilterSchema,
  DietaryRestrictionMaxOrderByAggregateInputSchema: () => DietaryRestrictionMaxOrderByAggregateInputSchema,
  DietaryRestrictionMinOrderByAggregateInputSchema: () => DietaryRestrictionMinOrderByAggregateInputSchema,
  DietaryRestrictionNullableRelationFilterSchema: () => DietaryRestrictionNullableRelationFilterSchema,
  DietaryRestrictionOrderByRelationAggregateInputSchema: () => DietaryRestrictionOrderByRelationAggregateInputSchema,
  DietaryRestrictionOrderByWithAggregationInputSchema: () => DietaryRestrictionOrderByWithAggregationInputSchema,
  DietaryRestrictionOrderByWithRelationInputSchema: () => DietaryRestrictionOrderByWithRelationInputSchema,
  DietaryRestrictionScalarFieldEnumSchema: () => DietaryRestrictionScalarFieldEnumSchema,
  DietaryRestrictionScalarWhereInputSchema: () => DietaryRestrictionScalarWhereInputSchema,
  DietaryRestrictionScalarWhereWithAggregatesInputSchema: () => DietaryRestrictionScalarWhereWithAggregatesInputSchema,
  DietaryRestrictionSchema: () => DietaryRestrictionSchema,
  DietaryRestrictionSelectSchema: () => DietaryRestrictionSelectSchema,
  DietaryRestrictionSumOrderByAggregateInputSchema: () => DietaryRestrictionSumOrderByAggregateInputSchema,
  DietaryRestrictionUncheckedCreateInputSchema: () => DietaryRestrictionUncheckedCreateInputSchema,
  DietaryRestrictionUncheckedCreateNestedManyWithoutMenuItemsInputSchema: () => DietaryRestrictionUncheckedCreateNestedManyWithoutMenuItemsInputSchema,
  DietaryRestrictionUncheckedCreateNestedManyWithoutRecipesInputSchema: () => DietaryRestrictionUncheckedCreateNestedManyWithoutRecipesInputSchema,
  DietaryRestrictionUncheckedCreateWithoutIngredientsInputSchema: () => DietaryRestrictionUncheckedCreateWithoutIngredientsInputSchema,
  DietaryRestrictionUncheckedCreateWithoutMenuItemsInputSchema: () => DietaryRestrictionUncheckedCreateWithoutMenuItemsInputSchema,
  DietaryRestrictionUncheckedCreateWithoutRecipesInputSchema: () => DietaryRestrictionUncheckedCreateWithoutRecipesInputSchema,
  DietaryRestrictionUncheckedUpdateInputSchema: () => DietaryRestrictionUncheckedUpdateInputSchema,
  DietaryRestrictionUncheckedUpdateManyInputSchema: () => DietaryRestrictionUncheckedUpdateManyInputSchema,
  DietaryRestrictionUncheckedUpdateManyWithoutMenuItemsInputSchema: () => DietaryRestrictionUncheckedUpdateManyWithoutMenuItemsInputSchema,
  DietaryRestrictionUncheckedUpdateManyWithoutMenuItemsNestedInputSchema: () => DietaryRestrictionUncheckedUpdateManyWithoutMenuItemsNestedInputSchema,
  DietaryRestrictionUncheckedUpdateManyWithoutRecipesInputSchema: () => DietaryRestrictionUncheckedUpdateManyWithoutRecipesInputSchema,
  DietaryRestrictionUncheckedUpdateManyWithoutRecipesNestedInputSchema: () => DietaryRestrictionUncheckedUpdateManyWithoutRecipesNestedInputSchema,
  DietaryRestrictionUncheckedUpdateWithoutIngredientsInputSchema: () => DietaryRestrictionUncheckedUpdateWithoutIngredientsInputSchema,
  DietaryRestrictionUncheckedUpdateWithoutMenuItemsInputSchema: () => DietaryRestrictionUncheckedUpdateWithoutMenuItemsInputSchema,
  DietaryRestrictionUncheckedUpdateWithoutRecipesInputSchema: () => DietaryRestrictionUncheckedUpdateWithoutRecipesInputSchema,
  DietaryRestrictionUpdateArgsSchema: () => DietaryRestrictionUpdateArgsSchema,
  DietaryRestrictionUpdateInputSchema: () => DietaryRestrictionUpdateInputSchema,
  DietaryRestrictionUpdateManyArgsSchema: () => DietaryRestrictionUpdateManyArgsSchema,
  DietaryRestrictionUpdateManyMutationInputSchema: () => DietaryRestrictionUpdateManyMutationInputSchema,
  DietaryRestrictionUpdateManyWithWhereWithoutMenuItemsInputSchema: () => DietaryRestrictionUpdateManyWithWhereWithoutMenuItemsInputSchema,
  DietaryRestrictionUpdateManyWithWhereWithoutRecipesInputSchema: () => DietaryRestrictionUpdateManyWithWhereWithoutRecipesInputSchema,
  DietaryRestrictionUpdateManyWithoutMenuItemsNestedInputSchema: () => DietaryRestrictionUpdateManyWithoutMenuItemsNestedInputSchema,
  DietaryRestrictionUpdateManyWithoutRecipesNestedInputSchema: () => DietaryRestrictionUpdateManyWithoutRecipesNestedInputSchema,
  DietaryRestrictionUpdateOneWithoutIngredientsNestedInputSchema: () => DietaryRestrictionUpdateOneWithoutIngredientsNestedInputSchema,
  DietaryRestrictionUpdateToOneWithWhereWithoutIngredientsInputSchema: () => DietaryRestrictionUpdateToOneWithWhereWithoutIngredientsInputSchema,
  DietaryRestrictionUpdateWithWhereUniqueWithoutMenuItemsInputSchema: () => DietaryRestrictionUpdateWithWhereUniqueWithoutMenuItemsInputSchema,
  DietaryRestrictionUpdateWithWhereUniqueWithoutRecipesInputSchema: () => DietaryRestrictionUpdateWithWhereUniqueWithoutRecipesInputSchema,
  DietaryRestrictionUpdateWithoutIngredientsInputSchema: () => DietaryRestrictionUpdateWithoutIngredientsInputSchema,
  DietaryRestrictionUpdateWithoutMenuItemsInputSchema: () => DietaryRestrictionUpdateWithoutMenuItemsInputSchema,
  DietaryRestrictionUpdateWithoutRecipesInputSchema: () => DietaryRestrictionUpdateWithoutRecipesInputSchema,
  DietaryRestrictionUpsertArgsSchema: () => DietaryRestrictionUpsertArgsSchema,
  DietaryRestrictionUpsertWithWhereUniqueWithoutMenuItemsInputSchema: () => DietaryRestrictionUpsertWithWhereUniqueWithoutMenuItemsInputSchema,
  DietaryRestrictionUpsertWithWhereUniqueWithoutRecipesInputSchema: () => DietaryRestrictionUpsertWithWhereUniqueWithoutRecipesInputSchema,
  DietaryRestrictionUpsertWithoutIngredientsInputSchema: () => DietaryRestrictionUpsertWithoutIngredientsInputSchema,
  DietaryRestrictionWhereInputSchema: () => DietaryRestrictionWhereInputSchema,
  DietaryRestrictionWhereUniqueInputSchema: () => DietaryRestrictionWhereUniqueInputSchema,
  EarlyAccessAggregateArgsSchema: () => EarlyAccessAggregateArgsSchema,
  EarlyAccessAvgOrderByAggregateInputSchema: () => EarlyAccessAvgOrderByAggregateInputSchema,
  EarlyAccessCountOrderByAggregateInputSchema: () => EarlyAccessCountOrderByAggregateInputSchema,
  EarlyAccessCreateArgsSchema: () => EarlyAccessCreateArgsSchema,
  EarlyAccessCreateInputSchema: () => EarlyAccessCreateInputSchema,
  EarlyAccessCreateManyAndReturnArgsSchema: () => EarlyAccessCreateManyAndReturnArgsSchema,
  EarlyAccessCreateManyArgsSchema: () => EarlyAccessCreateManyArgsSchema,
  EarlyAccessCreateManyInputSchema: () => EarlyAccessCreateManyInputSchema,
  EarlyAccessDeleteArgsSchema: () => EarlyAccessDeleteArgsSchema,
  EarlyAccessDeleteManyArgsSchema: () => EarlyAccessDeleteManyArgsSchema,
  EarlyAccessFindFirstArgsSchema: () => EarlyAccessFindFirstArgsSchema,
  EarlyAccessFindFirstOrThrowArgsSchema: () => EarlyAccessFindFirstOrThrowArgsSchema,
  EarlyAccessFindManyArgsSchema: () => EarlyAccessFindManyArgsSchema,
  EarlyAccessFindUniqueArgsSchema: () => EarlyAccessFindUniqueArgsSchema,
  EarlyAccessFindUniqueOrThrowArgsSchema: () => EarlyAccessFindUniqueOrThrowArgsSchema,
  EarlyAccessGroupByArgsSchema: () => EarlyAccessGroupByArgsSchema,
  EarlyAccessMaxOrderByAggregateInputSchema: () => EarlyAccessMaxOrderByAggregateInputSchema,
  EarlyAccessMinOrderByAggregateInputSchema: () => EarlyAccessMinOrderByAggregateInputSchema,
  EarlyAccessOrderByWithAggregationInputSchema: () => EarlyAccessOrderByWithAggregationInputSchema,
  EarlyAccessOrderByWithRelationInputSchema: () => EarlyAccessOrderByWithRelationInputSchema,
  EarlyAccessScalarFieldEnumSchema: () => EarlyAccessScalarFieldEnumSchema,
  EarlyAccessScalarWhereWithAggregatesInputSchema: () => EarlyAccessScalarWhereWithAggregatesInputSchema,
  EarlyAccessSchema: () => EarlyAccessSchema,
  EarlyAccessSelectSchema: () => EarlyAccessSelectSchema,
  EarlyAccessSumOrderByAggregateInputSchema: () => EarlyAccessSumOrderByAggregateInputSchema,
  EarlyAccessUncheckedCreateInputSchema: () => EarlyAccessUncheckedCreateInputSchema,
  EarlyAccessUncheckedUpdateInputSchema: () => EarlyAccessUncheckedUpdateInputSchema,
  EarlyAccessUncheckedUpdateManyInputSchema: () => EarlyAccessUncheckedUpdateManyInputSchema,
  EarlyAccessUpdateArgsSchema: () => EarlyAccessUpdateArgsSchema,
  EarlyAccessUpdateInputSchema: () => EarlyAccessUpdateInputSchema,
  EarlyAccessUpdateManyArgsSchema: () => EarlyAccessUpdateManyArgsSchema,
  EarlyAccessUpdateManyMutationInputSchema: () => EarlyAccessUpdateManyMutationInputSchema,
  EarlyAccessUpsertArgsSchema: () => EarlyAccessUpsertArgsSchema,
  EarlyAccessWhereInputSchema: () => EarlyAccessWhereInputSchema,
  EarlyAccessWhereUniqueInputSchema: () => EarlyAccessWhereUniqueInputSchema,
  EnumChecklistFrequencyFieldUpdateOperationsInputSchema: () => EnumChecklistFrequencyFieldUpdateOperationsInputSchema,
  EnumChecklistFrequencyFilterSchema: () => EnumChecklistFrequencyFilterSchema,
  EnumChecklistFrequencyWithAggregatesFilterSchema: () => EnumChecklistFrequencyWithAggregatesFilterSchema,
  EnumChecklistItemTypeFieldUpdateOperationsInputSchema: () => EnumChecklistItemTypeFieldUpdateOperationsInputSchema,
  EnumChecklistItemTypeFilterSchema: () => EnumChecklistItemTypeFilterSchema,
  EnumChecklistItemTypeWithAggregatesFilterSchema: () => EnumChecklistItemTypeWithAggregatesFilterSchema,
  EnumChecklistStatusFieldUpdateOperationsInputSchema: () => EnumChecklistStatusFieldUpdateOperationsInputSchema,
  EnumChecklistStatusFilterSchema: () => EnumChecklistStatusFilterSchema,
  EnumChecklistStatusWithAggregatesFilterSchema: () => EnumChecklistStatusWithAggregatesFilterSchema,
  EnumConstraintTypeFieldUpdateOperationsInputSchema: () => EnumConstraintTypeFieldUpdateOperationsInputSchema,
  EnumConstraintTypeFilterSchema: () => EnumConstraintTypeFilterSchema,
  EnumConstraintTypeWithAggregatesFilterSchema: () => EnumConstraintTypeWithAggregatesFilterSchema,
  EnumDayOfWeekFieldUpdateOperationsInputSchema: () => EnumDayOfWeekFieldUpdateOperationsInputSchema,
  EnumDayOfWeekFilterSchema: () => EnumDayOfWeekFilterSchema,
  EnumDayOfWeekWithAggregatesFilterSchema: () => EnumDayOfWeekWithAggregatesFilterSchema,
  EnumEquipmentStatusFieldUpdateOperationsInputSchema: () => EnumEquipmentStatusFieldUpdateOperationsInputSchema,
  EnumEquipmentStatusFilterSchema: () => EnumEquipmentStatusFilterSchema,
  EnumEquipmentStatusWithAggregatesFilterSchema: () => EnumEquipmentStatusWithAggregatesFilterSchema,
  EnumFeedbackSourceFieldUpdateOperationsInputSchema: () => EnumFeedbackSourceFieldUpdateOperationsInputSchema,
  EnumFeedbackSourceFilterSchema: () => EnumFeedbackSourceFilterSchema,
  EnumFeedbackSourceWithAggregatesFilterSchema: () => EnumFeedbackSourceWithAggregatesFilterSchema,
  EnumFeedbackStatusFieldUpdateOperationsInputSchema: () => EnumFeedbackStatusFieldUpdateOperationsInputSchema,
  EnumFeedbackStatusFilterSchema: () => EnumFeedbackStatusFilterSchema,
  EnumFeedbackStatusWithAggregatesFilterSchema: () => EnumFeedbackStatusWithAggregatesFilterSchema,
  EnumMaintenanceTypeFieldUpdateOperationsInputSchema: () => EnumMaintenanceTypeFieldUpdateOperationsInputSchema,
  EnumMaintenanceTypeFilterSchema: () => EnumMaintenanceTypeFilterSchema,
  EnumMaintenanceTypeWithAggregatesFilterSchema: () => EnumMaintenanceTypeWithAggregatesFilterSchema,
  EnumOrderStatusFieldUpdateOperationsInputSchema: () => EnumOrderStatusFieldUpdateOperationsInputSchema,
  EnumOrderStatusFilterSchema: () => EnumOrderStatusFilterSchema,
  EnumOrderStatusWithAggregatesFilterSchema: () => EnumOrderStatusWithAggregatesFilterSchema,
  EnumPrepStatusFieldUpdateOperationsInputSchema: () => EnumPrepStatusFieldUpdateOperationsInputSchema,
  EnumPrepStatusFilterSchema: () => EnumPrepStatusFilterSchema,
  EnumPrepStatusWithAggregatesFilterSchema: () => EnumPrepStatusWithAggregatesFilterSchema,
  EnumShiftStatusFieldUpdateOperationsInputSchema: () => EnumShiftStatusFieldUpdateOperationsInputSchema,
  EnumShiftStatusFilterSchema: () => EnumShiftStatusFilterSchema,
  EnumShiftStatusWithAggregatesFilterSchema: () => EnumShiftStatusWithAggregatesFilterSchema,
  EnumTaskTypeFieldUpdateOperationsInputSchema: () => EnumTaskTypeFieldUpdateOperationsInputSchema,
  EnumTaskTypeFilterSchema: () => EnumTaskTypeFilterSchema,
  EnumTaskTypeWithAggregatesFilterSchema: () => EnumTaskTypeWithAggregatesFilterSchema,
  EnumUserRoleFieldUpdateOperationsInputSchema: () => EnumUserRoleFieldUpdateOperationsInputSchema,
  EnumUserRoleFilterSchema: () => EnumUserRoleFilterSchema,
  EnumUserRoleWithAggregatesFilterSchema: () => EnumUserRoleWithAggregatesFilterSchema,
  EquipmentAggregateArgsSchema: () => EquipmentAggregateArgsSchema,
  EquipmentArgsSchema: () => EquipmentArgsSchema,
  EquipmentAvgOrderByAggregateInputSchema: () => EquipmentAvgOrderByAggregateInputSchema,
  EquipmentCountOrderByAggregateInputSchema: () => EquipmentCountOrderByAggregateInputSchema,
  EquipmentCountOutputTypeArgsSchema: () => EquipmentCountOutputTypeArgsSchema,
  EquipmentCountOutputTypeSelectSchema: () => EquipmentCountOutputTypeSelectSchema,
  EquipmentCreateArgsSchema: () => EquipmentCreateArgsSchema,
  EquipmentCreateInputSchema: () => EquipmentCreateInputSchema,
  EquipmentCreateManyAndReturnArgsSchema: () => EquipmentCreateManyAndReturnArgsSchema,
  EquipmentCreateManyArgsSchema: () => EquipmentCreateManyArgsSchema,
  EquipmentCreateManyInputSchema: () => EquipmentCreateManyInputSchema,
  EquipmentCreateManyRestaurantInputEnvelopeSchema: () => EquipmentCreateManyRestaurantInputEnvelopeSchema,
  EquipmentCreateManyRestaurantInputSchema: () => EquipmentCreateManyRestaurantInputSchema,
  EquipmentCreateNestedManyWithoutRestaurantInputSchema: () => EquipmentCreateNestedManyWithoutRestaurantInputSchema,
  EquipmentCreateNestedOneWithoutMaintenanceLogsInputSchema: () => EquipmentCreateNestedOneWithoutMaintenanceLogsInputSchema,
  EquipmentCreateNestedOneWithoutRecipesInputSchema: () => EquipmentCreateNestedOneWithoutRecipesInputSchema,
  EquipmentCreateOrConnectWithoutMaintenanceLogsInputSchema: () => EquipmentCreateOrConnectWithoutMaintenanceLogsInputSchema,
  EquipmentCreateOrConnectWithoutRecipesInputSchema: () => EquipmentCreateOrConnectWithoutRecipesInputSchema,
  EquipmentCreateOrConnectWithoutRestaurantInputSchema: () => EquipmentCreateOrConnectWithoutRestaurantInputSchema,
  EquipmentCreateWithoutMaintenanceLogsInputSchema: () => EquipmentCreateWithoutMaintenanceLogsInputSchema,
  EquipmentCreateWithoutRecipesInputSchema: () => EquipmentCreateWithoutRecipesInputSchema,
  EquipmentCreateWithoutRestaurantInputSchema: () => EquipmentCreateWithoutRestaurantInputSchema,
  EquipmentDeleteArgsSchema: () => EquipmentDeleteArgsSchema,
  EquipmentDeleteManyArgsSchema: () => EquipmentDeleteManyArgsSchema,
  EquipmentFindFirstArgsSchema: () => EquipmentFindFirstArgsSchema,
  EquipmentFindFirstOrThrowArgsSchema: () => EquipmentFindFirstOrThrowArgsSchema,
  EquipmentFindManyArgsSchema: () => EquipmentFindManyArgsSchema,
  EquipmentFindUniqueArgsSchema: () => EquipmentFindUniqueArgsSchema,
  EquipmentFindUniqueOrThrowArgsSchema: () => EquipmentFindUniqueOrThrowArgsSchema,
  EquipmentGroupByArgsSchema: () => EquipmentGroupByArgsSchema,
  EquipmentIncludeSchema: () => EquipmentIncludeSchema,
  EquipmentListRelationFilterSchema: () => EquipmentListRelationFilterSchema,
  EquipmentMaxOrderByAggregateInputSchema: () => EquipmentMaxOrderByAggregateInputSchema,
  EquipmentMinOrderByAggregateInputSchema: () => EquipmentMinOrderByAggregateInputSchema,
  EquipmentOrderByRelationAggregateInputSchema: () => EquipmentOrderByRelationAggregateInputSchema,
  EquipmentOrderByWithAggregationInputSchema: () => EquipmentOrderByWithAggregationInputSchema,
  EquipmentOrderByWithRelationInputSchema: () => EquipmentOrderByWithRelationInputSchema,
  EquipmentRelationFilterSchema: () => EquipmentRelationFilterSchema,
  EquipmentScalarFieldEnumSchema: () => EquipmentScalarFieldEnumSchema,
  EquipmentScalarWhereInputSchema: () => EquipmentScalarWhereInputSchema,
  EquipmentScalarWhereWithAggregatesInputSchema: () => EquipmentScalarWhereWithAggregatesInputSchema,
  EquipmentSchema: () => EquipmentSchema,
  EquipmentSelectSchema: () => EquipmentSelectSchema,
  EquipmentStatusSchema: () => EquipmentStatusSchema,
  EquipmentSumOrderByAggregateInputSchema: () => EquipmentSumOrderByAggregateInputSchema,
  EquipmentUncheckedCreateInputSchema: () => EquipmentUncheckedCreateInputSchema,
  EquipmentUncheckedCreateNestedManyWithoutRestaurantInputSchema: () => EquipmentUncheckedCreateNestedManyWithoutRestaurantInputSchema,
  EquipmentUncheckedCreateWithoutMaintenanceLogsInputSchema: () => EquipmentUncheckedCreateWithoutMaintenanceLogsInputSchema,
  EquipmentUncheckedCreateWithoutRecipesInputSchema: () => EquipmentUncheckedCreateWithoutRecipesInputSchema,
  EquipmentUncheckedCreateWithoutRestaurantInputSchema: () => EquipmentUncheckedCreateWithoutRestaurantInputSchema,
  EquipmentUncheckedUpdateInputSchema: () => EquipmentUncheckedUpdateInputSchema,
  EquipmentUncheckedUpdateManyInputSchema: () => EquipmentUncheckedUpdateManyInputSchema,
  EquipmentUncheckedUpdateManyWithoutRestaurantInputSchema: () => EquipmentUncheckedUpdateManyWithoutRestaurantInputSchema,
  EquipmentUncheckedUpdateManyWithoutRestaurantNestedInputSchema: () => EquipmentUncheckedUpdateManyWithoutRestaurantNestedInputSchema,
  EquipmentUncheckedUpdateWithoutMaintenanceLogsInputSchema: () => EquipmentUncheckedUpdateWithoutMaintenanceLogsInputSchema,
  EquipmentUncheckedUpdateWithoutRecipesInputSchema: () => EquipmentUncheckedUpdateWithoutRecipesInputSchema,
  EquipmentUncheckedUpdateWithoutRestaurantInputSchema: () => EquipmentUncheckedUpdateWithoutRestaurantInputSchema,
  EquipmentUpdateArgsSchema: () => EquipmentUpdateArgsSchema,
  EquipmentUpdateInputSchema: () => EquipmentUpdateInputSchema,
  EquipmentUpdateManyArgsSchema: () => EquipmentUpdateManyArgsSchema,
  EquipmentUpdateManyMutationInputSchema: () => EquipmentUpdateManyMutationInputSchema,
  EquipmentUpdateManyWithWhereWithoutRestaurantInputSchema: () => EquipmentUpdateManyWithWhereWithoutRestaurantInputSchema,
  EquipmentUpdateManyWithoutRestaurantNestedInputSchema: () => EquipmentUpdateManyWithoutRestaurantNestedInputSchema,
  EquipmentUpdateOneRequiredWithoutMaintenanceLogsNestedInputSchema: () => EquipmentUpdateOneRequiredWithoutMaintenanceLogsNestedInputSchema,
  EquipmentUpdateOneRequiredWithoutRecipesNestedInputSchema: () => EquipmentUpdateOneRequiredWithoutRecipesNestedInputSchema,
  EquipmentUpdateToOneWithWhereWithoutMaintenanceLogsInputSchema: () => EquipmentUpdateToOneWithWhereWithoutMaintenanceLogsInputSchema,
  EquipmentUpdateToOneWithWhereWithoutRecipesInputSchema: () => EquipmentUpdateToOneWithWhereWithoutRecipesInputSchema,
  EquipmentUpdateWithWhereUniqueWithoutRestaurantInputSchema: () => EquipmentUpdateWithWhereUniqueWithoutRestaurantInputSchema,
  EquipmentUpdateWithoutMaintenanceLogsInputSchema: () => EquipmentUpdateWithoutMaintenanceLogsInputSchema,
  EquipmentUpdateWithoutRecipesInputSchema: () => EquipmentUpdateWithoutRecipesInputSchema,
  EquipmentUpdateWithoutRestaurantInputSchema: () => EquipmentUpdateWithoutRestaurantInputSchema,
  EquipmentUpsertArgsSchema: () => EquipmentUpsertArgsSchema,
  EquipmentUpsertWithWhereUniqueWithoutRestaurantInputSchema: () => EquipmentUpsertWithWhereUniqueWithoutRestaurantInputSchema,
  EquipmentUpsertWithoutMaintenanceLogsInputSchema: () => EquipmentUpsertWithoutMaintenanceLogsInputSchema,
  EquipmentUpsertWithoutRecipesInputSchema: () => EquipmentUpsertWithoutRecipesInputSchema,
  EquipmentWhereInputSchema: () => EquipmentWhereInputSchema,
  EquipmentWhereUniqueInputSchema: () => EquipmentWhereUniqueInputSchema,
  FeedbackSourceSchema: () => FeedbackSourceSchema,
  FeedbackStatusSchema: () => FeedbackStatusSchema,
  FloatFieldUpdateOperationsInputSchema: () => FloatFieldUpdateOperationsInputSchema,
  FloatFilterSchema: () => FloatFilterSchema,
  FloatNullableFilterSchema: () => FloatNullableFilterSchema,
  FloatNullableListFilterSchema: () => FloatNullableListFilterSchema,
  FloatNullableWithAggregatesFilterSchema: () => FloatNullableWithAggregatesFilterSchema,
  FloatWithAggregatesFilterSchema: () => FloatWithAggregatesFilterSchema,
  FoodCostHistoryAggregateArgsSchema: () => FoodCostHistoryAggregateArgsSchema,
  FoodCostHistoryArgsSchema: () => FoodCostHistoryArgsSchema,
  FoodCostHistoryAvgOrderByAggregateInputSchema: () => FoodCostHistoryAvgOrderByAggregateInputSchema,
  FoodCostHistoryCountOrderByAggregateInputSchema: () => FoodCostHistoryCountOrderByAggregateInputSchema,
  FoodCostHistoryCreateArgsSchema: () => FoodCostHistoryCreateArgsSchema,
  FoodCostHistoryCreateInputSchema: () => FoodCostHistoryCreateInputSchema,
  FoodCostHistoryCreateManyAndReturnArgsSchema: () => FoodCostHistoryCreateManyAndReturnArgsSchema,
  FoodCostHistoryCreateManyArgsSchema: () => FoodCostHistoryCreateManyArgsSchema,
  FoodCostHistoryCreateManyInputSchema: () => FoodCostHistoryCreateManyInputSchema,
  FoodCostHistoryCreateManyRecipeInputEnvelopeSchema: () => FoodCostHistoryCreateManyRecipeInputEnvelopeSchema,
  FoodCostHistoryCreateManyRecipeInputSchema: () => FoodCostHistoryCreateManyRecipeInputSchema,
  FoodCostHistoryCreateNestedManyWithoutRecipeInputSchema: () => FoodCostHistoryCreateNestedManyWithoutRecipeInputSchema,
  FoodCostHistoryCreateOrConnectWithoutRecipeInputSchema: () => FoodCostHistoryCreateOrConnectWithoutRecipeInputSchema,
  FoodCostHistoryCreateWithoutRecipeInputSchema: () => FoodCostHistoryCreateWithoutRecipeInputSchema,
  FoodCostHistoryDeleteArgsSchema: () => FoodCostHistoryDeleteArgsSchema,
  FoodCostHistoryDeleteManyArgsSchema: () => FoodCostHistoryDeleteManyArgsSchema,
  FoodCostHistoryFindFirstArgsSchema: () => FoodCostHistoryFindFirstArgsSchema,
  FoodCostHistoryFindFirstOrThrowArgsSchema: () => FoodCostHistoryFindFirstOrThrowArgsSchema,
  FoodCostHistoryFindManyArgsSchema: () => FoodCostHistoryFindManyArgsSchema,
  FoodCostHistoryFindUniqueArgsSchema: () => FoodCostHistoryFindUniqueArgsSchema,
  FoodCostHistoryFindUniqueOrThrowArgsSchema: () => FoodCostHistoryFindUniqueOrThrowArgsSchema,
  FoodCostHistoryGroupByArgsSchema: () => FoodCostHistoryGroupByArgsSchema,
  FoodCostHistoryIncludeSchema: () => FoodCostHistoryIncludeSchema,
  FoodCostHistoryListRelationFilterSchema: () => FoodCostHistoryListRelationFilterSchema,
  FoodCostHistoryMaxOrderByAggregateInputSchema: () => FoodCostHistoryMaxOrderByAggregateInputSchema,
  FoodCostHistoryMinOrderByAggregateInputSchema: () => FoodCostHistoryMinOrderByAggregateInputSchema,
  FoodCostHistoryOrderByRelationAggregateInputSchema: () => FoodCostHistoryOrderByRelationAggregateInputSchema,
  FoodCostHistoryOrderByWithAggregationInputSchema: () => FoodCostHistoryOrderByWithAggregationInputSchema,
  FoodCostHistoryOrderByWithRelationInputSchema: () => FoodCostHistoryOrderByWithRelationInputSchema,
  FoodCostHistoryScalarFieldEnumSchema: () => FoodCostHistoryScalarFieldEnumSchema,
  FoodCostHistoryScalarWhereInputSchema: () => FoodCostHistoryScalarWhereInputSchema,
  FoodCostHistoryScalarWhereWithAggregatesInputSchema: () => FoodCostHistoryScalarWhereWithAggregatesInputSchema,
  FoodCostHistorySchema: () => FoodCostHistorySchema,
  FoodCostHistorySelectSchema: () => FoodCostHistorySelectSchema,
  FoodCostHistorySumOrderByAggregateInputSchema: () => FoodCostHistorySumOrderByAggregateInputSchema,
  FoodCostHistoryUncheckedCreateInputSchema: () => FoodCostHistoryUncheckedCreateInputSchema,
  FoodCostHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema: () => FoodCostHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema,
  FoodCostHistoryUncheckedCreateWithoutRecipeInputSchema: () => FoodCostHistoryUncheckedCreateWithoutRecipeInputSchema,
  FoodCostHistoryUncheckedUpdateInputSchema: () => FoodCostHistoryUncheckedUpdateInputSchema,
  FoodCostHistoryUncheckedUpdateManyInputSchema: () => FoodCostHistoryUncheckedUpdateManyInputSchema,
  FoodCostHistoryUncheckedUpdateManyWithoutRecipeInputSchema: () => FoodCostHistoryUncheckedUpdateManyWithoutRecipeInputSchema,
  FoodCostHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema: () => FoodCostHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema,
  FoodCostHistoryUncheckedUpdateWithoutRecipeInputSchema: () => FoodCostHistoryUncheckedUpdateWithoutRecipeInputSchema,
  FoodCostHistoryUpdateArgsSchema: () => FoodCostHistoryUpdateArgsSchema,
  FoodCostHistoryUpdateInputSchema: () => FoodCostHistoryUpdateInputSchema,
  FoodCostHistoryUpdateManyArgsSchema: () => FoodCostHistoryUpdateManyArgsSchema,
  FoodCostHistoryUpdateManyMutationInputSchema: () => FoodCostHistoryUpdateManyMutationInputSchema,
  FoodCostHistoryUpdateManyWithWhereWithoutRecipeInputSchema: () => FoodCostHistoryUpdateManyWithWhereWithoutRecipeInputSchema,
  FoodCostHistoryUpdateManyWithoutRecipeNestedInputSchema: () => FoodCostHistoryUpdateManyWithoutRecipeNestedInputSchema,
  FoodCostHistoryUpdateWithWhereUniqueWithoutRecipeInputSchema: () => FoodCostHistoryUpdateWithWhereUniqueWithoutRecipeInputSchema,
  FoodCostHistoryUpdateWithoutRecipeInputSchema: () => FoodCostHistoryUpdateWithoutRecipeInputSchema,
  FoodCostHistoryUpsertArgsSchema: () => FoodCostHistoryUpsertArgsSchema,
  FoodCostHistoryUpsertWithWhereUniqueWithoutRecipeInputSchema: () => FoodCostHistoryUpsertWithWhereUniqueWithoutRecipeInputSchema,
  FoodCostHistoryWhereInputSchema: () => FoodCostHistoryWhereInputSchema,
  FoodCostHistoryWhereUniqueInputSchema: () => FoodCostHistoryWhereUniqueInputSchema,
  IngredientAggregateArgsSchema: () => IngredientAggregateArgsSchema,
  IngredientAllergenAggregateArgsSchema: () => IngredientAllergenAggregateArgsSchema,
  IngredientAllergenArgsSchema: () => IngredientAllergenArgsSchema,
  IngredientAllergenAvgOrderByAggregateInputSchema: () => IngredientAllergenAvgOrderByAggregateInputSchema,
  IngredientAllergenCountOrderByAggregateInputSchema: () => IngredientAllergenCountOrderByAggregateInputSchema,
  IngredientAllergenCreateArgsSchema: () => IngredientAllergenCreateArgsSchema,
  IngredientAllergenCreateInputSchema: () => IngredientAllergenCreateInputSchema,
  IngredientAllergenCreateManyAllergenInputEnvelopeSchema: () => IngredientAllergenCreateManyAllergenInputEnvelopeSchema,
  IngredientAllergenCreateManyAllergenInputSchema: () => IngredientAllergenCreateManyAllergenInputSchema,
  IngredientAllergenCreateManyAndReturnArgsSchema: () => IngredientAllergenCreateManyAndReturnArgsSchema,
  IngredientAllergenCreateManyArgsSchema: () => IngredientAllergenCreateManyArgsSchema,
  IngredientAllergenCreateManyIngredientInputEnvelopeSchema: () => IngredientAllergenCreateManyIngredientInputEnvelopeSchema,
  IngredientAllergenCreateManyIngredientInputSchema: () => IngredientAllergenCreateManyIngredientInputSchema,
  IngredientAllergenCreateManyInputSchema: () => IngredientAllergenCreateManyInputSchema,
  IngredientAllergenCreateNestedManyWithoutAllergenInputSchema: () => IngredientAllergenCreateNestedManyWithoutAllergenInputSchema,
  IngredientAllergenCreateNestedManyWithoutIngredientInputSchema: () => IngredientAllergenCreateNestedManyWithoutIngredientInputSchema,
  IngredientAllergenCreateOrConnectWithoutAllergenInputSchema: () => IngredientAllergenCreateOrConnectWithoutAllergenInputSchema,
  IngredientAllergenCreateOrConnectWithoutIngredientInputSchema: () => IngredientAllergenCreateOrConnectWithoutIngredientInputSchema,
  IngredientAllergenCreateWithoutAllergenInputSchema: () => IngredientAllergenCreateWithoutAllergenInputSchema,
  IngredientAllergenCreateWithoutIngredientInputSchema: () => IngredientAllergenCreateWithoutIngredientInputSchema,
  IngredientAllergenDeleteArgsSchema: () => IngredientAllergenDeleteArgsSchema,
  IngredientAllergenDeleteManyArgsSchema: () => IngredientAllergenDeleteManyArgsSchema,
  IngredientAllergenFindFirstArgsSchema: () => IngredientAllergenFindFirstArgsSchema,
  IngredientAllergenFindFirstOrThrowArgsSchema: () => IngredientAllergenFindFirstOrThrowArgsSchema,
  IngredientAllergenFindManyArgsSchema: () => IngredientAllergenFindManyArgsSchema,
  IngredientAllergenFindUniqueArgsSchema: () => IngredientAllergenFindUniqueArgsSchema,
  IngredientAllergenFindUniqueOrThrowArgsSchema: () => IngredientAllergenFindUniqueOrThrowArgsSchema,
  IngredientAllergenGroupByArgsSchema: () => IngredientAllergenGroupByArgsSchema,
  IngredientAllergenIncludeSchema: () => IngredientAllergenIncludeSchema,
  IngredientAllergenListRelationFilterSchema: () => IngredientAllergenListRelationFilterSchema,
  IngredientAllergenMaxOrderByAggregateInputSchema: () => IngredientAllergenMaxOrderByAggregateInputSchema,
  IngredientAllergenMinOrderByAggregateInputSchema: () => IngredientAllergenMinOrderByAggregateInputSchema,
  IngredientAllergenOrderByRelationAggregateInputSchema: () => IngredientAllergenOrderByRelationAggregateInputSchema,
  IngredientAllergenOrderByWithAggregationInputSchema: () => IngredientAllergenOrderByWithAggregationInputSchema,
  IngredientAllergenOrderByWithRelationInputSchema: () => IngredientAllergenOrderByWithRelationInputSchema,
  IngredientAllergenScalarFieldEnumSchema: () => IngredientAllergenScalarFieldEnumSchema,
  IngredientAllergenScalarWhereInputSchema: () => IngredientAllergenScalarWhereInputSchema,
  IngredientAllergenScalarWhereWithAggregatesInputSchema: () => IngredientAllergenScalarWhereWithAggregatesInputSchema,
  IngredientAllergenSchema: () => IngredientAllergenSchema,
  IngredientAllergenSelectSchema: () => IngredientAllergenSelectSchema,
  IngredientAllergenSumOrderByAggregateInputSchema: () => IngredientAllergenSumOrderByAggregateInputSchema,
  IngredientAllergenUncheckedCreateInputSchema: () => IngredientAllergenUncheckedCreateInputSchema,
  IngredientAllergenUncheckedCreateNestedManyWithoutAllergenInputSchema: () => IngredientAllergenUncheckedCreateNestedManyWithoutAllergenInputSchema,
  IngredientAllergenUncheckedCreateNestedManyWithoutIngredientInputSchema: () => IngredientAllergenUncheckedCreateNestedManyWithoutIngredientInputSchema,
  IngredientAllergenUncheckedCreateWithoutAllergenInputSchema: () => IngredientAllergenUncheckedCreateWithoutAllergenInputSchema,
  IngredientAllergenUncheckedCreateWithoutIngredientInputSchema: () => IngredientAllergenUncheckedCreateWithoutIngredientInputSchema,
  IngredientAllergenUncheckedUpdateInputSchema: () => IngredientAllergenUncheckedUpdateInputSchema,
  IngredientAllergenUncheckedUpdateManyInputSchema: () => IngredientAllergenUncheckedUpdateManyInputSchema,
  IngredientAllergenUncheckedUpdateManyWithoutAllergenInputSchema: () => IngredientAllergenUncheckedUpdateManyWithoutAllergenInputSchema,
  IngredientAllergenUncheckedUpdateManyWithoutAllergenNestedInputSchema: () => IngredientAllergenUncheckedUpdateManyWithoutAllergenNestedInputSchema,
  IngredientAllergenUncheckedUpdateManyWithoutIngredientInputSchema: () => IngredientAllergenUncheckedUpdateManyWithoutIngredientInputSchema,
  IngredientAllergenUncheckedUpdateManyWithoutIngredientNestedInputSchema: () => IngredientAllergenUncheckedUpdateManyWithoutIngredientNestedInputSchema,
  IngredientAllergenUncheckedUpdateWithoutAllergenInputSchema: () => IngredientAllergenUncheckedUpdateWithoutAllergenInputSchema,
  IngredientAllergenUncheckedUpdateWithoutIngredientInputSchema: () => IngredientAllergenUncheckedUpdateWithoutIngredientInputSchema,
  IngredientAllergenUpdateArgsSchema: () => IngredientAllergenUpdateArgsSchema,
  IngredientAllergenUpdateInputSchema: () => IngredientAllergenUpdateInputSchema,
  IngredientAllergenUpdateManyArgsSchema: () => IngredientAllergenUpdateManyArgsSchema,
  IngredientAllergenUpdateManyMutationInputSchema: () => IngredientAllergenUpdateManyMutationInputSchema,
  IngredientAllergenUpdateManyWithWhereWithoutAllergenInputSchema: () => IngredientAllergenUpdateManyWithWhereWithoutAllergenInputSchema,
  IngredientAllergenUpdateManyWithWhereWithoutIngredientInputSchema: () => IngredientAllergenUpdateManyWithWhereWithoutIngredientInputSchema,
  IngredientAllergenUpdateManyWithoutAllergenNestedInputSchema: () => IngredientAllergenUpdateManyWithoutAllergenNestedInputSchema,
  IngredientAllergenUpdateManyWithoutIngredientNestedInputSchema: () => IngredientAllergenUpdateManyWithoutIngredientNestedInputSchema,
  IngredientAllergenUpdateWithWhereUniqueWithoutAllergenInputSchema: () => IngredientAllergenUpdateWithWhereUniqueWithoutAllergenInputSchema,
  IngredientAllergenUpdateWithWhereUniqueWithoutIngredientInputSchema: () => IngredientAllergenUpdateWithWhereUniqueWithoutIngredientInputSchema,
  IngredientAllergenUpdateWithoutAllergenInputSchema: () => IngredientAllergenUpdateWithoutAllergenInputSchema,
  IngredientAllergenUpdateWithoutIngredientInputSchema: () => IngredientAllergenUpdateWithoutIngredientInputSchema,
  IngredientAllergenUpsertArgsSchema: () => IngredientAllergenUpsertArgsSchema,
  IngredientAllergenUpsertWithWhereUniqueWithoutAllergenInputSchema: () => IngredientAllergenUpsertWithWhereUniqueWithoutAllergenInputSchema,
  IngredientAllergenUpsertWithWhereUniqueWithoutIngredientInputSchema: () => IngredientAllergenUpsertWithWhereUniqueWithoutIngredientInputSchema,
  IngredientAllergenWhereInputSchema: () => IngredientAllergenWhereInputSchema,
  IngredientAllergenWhereUniqueInputSchema: () => IngredientAllergenWhereUniqueInputSchema,
  IngredientArgsSchema: () => IngredientArgsSchema,
  IngredientAvgOrderByAggregateInputSchema: () => IngredientAvgOrderByAggregateInputSchema,
  IngredientCountOrderByAggregateInputSchema: () => IngredientCountOrderByAggregateInputSchema,
  IngredientCountOutputTypeArgsSchema: () => IngredientCountOutputTypeArgsSchema,
  IngredientCountOutputTypeSelectSchema: () => IngredientCountOutputTypeSelectSchema,
  IngredientCreateArgsSchema: () => IngredientCreateArgsSchema,
  IngredientCreateInputSchema: () => IngredientCreateInputSchema,
  IngredientCreateManyAndReturnArgsSchema: () => IngredientCreateManyAndReturnArgsSchema,
  IngredientCreateManyArgsSchema: () => IngredientCreateManyArgsSchema,
  IngredientCreateManyDietaryRestrictionInputEnvelopeSchema: () => IngredientCreateManyDietaryRestrictionInputEnvelopeSchema,
  IngredientCreateManyDietaryRestrictionInputSchema: () => IngredientCreateManyDietaryRestrictionInputSchema,
  IngredientCreateManyInputSchema: () => IngredientCreateManyInputSchema,
  IngredientCreateNestedManyWithoutDietaryRestrictionInputSchema: () => IngredientCreateNestedManyWithoutDietaryRestrictionInputSchema,
  IngredientCreateNestedManyWithoutVendorsInputSchema: () => IngredientCreateNestedManyWithoutVendorsInputSchema,
  IngredientCreateNestedOneWithoutIngredientAllergenInputSchema: () => IngredientCreateNestedOneWithoutIngredientAllergenInputSchema,
  IngredientCreateNestedOneWithoutInventoryItemsInputSchema: () => IngredientCreateNestedOneWithoutInventoryItemsInputSchema,
  IngredientCreateNestedOneWithoutOrderItemsInputSchema: () => IngredientCreateNestedOneWithoutOrderItemsInputSchema,
  IngredientCreateNestedOneWithoutRecipeIngredientsInputSchema: () => IngredientCreateNestedOneWithoutRecipeIngredientsInputSchema,
  IngredientCreateNestedOneWithoutSupplierPriceHistoryInputSchema: () => IngredientCreateNestedOneWithoutSupplierPriceHistoryInputSchema,
  IngredientCreateNestedOneWithoutWasteRecordInputSchema: () => IngredientCreateNestedOneWithoutWasteRecordInputSchema,
  IngredientCreateOrConnectWithoutDietaryRestrictionInputSchema: () => IngredientCreateOrConnectWithoutDietaryRestrictionInputSchema,
  IngredientCreateOrConnectWithoutIngredientAllergenInputSchema: () => IngredientCreateOrConnectWithoutIngredientAllergenInputSchema,
  IngredientCreateOrConnectWithoutInventoryItemsInputSchema: () => IngredientCreateOrConnectWithoutInventoryItemsInputSchema,
  IngredientCreateOrConnectWithoutOrderItemsInputSchema: () => IngredientCreateOrConnectWithoutOrderItemsInputSchema,
  IngredientCreateOrConnectWithoutRecipeIngredientsInputSchema: () => IngredientCreateOrConnectWithoutRecipeIngredientsInputSchema,
  IngredientCreateOrConnectWithoutSupplierPriceHistoryInputSchema: () => IngredientCreateOrConnectWithoutSupplierPriceHistoryInputSchema,
  IngredientCreateOrConnectWithoutVendorsInputSchema: () => IngredientCreateOrConnectWithoutVendorsInputSchema,
  IngredientCreateOrConnectWithoutWasteRecordInputSchema: () => IngredientCreateOrConnectWithoutWasteRecordInputSchema,
  IngredientCreateWithoutDietaryRestrictionInputSchema: () => IngredientCreateWithoutDietaryRestrictionInputSchema,
  IngredientCreateWithoutIngredientAllergenInputSchema: () => IngredientCreateWithoutIngredientAllergenInputSchema,
  IngredientCreateWithoutInventoryItemsInputSchema: () => IngredientCreateWithoutInventoryItemsInputSchema,
  IngredientCreateWithoutOrderItemsInputSchema: () => IngredientCreateWithoutOrderItemsInputSchema,
  IngredientCreateWithoutRecipeIngredientsInputSchema: () => IngredientCreateWithoutRecipeIngredientsInputSchema,
  IngredientCreateWithoutSupplierPriceHistoryInputSchema: () => IngredientCreateWithoutSupplierPriceHistoryInputSchema,
  IngredientCreateWithoutVendorsInputSchema: () => IngredientCreateWithoutVendorsInputSchema,
  IngredientCreateWithoutWasteRecordInputSchema: () => IngredientCreateWithoutWasteRecordInputSchema,
  IngredientDeleteArgsSchema: () => IngredientDeleteArgsSchema,
  IngredientDeleteManyArgsSchema: () => IngredientDeleteManyArgsSchema,
  IngredientFindFirstArgsSchema: () => IngredientFindFirstArgsSchema,
  IngredientFindFirstOrThrowArgsSchema: () => IngredientFindFirstOrThrowArgsSchema,
  IngredientFindManyArgsSchema: () => IngredientFindManyArgsSchema,
  IngredientFindUniqueArgsSchema: () => IngredientFindUniqueArgsSchema,
  IngredientFindUniqueOrThrowArgsSchema: () => IngredientFindUniqueOrThrowArgsSchema,
  IngredientGroupByArgsSchema: () => IngredientGroupByArgsSchema,
  IngredientIncludeSchema: () => IngredientIncludeSchema,
  IngredientListRelationFilterSchema: () => IngredientListRelationFilterSchema,
  IngredientMaxOrderByAggregateInputSchema: () => IngredientMaxOrderByAggregateInputSchema,
  IngredientMinOrderByAggregateInputSchema: () => IngredientMinOrderByAggregateInputSchema,
  IngredientOrderByRelationAggregateInputSchema: () => IngredientOrderByRelationAggregateInputSchema,
  IngredientOrderByWithAggregationInputSchema: () => IngredientOrderByWithAggregationInputSchema,
  IngredientOrderByWithRelationInputSchema: () => IngredientOrderByWithRelationInputSchema,
  IngredientRelationFilterSchema: () => IngredientRelationFilterSchema,
  IngredientScalarFieldEnumSchema: () => IngredientScalarFieldEnumSchema,
  IngredientScalarWhereInputSchema: () => IngredientScalarWhereInputSchema,
  IngredientScalarWhereWithAggregatesInputSchema: () => IngredientScalarWhereWithAggregatesInputSchema,
  IngredientSchema: () => IngredientSchema,
  IngredientSelectSchema: () => IngredientSelectSchema,
  IngredientSumOrderByAggregateInputSchema: () => IngredientSumOrderByAggregateInputSchema,
  IngredientUncheckedCreateInputSchema: () => IngredientUncheckedCreateInputSchema,
  IngredientUncheckedCreateNestedManyWithoutDietaryRestrictionInputSchema: () => IngredientUncheckedCreateNestedManyWithoutDietaryRestrictionInputSchema,
  IngredientUncheckedCreateNestedManyWithoutVendorsInputSchema: () => IngredientUncheckedCreateNestedManyWithoutVendorsInputSchema,
  IngredientUncheckedCreateWithoutDietaryRestrictionInputSchema: () => IngredientUncheckedCreateWithoutDietaryRestrictionInputSchema,
  IngredientUncheckedCreateWithoutIngredientAllergenInputSchema: () => IngredientUncheckedCreateWithoutIngredientAllergenInputSchema,
  IngredientUncheckedCreateWithoutInventoryItemsInputSchema: () => IngredientUncheckedCreateWithoutInventoryItemsInputSchema,
  IngredientUncheckedCreateWithoutOrderItemsInputSchema: () => IngredientUncheckedCreateWithoutOrderItemsInputSchema,
  IngredientUncheckedCreateWithoutRecipeIngredientsInputSchema: () => IngredientUncheckedCreateWithoutRecipeIngredientsInputSchema,
  IngredientUncheckedCreateWithoutSupplierPriceHistoryInputSchema: () => IngredientUncheckedCreateWithoutSupplierPriceHistoryInputSchema,
  IngredientUncheckedCreateWithoutVendorsInputSchema: () => IngredientUncheckedCreateWithoutVendorsInputSchema,
  IngredientUncheckedCreateWithoutWasteRecordInputSchema: () => IngredientUncheckedCreateWithoutWasteRecordInputSchema,
  IngredientUncheckedUpdateInputSchema: () => IngredientUncheckedUpdateInputSchema,
  IngredientUncheckedUpdateManyInputSchema: () => IngredientUncheckedUpdateManyInputSchema,
  IngredientUncheckedUpdateManyWithoutDietaryRestrictionInputSchema: () => IngredientUncheckedUpdateManyWithoutDietaryRestrictionInputSchema,
  IngredientUncheckedUpdateManyWithoutDietaryRestrictionNestedInputSchema: () => IngredientUncheckedUpdateManyWithoutDietaryRestrictionNestedInputSchema,
  IngredientUncheckedUpdateManyWithoutVendorsInputSchema: () => IngredientUncheckedUpdateManyWithoutVendorsInputSchema,
  IngredientUncheckedUpdateManyWithoutVendorsNestedInputSchema: () => IngredientUncheckedUpdateManyWithoutVendorsNestedInputSchema,
  IngredientUncheckedUpdateWithoutDietaryRestrictionInputSchema: () => IngredientUncheckedUpdateWithoutDietaryRestrictionInputSchema,
  IngredientUncheckedUpdateWithoutIngredientAllergenInputSchema: () => IngredientUncheckedUpdateWithoutIngredientAllergenInputSchema,
  IngredientUncheckedUpdateWithoutInventoryItemsInputSchema: () => IngredientUncheckedUpdateWithoutInventoryItemsInputSchema,
  IngredientUncheckedUpdateWithoutOrderItemsInputSchema: () => IngredientUncheckedUpdateWithoutOrderItemsInputSchema,
  IngredientUncheckedUpdateWithoutRecipeIngredientsInputSchema: () => IngredientUncheckedUpdateWithoutRecipeIngredientsInputSchema,
  IngredientUncheckedUpdateWithoutSupplierPriceHistoryInputSchema: () => IngredientUncheckedUpdateWithoutSupplierPriceHistoryInputSchema,
  IngredientUncheckedUpdateWithoutVendorsInputSchema: () => IngredientUncheckedUpdateWithoutVendorsInputSchema,
  IngredientUncheckedUpdateWithoutWasteRecordInputSchema: () => IngredientUncheckedUpdateWithoutWasteRecordInputSchema,
  IngredientUpdateArgsSchema: () => IngredientUpdateArgsSchema,
  IngredientUpdateInputSchema: () => IngredientUpdateInputSchema,
  IngredientUpdateManyArgsSchema: () => IngredientUpdateManyArgsSchema,
  IngredientUpdateManyMutationInputSchema: () => IngredientUpdateManyMutationInputSchema,
  IngredientUpdateManyWithWhereWithoutDietaryRestrictionInputSchema: () => IngredientUpdateManyWithWhereWithoutDietaryRestrictionInputSchema,
  IngredientUpdateManyWithWhereWithoutVendorsInputSchema: () => IngredientUpdateManyWithWhereWithoutVendorsInputSchema,
  IngredientUpdateManyWithoutDietaryRestrictionNestedInputSchema: () => IngredientUpdateManyWithoutDietaryRestrictionNestedInputSchema,
  IngredientUpdateManyWithoutVendorsNestedInputSchema: () => IngredientUpdateManyWithoutVendorsNestedInputSchema,
  IngredientUpdateOneRequiredWithoutIngredientAllergenNestedInputSchema: () => IngredientUpdateOneRequiredWithoutIngredientAllergenNestedInputSchema,
  IngredientUpdateOneRequiredWithoutInventoryItemsNestedInputSchema: () => IngredientUpdateOneRequiredWithoutInventoryItemsNestedInputSchema,
  IngredientUpdateOneRequiredWithoutOrderItemsNestedInputSchema: () => IngredientUpdateOneRequiredWithoutOrderItemsNestedInputSchema,
  IngredientUpdateOneRequiredWithoutRecipeIngredientsNestedInputSchema: () => IngredientUpdateOneRequiredWithoutRecipeIngredientsNestedInputSchema,
  IngredientUpdateOneRequiredWithoutSupplierPriceHistoryNestedInputSchema: () => IngredientUpdateOneRequiredWithoutSupplierPriceHistoryNestedInputSchema,
  IngredientUpdateOneRequiredWithoutWasteRecordNestedInputSchema: () => IngredientUpdateOneRequiredWithoutWasteRecordNestedInputSchema,
  IngredientUpdateToOneWithWhereWithoutIngredientAllergenInputSchema: () => IngredientUpdateToOneWithWhereWithoutIngredientAllergenInputSchema,
  IngredientUpdateToOneWithWhereWithoutInventoryItemsInputSchema: () => IngredientUpdateToOneWithWhereWithoutInventoryItemsInputSchema,
  IngredientUpdateToOneWithWhereWithoutOrderItemsInputSchema: () => IngredientUpdateToOneWithWhereWithoutOrderItemsInputSchema,
  IngredientUpdateToOneWithWhereWithoutRecipeIngredientsInputSchema: () => IngredientUpdateToOneWithWhereWithoutRecipeIngredientsInputSchema,
  IngredientUpdateToOneWithWhereWithoutSupplierPriceHistoryInputSchema: () => IngredientUpdateToOneWithWhereWithoutSupplierPriceHistoryInputSchema,
  IngredientUpdateToOneWithWhereWithoutWasteRecordInputSchema: () => IngredientUpdateToOneWithWhereWithoutWasteRecordInputSchema,
  IngredientUpdateWithWhereUniqueWithoutDietaryRestrictionInputSchema: () => IngredientUpdateWithWhereUniqueWithoutDietaryRestrictionInputSchema,
  IngredientUpdateWithWhereUniqueWithoutVendorsInputSchema: () => IngredientUpdateWithWhereUniqueWithoutVendorsInputSchema,
  IngredientUpdateWithoutDietaryRestrictionInputSchema: () => IngredientUpdateWithoutDietaryRestrictionInputSchema,
  IngredientUpdateWithoutIngredientAllergenInputSchema: () => IngredientUpdateWithoutIngredientAllergenInputSchema,
  IngredientUpdateWithoutInventoryItemsInputSchema: () => IngredientUpdateWithoutInventoryItemsInputSchema,
  IngredientUpdateWithoutOrderItemsInputSchema: () => IngredientUpdateWithoutOrderItemsInputSchema,
  IngredientUpdateWithoutRecipeIngredientsInputSchema: () => IngredientUpdateWithoutRecipeIngredientsInputSchema,
  IngredientUpdateWithoutSupplierPriceHistoryInputSchema: () => IngredientUpdateWithoutSupplierPriceHistoryInputSchema,
  IngredientUpdateWithoutVendorsInputSchema: () => IngredientUpdateWithoutVendorsInputSchema,
  IngredientUpdateWithoutWasteRecordInputSchema: () => IngredientUpdateWithoutWasteRecordInputSchema,
  IngredientUpsertArgsSchema: () => IngredientUpsertArgsSchema,
  IngredientUpsertWithWhereUniqueWithoutDietaryRestrictionInputSchema: () => IngredientUpsertWithWhereUniqueWithoutDietaryRestrictionInputSchema,
  IngredientUpsertWithWhereUniqueWithoutVendorsInputSchema: () => IngredientUpsertWithWhereUniqueWithoutVendorsInputSchema,
  IngredientUpsertWithoutIngredientAllergenInputSchema: () => IngredientUpsertWithoutIngredientAllergenInputSchema,
  IngredientUpsertWithoutInventoryItemsInputSchema: () => IngredientUpsertWithoutInventoryItemsInputSchema,
  IngredientUpsertWithoutOrderItemsInputSchema: () => IngredientUpsertWithoutOrderItemsInputSchema,
  IngredientUpsertWithoutRecipeIngredientsInputSchema: () => IngredientUpsertWithoutRecipeIngredientsInputSchema,
  IngredientUpsertWithoutSupplierPriceHistoryInputSchema: () => IngredientUpsertWithoutSupplierPriceHistoryInputSchema,
  IngredientUpsertWithoutWasteRecordInputSchema: () => IngredientUpsertWithoutWasteRecordInputSchema,
  IngredientWhereInputSchema: () => IngredientWhereInputSchema,
  IngredientWhereUniqueInputSchema: () => IngredientWhereUniqueInputSchema,
  IntFieldUpdateOperationsInputSchema: () => IntFieldUpdateOperationsInputSchema,
  IntFilterSchema: () => IntFilterSchema,
  IntNullableFilterSchema: () => IntNullableFilterSchema,
  IntNullableListFilterSchema: () => IntNullableListFilterSchema,
  IntNullableWithAggregatesFilterSchema: () => IntNullableWithAggregatesFilterSchema,
  IntWithAggregatesFilterSchema: () => IntWithAggregatesFilterSchema,
  InventoryAggregateArgsSchema: () => InventoryAggregateArgsSchema,
  InventoryArgsSchema: () => InventoryArgsSchema,
  InventoryAvgOrderByAggregateInputSchema: () => InventoryAvgOrderByAggregateInputSchema,
  InventoryCountOrderByAggregateInputSchema: () => InventoryCountOrderByAggregateInputSchema,
  InventoryCountOutputTypeArgsSchema: () => InventoryCountOutputTypeArgsSchema,
  InventoryCountOutputTypeSelectSchema: () => InventoryCountOutputTypeSelectSchema,
  InventoryCreateArgsSchema: () => InventoryCreateArgsSchema,
  InventoryCreateInputSchema: () => InventoryCreateInputSchema,
  InventoryCreateManyAndReturnArgsSchema: () => InventoryCreateManyAndReturnArgsSchema,
  InventoryCreateManyArgsSchema: () => InventoryCreateManyArgsSchema,
  InventoryCreateManyInputSchema: () => InventoryCreateManyInputSchema,
  InventoryCreateNestedOneWithoutItemsInputSchema: () => InventoryCreateNestedOneWithoutItemsInputSchema,
  InventoryCreateNestedOneWithoutRestaurantInputSchema: () => InventoryCreateNestedOneWithoutRestaurantInputSchema,
  InventoryCreateOrConnectWithoutItemsInputSchema: () => InventoryCreateOrConnectWithoutItemsInputSchema,
  InventoryCreateOrConnectWithoutRestaurantInputSchema: () => InventoryCreateOrConnectWithoutRestaurantInputSchema,
  InventoryCreateWithoutItemsInputSchema: () => InventoryCreateWithoutItemsInputSchema,
  InventoryCreateWithoutRestaurantInputSchema: () => InventoryCreateWithoutRestaurantInputSchema,
  InventoryDeleteArgsSchema: () => InventoryDeleteArgsSchema,
  InventoryDeleteManyArgsSchema: () => InventoryDeleteManyArgsSchema,
  InventoryFindFirstArgsSchema: () => InventoryFindFirstArgsSchema,
  InventoryFindFirstOrThrowArgsSchema: () => InventoryFindFirstOrThrowArgsSchema,
  InventoryFindManyArgsSchema: () => InventoryFindManyArgsSchema,
  InventoryFindUniqueArgsSchema: () => InventoryFindUniqueArgsSchema,
  InventoryFindUniqueOrThrowArgsSchema: () => InventoryFindUniqueOrThrowArgsSchema,
  InventoryGroupByArgsSchema: () => InventoryGroupByArgsSchema,
  InventoryIncludeSchema: () => InventoryIncludeSchema,
  InventoryItemAggregateArgsSchema: () => InventoryItemAggregateArgsSchema,
  InventoryItemArgsSchema: () => InventoryItemArgsSchema,
  InventoryItemAvgOrderByAggregateInputSchema: () => InventoryItemAvgOrderByAggregateInputSchema,
  InventoryItemCountOrderByAggregateInputSchema: () => InventoryItemCountOrderByAggregateInputSchema,
  InventoryItemCountOutputTypeArgsSchema: () => InventoryItemCountOutputTypeArgsSchema,
  InventoryItemCountOutputTypeSelectSchema: () => InventoryItemCountOutputTypeSelectSchema,
  InventoryItemCreateArgsSchema: () => InventoryItemCreateArgsSchema,
  InventoryItemCreateInputSchema: () => InventoryItemCreateInputSchema,
  InventoryItemCreateManyAndReturnArgsSchema: () => InventoryItemCreateManyAndReturnArgsSchema,
  InventoryItemCreateManyArgsSchema: () => InventoryItemCreateManyArgsSchema,
  InventoryItemCreateManyIngredientInputEnvelopeSchema: () => InventoryItemCreateManyIngredientInputEnvelopeSchema,
  InventoryItemCreateManyIngredientInputSchema: () => InventoryItemCreateManyIngredientInputSchema,
  InventoryItemCreateManyInputSchema: () => InventoryItemCreateManyInputSchema,
  InventoryItemCreateManyInventoryInputEnvelopeSchema: () => InventoryItemCreateManyInventoryInputEnvelopeSchema,
  InventoryItemCreateManyInventoryInputSchema: () => InventoryItemCreateManyInventoryInputSchema,
  InventoryItemCreateManyLastUpdatedByInputEnvelopeSchema: () => InventoryItemCreateManyLastUpdatedByInputEnvelopeSchema,
  InventoryItemCreateManyLastUpdatedByInputSchema: () => InventoryItemCreateManyLastUpdatedByInputSchema,
  InventoryItemCreateNestedManyWithoutIngredientInputSchema: () => InventoryItemCreateNestedManyWithoutIngredientInputSchema,
  InventoryItemCreateNestedManyWithoutInventoryInputSchema: () => InventoryItemCreateNestedManyWithoutInventoryInputSchema,
  InventoryItemCreateNestedManyWithoutLastUpdatedByInputSchema: () => InventoryItemCreateNestedManyWithoutLastUpdatedByInputSchema,
  InventoryItemCreateNestedOneWithoutInventoryWithdrawalInputSchema: () => InventoryItemCreateNestedOneWithoutInventoryWithdrawalInputSchema,
  InventoryItemCreateOrConnectWithoutIngredientInputSchema: () => InventoryItemCreateOrConnectWithoutIngredientInputSchema,
  InventoryItemCreateOrConnectWithoutInventoryInputSchema: () => InventoryItemCreateOrConnectWithoutInventoryInputSchema,
  InventoryItemCreateOrConnectWithoutInventoryWithdrawalInputSchema: () => InventoryItemCreateOrConnectWithoutInventoryWithdrawalInputSchema,
  InventoryItemCreateOrConnectWithoutLastUpdatedByInputSchema: () => InventoryItemCreateOrConnectWithoutLastUpdatedByInputSchema,
  InventoryItemCreateWithoutIngredientInputSchema: () => InventoryItemCreateWithoutIngredientInputSchema,
  InventoryItemCreateWithoutInventoryInputSchema: () => InventoryItemCreateWithoutInventoryInputSchema,
  InventoryItemCreateWithoutInventoryWithdrawalInputSchema: () => InventoryItemCreateWithoutInventoryWithdrawalInputSchema,
  InventoryItemCreateWithoutLastUpdatedByInputSchema: () => InventoryItemCreateWithoutLastUpdatedByInputSchema,
  InventoryItemDeleteArgsSchema: () => InventoryItemDeleteArgsSchema,
  InventoryItemDeleteManyArgsSchema: () => InventoryItemDeleteManyArgsSchema,
  InventoryItemFindFirstArgsSchema: () => InventoryItemFindFirstArgsSchema,
  InventoryItemFindFirstOrThrowArgsSchema: () => InventoryItemFindFirstOrThrowArgsSchema,
  InventoryItemFindManyArgsSchema: () => InventoryItemFindManyArgsSchema,
  InventoryItemFindUniqueArgsSchema: () => InventoryItemFindUniqueArgsSchema,
  InventoryItemFindUniqueOrThrowArgsSchema: () => InventoryItemFindUniqueOrThrowArgsSchema,
  InventoryItemGroupByArgsSchema: () => InventoryItemGroupByArgsSchema,
  InventoryItemIncludeSchema: () => InventoryItemIncludeSchema,
  InventoryItemListRelationFilterSchema: () => InventoryItemListRelationFilterSchema,
  InventoryItemMaxOrderByAggregateInputSchema: () => InventoryItemMaxOrderByAggregateInputSchema,
  InventoryItemMinOrderByAggregateInputSchema: () => InventoryItemMinOrderByAggregateInputSchema,
  InventoryItemOrderByRelationAggregateInputSchema: () => InventoryItemOrderByRelationAggregateInputSchema,
  InventoryItemOrderByWithAggregationInputSchema: () => InventoryItemOrderByWithAggregationInputSchema,
  InventoryItemOrderByWithRelationInputSchema: () => InventoryItemOrderByWithRelationInputSchema,
  InventoryItemRelationFilterSchema: () => InventoryItemRelationFilterSchema,
  InventoryItemScalarFieldEnumSchema: () => InventoryItemScalarFieldEnumSchema,
  InventoryItemScalarWhereInputSchema: () => InventoryItemScalarWhereInputSchema,
  InventoryItemScalarWhereWithAggregatesInputSchema: () => InventoryItemScalarWhereWithAggregatesInputSchema,
  InventoryItemSchema: () => InventoryItemSchema,
  InventoryItemSelectSchema: () => InventoryItemSelectSchema,
  InventoryItemSumOrderByAggregateInputSchema: () => InventoryItemSumOrderByAggregateInputSchema,
  InventoryItemUncheckedCreateInputSchema: () => InventoryItemUncheckedCreateInputSchema,
  InventoryItemUncheckedCreateNestedManyWithoutIngredientInputSchema: () => InventoryItemUncheckedCreateNestedManyWithoutIngredientInputSchema,
  InventoryItemUncheckedCreateNestedManyWithoutInventoryInputSchema: () => InventoryItemUncheckedCreateNestedManyWithoutInventoryInputSchema,
  InventoryItemUncheckedCreateNestedManyWithoutLastUpdatedByInputSchema: () => InventoryItemUncheckedCreateNestedManyWithoutLastUpdatedByInputSchema,
  InventoryItemUncheckedCreateWithoutIngredientInputSchema: () => InventoryItemUncheckedCreateWithoutIngredientInputSchema,
  InventoryItemUncheckedCreateWithoutInventoryInputSchema: () => InventoryItemUncheckedCreateWithoutInventoryInputSchema,
  InventoryItemUncheckedCreateWithoutInventoryWithdrawalInputSchema: () => InventoryItemUncheckedCreateWithoutInventoryWithdrawalInputSchema,
  InventoryItemUncheckedCreateWithoutLastUpdatedByInputSchema: () => InventoryItemUncheckedCreateWithoutLastUpdatedByInputSchema,
  InventoryItemUncheckedUpdateInputSchema: () => InventoryItemUncheckedUpdateInputSchema,
  InventoryItemUncheckedUpdateManyInputSchema: () => InventoryItemUncheckedUpdateManyInputSchema,
  InventoryItemUncheckedUpdateManyWithoutIngredientInputSchema: () => InventoryItemUncheckedUpdateManyWithoutIngredientInputSchema,
  InventoryItemUncheckedUpdateManyWithoutIngredientNestedInputSchema: () => InventoryItemUncheckedUpdateManyWithoutIngredientNestedInputSchema,
  InventoryItemUncheckedUpdateManyWithoutInventoryInputSchema: () => InventoryItemUncheckedUpdateManyWithoutInventoryInputSchema,
  InventoryItemUncheckedUpdateManyWithoutInventoryNestedInputSchema: () => InventoryItemUncheckedUpdateManyWithoutInventoryNestedInputSchema,
  InventoryItemUncheckedUpdateManyWithoutLastUpdatedByInputSchema: () => InventoryItemUncheckedUpdateManyWithoutLastUpdatedByInputSchema,
  InventoryItemUncheckedUpdateManyWithoutLastUpdatedByNestedInputSchema: () => InventoryItemUncheckedUpdateManyWithoutLastUpdatedByNestedInputSchema,
  InventoryItemUncheckedUpdateWithoutIngredientInputSchema: () => InventoryItemUncheckedUpdateWithoutIngredientInputSchema,
  InventoryItemUncheckedUpdateWithoutInventoryInputSchema: () => InventoryItemUncheckedUpdateWithoutInventoryInputSchema,
  InventoryItemUncheckedUpdateWithoutInventoryWithdrawalInputSchema: () => InventoryItemUncheckedUpdateWithoutInventoryWithdrawalInputSchema,
  InventoryItemUncheckedUpdateWithoutLastUpdatedByInputSchema: () => InventoryItemUncheckedUpdateWithoutLastUpdatedByInputSchema,
  InventoryItemUpdateArgsSchema: () => InventoryItemUpdateArgsSchema,
  InventoryItemUpdateInputSchema: () => InventoryItemUpdateInputSchema,
  InventoryItemUpdateManyArgsSchema: () => InventoryItemUpdateManyArgsSchema,
  InventoryItemUpdateManyMutationInputSchema: () => InventoryItemUpdateManyMutationInputSchema,
  InventoryItemUpdateManyWithWhereWithoutIngredientInputSchema: () => InventoryItemUpdateManyWithWhereWithoutIngredientInputSchema,
  InventoryItemUpdateManyWithWhereWithoutInventoryInputSchema: () => InventoryItemUpdateManyWithWhereWithoutInventoryInputSchema,
  InventoryItemUpdateManyWithWhereWithoutLastUpdatedByInputSchema: () => InventoryItemUpdateManyWithWhereWithoutLastUpdatedByInputSchema,
  InventoryItemUpdateManyWithoutIngredientNestedInputSchema: () => InventoryItemUpdateManyWithoutIngredientNestedInputSchema,
  InventoryItemUpdateManyWithoutInventoryNestedInputSchema: () => InventoryItemUpdateManyWithoutInventoryNestedInputSchema,
  InventoryItemUpdateManyWithoutLastUpdatedByNestedInputSchema: () => InventoryItemUpdateManyWithoutLastUpdatedByNestedInputSchema,
  InventoryItemUpdateOneRequiredWithoutInventoryWithdrawalNestedInputSchema: () => InventoryItemUpdateOneRequiredWithoutInventoryWithdrawalNestedInputSchema,
  InventoryItemUpdateToOneWithWhereWithoutInventoryWithdrawalInputSchema: () => InventoryItemUpdateToOneWithWhereWithoutInventoryWithdrawalInputSchema,
  InventoryItemUpdateWithWhereUniqueWithoutIngredientInputSchema: () => InventoryItemUpdateWithWhereUniqueWithoutIngredientInputSchema,
  InventoryItemUpdateWithWhereUniqueWithoutInventoryInputSchema: () => InventoryItemUpdateWithWhereUniqueWithoutInventoryInputSchema,
  InventoryItemUpdateWithWhereUniqueWithoutLastUpdatedByInputSchema: () => InventoryItemUpdateWithWhereUniqueWithoutLastUpdatedByInputSchema,
  InventoryItemUpdateWithoutIngredientInputSchema: () => InventoryItemUpdateWithoutIngredientInputSchema,
  InventoryItemUpdateWithoutInventoryInputSchema: () => InventoryItemUpdateWithoutInventoryInputSchema,
  InventoryItemUpdateWithoutInventoryWithdrawalInputSchema: () => InventoryItemUpdateWithoutInventoryWithdrawalInputSchema,
  InventoryItemUpdateWithoutLastUpdatedByInputSchema: () => InventoryItemUpdateWithoutLastUpdatedByInputSchema,
  InventoryItemUpsertArgsSchema: () => InventoryItemUpsertArgsSchema,
  InventoryItemUpsertWithWhereUniqueWithoutIngredientInputSchema: () => InventoryItemUpsertWithWhereUniqueWithoutIngredientInputSchema,
  InventoryItemUpsertWithWhereUniqueWithoutInventoryInputSchema: () => InventoryItemUpsertWithWhereUniqueWithoutInventoryInputSchema,
  InventoryItemUpsertWithWhereUniqueWithoutLastUpdatedByInputSchema: () => InventoryItemUpsertWithWhereUniqueWithoutLastUpdatedByInputSchema,
  InventoryItemUpsertWithoutInventoryWithdrawalInputSchema: () => InventoryItemUpsertWithoutInventoryWithdrawalInputSchema,
  InventoryItemWhereInputSchema: () => InventoryItemWhereInputSchema,
  InventoryItemWhereUniqueInputSchema: () => InventoryItemWhereUniqueInputSchema,
  InventoryMaxOrderByAggregateInputSchema: () => InventoryMaxOrderByAggregateInputSchema,
  InventoryMinOrderByAggregateInputSchema: () => InventoryMinOrderByAggregateInputSchema,
  InventoryNullableRelationFilterSchema: () => InventoryNullableRelationFilterSchema,
  InventoryOrderByWithAggregationInputSchema: () => InventoryOrderByWithAggregationInputSchema,
  InventoryOrderByWithRelationInputSchema: () => InventoryOrderByWithRelationInputSchema,
  InventoryRelationFilterSchema: () => InventoryRelationFilterSchema,
  InventoryScalarFieldEnumSchema: () => InventoryScalarFieldEnumSchema,
  InventoryScalarWhereWithAggregatesInputSchema: () => InventoryScalarWhereWithAggregatesInputSchema,
  InventorySchema: () => InventorySchema,
  InventorySelectSchema: () => InventorySelectSchema,
  InventorySumOrderByAggregateInputSchema: () => InventorySumOrderByAggregateInputSchema,
  InventoryUncheckedCreateInputSchema: () => InventoryUncheckedCreateInputSchema,
  InventoryUncheckedCreateNestedOneWithoutRestaurantInputSchema: () => InventoryUncheckedCreateNestedOneWithoutRestaurantInputSchema,
  InventoryUncheckedCreateWithoutItemsInputSchema: () => InventoryUncheckedCreateWithoutItemsInputSchema,
  InventoryUncheckedCreateWithoutRestaurantInputSchema: () => InventoryUncheckedCreateWithoutRestaurantInputSchema,
  InventoryUncheckedUpdateInputSchema: () => InventoryUncheckedUpdateInputSchema,
  InventoryUncheckedUpdateManyInputSchema: () => InventoryUncheckedUpdateManyInputSchema,
  InventoryUncheckedUpdateOneWithoutRestaurantNestedInputSchema: () => InventoryUncheckedUpdateOneWithoutRestaurantNestedInputSchema,
  InventoryUncheckedUpdateWithoutItemsInputSchema: () => InventoryUncheckedUpdateWithoutItemsInputSchema,
  InventoryUncheckedUpdateWithoutRestaurantInputSchema: () => InventoryUncheckedUpdateWithoutRestaurantInputSchema,
  InventoryUpdateArgsSchema: () => InventoryUpdateArgsSchema,
  InventoryUpdateInputSchema: () => InventoryUpdateInputSchema,
  InventoryUpdateManyArgsSchema: () => InventoryUpdateManyArgsSchema,
  InventoryUpdateManyMutationInputSchema: () => InventoryUpdateManyMutationInputSchema,
  InventoryUpdateOneRequiredWithoutItemsNestedInputSchema: () => InventoryUpdateOneRequiredWithoutItemsNestedInputSchema,
  InventoryUpdateOneWithoutRestaurantNestedInputSchema: () => InventoryUpdateOneWithoutRestaurantNestedInputSchema,
  InventoryUpdateToOneWithWhereWithoutItemsInputSchema: () => InventoryUpdateToOneWithWhereWithoutItemsInputSchema,
  InventoryUpdateToOneWithWhereWithoutRestaurantInputSchema: () => InventoryUpdateToOneWithWhereWithoutRestaurantInputSchema,
  InventoryUpdateWithoutItemsInputSchema: () => InventoryUpdateWithoutItemsInputSchema,
  InventoryUpdateWithoutRestaurantInputSchema: () => InventoryUpdateWithoutRestaurantInputSchema,
  InventoryUpsertArgsSchema: () => InventoryUpsertArgsSchema,
  InventoryUpsertWithoutItemsInputSchema: () => InventoryUpsertWithoutItemsInputSchema,
  InventoryUpsertWithoutRestaurantInputSchema: () => InventoryUpsertWithoutRestaurantInputSchema,
  InventoryWhereInputSchema: () => InventoryWhereInputSchema,
  InventoryWhereUniqueInputSchema: () => InventoryWhereUniqueInputSchema,
  InventoryWithdrawalAggregateArgsSchema: () => InventoryWithdrawalAggregateArgsSchema,
  InventoryWithdrawalArgsSchema: () => InventoryWithdrawalArgsSchema,
  InventoryWithdrawalAvgOrderByAggregateInputSchema: () => InventoryWithdrawalAvgOrderByAggregateInputSchema,
  InventoryWithdrawalCountOrderByAggregateInputSchema: () => InventoryWithdrawalCountOrderByAggregateInputSchema,
  InventoryWithdrawalCreateArgsSchema: () => InventoryWithdrawalCreateArgsSchema,
  InventoryWithdrawalCreateInputSchema: () => InventoryWithdrawalCreateInputSchema,
  InventoryWithdrawalCreateManyAndReturnArgsSchema: () => InventoryWithdrawalCreateManyAndReturnArgsSchema,
  InventoryWithdrawalCreateManyArgsSchema: () => InventoryWithdrawalCreateManyArgsSchema,
  InventoryWithdrawalCreateManyCreatedByInputEnvelopeSchema: () => InventoryWithdrawalCreateManyCreatedByInputEnvelopeSchema,
  InventoryWithdrawalCreateManyCreatedByInputSchema: () => InventoryWithdrawalCreateManyCreatedByInputSchema,
  InventoryWithdrawalCreateManyInputSchema: () => InventoryWithdrawalCreateManyInputSchema,
  InventoryWithdrawalCreateManyInventoryItemInputEnvelopeSchema: () => InventoryWithdrawalCreateManyInventoryItemInputEnvelopeSchema,
  InventoryWithdrawalCreateManyInventoryItemInputSchema: () => InventoryWithdrawalCreateManyInventoryItemInputSchema,
  InventoryWithdrawalCreateManyRecipeInputEnvelopeSchema: () => InventoryWithdrawalCreateManyRecipeInputEnvelopeSchema,
  InventoryWithdrawalCreateManyRecipeInputSchema: () => InventoryWithdrawalCreateManyRecipeInputSchema,
  InventoryWithdrawalCreateNestedManyWithoutCreatedByInputSchema: () => InventoryWithdrawalCreateNestedManyWithoutCreatedByInputSchema,
  InventoryWithdrawalCreateNestedManyWithoutInventoryItemInputSchema: () => InventoryWithdrawalCreateNestedManyWithoutInventoryItemInputSchema,
  InventoryWithdrawalCreateNestedManyWithoutRecipeInputSchema: () => InventoryWithdrawalCreateNestedManyWithoutRecipeInputSchema,
  InventoryWithdrawalCreateOrConnectWithoutCreatedByInputSchema: () => InventoryWithdrawalCreateOrConnectWithoutCreatedByInputSchema,
  InventoryWithdrawalCreateOrConnectWithoutInventoryItemInputSchema: () => InventoryWithdrawalCreateOrConnectWithoutInventoryItemInputSchema,
  InventoryWithdrawalCreateOrConnectWithoutRecipeInputSchema: () => InventoryWithdrawalCreateOrConnectWithoutRecipeInputSchema,
  InventoryWithdrawalCreateWithoutCreatedByInputSchema: () => InventoryWithdrawalCreateWithoutCreatedByInputSchema,
  InventoryWithdrawalCreateWithoutInventoryItemInputSchema: () => InventoryWithdrawalCreateWithoutInventoryItemInputSchema,
  InventoryWithdrawalCreateWithoutRecipeInputSchema: () => InventoryWithdrawalCreateWithoutRecipeInputSchema,
  InventoryWithdrawalDeleteArgsSchema: () => InventoryWithdrawalDeleteArgsSchema,
  InventoryWithdrawalDeleteManyArgsSchema: () => InventoryWithdrawalDeleteManyArgsSchema,
  InventoryWithdrawalFindFirstArgsSchema: () => InventoryWithdrawalFindFirstArgsSchema,
  InventoryWithdrawalFindFirstOrThrowArgsSchema: () => InventoryWithdrawalFindFirstOrThrowArgsSchema,
  InventoryWithdrawalFindManyArgsSchema: () => InventoryWithdrawalFindManyArgsSchema,
  InventoryWithdrawalFindUniqueArgsSchema: () => InventoryWithdrawalFindUniqueArgsSchema,
  InventoryWithdrawalFindUniqueOrThrowArgsSchema: () => InventoryWithdrawalFindUniqueOrThrowArgsSchema,
  InventoryWithdrawalGroupByArgsSchema: () => InventoryWithdrawalGroupByArgsSchema,
  InventoryWithdrawalIncludeSchema: () => InventoryWithdrawalIncludeSchema,
  InventoryWithdrawalListRelationFilterSchema: () => InventoryWithdrawalListRelationFilterSchema,
  InventoryWithdrawalMaxOrderByAggregateInputSchema: () => InventoryWithdrawalMaxOrderByAggregateInputSchema,
  InventoryWithdrawalMinOrderByAggregateInputSchema: () => InventoryWithdrawalMinOrderByAggregateInputSchema,
  InventoryWithdrawalOrderByRelationAggregateInputSchema: () => InventoryWithdrawalOrderByRelationAggregateInputSchema,
  InventoryWithdrawalOrderByWithAggregationInputSchema: () => InventoryWithdrawalOrderByWithAggregationInputSchema,
  InventoryWithdrawalOrderByWithRelationInputSchema: () => InventoryWithdrawalOrderByWithRelationInputSchema,
  InventoryWithdrawalScalarFieldEnumSchema: () => InventoryWithdrawalScalarFieldEnumSchema,
  InventoryWithdrawalScalarWhereInputSchema: () => InventoryWithdrawalScalarWhereInputSchema,
  InventoryWithdrawalScalarWhereWithAggregatesInputSchema: () => InventoryWithdrawalScalarWhereWithAggregatesInputSchema,
  InventoryWithdrawalSchema: () => InventoryWithdrawalSchema,
  InventoryWithdrawalSelectSchema: () => InventoryWithdrawalSelectSchema,
  InventoryWithdrawalSumOrderByAggregateInputSchema: () => InventoryWithdrawalSumOrderByAggregateInputSchema,
  InventoryWithdrawalUncheckedCreateInputSchema: () => InventoryWithdrawalUncheckedCreateInputSchema,
  InventoryWithdrawalUncheckedCreateNestedManyWithoutCreatedByInputSchema: () => InventoryWithdrawalUncheckedCreateNestedManyWithoutCreatedByInputSchema,
  InventoryWithdrawalUncheckedCreateNestedManyWithoutInventoryItemInputSchema: () => InventoryWithdrawalUncheckedCreateNestedManyWithoutInventoryItemInputSchema,
  InventoryWithdrawalUncheckedCreateNestedManyWithoutRecipeInputSchema: () => InventoryWithdrawalUncheckedCreateNestedManyWithoutRecipeInputSchema,
  InventoryWithdrawalUncheckedCreateWithoutCreatedByInputSchema: () => InventoryWithdrawalUncheckedCreateWithoutCreatedByInputSchema,
  InventoryWithdrawalUncheckedCreateWithoutInventoryItemInputSchema: () => InventoryWithdrawalUncheckedCreateWithoutInventoryItemInputSchema,
  InventoryWithdrawalUncheckedCreateWithoutRecipeInputSchema: () => InventoryWithdrawalUncheckedCreateWithoutRecipeInputSchema,
  InventoryWithdrawalUncheckedUpdateInputSchema: () => InventoryWithdrawalUncheckedUpdateInputSchema,
  InventoryWithdrawalUncheckedUpdateManyInputSchema: () => InventoryWithdrawalUncheckedUpdateManyInputSchema,
  InventoryWithdrawalUncheckedUpdateManyWithoutCreatedByInputSchema: () => InventoryWithdrawalUncheckedUpdateManyWithoutCreatedByInputSchema,
  InventoryWithdrawalUncheckedUpdateManyWithoutCreatedByNestedInputSchema: () => InventoryWithdrawalUncheckedUpdateManyWithoutCreatedByNestedInputSchema,
  InventoryWithdrawalUncheckedUpdateManyWithoutInventoryItemInputSchema: () => InventoryWithdrawalUncheckedUpdateManyWithoutInventoryItemInputSchema,
  InventoryWithdrawalUncheckedUpdateManyWithoutInventoryItemNestedInputSchema: () => InventoryWithdrawalUncheckedUpdateManyWithoutInventoryItemNestedInputSchema,
  InventoryWithdrawalUncheckedUpdateManyWithoutRecipeInputSchema: () => InventoryWithdrawalUncheckedUpdateManyWithoutRecipeInputSchema,
  InventoryWithdrawalUncheckedUpdateManyWithoutRecipeNestedInputSchema: () => InventoryWithdrawalUncheckedUpdateManyWithoutRecipeNestedInputSchema,
  InventoryWithdrawalUncheckedUpdateWithoutCreatedByInputSchema: () => InventoryWithdrawalUncheckedUpdateWithoutCreatedByInputSchema,
  InventoryWithdrawalUncheckedUpdateWithoutInventoryItemInputSchema: () => InventoryWithdrawalUncheckedUpdateWithoutInventoryItemInputSchema,
  InventoryWithdrawalUncheckedUpdateWithoutRecipeInputSchema: () => InventoryWithdrawalUncheckedUpdateWithoutRecipeInputSchema,
  InventoryWithdrawalUpdateArgsSchema: () => InventoryWithdrawalUpdateArgsSchema,
  InventoryWithdrawalUpdateInputSchema: () => InventoryWithdrawalUpdateInputSchema,
  InventoryWithdrawalUpdateManyArgsSchema: () => InventoryWithdrawalUpdateManyArgsSchema,
  InventoryWithdrawalUpdateManyMutationInputSchema: () => InventoryWithdrawalUpdateManyMutationInputSchema,
  InventoryWithdrawalUpdateManyWithWhereWithoutCreatedByInputSchema: () => InventoryWithdrawalUpdateManyWithWhereWithoutCreatedByInputSchema,
  InventoryWithdrawalUpdateManyWithWhereWithoutInventoryItemInputSchema: () => InventoryWithdrawalUpdateManyWithWhereWithoutInventoryItemInputSchema,
  InventoryWithdrawalUpdateManyWithWhereWithoutRecipeInputSchema: () => InventoryWithdrawalUpdateManyWithWhereWithoutRecipeInputSchema,
  InventoryWithdrawalUpdateManyWithoutCreatedByNestedInputSchema: () => InventoryWithdrawalUpdateManyWithoutCreatedByNestedInputSchema,
  InventoryWithdrawalUpdateManyWithoutInventoryItemNestedInputSchema: () => InventoryWithdrawalUpdateManyWithoutInventoryItemNestedInputSchema,
  InventoryWithdrawalUpdateManyWithoutRecipeNestedInputSchema: () => InventoryWithdrawalUpdateManyWithoutRecipeNestedInputSchema,
  InventoryWithdrawalUpdateWithWhereUniqueWithoutCreatedByInputSchema: () => InventoryWithdrawalUpdateWithWhereUniqueWithoutCreatedByInputSchema,
  InventoryWithdrawalUpdateWithWhereUniqueWithoutInventoryItemInputSchema: () => InventoryWithdrawalUpdateWithWhereUniqueWithoutInventoryItemInputSchema,
  InventoryWithdrawalUpdateWithWhereUniqueWithoutRecipeInputSchema: () => InventoryWithdrawalUpdateWithWhereUniqueWithoutRecipeInputSchema,
  InventoryWithdrawalUpdateWithoutCreatedByInputSchema: () => InventoryWithdrawalUpdateWithoutCreatedByInputSchema,
  InventoryWithdrawalUpdateWithoutInventoryItemInputSchema: () => InventoryWithdrawalUpdateWithoutInventoryItemInputSchema,
  InventoryWithdrawalUpdateWithoutRecipeInputSchema: () => InventoryWithdrawalUpdateWithoutRecipeInputSchema,
  InventoryWithdrawalUpsertArgsSchema: () => InventoryWithdrawalUpsertArgsSchema,
  InventoryWithdrawalUpsertWithWhereUniqueWithoutCreatedByInputSchema: () => InventoryWithdrawalUpsertWithWhereUniqueWithoutCreatedByInputSchema,
  InventoryWithdrawalUpsertWithWhereUniqueWithoutInventoryItemInputSchema: () => InventoryWithdrawalUpsertWithWhereUniqueWithoutInventoryItemInputSchema,
  InventoryWithdrawalUpsertWithWhereUniqueWithoutRecipeInputSchema: () => InventoryWithdrawalUpsertWithWhereUniqueWithoutRecipeInputSchema,
  InventoryWithdrawalWhereInputSchema: () => InventoryWithdrawalWhereInputSchema,
  InventoryWithdrawalWhereUniqueInputSchema: () => InventoryWithdrawalWhereUniqueInputSchema,
  LeftoverItemAggregateArgsSchema: () => LeftoverItemAggregateArgsSchema,
  LeftoverItemArgsSchema: () => LeftoverItemArgsSchema,
  LeftoverItemAvgOrderByAggregateInputSchema: () => LeftoverItemAvgOrderByAggregateInputSchema,
  LeftoverItemCountOrderByAggregateInputSchema: () => LeftoverItemCountOrderByAggregateInputSchema,
  LeftoverItemCreateArgsSchema: () => LeftoverItemCreateArgsSchema,
  LeftoverItemCreateInputSchema: () => LeftoverItemCreateInputSchema,
  LeftoverItemCreateManyAndReturnArgsSchema: () => LeftoverItemCreateManyAndReturnArgsSchema,
  LeftoverItemCreateManyArgsSchema: () => LeftoverItemCreateManyArgsSchema,
  LeftoverItemCreateManyInputSchema: () => LeftoverItemCreateManyInputSchema,
  LeftoverItemCreateManyMenuItemInputEnvelopeSchema: () => LeftoverItemCreateManyMenuItemInputEnvelopeSchema,
  LeftoverItemCreateManyMenuItemInputSchema: () => LeftoverItemCreateManyMenuItemInputSchema,
  LeftoverItemCreateManyRecordedByInputEnvelopeSchema: () => LeftoverItemCreateManyRecordedByInputEnvelopeSchema,
  LeftoverItemCreateManyRecordedByInputSchema: () => LeftoverItemCreateManyRecordedByInputSchema,
  LeftoverItemCreateManyRestaurantInputEnvelopeSchema: () => LeftoverItemCreateManyRestaurantInputEnvelopeSchema,
  LeftoverItemCreateManyRestaurantInputSchema: () => LeftoverItemCreateManyRestaurantInputSchema,
  LeftoverItemCreateNestedManyWithoutMenuItemInputSchema: () => LeftoverItemCreateNestedManyWithoutMenuItemInputSchema,
  LeftoverItemCreateNestedManyWithoutRecordedByInputSchema: () => LeftoverItemCreateNestedManyWithoutRecordedByInputSchema,
  LeftoverItemCreateNestedManyWithoutRestaurantInputSchema: () => LeftoverItemCreateNestedManyWithoutRestaurantInputSchema,
  LeftoverItemCreateOrConnectWithoutMenuItemInputSchema: () => LeftoverItemCreateOrConnectWithoutMenuItemInputSchema,
  LeftoverItemCreateOrConnectWithoutRecordedByInputSchema: () => LeftoverItemCreateOrConnectWithoutRecordedByInputSchema,
  LeftoverItemCreateOrConnectWithoutRestaurantInputSchema: () => LeftoverItemCreateOrConnectWithoutRestaurantInputSchema,
  LeftoverItemCreateWithoutMenuItemInputSchema: () => LeftoverItemCreateWithoutMenuItemInputSchema,
  LeftoverItemCreateWithoutRecordedByInputSchema: () => LeftoverItemCreateWithoutRecordedByInputSchema,
  LeftoverItemCreateWithoutRestaurantInputSchema: () => LeftoverItemCreateWithoutRestaurantInputSchema,
  LeftoverItemDeleteArgsSchema: () => LeftoverItemDeleteArgsSchema,
  LeftoverItemDeleteManyArgsSchema: () => LeftoverItemDeleteManyArgsSchema,
  LeftoverItemFindFirstArgsSchema: () => LeftoverItemFindFirstArgsSchema,
  LeftoverItemFindFirstOrThrowArgsSchema: () => LeftoverItemFindFirstOrThrowArgsSchema,
  LeftoverItemFindManyArgsSchema: () => LeftoverItemFindManyArgsSchema,
  LeftoverItemFindUniqueArgsSchema: () => LeftoverItemFindUniqueArgsSchema,
  LeftoverItemFindUniqueOrThrowArgsSchema: () => LeftoverItemFindUniqueOrThrowArgsSchema,
  LeftoverItemGroupByArgsSchema: () => LeftoverItemGroupByArgsSchema,
  LeftoverItemIncludeSchema: () => LeftoverItemIncludeSchema,
  LeftoverItemListRelationFilterSchema: () => LeftoverItemListRelationFilterSchema,
  LeftoverItemMaxOrderByAggregateInputSchema: () => LeftoverItemMaxOrderByAggregateInputSchema,
  LeftoverItemMinOrderByAggregateInputSchema: () => LeftoverItemMinOrderByAggregateInputSchema,
  LeftoverItemOrderByRelationAggregateInputSchema: () => LeftoverItemOrderByRelationAggregateInputSchema,
  LeftoverItemOrderByWithAggregationInputSchema: () => LeftoverItemOrderByWithAggregationInputSchema,
  LeftoverItemOrderByWithRelationInputSchema: () => LeftoverItemOrderByWithRelationInputSchema,
  LeftoverItemScalarFieldEnumSchema: () => LeftoverItemScalarFieldEnumSchema,
  LeftoverItemScalarWhereInputSchema: () => LeftoverItemScalarWhereInputSchema,
  LeftoverItemScalarWhereWithAggregatesInputSchema: () => LeftoverItemScalarWhereWithAggregatesInputSchema,
  LeftoverItemSchema: () => LeftoverItemSchema,
  LeftoverItemSelectSchema: () => LeftoverItemSelectSchema,
  LeftoverItemSumOrderByAggregateInputSchema: () => LeftoverItemSumOrderByAggregateInputSchema,
  LeftoverItemUncheckedCreateInputSchema: () => LeftoverItemUncheckedCreateInputSchema,
  LeftoverItemUncheckedCreateNestedManyWithoutMenuItemInputSchema: () => LeftoverItemUncheckedCreateNestedManyWithoutMenuItemInputSchema,
  LeftoverItemUncheckedCreateNestedManyWithoutRecordedByInputSchema: () => LeftoverItemUncheckedCreateNestedManyWithoutRecordedByInputSchema,
  LeftoverItemUncheckedCreateNestedManyWithoutRestaurantInputSchema: () => LeftoverItemUncheckedCreateNestedManyWithoutRestaurantInputSchema,
  LeftoverItemUncheckedCreateWithoutMenuItemInputSchema: () => LeftoverItemUncheckedCreateWithoutMenuItemInputSchema,
  LeftoverItemUncheckedCreateWithoutRecordedByInputSchema: () => LeftoverItemUncheckedCreateWithoutRecordedByInputSchema,
  LeftoverItemUncheckedCreateWithoutRestaurantInputSchema: () => LeftoverItemUncheckedCreateWithoutRestaurantInputSchema,
  LeftoverItemUncheckedUpdateInputSchema: () => LeftoverItemUncheckedUpdateInputSchema,
  LeftoverItemUncheckedUpdateManyInputSchema: () => LeftoverItemUncheckedUpdateManyInputSchema,
  LeftoverItemUncheckedUpdateManyWithoutMenuItemInputSchema: () => LeftoverItemUncheckedUpdateManyWithoutMenuItemInputSchema,
  LeftoverItemUncheckedUpdateManyWithoutMenuItemNestedInputSchema: () => LeftoverItemUncheckedUpdateManyWithoutMenuItemNestedInputSchema,
  LeftoverItemUncheckedUpdateManyWithoutRecordedByInputSchema: () => LeftoverItemUncheckedUpdateManyWithoutRecordedByInputSchema,
  LeftoverItemUncheckedUpdateManyWithoutRecordedByNestedInputSchema: () => LeftoverItemUncheckedUpdateManyWithoutRecordedByNestedInputSchema,
  LeftoverItemUncheckedUpdateManyWithoutRestaurantInputSchema: () => LeftoverItemUncheckedUpdateManyWithoutRestaurantInputSchema,
  LeftoverItemUncheckedUpdateManyWithoutRestaurantNestedInputSchema: () => LeftoverItemUncheckedUpdateManyWithoutRestaurantNestedInputSchema,
  LeftoverItemUncheckedUpdateWithoutMenuItemInputSchema: () => LeftoverItemUncheckedUpdateWithoutMenuItemInputSchema,
  LeftoverItemUncheckedUpdateWithoutRecordedByInputSchema: () => LeftoverItemUncheckedUpdateWithoutRecordedByInputSchema,
  LeftoverItemUncheckedUpdateWithoutRestaurantInputSchema: () => LeftoverItemUncheckedUpdateWithoutRestaurantInputSchema,
  LeftoverItemUpdateArgsSchema: () => LeftoverItemUpdateArgsSchema,
  LeftoverItemUpdateInputSchema: () => LeftoverItemUpdateInputSchema,
  LeftoverItemUpdateManyArgsSchema: () => LeftoverItemUpdateManyArgsSchema,
  LeftoverItemUpdateManyMutationInputSchema: () => LeftoverItemUpdateManyMutationInputSchema,
  LeftoverItemUpdateManyWithWhereWithoutMenuItemInputSchema: () => LeftoverItemUpdateManyWithWhereWithoutMenuItemInputSchema,
  LeftoverItemUpdateManyWithWhereWithoutRecordedByInputSchema: () => LeftoverItemUpdateManyWithWhereWithoutRecordedByInputSchema,
  LeftoverItemUpdateManyWithWhereWithoutRestaurantInputSchema: () => LeftoverItemUpdateManyWithWhereWithoutRestaurantInputSchema,
  LeftoverItemUpdateManyWithoutMenuItemNestedInputSchema: () => LeftoverItemUpdateManyWithoutMenuItemNestedInputSchema,
  LeftoverItemUpdateManyWithoutRecordedByNestedInputSchema: () => LeftoverItemUpdateManyWithoutRecordedByNestedInputSchema,
  LeftoverItemUpdateManyWithoutRestaurantNestedInputSchema: () => LeftoverItemUpdateManyWithoutRestaurantNestedInputSchema,
  LeftoverItemUpdateWithWhereUniqueWithoutMenuItemInputSchema: () => LeftoverItemUpdateWithWhereUniqueWithoutMenuItemInputSchema,
  LeftoverItemUpdateWithWhereUniqueWithoutRecordedByInputSchema: () => LeftoverItemUpdateWithWhereUniqueWithoutRecordedByInputSchema,
  LeftoverItemUpdateWithWhereUniqueWithoutRestaurantInputSchema: () => LeftoverItemUpdateWithWhereUniqueWithoutRestaurantInputSchema,
  LeftoverItemUpdateWithoutMenuItemInputSchema: () => LeftoverItemUpdateWithoutMenuItemInputSchema,
  LeftoverItemUpdateWithoutRecordedByInputSchema: () => LeftoverItemUpdateWithoutRecordedByInputSchema,
  LeftoverItemUpdateWithoutRestaurantInputSchema: () => LeftoverItemUpdateWithoutRestaurantInputSchema,
  LeftoverItemUpsertArgsSchema: () => LeftoverItemUpsertArgsSchema,
  LeftoverItemUpsertWithWhereUniqueWithoutMenuItemInputSchema: () => LeftoverItemUpsertWithWhereUniqueWithoutMenuItemInputSchema,
  LeftoverItemUpsertWithWhereUniqueWithoutRecordedByInputSchema: () => LeftoverItemUpsertWithWhereUniqueWithoutRecordedByInputSchema,
  LeftoverItemUpsertWithWhereUniqueWithoutRestaurantInputSchema: () => LeftoverItemUpsertWithWhereUniqueWithoutRestaurantInputSchema,
  LeftoverItemWhereInputSchema: () => LeftoverItemWhereInputSchema,
  LeftoverItemWhereUniqueInputSchema: () => LeftoverItemWhereUniqueInputSchema,
  MaintenanceLogAggregateArgsSchema: () => MaintenanceLogAggregateArgsSchema,
  MaintenanceLogArgsSchema: () => MaintenanceLogArgsSchema,
  MaintenanceLogAvgOrderByAggregateInputSchema: () => MaintenanceLogAvgOrderByAggregateInputSchema,
  MaintenanceLogCountOrderByAggregateInputSchema: () => MaintenanceLogCountOrderByAggregateInputSchema,
  MaintenanceLogCreateArgsSchema: () => MaintenanceLogCreateArgsSchema,
  MaintenanceLogCreateInputSchema: () => MaintenanceLogCreateInputSchema,
  MaintenanceLogCreateManyAndReturnArgsSchema: () => MaintenanceLogCreateManyAndReturnArgsSchema,
  MaintenanceLogCreateManyArgsSchema: () => MaintenanceLogCreateManyArgsSchema,
  MaintenanceLogCreateManyEquipmentInputEnvelopeSchema: () => MaintenanceLogCreateManyEquipmentInputEnvelopeSchema,
  MaintenanceLogCreateManyEquipmentInputSchema: () => MaintenanceLogCreateManyEquipmentInputSchema,
  MaintenanceLogCreateManyInputSchema: () => MaintenanceLogCreateManyInputSchema,
  MaintenanceLogCreateNestedManyWithoutEquipmentInputSchema: () => MaintenanceLogCreateNestedManyWithoutEquipmentInputSchema,
  MaintenanceLogCreateOrConnectWithoutEquipmentInputSchema: () => MaintenanceLogCreateOrConnectWithoutEquipmentInputSchema,
  MaintenanceLogCreateWithoutEquipmentInputSchema: () => MaintenanceLogCreateWithoutEquipmentInputSchema,
  MaintenanceLogDeleteArgsSchema: () => MaintenanceLogDeleteArgsSchema,
  MaintenanceLogDeleteManyArgsSchema: () => MaintenanceLogDeleteManyArgsSchema,
  MaintenanceLogFindFirstArgsSchema: () => MaintenanceLogFindFirstArgsSchema,
  MaintenanceLogFindFirstOrThrowArgsSchema: () => MaintenanceLogFindFirstOrThrowArgsSchema,
  MaintenanceLogFindManyArgsSchema: () => MaintenanceLogFindManyArgsSchema,
  MaintenanceLogFindUniqueArgsSchema: () => MaintenanceLogFindUniqueArgsSchema,
  MaintenanceLogFindUniqueOrThrowArgsSchema: () => MaintenanceLogFindUniqueOrThrowArgsSchema,
  MaintenanceLogGroupByArgsSchema: () => MaintenanceLogGroupByArgsSchema,
  MaintenanceLogIncludeSchema: () => MaintenanceLogIncludeSchema,
  MaintenanceLogListRelationFilterSchema: () => MaintenanceLogListRelationFilterSchema,
  MaintenanceLogMaxOrderByAggregateInputSchema: () => MaintenanceLogMaxOrderByAggregateInputSchema,
  MaintenanceLogMinOrderByAggregateInputSchema: () => MaintenanceLogMinOrderByAggregateInputSchema,
  MaintenanceLogOrderByRelationAggregateInputSchema: () => MaintenanceLogOrderByRelationAggregateInputSchema,
  MaintenanceLogOrderByWithAggregationInputSchema: () => MaintenanceLogOrderByWithAggregationInputSchema,
  MaintenanceLogOrderByWithRelationInputSchema: () => MaintenanceLogOrderByWithRelationInputSchema,
  MaintenanceLogScalarFieldEnumSchema: () => MaintenanceLogScalarFieldEnumSchema,
  MaintenanceLogScalarWhereInputSchema: () => MaintenanceLogScalarWhereInputSchema,
  MaintenanceLogScalarWhereWithAggregatesInputSchema: () => MaintenanceLogScalarWhereWithAggregatesInputSchema,
  MaintenanceLogSchema: () => MaintenanceLogSchema,
  MaintenanceLogSelectSchema: () => MaintenanceLogSelectSchema,
  MaintenanceLogSumOrderByAggregateInputSchema: () => MaintenanceLogSumOrderByAggregateInputSchema,
  MaintenanceLogUncheckedCreateInputSchema: () => MaintenanceLogUncheckedCreateInputSchema,
  MaintenanceLogUncheckedCreateNestedManyWithoutEquipmentInputSchema: () => MaintenanceLogUncheckedCreateNestedManyWithoutEquipmentInputSchema,
  MaintenanceLogUncheckedCreateWithoutEquipmentInputSchema: () => MaintenanceLogUncheckedCreateWithoutEquipmentInputSchema,
  MaintenanceLogUncheckedUpdateInputSchema: () => MaintenanceLogUncheckedUpdateInputSchema,
  MaintenanceLogUncheckedUpdateManyInputSchema: () => MaintenanceLogUncheckedUpdateManyInputSchema,
  MaintenanceLogUncheckedUpdateManyWithoutEquipmentInputSchema: () => MaintenanceLogUncheckedUpdateManyWithoutEquipmentInputSchema,
  MaintenanceLogUncheckedUpdateManyWithoutEquipmentNestedInputSchema: () => MaintenanceLogUncheckedUpdateManyWithoutEquipmentNestedInputSchema,
  MaintenanceLogUncheckedUpdateWithoutEquipmentInputSchema: () => MaintenanceLogUncheckedUpdateWithoutEquipmentInputSchema,
  MaintenanceLogUpdateArgsSchema: () => MaintenanceLogUpdateArgsSchema,
  MaintenanceLogUpdateInputSchema: () => MaintenanceLogUpdateInputSchema,
  MaintenanceLogUpdateManyArgsSchema: () => MaintenanceLogUpdateManyArgsSchema,
  MaintenanceLogUpdateManyMutationInputSchema: () => MaintenanceLogUpdateManyMutationInputSchema,
  MaintenanceLogUpdateManyWithWhereWithoutEquipmentInputSchema: () => MaintenanceLogUpdateManyWithWhereWithoutEquipmentInputSchema,
  MaintenanceLogUpdateManyWithoutEquipmentNestedInputSchema: () => MaintenanceLogUpdateManyWithoutEquipmentNestedInputSchema,
  MaintenanceLogUpdateWithWhereUniqueWithoutEquipmentInputSchema: () => MaintenanceLogUpdateWithWhereUniqueWithoutEquipmentInputSchema,
  MaintenanceLogUpdateWithoutEquipmentInputSchema: () => MaintenanceLogUpdateWithoutEquipmentInputSchema,
  MaintenanceLogUpsertArgsSchema: () => MaintenanceLogUpsertArgsSchema,
  MaintenanceLogUpsertWithWhereUniqueWithoutEquipmentInputSchema: () => MaintenanceLogUpsertWithWhereUniqueWithoutEquipmentInputSchema,
  MaintenanceLogWhereInputSchema: () => MaintenanceLogWhereInputSchema,
  MaintenanceLogWhereUniqueInputSchema: () => MaintenanceLogWhereUniqueInputSchema,
  MaintenanceTypeSchema: () => MaintenanceTypeSchema,
  MenuAggregateArgsSchema: () => MenuAggregateArgsSchema,
  MenuArgsSchema: () => MenuArgsSchema,
  MenuAvgOrderByAggregateInputSchema: () => MenuAvgOrderByAggregateInputSchema,
  MenuCategoryAggregateArgsSchema: () => MenuCategoryAggregateArgsSchema,
  MenuCategoryArgsSchema: () => MenuCategoryArgsSchema,
  MenuCategoryAvgOrderByAggregateInputSchema: () => MenuCategoryAvgOrderByAggregateInputSchema,
  MenuCategoryCountOrderByAggregateInputSchema: () => MenuCategoryCountOrderByAggregateInputSchema,
  MenuCategoryCountOutputTypeArgsSchema: () => MenuCategoryCountOutputTypeArgsSchema,
  MenuCategoryCountOutputTypeSelectSchema: () => MenuCategoryCountOutputTypeSelectSchema,
  MenuCategoryCreateArgsSchema: () => MenuCategoryCreateArgsSchema,
  MenuCategoryCreateInputSchema: () => MenuCategoryCreateInputSchema,
  MenuCategoryCreateManyAndReturnArgsSchema: () => MenuCategoryCreateManyAndReturnArgsSchema,
  MenuCategoryCreateManyArgsSchema: () => MenuCategoryCreateManyArgsSchema,
  MenuCategoryCreateManyInputSchema: () => MenuCategoryCreateManyInputSchema,
  MenuCategoryCreateManyMenuInputEnvelopeSchema: () => MenuCategoryCreateManyMenuInputEnvelopeSchema,
  MenuCategoryCreateManyMenuInputSchema: () => MenuCategoryCreateManyMenuInputSchema,
  MenuCategoryCreateNestedManyWithoutMenuInputSchema: () => MenuCategoryCreateNestedManyWithoutMenuInputSchema,
  MenuCategoryCreateNestedOneWithoutMenuItemsInputSchema: () => MenuCategoryCreateNestedOneWithoutMenuItemsInputSchema,
  MenuCategoryCreateOrConnectWithoutMenuInputSchema: () => MenuCategoryCreateOrConnectWithoutMenuInputSchema,
  MenuCategoryCreateOrConnectWithoutMenuItemsInputSchema: () => MenuCategoryCreateOrConnectWithoutMenuItemsInputSchema,
  MenuCategoryCreateWithoutMenuInputSchema: () => MenuCategoryCreateWithoutMenuInputSchema,
  MenuCategoryCreateWithoutMenuItemsInputSchema: () => MenuCategoryCreateWithoutMenuItemsInputSchema,
  MenuCategoryDeleteArgsSchema: () => MenuCategoryDeleteArgsSchema,
  MenuCategoryDeleteManyArgsSchema: () => MenuCategoryDeleteManyArgsSchema,
  MenuCategoryFindFirstArgsSchema: () => MenuCategoryFindFirstArgsSchema,
  MenuCategoryFindFirstOrThrowArgsSchema: () => MenuCategoryFindFirstOrThrowArgsSchema,
  MenuCategoryFindManyArgsSchema: () => MenuCategoryFindManyArgsSchema,
  MenuCategoryFindUniqueArgsSchema: () => MenuCategoryFindUniqueArgsSchema,
  MenuCategoryFindUniqueOrThrowArgsSchema: () => MenuCategoryFindUniqueOrThrowArgsSchema,
  MenuCategoryGroupByArgsSchema: () => MenuCategoryGroupByArgsSchema,
  MenuCategoryIncludeSchema: () => MenuCategoryIncludeSchema,
  MenuCategoryListRelationFilterSchema: () => MenuCategoryListRelationFilterSchema,
  MenuCategoryMaxOrderByAggregateInputSchema: () => MenuCategoryMaxOrderByAggregateInputSchema,
  MenuCategoryMenuIdNameCompoundUniqueInputSchema: () => MenuCategoryMenuIdNameCompoundUniqueInputSchema,
  MenuCategoryMinOrderByAggregateInputSchema: () => MenuCategoryMinOrderByAggregateInputSchema,
  MenuCategoryNullableRelationFilterSchema: () => MenuCategoryNullableRelationFilterSchema,
  MenuCategoryOrderByRelationAggregateInputSchema: () => MenuCategoryOrderByRelationAggregateInputSchema,
  MenuCategoryOrderByWithAggregationInputSchema: () => MenuCategoryOrderByWithAggregationInputSchema,
  MenuCategoryOrderByWithRelationInputSchema: () => MenuCategoryOrderByWithRelationInputSchema,
  MenuCategoryScalarFieldEnumSchema: () => MenuCategoryScalarFieldEnumSchema,
  MenuCategoryScalarWhereInputSchema: () => MenuCategoryScalarWhereInputSchema,
  MenuCategoryScalarWhereWithAggregatesInputSchema: () => MenuCategoryScalarWhereWithAggregatesInputSchema,
  MenuCategorySchema: () => MenuCategorySchema,
  MenuCategorySelectSchema: () => MenuCategorySelectSchema,
  MenuCategorySumOrderByAggregateInputSchema: () => MenuCategorySumOrderByAggregateInputSchema,
  MenuCategoryUncheckedCreateInputSchema: () => MenuCategoryUncheckedCreateInputSchema,
  MenuCategoryUncheckedCreateNestedManyWithoutMenuInputSchema: () => MenuCategoryUncheckedCreateNestedManyWithoutMenuInputSchema,
  MenuCategoryUncheckedCreateWithoutMenuInputSchema: () => MenuCategoryUncheckedCreateWithoutMenuInputSchema,
  MenuCategoryUncheckedCreateWithoutMenuItemsInputSchema: () => MenuCategoryUncheckedCreateWithoutMenuItemsInputSchema,
  MenuCategoryUncheckedUpdateInputSchema: () => MenuCategoryUncheckedUpdateInputSchema,
  MenuCategoryUncheckedUpdateManyInputSchema: () => MenuCategoryUncheckedUpdateManyInputSchema,
  MenuCategoryUncheckedUpdateManyWithoutMenuInputSchema: () => MenuCategoryUncheckedUpdateManyWithoutMenuInputSchema,
  MenuCategoryUncheckedUpdateManyWithoutMenuNestedInputSchema: () => MenuCategoryUncheckedUpdateManyWithoutMenuNestedInputSchema,
  MenuCategoryUncheckedUpdateWithoutMenuInputSchema: () => MenuCategoryUncheckedUpdateWithoutMenuInputSchema,
  MenuCategoryUncheckedUpdateWithoutMenuItemsInputSchema: () => MenuCategoryUncheckedUpdateWithoutMenuItemsInputSchema,
  MenuCategoryUpdateArgsSchema: () => MenuCategoryUpdateArgsSchema,
  MenuCategoryUpdateInputSchema: () => MenuCategoryUpdateInputSchema,
  MenuCategoryUpdateManyArgsSchema: () => MenuCategoryUpdateManyArgsSchema,
  MenuCategoryUpdateManyMutationInputSchema: () => MenuCategoryUpdateManyMutationInputSchema,
  MenuCategoryUpdateManyWithWhereWithoutMenuInputSchema: () => MenuCategoryUpdateManyWithWhereWithoutMenuInputSchema,
  MenuCategoryUpdateManyWithoutMenuNestedInputSchema: () => MenuCategoryUpdateManyWithoutMenuNestedInputSchema,
  MenuCategoryUpdateOneWithoutMenuItemsNestedInputSchema: () => MenuCategoryUpdateOneWithoutMenuItemsNestedInputSchema,
  MenuCategoryUpdateToOneWithWhereWithoutMenuItemsInputSchema: () => MenuCategoryUpdateToOneWithWhereWithoutMenuItemsInputSchema,
  MenuCategoryUpdateWithWhereUniqueWithoutMenuInputSchema: () => MenuCategoryUpdateWithWhereUniqueWithoutMenuInputSchema,
  MenuCategoryUpdateWithoutMenuInputSchema: () => MenuCategoryUpdateWithoutMenuInputSchema,
  MenuCategoryUpdateWithoutMenuItemsInputSchema: () => MenuCategoryUpdateWithoutMenuItemsInputSchema,
  MenuCategoryUpsertArgsSchema: () => MenuCategoryUpsertArgsSchema,
  MenuCategoryUpsertWithWhereUniqueWithoutMenuInputSchema: () => MenuCategoryUpsertWithWhereUniqueWithoutMenuInputSchema,
  MenuCategoryUpsertWithoutMenuItemsInputSchema: () => MenuCategoryUpsertWithoutMenuItemsInputSchema,
  MenuCategoryWhereInputSchema: () => MenuCategoryWhereInputSchema,
  MenuCategoryWhereUniqueInputSchema: () => MenuCategoryWhereUniqueInputSchema,
  MenuCountOrderByAggregateInputSchema: () => MenuCountOrderByAggregateInputSchema,
  MenuCountOutputTypeArgsSchema: () => MenuCountOutputTypeArgsSchema,
  MenuCountOutputTypeSelectSchema: () => MenuCountOutputTypeSelectSchema,
  MenuCreateArgsSchema: () => MenuCreateArgsSchema,
  MenuCreateInputSchema: () => MenuCreateInputSchema,
  MenuCreateManyAndReturnArgsSchema: () => MenuCreateManyAndReturnArgsSchema,
  MenuCreateManyArgsSchema: () => MenuCreateManyArgsSchema,
  MenuCreateManyInputSchema: () => MenuCreateManyInputSchema,
  MenuCreateManyRestaurantInputEnvelopeSchema: () => MenuCreateManyRestaurantInputEnvelopeSchema,
  MenuCreateManyRestaurantInputSchema: () => MenuCreateManyRestaurantInputSchema,
  MenuCreateNestedManyWithoutRestaurantInputSchema: () => MenuCreateNestedManyWithoutRestaurantInputSchema,
  MenuCreateNestedOneWithoutMenuCategoryInputSchema: () => MenuCreateNestedOneWithoutMenuCategoryInputSchema,
  MenuCreateNestedOneWithoutMenuItemsInputSchema: () => MenuCreateNestedOneWithoutMenuItemsInputSchema,
  MenuCreateOrConnectWithoutMenuCategoryInputSchema: () => MenuCreateOrConnectWithoutMenuCategoryInputSchema,
  MenuCreateOrConnectWithoutMenuItemsInputSchema: () => MenuCreateOrConnectWithoutMenuItemsInputSchema,
  MenuCreateOrConnectWithoutRestaurantInputSchema: () => MenuCreateOrConnectWithoutRestaurantInputSchema,
  MenuCreateWithoutMenuCategoryInputSchema: () => MenuCreateWithoutMenuCategoryInputSchema,
  MenuCreateWithoutMenuItemsInputSchema: () => MenuCreateWithoutMenuItemsInputSchema,
  MenuCreateWithoutRestaurantInputSchema: () => MenuCreateWithoutRestaurantInputSchema,
  MenuDeleteArgsSchema: () => MenuDeleteArgsSchema,
  MenuDeleteManyArgsSchema: () => MenuDeleteManyArgsSchema,
  MenuFindFirstArgsSchema: () => MenuFindFirstArgsSchema,
  MenuFindFirstOrThrowArgsSchema: () => MenuFindFirstOrThrowArgsSchema,
  MenuFindManyArgsSchema: () => MenuFindManyArgsSchema,
  MenuFindUniqueArgsSchema: () => MenuFindUniqueArgsSchema,
  MenuFindUniqueOrThrowArgsSchema: () => MenuFindUniqueOrThrowArgsSchema,
  MenuGroupByArgsSchema: () => MenuGroupByArgsSchema,
  MenuIncludeSchema: () => MenuIncludeSchema,
  MenuItemAggregateArgsSchema: () => MenuItemAggregateArgsSchema,
  MenuItemArgsSchema: () => MenuItemArgsSchema,
  MenuItemAvgOrderByAggregateInputSchema: () => MenuItemAvgOrderByAggregateInputSchema,
  MenuItemCountOrderByAggregateInputSchema: () => MenuItemCountOrderByAggregateInputSchema,
  MenuItemCountOutputTypeArgsSchema: () => MenuItemCountOutputTypeArgsSchema,
  MenuItemCountOutputTypeSelectSchema: () => MenuItemCountOutputTypeSelectSchema,
  MenuItemCreateArgsSchema: () => MenuItemCreateArgsSchema,
  MenuItemCreateInputSchema: () => MenuItemCreateInputSchema,
  MenuItemCreateManyAndReturnArgsSchema: () => MenuItemCreateManyAndReturnArgsSchema,
  MenuItemCreateManyArgsSchema: () => MenuItemCreateManyArgsSchema,
  MenuItemCreateManyCategoryInputEnvelopeSchema: () => MenuItemCreateManyCategoryInputEnvelopeSchema,
  MenuItemCreateManyCategoryInputSchema: () => MenuItemCreateManyCategoryInputSchema,
  MenuItemCreateManyInputSchema: () => MenuItemCreateManyInputSchema,
  MenuItemCreateManyMenuInputEnvelopeSchema: () => MenuItemCreateManyMenuInputEnvelopeSchema,
  MenuItemCreateManyMenuInputSchema: () => MenuItemCreateManyMenuInputSchema,
  MenuItemCreateNestedManyWithoutCategoryInputSchema: () => MenuItemCreateNestedManyWithoutCategoryInputSchema,
  MenuItemCreateNestedManyWithoutDietaryRestrictionsInputSchema: () => MenuItemCreateNestedManyWithoutDietaryRestrictionsInputSchema,
  MenuItemCreateNestedManyWithoutMenuInputSchema: () => MenuItemCreateNestedManyWithoutMenuInputSchema,
  MenuItemCreateNestedManyWithoutRecipesInputSchema: () => MenuItemCreateNestedManyWithoutRecipesInputSchema,
  MenuItemCreateNestedOneWithoutFeedbackInputSchema: () => MenuItemCreateNestedOneWithoutFeedbackInputSchema,
  MenuItemCreateNestedOneWithoutLeftoverItemInputSchema: () => MenuItemCreateNestedOneWithoutLeftoverItemInputSchema,
  MenuItemCreateNestedOneWithoutMenuItemRecipeInputSchema: () => MenuItemCreateNestedOneWithoutMenuItemRecipeInputSchema,
  MenuItemCreateNestedOneWithoutNutritionalInfoInputSchema: () => MenuItemCreateNestedOneWithoutNutritionalInfoInputSchema,
  MenuItemCreateNestedOneWithoutNutritionalRecommendationInputSchema: () => MenuItemCreateNestedOneWithoutNutritionalRecommendationInputSchema,
  MenuItemCreateNestedOneWithoutSalesTransactionsInputSchema: () => MenuItemCreateNestedOneWithoutSalesTransactionsInputSchema,
  MenuItemCreateOrConnectWithoutCategoryInputSchema: () => MenuItemCreateOrConnectWithoutCategoryInputSchema,
  MenuItemCreateOrConnectWithoutDietaryRestrictionsInputSchema: () => MenuItemCreateOrConnectWithoutDietaryRestrictionsInputSchema,
  MenuItemCreateOrConnectWithoutFeedbackInputSchema: () => MenuItemCreateOrConnectWithoutFeedbackInputSchema,
  MenuItemCreateOrConnectWithoutLeftoverItemInputSchema: () => MenuItemCreateOrConnectWithoutLeftoverItemInputSchema,
  MenuItemCreateOrConnectWithoutMenuInputSchema: () => MenuItemCreateOrConnectWithoutMenuInputSchema,
  MenuItemCreateOrConnectWithoutMenuItemRecipeInputSchema: () => MenuItemCreateOrConnectWithoutMenuItemRecipeInputSchema,
  MenuItemCreateOrConnectWithoutNutritionalInfoInputSchema: () => MenuItemCreateOrConnectWithoutNutritionalInfoInputSchema,
  MenuItemCreateOrConnectWithoutNutritionalRecommendationInputSchema: () => MenuItemCreateOrConnectWithoutNutritionalRecommendationInputSchema,
  MenuItemCreateOrConnectWithoutRecipesInputSchema: () => MenuItemCreateOrConnectWithoutRecipesInputSchema,
  MenuItemCreateOrConnectWithoutSalesTransactionsInputSchema: () => MenuItemCreateOrConnectWithoutSalesTransactionsInputSchema,
  MenuItemCreateWithoutCategoryInputSchema: () => MenuItemCreateWithoutCategoryInputSchema,
  MenuItemCreateWithoutDietaryRestrictionsInputSchema: () => MenuItemCreateWithoutDietaryRestrictionsInputSchema,
  MenuItemCreateWithoutFeedbackInputSchema: () => MenuItemCreateWithoutFeedbackInputSchema,
  MenuItemCreateWithoutLeftoverItemInputSchema: () => MenuItemCreateWithoutLeftoverItemInputSchema,
  MenuItemCreateWithoutMenuInputSchema: () => MenuItemCreateWithoutMenuInputSchema,
  MenuItemCreateWithoutMenuItemRecipeInputSchema: () => MenuItemCreateWithoutMenuItemRecipeInputSchema,
  MenuItemCreateWithoutNutritionalInfoInputSchema: () => MenuItemCreateWithoutNutritionalInfoInputSchema,
  MenuItemCreateWithoutNutritionalRecommendationInputSchema: () => MenuItemCreateWithoutNutritionalRecommendationInputSchema,
  MenuItemCreateWithoutRecipesInputSchema: () => MenuItemCreateWithoutRecipesInputSchema,
  MenuItemCreateWithoutSalesTransactionsInputSchema: () => MenuItemCreateWithoutSalesTransactionsInputSchema,
  MenuItemCreateallergensInputSchema: () => MenuItemCreateallergensInputSchema,
  MenuItemCreaterecipeIdsInputSchema: () => MenuItemCreaterecipeIdsInputSchema,
  MenuItemCreaterecipeServingsAmountInputSchema: () => MenuItemCreaterecipeServingsAmountInputSchema,
  MenuItemCreaterecipeServingsCostInputSchema: () => MenuItemCreaterecipeServingsCostInputSchema,
  MenuItemDeleteArgsSchema: () => MenuItemDeleteArgsSchema,
  MenuItemDeleteManyArgsSchema: () => MenuItemDeleteManyArgsSchema,
  MenuItemFindFirstArgsSchema: () => MenuItemFindFirstArgsSchema,
  MenuItemFindFirstOrThrowArgsSchema: () => MenuItemFindFirstOrThrowArgsSchema,
  MenuItemFindManyArgsSchema: () => MenuItemFindManyArgsSchema,
  MenuItemFindUniqueArgsSchema: () => MenuItemFindUniqueArgsSchema,
  MenuItemFindUniqueOrThrowArgsSchema: () => MenuItemFindUniqueOrThrowArgsSchema,
  MenuItemGroupByArgsSchema: () => MenuItemGroupByArgsSchema,
  MenuItemIncludeSchema: () => MenuItemIncludeSchema,
  MenuItemListRelationFilterSchema: () => MenuItemListRelationFilterSchema,
  MenuItemMaxOrderByAggregateInputSchema: () => MenuItemMaxOrderByAggregateInputSchema,
  MenuItemMinOrderByAggregateInputSchema: () => MenuItemMinOrderByAggregateInputSchema,
  MenuItemNullableRelationFilterSchema: () => MenuItemNullableRelationFilterSchema,
  MenuItemOrderByRelationAggregateInputSchema: () => MenuItemOrderByRelationAggregateInputSchema,
  MenuItemOrderByWithAggregationInputSchema: () => MenuItemOrderByWithAggregationInputSchema,
  MenuItemOrderByWithRelationInputSchema: () => MenuItemOrderByWithRelationInputSchema,
  MenuItemRecipeAggregateArgsSchema: () => MenuItemRecipeAggregateArgsSchema,
  MenuItemRecipeArgsSchema: () => MenuItemRecipeArgsSchema,
  MenuItemRecipeAvgOrderByAggregateInputSchema: () => MenuItemRecipeAvgOrderByAggregateInputSchema,
  MenuItemRecipeCountOrderByAggregateInputSchema: () => MenuItemRecipeCountOrderByAggregateInputSchema,
  MenuItemRecipeCreateArgsSchema: () => MenuItemRecipeCreateArgsSchema,
  MenuItemRecipeCreateInputSchema: () => MenuItemRecipeCreateInputSchema,
  MenuItemRecipeCreateManyAndReturnArgsSchema: () => MenuItemRecipeCreateManyAndReturnArgsSchema,
  MenuItemRecipeCreateManyArgsSchema: () => MenuItemRecipeCreateManyArgsSchema,
  MenuItemRecipeCreateManyInputSchema: () => MenuItemRecipeCreateManyInputSchema,
  MenuItemRecipeCreateManyMenuItemInputEnvelopeSchema: () => MenuItemRecipeCreateManyMenuItemInputEnvelopeSchema,
  MenuItemRecipeCreateManyMenuItemInputSchema: () => MenuItemRecipeCreateManyMenuItemInputSchema,
  MenuItemRecipeCreateManyRecipeInputEnvelopeSchema: () => MenuItemRecipeCreateManyRecipeInputEnvelopeSchema,
  MenuItemRecipeCreateManyRecipeInputSchema: () => MenuItemRecipeCreateManyRecipeInputSchema,
  MenuItemRecipeCreateNestedManyWithoutMenuItemInputSchema: () => MenuItemRecipeCreateNestedManyWithoutMenuItemInputSchema,
  MenuItemRecipeCreateNestedManyWithoutRecipeInputSchema: () => MenuItemRecipeCreateNestedManyWithoutRecipeInputSchema,
  MenuItemRecipeCreateOrConnectWithoutMenuItemInputSchema: () => MenuItemRecipeCreateOrConnectWithoutMenuItemInputSchema,
  MenuItemRecipeCreateOrConnectWithoutRecipeInputSchema: () => MenuItemRecipeCreateOrConnectWithoutRecipeInputSchema,
  MenuItemRecipeCreateWithoutMenuItemInputSchema: () => MenuItemRecipeCreateWithoutMenuItemInputSchema,
  MenuItemRecipeCreateWithoutRecipeInputSchema: () => MenuItemRecipeCreateWithoutRecipeInputSchema,
  MenuItemRecipeDeleteArgsSchema: () => MenuItemRecipeDeleteArgsSchema,
  MenuItemRecipeDeleteManyArgsSchema: () => MenuItemRecipeDeleteManyArgsSchema,
  MenuItemRecipeFindFirstArgsSchema: () => MenuItemRecipeFindFirstArgsSchema,
  MenuItemRecipeFindFirstOrThrowArgsSchema: () => MenuItemRecipeFindFirstOrThrowArgsSchema,
  MenuItemRecipeFindManyArgsSchema: () => MenuItemRecipeFindManyArgsSchema,
  MenuItemRecipeFindUniqueArgsSchema: () => MenuItemRecipeFindUniqueArgsSchema,
  MenuItemRecipeFindUniqueOrThrowArgsSchema: () => MenuItemRecipeFindUniqueOrThrowArgsSchema,
  MenuItemRecipeGroupByArgsSchema: () => MenuItemRecipeGroupByArgsSchema,
  MenuItemRecipeIncludeSchema: () => MenuItemRecipeIncludeSchema,
  MenuItemRecipeListRelationFilterSchema: () => MenuItemRecipeListRelationFilterSchema,
  MenuItemRecipeMaxOrderByAggregateInputSchema: () => MenuItemRecipeMaxOrderByAggregateInputSchema,
  MenuItemRecipeMenuItemIdRecipeIdCompoundUniqueInputSchema: () => MenuItemRecipeMenuItemIdRecipeIdCompoundUniqueInputSchema,
  MenuItemRecipeMinOrderByAggregateInputSchema: () => MenuItemRecipeMinOrderByAggregateInputSchema,
  MenuItemRecipeOrderByRelationAggregateInputSchema: () => MenuItemRecipeOrderByRelationAggregateInputSchema,
  MenuItemRecipeOrderByWithAggregationInputSchema: () => MenuItemRecipeOrderByWithAggregationInputSchema,
  MenuItemRecipeOrderByWithRelationInputSchema: () => MenuItemRecipeOrderByWithRelationInputSchema,
  MenuItemRecipeScalarFieldEnumSchema: () => MenuItemRecipeScalarFieldEnumSchema,
  MenuItemRecipeScalarWhereInputSchema: () => MenuItemRecipeScalarWhereInputSchema,
  MenuItemRecipeScalarWhereWithAggregatesInputSchema: () => MenuItemRecipeScalarWhereWithAggregatesInputSchema,
  MenuItemRecipeSchema: () => MenuItemRecipeSchema,
  MenuItemRecipeSelectSchema: () => MenuItemRecipeSelectSchema,
  MenuItemRecipeSumOrderByAggregateInputSchema: () => MenuItemRecipeSumOrderByAggregateInputSchema,
  MenuItemRecipeUncheckedCreateInputSchema: () => MenuItemRecipeUncheckedCreateInputSchema,
  MenuItemRecipeUncheckedCreateNestedManyWithoutMenuItemInputSchema: () => MenuItemRecipeUncheckedCreateNestedManyWithoutMenuItemInputSchema,
  MenuItemRecipeUncheckedCreateNestedManyWithoutRecipeInputSchema: () => MenuItemRecipeUncheckedCreateNestedManyWithoutRecipeInputSchema,
  MenuItemRecipeUncheckedCreateWithoutMenuItemInputSchema: () => MenuItemRecipeUncheckedCreateWithoutMenuItemInputSchema,
  MenuItemRecipeUncheckedCreateWithoutRecipeInputSchema: () => MenuItemRecipeUncheckedCreateWithoutRecipeInputSchema,
  MenuItemRecipeUncheckedUpdateInputSchema: () => MenuItemRecipeUncheckedUpdateInputSchema,
  MenuItemRecipeUncheckedUpdateManyInputSchema: () => MenuItemRecipeUncheckedUpdateManyInputSchema,
  MenuItemRecipeUncheckedUpdateManyWithoutMenuItemInputSchema: () => MenuItemRecipeUncheckedUpdateManyWithoutMenuItemInputSchema,
  MenuItemRecipeUncheckedUpdateManyWithoutMenuItemNestedInputSchema: () => MenuItemRecipeUncheckedUpdateManyWithoutMenuItemNestedInputSchema,
  MenuItemRecipeUncheckedUpdateManyWithoutRecipeInputSchema: () => MenuItemRecipeUncheckedUpdateManyWithoutRecipeInputSchema,
  MenuItemRecipeUncheckedUpdateManyWithoutRecipeNestedInputSchema: () => MenuItemRecipeUncheckedUpdateManyWithoutRecipeNestedInputSchema,
  MenuItemRecipeUncheckedUpdateWithoutMenuItemInputSchema: () => MenuItemRecipeUncheckedUpdateWithoutMenuItemInputSchema,
  MenuItemRecipeUncheckedUpdateWithoutRecipeInputSchema: () => MenuItemRecipeUncheckedUpdateWithoutRecipeInputSchema,
  MenuItemRecipeUpdateArgsSchema: () => MenuItemRecipeUpdateArgsSchema,
  MenuItemRecipeUpdateInputSchema: () => MenuItemRecipeUpdateInputSchema,
  MenuItemRecipeUpdateManyArgsSchema: () => MenuItemRecipeUpdateManyArgsSchema,
  MenuItemRecipeUpdateManyMutationInputSchema: () => MenuItemRecipeUpdateManyMutationInputSchema,
  MenuItemRecipeUpdateManyWithWhereWithoutMenuItemInputSchema: () => MenuItemRecipeUpdateManyWithWhereWithoutMenuItemInputSchema,
  MenuItemRecipeUpdateManyWithWhereWithoutRecipeInputSchema: () => MenuItemRecipeUpdateManyWithWhereWithoutRecipeInputSchema,
  MenuItemRecipeUpdateManyWithoutMenuItemNestedInputSchema: () => MenuItemRecipeUpdateManyWithoutMenuItemNestedInputSchema,
  MenuItemRecipeUpdateManyWithoutRecipeNestedInputSchema: () => MenuItemRecipeUpdateManyWithoutRecipeNestedInputSchema,
  MenuItemRecipeUpdateWithWhereUniqueWithoutMenuItemInputSchema: () => MenuItemRecipeUpdateWithWhereUniqueWithoutMenuItemInputSchema,
  MenuItemRecipeUpdateWithWhereUniqueWithoutRecipeInputSchema: () => MenuItemRecipeUpdateWithWhereUniqueWithoutRecipeInputSchema,
  MenuItemRecipeUpdateWithoutMenuItemInputSchema: () => MenuItemRecipeUpdateWithoutMenuItemInputSchema,
  MenuItemRecipeUpdateWithoutRecipeInputSchema: () => MenuItemRecipeUpdateWithoutRecipeInputSchema,
  MenuItemRecipeUpsertArgsSchema: () => MenuItemRecipeUpsertArgsSchema,
  MenuItemRecipeUpsertWithWhereUniqueWithoutMenuItemInputSchema: () => MenuItemRecipeUpsertWithWhereUniqueWithoutMenuItemInputSchema,
  MenuItemRecipeUpsertWithWhereUniqueWithoutRecipeInputSchema: () => MenuItemRecipeUpsertWithWhereUniqueWithoutRecipeInputSchema,
  MenuItemRecipeWhereInputSchema: () => MenuItemRecipeWhereInputSchema,
  MenuItemRecipeWhereUniqueInputSchema: () => MenuItemRecipeWhereUniqueInputSchema,
  MenuItemRelationFilterSchema: () => MenuItemRelationFilterSchema,
  MenuItemScalarFieldEnumSchema: () => MenuItemScalarFieldEnumSchema,
  MenuItemScalarWhereInputSchema: () => MenuItemScalarWhereInputSchema,
  MenuItemScalarWhereWithAggregatesInputSchema: () => MenuItemScalarWhereWithAggregatesInputSchema,
  MenuItemSchema: () => MenuItemSchema,
  MenuItemSelectSchema: () => MenuItemSelectSchema,
  MenuItemSumOrderByAggregateInputSchema: () => MenuItemSumOrderByAggregateInputSchema,
  MenuItemUncheckedCreateInputSchema: () => MenuItemUncheckedCreateInputSchema,
  MenuItemUncheckedCreateNestedManyWithoutCategoryInputSchema: () => MenuItemUncheckedCreateNestedManyWithoutCategoryInputSchema,
  MenuItemUncheckedCreateNestedManyWithoutDietaryRestrictionsInputSchema: () => MenuItemUncheckedCreateNestedManyWithoutDietaryRestrictionsInputSchema,
  MenuItemUncheckedCreateNestedManyWithoutMenuInputSchema: () => MenuItemUncheckedCreateNestedManyWithoutMenuInputSchema,
  MenuItemUncheckedCreateNestedManyWithoutRecipesInputSchema: () => MenuItemUncheckedCreateNestedManyWithoutRecipesInputSchema,
  MenuItemUncheckedCreateWithoutCategoryInputSchema: () => MenuItemUncheckedCreateWithoutCategoryInputSchema,
  MenuItemUncheckedCreateWithoutDietaryRestrictionsInputSchema: () => MenuItemUncheckedCreateWithoutDietaryRestrictionsInputSchema,
  MenuItemUncheckedCreateWithoutFeedbackInputSchema: () => MenuItemUncheckedCreateWithoutFeedbackInputSchema,
  MenuItemUncheckedCreateWithoutLeftoverItemInputSchema: () => MenuItemUncheckedCreateWithoutLeftoverItemInputSchema,
  MenuItemUncheckedCreateWithoutMenuInputSchema: () => MenuItemUncheckedCreateWithoutMenuInputSchema,
  MenuItemUncheckedCreateWithoutMenuItemRecipeInputSchema: () => MenuItemUncheckedCreateWithoutMenuItemRecipeInputSchema,
  MenuItemUncheckedCreateWithoutNutritionalInfoInputSchema: () => MenuItemUncheckedCreateWithoutNutritionalInfoInputSchema,
  MenuItemUncheckedCreateWithoutNutritionalRecommendationInputSchema: () => MenuItemUncheckedCreateWithoutNutritionalRecommendationInputSchema,
  MenuItemUncheckedCreateWithoutRecipesInputSchema: () => MenuItemUncheckedCreateWithoutRecipesInputSchema,
  MenuItemUncheckedCreateWithoutSalesTransactionsInputSchema: () => MenuItemUncheckedCreateWithoutSalesTransactionsInputSchema,
  MenuItemUncheckedUpdateInputSchema: () => MenuItemUncheckedUpdateInputSchema,
  MenuItemUncheckedUpdateManyInputSchema: () => MenuItemUncheckedUpdateManyInputSchema,
  MenuItemUncheckedUpdateManyWithoutCategoryInputSchema: () => MenuItemUncheckedUpdateManyWithoutCategoryInputSchema,
  MenuItemUncheckedUpdateManyWithoutCategoryNestedInputSchema: () => MenuItemUncheckedUpdateManyWithoutCategoryNestedInputSchema,
  MenuItemUncheckedUpdateManyWithoutDietaryRestrictionsInputSchema: () => MenuItemUncheckedUpdateManyWithoutDietaryRestrictionsInputSchema,
  MenuItemUncheckedUpdateManyWithoutDietaryRestrictionsNestedInputSchema: () => MenuItemUncheckedUpdateManyWithoutDietaryRestrictionsNestedInputSchema,
  MenuItemUncheckedUpdateManyWithoutMenuInputSchema: () => MenuItemUncheckedUpdateManyWithoutMenuInputSchema,
  MenuItemUncheckedUpdateManyWithoutMenuNestedInputSchema: () => MenuItemUncheckedUpdateManyWithoutMenuNestedInputSchema,
  MenuItemUncheckedUpdateManyWithoutRecipesInputSchema: () => MenuItemUncheckedUpdateManyWithoutRecipesInputSchema,
  MenuItemUncheckedUpdateManyWithoutRecipesNestedInputSchema: () => MenuItemUncheckedUpdateManyWithoutRecipesNestedInputSchema,
  MenuItemUncheckedUpdateWithoutCategoryInputSchema: () => MenuItemUncheckedUpdateWithoutCategoryInputSchema,
  MenuItemUncheckedUpdateWithoutDietaryRestrictionsInputSchema: () => MenuItemUncheckedUpdateWithoutDietaryRestrictionsInputSchema,
  MenuItemUncheckedUpdateWithoutFeedbackInputSchema: () => MenuItemUncheckedUpdateWithoutFeedbackInputSchema,
  MenuItemUncheckedUpdateWithoutLeftoverItemInputSchema: () => MenuItemUncheckedUpdateWithoutLeftoverItemInputSchema,
  MenuItemUncheckedUpdateWithoutMenuInputSchema: () => MenuItemUncheckedUpdateWithoutMenuInputSchema,
  MenuItemUncheckedUpdateWithoutMenuItemRecipeInputSchema: () => MenuItemUncheckedUpdateWithoutMenuItemRecipeInputSchema,
  MenuItemUncheckedUpdateWithoutNutritionalInfoInputSchema: () => MenuItemUncheckedUpdateWithoutNutritionalInfoInputSchema,
  MenuItemUncheckedUpdateWithoutNutritionalRecommendationInputSchema: () => MenuItemUncheckedUpdateWithoutNutritionalRecommendationInputSchema,
  MenuItemUncheckedUpdateWithoutRecipesInputSchema: () => MenuItemUncheckedUpdateWithoutRecipesInputSchema,
  MenuItemUncheckedUpdateWithoutSalesTransactionsInputSchema: () => MenuItemUncheckedUpdateWithoutSalesTransactionsInputSchema,
  MenuItemUpdateArgsSchema: () => MenuItemUpdateArgsSchema,
  MenuItemUpdateInputSchema: () => MenuItemUpdateInputSchema,
  MenuItemUpdateManyArgsSchema: () => MenuItemUpdateManyArgsSchema,
  MenuItemUpdateManyMutationInputSchema: () => MenuItemUpdateManyMutationInputSchema,
  MenuItemUpdateManyWithWhereWithoutCategoryInputSchema: () => MenuItemUpdateManyWithWhereWithoutCategoryInputSchema,
  MenuItemUpdateManyWithWhereWithoutDietaryRestrictionsInputSchema: () => MenuItemUpdateManyWithWhereWithoutDietaryRestrictionsInputSchema,
  MenuItemUpdateManyWithWhereWithoutMenuInputSchema: () => MenuItemUpdateManyWithWhereWithoutMenuInputSchema,
  MenuItemUpdateManyWithWhereWithoutRecipesInputSchema: () => MenuItemUpdateManyWithWhereWithoutRecipesInputSchema,
  MenuItemUpdateManyWithoutCategoryNestedInputSchema: () => MenuItemUpdateManyWithoutCategoryNestedInputSchema,
  MenuItemUpdateManyWithoutDietaryRestrictionsNestedInputSchema: () => MenuItemUpdateManyWithoutDietaryRestrictionsNestedInputSchema,
  MenuItemUpdateManyWithoutMenuNestedInputSchema: () => MenuItemUpdateManyWithoutMenuNestedInputSchema,
  MenuItemUpdateManyWithoutRecipesNestedInputSchema: () => MenuItemUpdateManyWithoutRecipesNestedInputSchema,
  MenuItemUpdateOneRequiredWithoutLeftoverItemNestedInputSchema: () => MenuItemUpdateOneRequiredWithoutLeftoverItemNestedInputSchema,
  MenuItemUpdateOneRequiredWithoutMenuItemRecipeNestedInputSchema: () => MenuItemUpdateOneRequiredWithoutMenuItemRecipeNestedInputSchema,
  MenuItemUpdateOneRequiredWithoutNutritionalRecommendationNestedInputSchema: () => MenuItemUpdateOneRequiredWithoutNutritionalRecommendationNestedInputSchema,
  MenuItemUpdateOneRequiredWithoutSalesTransactionsNestedInputSchema: () => MenuItemUpdateOneRequiredWithoutSalesTransactionsNestedInputSchema,
  MenuItemUpdateOneWithoutFeedbackNestedInputSchema: () => MenuItemUpdateOneWithoutFeedbackNestedInputSchema,
  MenuItemUpdateOneWithoutNutritionalInfoNestedInputSchema: () => MenuItemUpdateOneWithoutNutritionalInfoNestedInputSchema,
  MenuItemUpdateToOneWithWhereWithoutFeedbackInputSchema: () => MenuItemUpdateToOneWithWhereWithoutFeedbackInputSchema,
  MenuItemUpdateToOneWithWhereWithoutLeftoverItemInputSchema: () => MenuItemUpdateToOneWithWhereWithoutLeftoverItemInputSchema,
  MenuItemUpdateToOneWithWhereWithoutMenuItemRecipeInputSchema: () => MenuItemUpdateToOneWithWhereWithoutMenuItemRecipeInputSchema,
  MenuItemUpdateToOneWithWhereWithoutNutritionalInfoInputSchema: () => MenuItemUpdateToOneWithWhereWithoutNutritionalInfoInputSchema,
  MenuItemUpdateToOneWithWhereWithoutNutritionalRecommendationInputSchema: () => MenuItemUpdateToOneWithWhereWithoutNutritionalRecommendationInputSchema,
  MenuItemUpdateToOneWithWhereWithoutSalesTransactionsInputSchema: () => MenuItemUpdateToOneWithWhereWithoutSalesTransactionsInputSchema,
  MenuItemUpdateWithWhereUniqueWithoutCategoryInputSchema: () => MenuItemUpdateWithWhereUniqueWithoutCategoryInputSchema,
  MenuItemUpdateWithWhereUniqueWithoutDietaryRestrictionsInputSchema: () => MenuItemUpdateWithWhereUniqueWithoutDietaryRestrictionsInputSchema,
  MenuItemUpdateWithWhereUniqueWithoutMenuInputSchema: () => MenuItemUpdateWithWhereUniqueWithoutMenuInputSchema,
  MenuItemUpdateWithWhereUniqueWithoutRecipesInputSchema: () => MenuItemUpdateWithWhereUniqueWithoutRecipesInputSchema,
  MenuItemUpdateWithoutCategoryInputSchema: () => MenuItemUpdateWithoutCategoryInputSchema,
  MenuItemUpdateWithoutDietaryRestrictionsInputSchema: () => MenuItemUpdateWithoutDietaryRestrictionsInputSchema,
  MenuItemUpdateWithoutFeedbackInputSchema: () => MenuItemUpdateWithoutFeedbackInputSchema,
  MenuItemUpdateWithoutLeftoverItemInputSchema: () => MenuItemUpdateWithoutLeftoverItemInputSchema,
  MenuItemUpdateWithoutMenuInputSchema: () => MenuItemUpdateWithoutMenuInputSchema,
  MenuItemUpdateWithoutMenuItemRecipeInputSchema: () => MenuItemUpdateWithoutMenuItemRecipeInputSchema,
  MenuItemUpdateWithoutNutritionalInfoInputSchema: () => MenuItemUpdateWithoutNutritionalInfoInputSchema,
  MenuItemUpdateWithoutNutritionalRecommendationInputSchema: () => MenuItemUpdateWithoutNutritionalRecommendationInputSchema,
  MenuItemUpdateWithoutRecipesInputSchema: () => MenuItemUpdateWithoutRecipesInputSchema,
  MenuItemUpdateWithoutSalesTransactionsInputSchema: () => MenuItemUpdateWithoutSalesTransactionsInputSchema,
  MenuItemUpdateallergensInputSchema: () => MenuItemUpdateallergensInputSchema,
  MenuItemUpdaterecipeIdsInputSchema: () => MenuItemUpdaterecipeIdsInputSchema,
  MenuItemUpdaterecipeServingsAmountInputSchema: () => MenuItemUpdaterecipeServingsAmountInputSchema,
  MenuItemUpdaterecipeServingsCostInputSchema: () => MenuItemUpdaterecipeServingsCostInputSchema,
  MenuItemUpsertArgsSchema: () => MenuItemUpsertArgsSchema,
  MenuItemUpsertWithWhereUniqueWithoutCategoryInputSchema: () => MenuItemUpsertWithWhereUniqueWithoutCategoryInputSchema,
  MenuItemUpsertWithWhereUniqueWithoutDietaryRestrictionsInputSchema: () => MenuItemUpsertWithWhereUniqueWithoutDietaryRestrictionsInputSchema,
  MenuItemUpsertWithWhereUniqueWithoutMenuInputSchema: () => MenuItemUpsertWithWhereUniqueWithoutMenuInputSchema,
  MenuItemUpsertWithWhereUniqueWithoutRecipesInputSchema: () => MenuItemUpsertWithWhereUniqueWithoutRecipesInputSchema,
  MenuItemUpsertWithoutFeedbackInputSchema: () => MenuItemUpsertWithoutFeedbackInputSchema,
  MenuItemUpsertWithoutLeftoverItemInputSchema: () => MenuItemUpsertWithoutLeftoverItemInputSchema,
  MenuItemUpsertWithoutMenuItemRecipeInputSchema: () => MenuItemUpsertWithoutMenuItemRecipeInputSchema,
  MenuItemUpsertWithoutNutritionalInfoInputSchema: () => MenuItemUpsertWithoutNutritionalInfoInputSchema,
  MenuItemUpsertWithoutNutritionalRecommendationInputSchema: () => MenuItemUpsertWithoutNutritionalRecommendationInputSchema,
  MenuItemUpsertWithoutSalesTransactionsInputSchema: () => MenuItemUpsertWithoutSalesTransactionsInputSchema,
  MenuItemWhereInputSchema: () => MenuItemWhereInputSchema,
  MenuItemWhereUniqueInputSchema: () => MenuItemWhereUniqueInputSchema,
  MenuListRelationFilterSchema: () => MenuListRelationFilterSchema,
  MenuMaxOrderByAggregateInputSchema: () => MenuMaxOrderByAggregateInputSchema,
  MenuMinOrderByAggregateInputSchema: () => MenuMinOrderByAggregateInputSchema,
  MenuOrderByRelationAggregateInputSchema: () => MenuOrderByRelationAggregateInputSchema,
  MenuOrderByWithAggregationInputSchema: () => MenuOrderByWithAggregationInputSchema,
  MenuOrderByWithRelationInputSchema: () => MenuOrderByWithRelationInputSchema,
  MenuRelationFilterSchema: () => MenuRelationFilterSchema,
  MenuScalarFieldEnumSchema: () => MenuScalarFieldEnumSchema,
  MenuScalarWhereInputSchema: () => MenuScalarWhereInputSchema,
  MenuScalarWhereWithAggregatesInputSchema: () => MenuScalarWhereWithAggregatesInputSchema,
  MenuSchema: () => MenuSchema,
  MenuSelectSchema: () => MenuSelectSchema,
  MenuSumOrderByAggregateInputSchema: () => MenuSumOrderByAggregateInputSchema,
  MenuUncheckedCreateInputSchema: () => MenuUncheckedCreateInputSchema,
  MenuUncheckedCreateNestedManyWithoutRestaurantInputSchema: () => MenuUncheckedCreateNestedManyWithoutRestaurantInputSchema,
  MenuUncheckedCreateWithoutMenuCategoryInputSchema: () => MenuUncheckedCreateWithoutMenuCategoryInputSchema,
  MenuUncheckedCreateWithoutMenuItemsInputSchema: () => MenuUncheckedCreateWithoutMenuItemsInputSchema,
  MenuUncheckedCreateWithoutRestaurantInputSchema: () => MenuUncheckedCreateWithoutRestaurantInputSchema,
  MenuUncheckedUpdateInputSchema: () => MenuUncheckedUpdateInputSchema,
  MenuUncheckedUpdateManyInputSchema: () => MenuUncheckedUpdateManyInputSchema,
  MenuUncheckedUpdateManyWithoutRestaurantInputSchema: () => MenuUncheckedUpdateManyWithoutRestaurantInputSchema,
  MenuUncheckedUpdateManyWithoutRestaurantNestedInputSchema: () => MenuUncheckedUpdateManyWithoutRestaurantNestedInputSchema,
  MenuUncheckedUpdateWithoutMenuCategoryInputSchema: () => MenuUncheckedUpdateWithoutMenuCategoryInputSchema,
  MenuUncheckedUpdateWithoutMenuItemsInputSchema: () => MenuUncheckedUpdateWithoutMenuItemsInputSchema,
  MenuUncheckedUpdateWithoutRestaurantInputSchema: () => MenuUncheckedUpdateWithoutRestaurantInputSchema,
  MenuUpdateArgsSchema: () => MenuUpdateArgsSchema,
  MenuUpdateInputSchema: () => MenuUpdateInputSchema,
  MenuUpdateManyArgsSchema: () => MenuUpdateManyArgsSchema,
  MenuUpdateManyMutationInputSchema: () => MenuUpdateManyMutationInputSchema,
  MenuUpdateManyWithWhereWithoutRestaurantInputSchema: () => MenuUpdateManyWithWhereWithoutRestaurantInputSchema,
  MenuUpdateManyWithoutRestaurantNestedInputSchema: () => MenuUpdateManyWithoutRestaurantNestedInputSchema,
  MenuUpdateOneRequiredWithoutMenuCategoryNestedInputSchema: () => MenuUpdateOneRequiredWithoutMenuCategoryNestedInputSchema,
  MenuUpdateOneRequiredWithoutMenuItemsNestedInputSchema: () => MenuUpdateOneRequiredWithoutMenuItemsNestedInputSchema,
  MenuUpdateToOneWithWhereWithoutMenuCategoryInputSchema: () => MenuUpdateToOneWithWhereWithoutMenuCategoryInputSchema,
  MenuUpdateToOneWithWhereWithoutMenuItemsInputSchema: () => MenuUpdateToOneWithWhereWithoutMenuItemsInputSchema,
  MenuUpdateWithWhereUniqueWithoutRestaurantInputSchema: () => MenuUpdateWithWhereUniqueWithoutRestaurantInputSchema,
  MenuUpdateWithoutMenuCategoryInputSchema: () => MenuUpdateWithoutMenuCategoryInputSchema,
  MenuUpdateWithoutMenuItemsInputSchema: () => MenuUpdateWithoutMenuItemsInputSchema,
  MenuUpdateWithoutRestaurantInputSchema: () => MenuUpdateWithoutRestaurantInputSchema,
  MenuUpsertArgsSchema: () => MenuUpsertArgsSchema,
  MenuUpsertWithWhereUniqueWithoutRestaurantInputSchema: () => MenuUpsertWithWhereUniqueWithoutRestaurantInputSchema,
  MenuUpsertWithoutMenuCategoryInputSchema: () => MenuUpsertWithoutMenuCategoryInputSchema,
  MenuUpsertWithoutMenuItemsInputSchema: () => MenuUpsertWithoutMenuItemsInputSchema,
  MenuWhereInputSchema: () => MenuWhereInputSchema,
  MenuWhereUniqueInputSchema: () => MenuWhereUniqueInputSchema,
  NestedBoolFilterSchema: () => NestedBoolFilterSchema,
  NestedBoolWithAggregatesFilterSchema: () => NestedBoolWithAggregatesFilterSchema,
  NestedDateTimeFilterSchema: () => NestedDateTimeFilterSchema,
  NestedDateTimeNullableFilterSchema: () => NestedDateTimeNullableFilterSchema,
  NestedDateTimeNullableWithAggregatesFilterSchema: () => NestedDateTimeNullableWithAggregatesFilterSchema,
  NestedDateTimeWithAggregatesFilterSchema: () => NestedDateTimeWithAggregatesFilterSchema,
  NestedEnumChecklistFrequencyFilterSchema: () => NestedEnumChecklistFrequencyFilterSchema,
  NestedEnumChecklistFrequencyWithAggregatesFilterSchema: () => NestedEnumChecklistFrequencyWithAggregatesFilterSchema,
  NestedEnumChecklistItemTypeFilterSchema: () => NestedEnumChecklistItemTypeFilterSchema,
  NestedEnumChecklistItemTypeWithAggregatesFilterSchema: () => NestedEnumChecklistItemTypeWithAggregatesFilterSchema,
  NestedEnumChecklistStatusFilterSchema: () => NestedEnumChecklistStatusFilterSchema,
  NestedEnumChecklistStatusWithAggregatesFilterSchema: () => NestedEnumChecklistStatusWithAggregatesFilterSchema,
  NestedEnumConstraintTypeFilterSchema: () => NestedEnumConstraintTypeFilterSchema,
  NestedEnumConstraintTypeWithAggregatesFilterSchema: () => NestedEnumConstraintTypeWithAggregatesFilterSchema,
  NestedEnumDayOfWeekFilterSchema: () => NestedEnumDayOfWeekFilterSchema,
  NestedEnumDayOfWeekWithAggregatesFilterSchema: () => NestedEnumDayOfWeekWithAggregatesFilterSchema,
  NestedEnumEquipmentStatusFilterSchema: () => NestedEnumEquipmentStatusFilterSchema,
  NestedEnumEquipmentStatusWithAggregatesFilterSchema: () => NestedEnumEquipmentStatusWithAggregatesFilterSchema,
  NestedEnumFeedbackSourceFilterSchema: () => NestedEnumFeedbackSourceFilterSchema,
  NestedEnumFeedbackSourceWithAggregatesFilterSchema: () => NestedEnumFeedbackSourceWithAggregatesFilterSchema,
  NestedEnumFeedbackStatusFilterSchema: () => NestedEnumFeedbackStatusFilterSchema,
  NestedEnumFeedbackStatusWithAggregatesFilterSchema: () => NestedEnumFeedbackStatusWithAggregatesFilterSchema,
  NestedEnumMaintenanceTypeFilterSchema: () => NestedEnumMaintenanceTypeFilterSchema,
  NestedEnumMaintenanceTypeWithAggregatesFilterSchema: () => NestedEnumMaintenanceTypeWithAggregatesFilterSchema,
  NestedEnumOrderStatusFilterSchema: () => NestedEnumOrderStatusFilterSchema,
  NestedEnumOrderStatusWithAggregatesFilterSchema: () => NestedEnumOrderStatusWithAggregatesFilterSchema,
  NestedEnumPrepStatusFilterSchema: () => NestedEnumPrepStatusFilterSchema,
  NestedEnumPrepStatusWithAggregatesFilterSchema: () => NestedEnumPrepStatusWithAggregatesFilterSchema,
  NestedEnumShiftStatusFilterSchema: () => NestedEnumShiftStatusFilterSchema,
  NestedEnumShiftStatusWithAggregatesFilterSchema: () => NestedEnumShiftStatusWithAggregatesFilterSchema,
  NestedEnumTaskTypeFilterSchema: () => NestedEnumTaskTypeFilterSchema,
  NestedEnumTaskTypeWithAggregatesFilterSchema: () => NestedEnumTaskTypeWithAggregatesFilterSchema,
  NestedEnumUserRoleFilterSchema: () => NestedEnumUserRoleFilterSchema,
  NestedEnumUserRoleWithAggregatesFilterSchema: () => NestedEnumUserRoleWithAggregatesFilterSchema,
  NestedFloatFilterSchema: () => NestedFloatFilterSchema,
  NestedFloatNullableFilterSchema: () => NestedFloatNullableFilterSchema,
  NestedFloatNullableWithAggregatesFilterSchema: () => NestedFloatNullableWithAggregatesFilterSchema,
  NestedFloatWithAggregatesFilterSchema: () => NestedFloatWithAggregatesFilterSchema,
  NestedIntFilterSchema: () => NestedIntFilterSchema,
  NestedIntNullableFilterSchema: () => NestedIntNullableFilterSchema,
  NestedIntNullableWithAggregatesFilterSchema: () => NestedIntNullableWithAggregatesFilterSchema,
  NestedIntWithAggregatesFilterSchema: () => NestedIntWithAggregatesFilterSchema,
  NestedStringFilterSchema: () => NestedStringFilterSchema,
  NestedStringNullableFilterSchema: () => NestedStringNullableFilterSchema,
  NestedStringNullableWithAggregatesFilterSchema: () => NestedStringNullableWithAggregatesFilterSchema,
  NestedStringWithAggregatesFilterSchema: () => NestedStringWithAggregatesFilterSchema,
  NullableDateTimeFieldUpdateOperationsInputSchema: () => NullableDateTimeFieldUpdateOperationsInputSchema,
  NullableFloatFieldUpdateOperationsInputSchema: () => NullableFloatFieldUpdateOperationsInputSchema,
  NullableIntFieldUpdateOperationsInputSchema: () => NullableIntFieldUpdateOperationsInputSchema,
  NullableStringFieldUpdateOperationsInputSchema: () => NullableStringFieldUpdateOperationsInputSchema,
  NullsOrderSchema: () => NullsOrderSchema,
  NutritionalInfoAggregateArgsSchema: () => NutritionalInfoAggregateArgsSchema,
  NutritionalInfoArgsSchema: () => NutritionalInfoArgsSchema,
  NutritionalInfoAvgOrderByAggregateInputSchema: () => NutritionalInfoAvgOrderByAggregateInputSchema,
  NutritionalInfoCountOrderByAggregateInputSchema: () => NutritionalInfoCountOrderByAggregateInputSchema,
  NutritionalInfoCreateArgsSchema: () => NutritionalInfoCreateArgsSchema,
  NutritionalInfoCreateInputSchema: () => NutritionalInfoCreateInputSchema,
  NutritionalInfoCreateManyAndReturnArgsSchema: () => NutritionalInfoCreateManyAndReturnArgsSchema,
  NutritionalInfoCreateManyArgsSchema: () => NutritionalInfoCreateManyArgsSchema,
  NutritionalInfoCreateManyInputSchema: () => NutritionalInfoCreateManyInputSchema,
  NutritionalInfoCreateNestedOneWithoutMenuItemInputSchema: () => NutritionalInfoCreateNestedOneWithoutMenuItemInputSchema,
  NutritionalInfoCreateOrConnectWithoutMenuItemInputSchema: () => NutritionalInfoCreateOrConnectWithoutMenuItemInputSchema,
  NutritionalInfoCreateWithoutMenuItemInputSchema: () => NutritionalInfoCreateWithoutMenuItemInputSchema,
  NutritionalInfoDeleteArgsSchema: () => NutritionalInfoDeleteArgsSchema,
  NutritionalInfoDeleteManyArgsSchema: () => NutritionalInfoDeleteManyArgsSchema,
  NutritionalInfoFindFirstArgsSchema: () => NutritionalInfoFindFirstArgsSchema,
  NutritionalInfoFindFirstOrThrowArgsSchema: () => NutritionalInfoFindFirstOrThrowArgsSchema,
  NutritionalInfoFindManyArgsSchema: () => NutritionalInfoFindManyArgsSchema,
  NutritionalInfoFindUniqueArgsSchema: () => NutritionalInfoFindUniqueArgsSchema,
  NutritionalInfoFindUniqueOrThrowArgsSchema: () => NutritionalInfoFindUniqueOrThrowArgsSchema,
  NutritionalInfoGroupByArgsSchema: () => NutritionalInfoGroupByArgsSchema,
  NutritionalInfoIncludeSchema: () => NutritionalInfoIncludeSchema,
  NutritionalInfoMaxOrderByAggregateInputSchema: () => NutritionalInfoMaxOrderByAggregateInputSchema,
  NutritionalInfoMinOrderByAggregateInputSchema: () => NutritionalInfoMinOrderByAggregateInputSchema,
  NutritionalInfoNullableRelationFilterSchema: () => NutritionalInfoNullableRelationFilterSchema,
  NutritionalInfoOrderByWithAggregationInputSchema: () => NutritionalInfoOrderByWithAggregationInputSchema,
  NutritionalInfoOrderByWithRelationInputSchema: () => NutritionalInfoOrderByWithRelationInputSchema,
  NutritionalInfoScalarFieldEnumSchema: () => NutritionalInfoScalarFieldEnumSchema,
  NutritionalInfoScalarWhereWithAggregatesInputSchema: () => NutritionalInfoScalarWhereWithAggregatesInputSchema,
  NutritionalInfoSchema: () => NutritionalInfoSchema,
  NutritionalInfoSelectSchema: () => NutritionalInfoSelectSchema,
  NutritionalInfoSumOrderByAggregateInputSchema: () => NutritionalInfoSumOrderByAggregateInputSchema,
  NutritionalInfoUncheckedCreateInputSchema: () => NutritionalInfoUncheckedCreateInputSchema,
  NutritionalInfoUncheckedCreateNestedOneWithoutMenuItemInputSchema: () => NutritionalInfoUncheckedCreateNestedOneWithoutMenuItemInputSchema,
  NutritionalInfoUncheckedCreateWithoutMenuItemInputSchema: () => NutritionalInfoUncheckedCreateWithoutMenuItemInputSchema,
  NutritionalInfoUncheckedUpdateInputSchema: () => NutritionalInfoUncheckedUpdateInputSchema,
  NutritionalInfoUncheckedUpdateManyInputSchema: () => NutritionalInfoUncheckedUpdateManyInputSchema,
  NutritionalInfoUncheckedUpdateOneWithoutMenuItemNestedInputSchema: () => NutritionalInfoUncheckedUpdateOneWithoutMenuItemNestedInputSchema,
  NutritionalInfoUncheckedUpdateWithoutMenuItemInputSchema: () => NutritionalInfoUncheckedUpdateWithoutMenuItemInputSchema,
  NutritionalInfoUpdateArgsSchema: () => NutritionalInfoUpdateArgsSchema,
  NutritionalInfoUpdateInputSchema: () => NutritionalInfoUpdateInputSchema,
  NutritionalInfoUpdateManyArgsSchema: () => NutritionalInfoUpdateManyArgsSchema,
  NutritionalInfoUpdateManyMutationInputSchema: () => NutritionalInfoUpdateManyMutationInputSchema,
  NutritionalInfoUpdateOneWithoutMenuItemNestedInputSchema: () => NutritionalInfoUpdateOneWithoutMenuItemNestedInputSchema,
  NutritionalInfoUpdateToOneWithWhereWithoutMenuItemInputSchema: () => NutritionalInfoUpdateToOneWithWhereWithoutMenuItemInputSchema,
  NutritionalInfoUpdateWithoutMenuItemInputSchema: () => NutritionalInfoUpdateWithoutMenuItemInputSchema,
  NutritionalInfoUpsertArgsSchema: () => NutritionalInfoUpsertArgsSchema,
  NutritionalInfoUpsertWithoutMenuItemInputSchema: () => NutritionalInfoUpsertWithoutMenuItemInputSchema,
  NutritionalInfoWhereInputSchema: () => NutritionalInfoWhereInputSchema,
  NutritionalInfoWhereUniqueInputSchema: () => NutritionalInfoWhereUniqueInputSchema,
  NutritionalRecommendationAggregateArgsSchema: () => NutritionalRecommendationAggregateArgsSchema,
  NutritionalRecommendationArgsSchema: () => NutritionalRecommendationArgsSchema,
  NutritionalRecommendationAvgOrderByAggregateInputSchema: () => NutritionalRecommendationAvgOrderByAggregateInputSchema,
  NutritionalRecommendationCountOrderByAggregateInputSchema: () => NutritionalRecommendationCountOrderByAggregateInputSchema,
  NutritionalRecommendationCreateArgsSchema: () => NutritionalRecommendationCreateArgsSchema,
  NutritionalRecommendationCreateInputSchema: () => NutritionalRecommendationCreateInputSchema,
  NutritionalRecommendationCreateManyAndReturnArgsSchema: () => NutritionalRecommendationCreateManyAndReturnArgsSchema,
  NutritionalRecommendationCreateManyArgsSchema: () => NutritionalRecommendationCreateManyArgsSchema,
  NutritionalRecommendationCreateManyInputSchema: () => NutritionalRecommendationCreateManyInputSchema,
  NutritionalRecommendationCreateManyMenuItemInputEnvelopeSchema: () => NutritionalRecommendationCreateManyMenuItemInputEnvelopeSchema,
  NutritionalRecommendationCreateManyMenuItemInputSchema: () => NutritionalRecommendationCreateManyMenuItemInputSchema,
  NutritionalRecommendationCreateNestedManyWithoutMenuItemInputSchema: () => NutritionalRecommendationCreateNestedManyWithoutMenuItemInputSchema,
  NutritionalRecommendationCreateOrConnectWithoutMenuItemInputSchema: () => NutritionalRecommendationCreateOrConnectWithoutMenuItemInputSchema,
  NutritionalRecommendationCreateWithoutMenuItemInputSchema: () => NutritionalRecommendationCreateWithoutMenuItemInputSchema,
  NutritionalRecommendationDeleteArgsSchema: () => NutritionalRecommendationDeleteArgsSchema,
  NutritionalRecommendationDeleteManyArgsSchema: () => NutritionalRecommendationDeleteManyArgsSchema,
  NutritionalRecommendationFindFirstArgsSchema: () => NutritionalRecommendationFindFirstArgsSchema,
  NutritionalRecommendationFindFirstOrThrowArgsSchema: () => NutritionalRecommendationFindFirstOrThrowArgsSchema,
  NutritionalRecommendationFindManyArgsSchema: () => NutritionalRecommendationFindManyArgsSchema,
  NutritionalRecommendationFindUniqueArgsSchema: () => NutritionalRecommendationFindUniqueArgsSchema,
  NutritionalRecommendationFindUniqueOrThrowArgsSchema: () => NutritionalRecommendationFindUniqueOrThrowArgsSchema,
  NutritionalRecommendationGroupByArgsSchema: () => NutritionalRecommendationGroupByArgsSchema,
  NutritionalRecommendationIncludeSchema: () => NutritionalRecommendationIncludeSchema,
  NutritionalRecommendationListRelationFilterSchema: () => NutritionalRecommendationListRelationFilterSchema,
  NutritionalRecommendationMaxOrderByAggregateInputSchema: () => NutritionalRecommendationMaxOrderByAggregateInputSchema,
  NutritionalRecommendationMinOrderByAggregateInputSchema: () => NutritionalRecommendationMinOrderByAggregateInputSchema,
  NutritionalRecommendationOrderByRelationAggregateInputSchema: () => NutritionalRecommendationOrderByRelationAggregateInputSchema,
  NutritionalRecommendationOrderByWithAggregationInputSchema: () => NutritionalRecommendationOrderByWithAggregationInputSchema,
  NutritionalRecommendationOrderByWithRelationInputSchema: () => NutritionalRecommendationOrderByWithRelationInputSchema,
  NutritionalRecommendationScalarFieldEnumSchema: () => NutritionalRecommendationScalarFieldEnumSchema,
  NutritionalRecommendationScalarWhereInputSchema: () => NutritionalRecommendationScalarWhereInputSchema,
  NutritionalRecommendationScalarWhereWithAggregatesInputSchema: () => NutritionalRecommendationScalarWhereWithAggregatesInputSchema,
  NutritionalRecommendationSchema: () => NutritionalRecommendationSchema,
  NutritionalRecommendationSelectSchema: () => NutritionalRecommendationSelectSchema,
  NutritionalRecommendationSumOrderByAggregateInputSchema: () => NutritionalRecommendationSumOrderByAggregateInputSchema,
  NutritionalRecommendationUncheckedCreateInputSchema: () => NutritionalRecommendationUncheckedCreateInputSchema,
  NutritionalRecommendationUncheckedCreateNestedManyWithoutMenuItemInputSchema: () => NutritionalRecommendationUncheckedCreateNestedManyWithoutMenuItemInputSchema,
  NutritionalRecommendationUncheckedCreateWithoutMenuItemInputSchema: () => NutritionalRecommendationUncheckedCreateWithoutMenuItemInputSchema,
  NutritionalRecommendationUncheckedUpdateInputSchema: () => NutritionalRecommendationUncheckedUpdateInputSchema,
  NutritionalRecommendationUncheckedUpdateManyInputSchema: () => NutritionalRecommendationUncheckedUpdateManyInputSchema,
  NutritionalRecommendationUncheckedUpdateManyWithoutMenuItemInputSchema: () => NutritionalRecommendationUncheckedUpdateManyWithoutMenuItemInputSchema,
  NutritionalRecommendationUncheckedUpdateManyWithoutMenuItemNestedInputSchema: () => NutritionalRecommendationUncheckedUpdateManyWithoutMenuItemNestedInputSchema,
  NutritionalRecommendationUncheckedUpdateWithoutMenuItemInputSchema: () => NutritionalRecommendationUncheckedUpdateWithoutMenuItemInputSchema,
  NutritionalRecommendationUpdateArgsSchema: () => NutritionalRecommendationUpdateArgsSchema,
  NutritionalRecommendationUpdateInputSchema: () => NutritionalRecommendationUpdateInputSchema,
  NutritionalRecommendationUpdateManyArgsSchema: () => NutritionalRecommendationUpdateManyArgsSchema,
  NutritionalRecommendationUpdateManyMutationInputSchema: () => NutritionalRecommendationUpdateManyMutationInputSchema,
  NutritionalRecommendationUpdateManyWithWhereWithoutMenuItemInputSchema: () => NutritionalRecommendationUpdateManyWithWhereWithoutMenuItemInputSchema,
  NutritionalRecommendationUpdateManyWithoutMenuItemNestedInputSchema: () => NutritionalRecommendationUpdateManyWithoutMenuItemNestedInputSchema,
  NutritionalRecommendationUpdateWithWhereUniqueWithoutMenuItemInputSchema: () => NutritionalRecommendationUpdateWithWhereUniqueWithoutMenuItemInputSchema,
  NutritionalRecommendationUpdateWithoutMenuItemInputSchema: () => NutritionalRecommendationUpdateWithoutMenuItemInputSchema,
  NutritionalRecommendationUpsertArgsSchema: () => NutritionalRecommendationUpsertArgsSchema,
  NutritionalRecommendationUpsertWithWhereUniqueWithoutMenuItemInputSchema: () => NutritionalRecommendationUpsertWithWhereUniqueWithoutMenuItemInputSchema,
  NutritionalRecommendationWhereInputSchema: () => NutritionalRecommendationWhereInputSchema,
  NutritionalRecommendationWhereUniqueInputSchema: () => NutritionalRecommendationWhereUniqueInputSchema,
  OrderAggregateArgsSchema: () => OrderAggregateArgsSchema,
  OrderArgsSchema: () => OrderArgsSchema,
  OrderAvgOrderByAggregateInputSchema: () => OrderAvgOrderByAggregateInputSchema,
  OrderCountOrderByAggregateInputSchema: () => OrderCountOrderByAggregateInputSchema,
  OrderCountOutputTypeArgsSchema: () => OrderCountOutputTypeArgsSchema,
  OrderCountOutputTypeSelectSchema: () => OrderCountOutputTypeSelectSchema,
  OrderCreateArgsSchema: () => OrderCreateArgsSchema,
  OrderCreateInputSchema: () => OrderCreateInputSchema,
  OrderCreateManyAndReturnArgsSchema: () => OrderCreateManyAndReturnArgsSchema,
  OrderCreateManyArgsSchema: () => OrderCreateManyArgsSchema,
  OrderCreateManyInputSchema: () => OrderCreateManyInputSchema,
  OrderCreateManyRestaurantInputEnvelopeSchema: () => OrderCreateManyRestaurantInputEnvelopeSchema,
  OrderCreateManyRestaurantInputSchema: () => OrderCreateManyRestaurantInputSchema,
  OrderCreateManyVendorInputEnvelopeSchema: () => OrderCreateManyVendorInputEnvelopeSchema,
  OrderCreateManyVendorInputSchema: () => OrderCreateManyVendorInputSchema,
  OrderCreateNestedManyWithoutRestaurantInputSchema: () => OrderCreateNestedManyWithoutRestaurantInputSchema,
  OrderCreateNestedManyWithoutVendorInputSchema: () => OrderCreateNestedManyWithoutVendorInputSchema,
  OrderCreateNestedOneWithoutItemsInputSchema: () => OrderCreateNestedOneWithoutItemsInputSchema,
  OrderCreateOrConnectWithoutItemsInputSchema: () => OrderCreateOrConnectWithoutItemsInputSchema,
  OrderCreateOrConnectWithoutRestaurantInputSchema: () => OrderCreateOrConnectWithoutRestaurantInputSchema,
  OrderCreateOrConnectWithoutVendorInputSchema: () => OrderCreateOrConnectWithoutVendorInputSchema,
  OrderCreateWithoutItemsInputSchema: () => OrderCreateWithoutItemsInputSchema,
  OrderCreateWithoutRestaurantInputSchema: () => OrderCreateWithoutRestaurantInputSchema,
  OrderCreateWithoutVendorInputSchema: () => OrderCreateWithoutVendorInputSchema,
  OrderDeleteArgsSchema: () => OrderDeleteArgsSchema,
  OrderDeleteManyArgsSchema: () => OrderDeleteManyArgsSchema,
  OrderFindFirstArgsSchema: () => OrderFindFirstArgsSchema,
  OrderFindFirstOrThrowArgsSchema: () => OrderFindFirstOrThrowArgsSchema,
  OrderFindManyArgsSchema: () => OrderFindManyArgsSchema,
  OrderFindUniqueArgsSchema: () => OrderFindUniqueArgsSchema,
  OrderFindUniqueOrThrowArgsSchema: () => OrderFindUniqueOrThrowArgsSchema,
  OrderGroupByArgsSchema: () => OrderGroupByArgsSchema,
  OrderIncludeSchema: () => OrderIncludeSchema,
  OrderItemAggregateArgsSchema: () => OrderItemAggregateArgsSchema,
  OrderItemArgsSchema: () => OrderItemArgsSchema,
  OrderItemAvgOrderByAggregateInputSchema: () => OrderItemAvgOrderByAggregateInputSchema,
  OrderItemCountOrderByAggregateInputSchema: () => OrderItemCountOrderByAggregateInputSchema,
  OrderItemCreateArgsSchema: () => OrderItemCreateArgsSchema,
  OrderItemCreateInputSchema: () => OrderItemCreateInputSchema,
  OrderItemCreateManyAndReturnArgsSchema: () => OrderItemCreateManyAndReturnArgsSchema,
  OrderItemCreateManyArgsSchema: () => OrderItemCreateManyArgsSchema,
  OrderItemCreateManyIngredientInputEnvelopeSchema: () => OrderItemCreateManyIngredientInputEnvelopeSchema,
  OrderItemCreateManyIngredientInputSchema: () => OrderItemCreateManyIngredientInputSchema,
  OrderItemCreateManyInputSchema: () => OrderItemCreateManyInputSchema,
  OrderItemCreateManyOrderInputEnvelopeSchema: () => OrderItemCreateManyOrderInputEnvelopeSchema,
  OrderItemCreateManyOrderInputSchema: () => OrderItemCreateManyOrderInputSchema,
  OrderItemCreateNestedManyWithoutIngredientInputSchema: () => OrderItemCreateNestedManyWithoutIngredientInputSchema,
  OrderItemCreateNestedManyWithoutOrderInputSchema: () => OrderItemCreateNestedManyWithoutOrderInputSchema,
  OrderItemCreateOrConnectWithoutIngredientInputSchema: () => OrderItemCreateOrConnectWithoutIngredientInputSchema,
  OrderItemCreateOrConnectWithoutOrderInputSchema: () => OrderItemCreateOrConnectWithoutOrderInputSchema,
  OrderItemCreateWithoutIngredientInputSchema: () => OrderItemCreateWithoutIngredientInputSchema,
  OrderItemCreateWithoutOrderInputSchema: () => OrderItemCreateWithoutOrderInputSchema,
  OrderItemDeleteArgsSchema: () => OrderItemDeleteArgsSchema,
  OrderItemDeleteManyArgsSchema: () => OrderItemDeleteManyArgsSchema,
  OrderItemFindFirstArgsSchema: () => OrderItemFindFirstArgsSchema,
  OrderItemFindFirstOrThrowArgsSchema: () => OrderItemFindFirstOrThrowArgsSchema,
  OrderItemFindManyArgsSchema: () => OrderItemFindManyArgsSchema,
  OrderItemFindUniqueArgsSchema: () => OrderItemFindUniqueArgsSchema,
  OrderItemFindUniqueOrThrowArgsSchema: () => OrderItemFindUniqueOrThrowArgsSchema,
  OrderItemGroupByArgsSchema: () => OrderItemGroupByArgsSchema,
  OrderItemIncludeSchema: () => OrderItemIncludeSchema,
  OrderItemListRelationFilterSchema: () => OrderItemListRelationFilterSchema,
  OrderItemMaxOrderByAggregateInputSchema: () => OrderItemMaxOrderByAggregateInputSchema,
  OrderItemMinOrderByAggregateInputSchema: () => OrderItemMinOrderByAggregateInputSchema,
  OrderItemOrderByRelationAggregateInputSchema: () => OrderItemOrderByRelationAggregateInputSchema,
  OrderItemOrderByWithAggregationInputSchema: () => OrderItemOrderByWithAggregationInputSchema,
  OrderItemOrderByWithRelationInputSchema: () => OrderItemOrderByWithRelationInputSchema,
  OrderItemScalarFieldEnumSchema: () => OrderItemScalarFieldEnumSchema,
  OrderItemScalarWhereInputSchema: () => OrderItemScalarWhereInputSchema,
  OrderItemScalarWhereWithAggregatesInputSchema: () => OrderItemScalarWhereWithAggregatesInputSchema,
  OrderItemSchema: () => OrderItemSchema$2,
  OrderItemSelectSchema: () => OrderItemSelectSchema,
  OrderItemSumOrderByAggregateInputSchema: () => OrderItemSumOrderByAggregateInputSchema,
  OrderItemUncheckedCreateInputSchema: () => OrderItemUncheckedCreateInputSchema,
  OrderItemUncheckedCreateNestedManyWithoutIngredientInputSchema: () => OrderItemUncheckedCreateNestedManyWithoutIngredientInputSchema,
  OrderItemUncheckedCreateNestedManyWithoutOrderInputSchema: () => OrderItemUncheckedCreateNestedManyWithoutOrderInputSchema,
  OrderItemUncheckedCreateWithoutIngredientInputSchema: () => OrderItemUncheckedCreateWithoutIngredientInputSchema,
  OrderItemUncheckedCreateWithoutOrderInputSchema: () => OrderItemUncheckedCreateWithoutOrderInputSchema,
  OrderItemUncheckedUpdateInputSchema: () => OrderItemUncheckedUpdateInputSchema,
  OrderItemUncheckedUpdateManyInputSchema: () => OrderItemUncheckedUpdateManyInputSchema,
  OrderItemUncheckedUpdateManyWithoutIngredientInputSchema: () => OrderItemUncheckedUpdateManyWithoutIngredientInputSchema,
  OrderItemUncheckedUpdateManyWithoutIngredientNestedInputSchema: () => OrderItemUncheckedUpdateManyWithoutIngredientNestedInputSchema,
  OrderItemUncheckedUpdateManyWithoutOrderInputSchema: () => OrderItemUncheckedUpdateManyWithoutOrderInputSchema,
  OrderItemUncheckedUpdateManyWithoutOrderNestedInputSchema: () => OrderItemUncheckedUpdateManyWithoutOrderNestedInputSchema,
  OrderItemUncheckedUpdateWithoutIngredientInputSchema: () => OrderItemUncheckedUpdateWithoutIngredientInputSchema,
  OrderItemUncheckedUpdateWithoutOrderInputSchema: () => OrderItemUncheckedUpdateWithoutOrderInputSchema,
  OrderItemUpdateArgsSchema: () => OrderItemUpdateArgsSchema,
  OrderItemUpdateInputSchema: () => OrderItemUpdateInputSchema,
  OrderItemUpdateManyArgsSchema: () => OrderItemUpdateManyArgsSchema,
  OrderItemUpdateManyMutationInputSchema: () => OrderItemUpdateManyMutationInputSchema,
  OrderItemUpdateManyWithWhereWithoutIngredientInputSchema: () => OrderItemUpdateManyWithWhereWithoutIngredientInputSchema,
  OrderItemUpdateManyWithWhereWithoutOrderInputSchema: () => OrderItemUpdateManyWithWhereWithoutOrderInputSchema,
  OrderItemUpdateManyWithoutIngredientNestedInputSchema: () => OrderItemUpdateManyWithoutIngredientNestedInputSchema,
  OrderItemUpdateManyWithoutOrderNestedInputSchema: () => OrderItemUpdateManyWithoutOrderNestedInputSchema,
  OrderItemUpdateWithWhereUniqueWithoutIngredientInputSchema: () => OrderItemUpdateWithWhereUniqueWithoutIngredientInputSchema,
  OrderItemUpdateWithWhereUniqueWithoutOrderInputSchema: () => OrderItemUpdateWithWhereUniqueWithoutOrderInputSchema,
  OrderItemUpdateWithoutIngredientInputSchema: () => OrderItemUpdateWithoutIngredientInputSchema,
  OrderItemUpdateWithoutOrderInputSchema: () => OrderItemUpdateWithoutOrderInputSchema,
  OrderItemUpsertArgsSchema: () => OrderItemUpsertArgsSchema,
  OrderItemUpsertWithWhereUniqueWithoutIngredientInputSchema: () => OrderItemUpsertWithWhereUniqueWithoutIngredientInputSchema,
  OrderItemUpsertWithWhereUniqueWithoutOrderInputSchema: () => OrderItemUpsertWithWhereUniqueWithoutOrderInputSchema,
  OrderItemWhereInputSchema: () => OrderItemWhereInputSchema,
  OrderItemWhereUniqueInputSchema: () => OrderItemWhereUniqueInputSchema,
  OrderListRelationFilterSchema: () => OrderListRelationFilterSchema,
  OrderMaxOrderByAggregateInputSchema: () => OrderMaxOrderByAggregateInputSchema,
  OrderMinOrderByAggregateInputSchema: () => OrderMinOrderByAggregateInputSchema,
  OrderOrderByRelationAggregateInputSchema: () => OrderOrderByRelationAggregateInputSchema,
  OrderOrderByWithAggregationInputSchema: () => OrderOrderByWithAggregationInputSchema,
  OrderOrderByWithRelationInputSchema: () => OrderOrderByWithRelationInputSchema,
  OrderRelationFilterSchema: () => OrderRelationFilterSchema,
  OrderScalarFieldEnumSchema: () => OrderScalarFieldEnumSchema,
  OrderScalarWhereInputSchema: () => OrderScalarWhereInputSchema,
  OrderScalarWhereWithAggregatesInputSchema: () => OrderScalarWhereWithAggregatesInputSchema,
  OrderSchema: () => OrderSchema$2,
  OrderSelectSchema: () => OrderSelectSchema,
  OrderStatusSchema: () => OrderStatusSchema,
  OrderSumOrderByAggregateInputSchema: () => OrderSumOrderByAggregateInputSchema,
  OrderUncheckedCreateInputSchema: () => OrderUncheckedCreateInputSchema,
  OrderUncheckedCreateNestedManyWithoutRestaurantInputSchema: () => OrderUncheckedCreateNestedManyWithoutRestaurantInputSchema,
  OrderUncheckedCreateNestedManyWithoutVendorInputSchema: () => OrderUncheckedCreateNestedManyWithoutVendorInputSchema,
  OrderUncheckedCreateWithoutItemsInputSchema: () => OrderUncheckedCreateWithoutItemsInputSchema,
  OrderUncheckedCreateWithoutRestaurantInputSchema: () => OrderUncheckedCreateWithoutRestaurantInputSchema,
  OrderUncheckedCreateWithoutVendorInputSchema: () => OrderUncheckedCreateWithoutVendorInputSchema,
  OrderUncheckedUpdateInputSchema: () => OrderUncheckedUpdateInputSchema,
  OrderUncheckedUpdateManyInputSchema: () => OrderUncheckedUpdateManyInputSchema,
  OrderUncheckedUpdateManyWithoutRestaurantInputSchema: () => OrderUncheckedUpdateManyWithoutRestaurantInputSchema,
  OrderUncheckedUpdateManyWithoutRestaurantNestedInputSchema: () => OrderUncheckedUpdateManyWithoutRestaurantNestedInputSchema,
  OrderUncheckedUpdateManyWithoutVendorInputSchema: () => OrderUncheckedUpdateManyWithoutVendorInputSchema,
  OrderUncheckedUpdateManyWithoutVendorNestedInputSchema: () => OrderUncheckedUpdateManyWithoutVendorNestedInputSchema,
  OrderUncheckedUpdateWithoutItemsInputSchema: () => OrderUncheckedUpdateWithoutItemsInputSchema,
  OrderUncheckedUpdateWithoutRestaurantInputSchema: () => OrderUncheckedUpdateWithoutRestaurantInputSchema,
  OrderUncheckedUpdateWithoutVendorInputSchema: () => OrderUncheckedUpdateWithoutVendorInputSchema,
  OrderUpdateArgsSchema: () => OrderUpdateArgsSchema,
  OrderUpdateInputSchema: () => OrderUpdateInputSchema,
  OrderUpdateManyArgsSchema: () => OrderUpdateManyArgsSchema,
  OrderUpdateManyMutationInputSchema: () => OrderUpdateManyMutationInputSchema,
  OrderUpdateManyWithWhereWithoutRestaurantInputSchema: () => OrderUpdateManyWithWhereWithoutRestaurantInputSchema,
  OrderUpdateManyWithWhereWithoutVendorInputSchema: () => OrderUpdateManyWithWhereWithoutVendorInputSchema,
  OrderUpdateManyWithoutRestaurantNestedInputSchema: () => OrderUpdateManyWithoutRestaurantNestedInputSchema,
  OrderUpdateManyWithoutVendorNestedInputSchema: () => OrderUpdateManyWithoutVendorNestedInputSchema,
  OrderUpdateOneRequiredWithoutItemsNestedInputSchema: () => OrderUpdateOneRequiredWithoutItemsNestedInputSchema,
  OrderUpdateToOneWithWhereWithoutItemsInputSchema: () => OrderUpdateToOneWithWhereWithoutItemsInputSchema,
  OrderUpdateWithWhereUniqueWithoutRestaurantInputSchema: () => OrderUpdateWithWhereUniqueWithoutRestaurantInputSchema,
  OrderUpdateWithWhereUniqueWithoutVendorInputSchema: () => OrderUpdateWithWhereUniqueWithoutVendorInputSchema,
  OrderUpdateWithoutItemsInputSchema: () => OrderUpdateWithoutItemsInputSchema,
  OrderUpdateWithoutRestaurantInputSchema: () => OrderUpdateWithoutRestaurantInputSchema,
  OrderUpdateWithoutVendorInputSchema: () => OrderUpdateWithoutVendorInputSchema,
  OrderUpsertArgsSchema: () => OrderUpsertArgsSchema,
  OrderUpsertWithWhereUniqueWithoutRestaurantInputSchema: () => OrderUpsertWithWhereUniqueWithoutRestaurantInputSchema,
  OrderUpsertWithWhereUniqueWithoutVendorInputSchema: () => OrderUpsertWithWhereUniqueWithoutVendorInputSchema,
  OrderUpsertWithoutItemsInputSchema: () => OrderUpsertWithoutItemsInputSchema,
  OrderWhereInputSchema: () => OrderWhereInputSchema,
  OrderWhereUniqueInputSchema: () => OrderWhereUniqueInputSchema,
  OrganizationAggregateArgsSchema: () => OrganizationAggregateArgsSchema,
  OrganizationArgsSchema: () => OrganizationArgsSchema,
  OrganizationAvgOrderByAggregateInputSchema: () => OrganizationAvgOrderByAggregateInputSchema,
  OrganizationCountOrderByAggregateInputSchema: () => OrganizationCountOrderByAggregateInputSchema,
  OrganizationCountOutputTypeArgsSchema: () => OrganizationCountOutputTypeArgsSchema,
  OrganizationCountOutputTypeSelectSchema: () => OrganizationCountOutputTypeSelectSchema,
  OrganizationCreateArgsSchema: () => OrganizationCreateArgsSchema,
  OrganizationCreateInputSchema: () => OrganizationCreateInputSchema,
  OrganizationCreateManyAndReturnArgsSchema: () => OrganizationCreateManyAndReturnArgsSchema,
  OrganizationCreateManyArgsSchema: () => OrganizationCreateManyArgsSchema,
  OrganizationCreateManyInputSchema: () => OrganizationCreateManyInputSchema,
  OrganizationCreateNestedOneWithoutRestaurantsInputSchema: () => OrganizationCreateNestedOneWithoutRestaurantsInputSchema,
  OrganizationCreateNestedOneWithoutUsersInputSchema: () => OrganizationCreateNestedOneWithoutUsersInputSchema,
  OrganizationCreateOrConnectWithoutRestaurantsInputSchema: () => OrganizationCreateOrConnectWithoutRestaurantsInputSchema,
  OrganizationCreateOrConnectWithoutUsersInputSchema: () => OrganizationCreateOrConnectWithoutUsersInputSchema,
  OrganizationCreateWithoutRestaurantsInputSchema: () => OrganizationCreateWithoutRestaurantsInputSchema,
  OrganizationCreateWithoutUsersInputSchema: () => OrganizationCreateWithoutUsersInputSchema,
  OrganizationDeleteArgsSchema: () => OrganizationDeleteArgsSchema,
  OrganizationDeleteManyArgsSchema: () => OrganizationDeleteManyArgsSchema,
  OrganizationFindFirstArgsSchema: () => OrganizationFindFirstArgsSchema,
  OrganizationFindFirstOrThrowArgsSchema: () => OrganizationFindFirstOrThrowArgsSchema,
  OrganizationFindManyArgsSchema: () => OrganizationFindManyArgsSchema,
  OrganizationFindUniqueArgsSchema: () => OrganizationFindUniqueArgsSchema,
  OrganizationFindUniqueOrThrowArgsSchema: () => OrganizationFindUniqueOrThrowArgsSchema,
  OrganizationGroupByArgsSchema: () => OrganizationGroupByArgsSchema,
  OrganizationIncludeSchema: () => OrganizationIncludeSchema,
  OrganizationMaxOrderByAggregateInputSchema: () => OrganizationMaxOrderByAggregateInputSchema,
  OrganizationMinOrderByAggregateInputSchema: () => OrganizationMinOrderByAggregateInputSchema,
  OrganizationNullableRelationFilterSchema: () => OrganizationNullableRelationFilterSchema,
  OrganizationOrderByWithAggregationInputSchema: () => OrganizationOrderByWithAggregationInputSchema,
  OrganizationOrderByWithRelationInputSchema: () => OrganizationOrderByWithRelationInputSchema,
  OrganizationScalarFieldEnumSchema: () => OrganizationScalarFieldEnumSchema,
  OrganizationScalarWhereWithAggregatesInputSchema: () => OrganizationScalarWhereWithAggregatesInputSchema,
  OrganizationSchema: () => OrganizationSchema$1,
  OrganizationSelectSchema: () => OrganizationSelectSchema,
  OrganizationSumOrderByAggregateInputSchema: () => OrganizationSumOrderByAggregateInputSchema,
  OrganizationUncheckedCreateInputSchema: () => OrganizationUncheckedCreateInputSchema,
  OrganizationUncheckedCreateWithoutRestaurantsInputSchema: () => OrganizationUncheckedCreateWithoutRestaurantsInputSchema,
  OrganizationUncheckedCreateWithoutUsersInputSchema: () => OrganizationUncheckedCreateWithoutUsersInputSchema,
  OrganizationUncheckedUpdateInputSchema: () => OrganizationUncheckedUpdateInputSchema,
  OrganizationUncheckedUpdateManyInputSchema: () => OrganizationUncheckedUpdateManyInputSchema,
  OrganizationUncheckedUpdateWithoutRestaurantsInputSchema: () => OrganizationUncheckedUpdateWithoutRestaurantsInputSchema,
  OrganizationUncheckedUpdateWithoutUsersInputSchema: () => OrganizationUncheckedUpdateWithoutUsersInputSchema,
  OrganizationUpdateArgsSchema: () => OrganizationUpdateArgsSchema,
  OrganizationUpdateInputSchema: () => OrganizationUpdateInputSchema,
  OrganizationUpdateManyArgsSchema: () => OrganizationUpdateManyArgsSchema,
  OrganizationUpdateManyMutationInputSchema: () => OrganizationUpdateManyMutationInputSchema,
  OrganizationUpdateOneWithoutRestaurantsNestedInputSchema: () => OrganizationUpdateOneWithoutRestaurantsNestedInputSchema,
  OrganizationUpdateOneWithoutUsersNestedInputSchema: () => OrganizationUpdateOneWithoutUsersNestedInputSchema,
  OrganizationUpdateToOneWithWhereWithoutRestaurantsInputSchema: () => OrganizationUpdateToOneWithWhereWithoutRestaurantsInputSchema,
  OrganizationUpdateToOneWithWhereWithoutUsersInputSchema: () => OrganizationUpdateToOneWithWhereWithoutUsersInputSchema,
  OrganizationUpdateWithoutRestaurantsInputSchema: () => OrganizationUpdateWithoutRestaurantsInputSchema,
  OrganizationUpdateWithoutUsersInputSchema: () => OrganizationUpdateWithoutUsersInputSchema,
  OrganizationUpsertArgsSchema: () => OrganizationUpsertArgsSchema,
  OrganizationUpsertWithoutRestaurantsInputSchema: () => OrganizationUpsertWithoutRestaurantsInputSchema,
  OrganizationUpsertWithoutUsersInputSchema: () => OrganizationUpsertWithoutUsersInputSchema,
  OrganizationWhereInputSchema: () => OrganizationWhereInputSchema,
  OrganizationWhereUniqueInputSchema: () => OrganizationWhereUniqueInputSchema,
  PasswordResetAggregateArgsSchema: () => PasswordResetAggregateArgsSchema,
  PasswordResetArgsSchema: () => PasswordResetArgsSchema,
  PasswordResetAvgOrderByAggregateInputSchema: () => PasswordResetAvgOrderByAggregateInputSchema,
  PasswordResetCountOrderByAggregateInputSchema: () => PasswordResetCountOrderByAggregateInputSchema,
  PasswordResetCreateArgsSchema: () => PasswordResetCreateArgsSchema,
  PasswordResetCreateInputSchema: () => PasswordResetCreateInputSchema,
  PasswordResetCreateManyAndReturnArgsSchema: () => PasswordResetCreateManyAndReturnArgsSchema,
  PasswordResetCreateManyArgsSchema: () => PasswordResetCreateManyArgsSchema,
  PasswordResetCreateManyInputSchema: () => PasswordResetCreateManyInputSchema,
  PasswordResetCreateManyUserInputEnvelopeSchema: () => PasswordResetCreateManyUserInputEnvelopeSchema,
  PasswordResetCreateManyUserInputSchema: () => PasswordResetCreateManyUserInputSchema,
  PasswordResetCreateNestedManyWithoutUserInputSchema: () => PasswordResetCreateNestedManyWithoutUserInputSchema,
  PasswordResetCreateOrConnectWithoutUserInputSchema: () => PasswordResetCreateOrConnectWithoutUserInputSchema,
  PasswordResetCreateWithoutUserInputSchema: () => PasswordResetCreateWithoutUserInputSchema,
  PasswordResetDeleteArgsSchema: () => PasswordResetDeleteArgsSchema,
  PasswordResetDeleteManyArgsSchema: () => PasswordResetDeleteManyArgsSchema,
  PasswordResetFindFirstArgsSchema: () => PasswordResetFindFirstArgsSchema,
  PasswordResetFindFirstOrThrowArgsSchema: () => PasswordResetFindFirstOrThrowArgsSchema,
  PasswordResetFindManyArgsSchema: () => PasswordResetFindManyArgsSchema,
  PasswordResetFindUniqueArgsSchema: () => PasswordResetFindUniqueArgsSchema,
  PasswordResetFindUniqueOrThrowArgsSchema: () => PasswordResetFindUniqueOrThrowArgsSchema,
  PasswordResetGroupByArgsSchema: () => PasswordResetGroupByArgsSchema,
  PasswordResetIncludeSchema: () => PasswordResetIncludeSchema,
  PasswordResetListRelationFilterSchema: () => PasswordResetListRelationFilterSchema,
  PasswordResetMaxOrderByAggregateInputSchema: () => PasswordResetMaxOrderByAggregateInputSchema,
  PasswordResetMinOrderByAggregateInputSchema: () => PasswordResetMinOrderByAggregateInputSchema,
  PasswordResetOrderByRelationAggregateInputSchema: () => PasswordResetOrderByRelationAggregateInputSchema,
  PasswordResetOrderByWithAggregationInputSchema: () => PasswordResetOrderByWithAggregationInputSchema,
  PasswordResetOrderByWithRelationInputSchema: () => PasswordResetOrderByWithRelationInputSchema,
  PasswordResetScalarFieldEnumSchema: () => PasswordResetScalarFieldEnumSchema,
  PasswordResetScalarWhereInputSchema: () => PasswordResetScalarWhereInputSchema,
  PasswordResetScalarWhereWithAggregatesInputSchema: () => PasswordResetScalarWhereWithAggregatesInputSchema,
  PasswordResetSchema: () => PasswordResetSchema,
  PasswordResetSelectSchema: () => PasswordResetSelectSchema,
  PasswordResetSumOrderByAggregateInputSchema: () => PasswordResetSumOrderByAggregateInputSchema,
  PasswordResetUncheckedCreateInputSchema: () => PasswordResetUncheckedCreateInputSchema,
  PasswordResetUncheckedCreateNestedManyWithoutUserInputSchema: () => PasswordResetUncheckedCreateNestedManyWithoutUserInputSchema,
  PasswordResetUncheckedCreateWithoutUserInputSchema: () => PasswordResetUncheckedCreateWithoutUserInputSchema,
  PasswordResetUncheckedUpdateInputSchema: () => PasswordResetUncheckedUpdateInputSchema,
  PasswordResetUncheckedUpdateManyInputSchema: () => PasswordResetUncheckedUpdateManyInputSchema,
  PasswordResetUncheckedUpdateManyWithoutUserInputSchema: () => PasswordResetUncheckedUpdateManyWithoutUserInputSchema,
  PasswordResetUncheckedUpdateManyWithoutUserNestedInputSchema: () => PasswordResetUncheckedUpdateManyWithoutUserNestedInputSchema,
  PasswordResetUncheckedUpdateWithoutUserInputSchema: () => PasswordResetUncheckedUpdateWithoutUserInputSchema,
  PasswordResetUpdateArgsSchema: () => PasswordResetUpdateArgsSchema,
  PasswordResetUpdateInputSchema: () => PasswordResetUpdateInputSchema,
  PasswordResetUpdateManyArgsSchema: () => PasswordResetUpdateManyArgsSchema,
  PasswordResetUpdateManyMutationInputSchema: () => PasswordResetUpdateManyMutationInputSchema,
  PasswordResetUpdateManyWithWhereWithoutUserInputSchema: () => PasswordResetUpdateManyWithWhereWithoutUserInputSchema,
  PasswordResetUpdateManyWithoutUserNestedInputSchema: () => PasswordResetUpdateManyWithoutUserNestedInputSchema,
  PasswordResetUpdateWithWhereUniqueWithoutUserInputSchema: () => PasswordResetUpdateWithWhereUniqueWithoutUserInputSchema,
  PasswordResetUpdateWithoutUserInputSchema: () => PasswordResetUpdateWithoutUserInputSchema,
  PasswordResetUpsertArgsSchema: () => PasswordResetUpsertArgsSchema,
  PasswordResetUpsertWithWhereUniqueWithoutUserInputSchema: () => PasswordResetUpsertWithWhereUniqueWithoutUserInputSchema,
  PasswordResetWhereInputSchema: () => PasswordResetWhereInputSchema,
  PasswordResetWhereUniqueInputSchema: () => PasswordResetWhereUniqueInputSchema,
  PrepBoardAggregateArgsSchema: () => PrepBoardAggregateArgsSchema,
  PrepBoardArgsSchema: () => PrepBoardArgsSchema,
  PrepBoardAvgOrderByAggregateInputSchema: () => PrepBoardAvgOrderByAggregateInputSchema,
  PrepBoardCountOrderByAggregateInputSchema: () => PrepBoardCountOrderByAggregateInputSchema,
  PrepBoardCountOutputTypeArgsSchema: () => PrepBoardCountOutputTypeArgsSchema,
  PrepBoardCountOutputTypeSelectSchema: () => PrepBoardCountOutputTypeSelectSchema,
  PrepBoardCreateArgsSchema: () => PrepBoardCreateArgsSchema,
  PrepBoardCreateInputSchema: () => PrepBoardCreateInputSchema,
  PrepBoardCreateManyAndReturnArgsSchema: () => PrepBoardCreateManyAndReturnArgsSchema,
  PrepBoardCreateManyArgsSchema: () => PrepBoardCreateManyArgsSchema,
  PrepBoardCreateManyInputSchema: () => PrepBoardCreateManyInputSchema,
  PrepBoardCreateNestedManyWithoutRecipesInputSchema: () => PrepBoardCreateNestedManyWithoutRecipesInputSchema,
  PrepBoardCreateNestedOneWithoutPrepItemsInputSchema: () => PrepBoardCreateNestedOneWithoutPrepItemsInputSchema,
  PrepBoardCreateOrConnectWithoutPrepItemsInputSchema: () => PrepBoardCreateOrConnectWithoutPrepItemsInputSchema,
  PrepBoardCreateOrConnectWithoutRecipesInputSchema: () => PrepBoardCreateOrConnectWithoutRecipesInputSchema,
  PrepBoardCreateWithoutPrepItemsInputSchema: () => PrepBoardCreateWithoutPrepItemsInputSchema,
  PrepBoardCreateWithoutRecipesInputSchema: () => PrepBoardCreateWithoutRecipesInputSchema,
  PrepBoardDeleteArgsSchema: () => PrepBoardDeleteArgsSchema,
  PrepBoardDeleteManyArgsSchema: () => PrepBoardDeleteManyArgsSchema,
  PrepBoardFindFirstArgsSchema: () => PrepBoardFindFirstArgsSchema,
  PrepBoardFindFirstOrThrowArgsSchema: () => PrepBoardFindFirstOrThrowArgsSchema,
  PrepBoardFindManyArgsSchema: () => PrepBoardFindManyArgsSchema,
  PrepBoardFindUniqueArgsSchema: () => PrepBoardFindUniqueArgsSchema,
  PrepBoardFindUniqueOrThrowArgsSchema: () => PrepBoardFindUniqueOrThrowArgsSchema,
  PrepBoardGroupByArgsSchema: () => PrepBoardGroupByArgsSchema,
  PrepBoardIncludeSchema: () => PrepBoardIncludeSchema,
  PrepBoardListRelationFilterSchema: () => PrepBoardListRelationFilterSchema,
  PrepBoardMaxOrderByAggregateInputSchema: () => PrepBoardMaxOrderByAggregateInputSchema,
  PrepBoardMinOrderByAggregateInputSchema: () => PrepBoardMinOrderByAggregateInputSchema,
  PrepBoardOrderByRelationAggregateInputSchema: () => PrepBoardOrderByRelationAggregateInputSchema,
  PrepBoardOrderByWithAggregationInputSchema: () => PrepBoardOrderByWithAggregationInputSchema,
  PrepBoardOrderByWithRelationInputSchema: () => PrepBoardOrderByWithRelationInputSchema,
  PrepBoardRelationFilterSchema: () => PrepBoardRelationFilterSchema,
  PrepBoardScalarFieldEnumSchema: () => PrepBoardScalarFieldEnumSchema,
  PrepBoardScalarWhereInputSchema: () => PrepBoardScalarWhereInputSchema,
  PrepBoardScalarWhereWithAggregatesInputSchema: () => PrepBoardScalarWhereWithAggregatesInputSchema,
  PrepBoardSchema: () => PrepBoardSchema,
  PrepBoardSelectSchema: () => PrepBoardSelectSchema,
  PrepBoardSumOrderByAggregateInputSchema: () => PrepBoardSumOrderByAggregateInputSchema,
  PrepBoardUncheckedCreateInputSchema: () => PrepBoardUncheckedCreateInputSchema,
  PrepBoardUncheckedCreateNestedManyWithoutRecipesInputSchema: () => PrepBoardUncheckedCreateNestedManyWithoutRecipesInputSchema,
  PrepBoardUncheckedCreateWithoutPrepItemsInputSchema: () => PrepBoardUncheckedCreateWithoutPrepItemsInputSchema,
  PrepBoardUncheckedCreateWithoutRecipesInputSchema: () => PrepBoardUncheckedCreateWithoutRecipesInputSchema,
  PrepBoardUncheckedUpdateInputSchema: () => PrepBoardUncheckedUpdateInputSchema,
  PrepBoardUncheckedUpdateManyInputSchema: () => PrepBoardUncheckedUpdateManyInputSchema,
  PrepBoardUncheckedUpdateManyWithoutRecipesInputSchema: () => PrepBoardUncheckedUpdateManyWithoutRecipesInputSchema,
  PrepBoardUncheckedUpdateManyWithoutRecipesNestedInputSchema: () => PrepBoardUncheckedUpdateManyWithoutRecipesNestedInputSchema,
  PrepBoardUncheckedUpdateWithoutPrepItemsInputSchema: () => PrepBoardUncheckedUpdateWithoutPrepItemsInputSchema,
  PrepBoardUncheckedUpdateWithoutRecipesInputSchema: () => PrepBoardUncheckedUpdateWithoutRecipesInputSchema,
  PrepBoardUpdateArgsSchema: () => PrepBoardUpdateArgsSchema,
  PrepBoardUpdateInputSchema: () => PrepBoardUpdateInputSchema,
  PrepBoardUpdateManyArgsSchema: () => PrepBoardUpdateManyArgsSchema,
  PrepBoardUpdateManyMutationInputSchema: () => PrepBoardUpdateManyMutationInputSchema,
  PrepBoardUpdateManyWithWhereWithoutRecipesInputSchema: () => PrepBoardUpdateManyWithWhereWithoutRecipesInputSchema,
  PrepBoardUpdateManyWithoutRecipesNestedInputSchema: () => PrepBoardUpdateManyWithoutRecipesNestedInputSchema,
  PrepBoardUpdateOneRequiredWithoutPrepItemsNestedInputSchema: () => PrepBoardUpdateOneRequiredWithoutPrepItemsNestedInputSchema,
  PrepBoardUpdateToOneWithWhereWithoutPrepItemsInputSchema: () => PrepBoardUpdateToOneWithWhereWithoutPrepItemsInputSchema,
  PrepBoardUpdateWithWhereUniqueWithoutRecipesInputSchema: () => PrepBoardUpdateWithWhereUniqueWithoutRecipesInputSchema,
  PrepBoardUpdateWithoutPrepItemsInputSchema: () => PrepBoardUpdateWithoutPrepItemsInputSchema,
  PrepBoardUpdateWithoutRecipesInputSchema: () => PrepBoardUpdateWithoutRecipesInputSchema,
  PrepBoardUpsertArgsSchema: () => PrepBoardUpsertArgsSchema,
  PrepBoardUpsertWithWhereUniqueWithoutRecipesInputSchema: () => PrepBoardUpsertWithWhereUniqueWithoutRecipesInputSchema,
  PrepBoardUpsertWithoutPrepItemsInputSchema: () => PrepBoardUpsertWithoutPrepItemsInputSchema,
  PrepBoardWhereInputSchema: () => PrepBoardWhereInputSchema,
  PrepBoardWhereUniqueInputSchema: () => PrepBoardWhereUniqueInputSchema,
  PrepHistoryAggregateArgsSchema: () => PrepHistoryAggregateArgsSchema,
  PrepHistoryArgsSchema: () => PrepHistoryArgsSchema,
  PrepHistoryAvgOrderByAggregateInputSchema: () => PrepHistoryAvgOrderByAggregateInputSchema,
  PrepHistoryCountOrderByAggregateInputSchema: () => PrepHistoryCountOrderByAggregateInputSchema,
  PrepHistoryCreateArgsSchema: () => PrepHistoryCreateArgsSchema,
  PrepHistoryCreateInputSchema: () => PrepHistoryCreateInputSchema,
  PrepHistoryCreateManyAndReturnArgsSchema: () => PrepHistoryCreateManyAndReturnArgsSchema,
  PrepHistoryCreateManyArgsSchema: () => PrepHistoryCreateManyArgsSchema,
  PrepHistoryCreateManyInputSchema: () => PrepHistoryCreateManyInputSchema,
  PrepHistoryCreateManyRecipeInputEnvelopeSchema: () => PrepHistoryCreateManyRecipeInputEnvelopeSchema,
  PrepHistoryCreateManyRecipeInputSchema: () => PrepHistoryCreateManyRecipeInputSchema,
  PrepHistoryCreateNestedManyWithoutRecipeInputSchema: () => PrepHistoryCreateNestedManyWithoutRecipeInputSchema,
  PrepHistoryCreateOrConnectWithoutRecipeInputSchema: () => PrepHistoryCreateOrConnectWithoutRecipeInputSchema,
  PrepHistoryCreateWithoutRecipeInputSchema: () => PrepHistoryCreateWithoutRecipeInputSchema,
  PrepHistoryDeleteArgsSchema: () => PrepHistoryDeleteArgsSchema,
  PrepHistoryDeleteManyArgsSchema: () => PrepHistoryDeleteManyArgsSchema,
  PrepHistoryFindFirstArgsSchema: () => PrepHistoryFindFirstArgsSchema,
  PrepHistoryFindFirstOrThrowArgsSchema: () => PrepHistoryFindFirstOrThrowArgsSchema,
  PrepHistoryFindManyArgsSchema: () => PrepHistoryFindManyArgsSchema,
  PrepHistoryFindUniqueArgsSchema: () => PrepHistoryFindUniqueArgsSchema,
  PrepHistoryFindUniqueOrThrowArgsSchema: () => PrepHistoryFindUniqueOrThrowArgsSchema,
  PrepHistoryGroupByArgsSchema: () => PrepHistoryGroupByArgsSchema,
  PrepHistoryIncludeSchema: () => PrepHistoryIncludeSchema,
  PrepHistoryListRelationFilterSchema: () => PrepHistoryListRelationFilterSchema,
  PrepHistoryMaxOrderByAggregateInputSchema: () => PrepHistoryMaxOrderByAggregateInputSchema,
  PrepHistoryMinOrderByAggregateInputSchema: () => PrepHistoryMinOrderByAggregateInputSchema,
  PrepHistoryOrderByRelationAggregateInputSchema: () => PrepHistoryOrderByRelationAggregateInputSchema,
  PrepHistoryOrderByWithAggregationInputSchema: () => PrepHistoryOrderByWithAggregationInputSchema,
  PrepHistoryOrderByWithRelationInputSchema: () => PrepHistoryOrderByWithRelationInputSchema,
  PrepHistoryScalarFieldEnumSchema: () => PrepHistoryScalarFieldEnumSchema,
  PrepHistoryScalarWhereInputSchema: () => PrepHistoryScalarWhereInputSchema,
  PrepHistoryScalarWhereWithAggregatesInputSchema: () => PrepHistoryScalarWhereWithAggregatesInputSchema,
  PrepHistorySchema: () => PrepHistorySchema,
  PrepHistorySelectSchema: () => PrepHistorySelectSchema,
  PrepHistorySumOrderByAggregateInputSchema: () => PrepHistorySumOrderByAggregateInputSchema,
  PrepHistoryUncheckedCreateInputSchema: () => PrepHistoryUncheckedCreateInputSchema,
  PrepHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema: () => PrepHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema,
  PrepHistoryUncheckedCreateWithoutRecipeInputSchema: () => PrepHistoryUncheckedCreateWithoutRecipeInputSchema,
  PrepHistoryUncheckedUpdateInputSchema: () => PrepHistoryUncheckedUpdateInputSchema,
  PrepHistoryUncheckedUpdateManyInputSchema: () => PrepHistoryUncheckedUpdateManyInputSchema,
  PrepHistoryUncheckedUpdateManyWithoutRecipeInputSchema: () => PrepHistoryUncheckedUpdateManyWithoutRecipeInputSchema,
  PrepHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema: () => PrepHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema,
  PrepHistoryUncheckedUpdateWithoutRecipeInputSchema: () => PrepHistoryUncheckedUpdateWithoutRecipeInputSchema,
  PrepHistoryUpdateArgsSchema: () => PrepHistoryUpdateArgsSchema,
  PrepHistoryUpdateInputSchema: () => PrepHistoryUpdateInputSchema,
  PrepHistoryUpdateManyArgsSchema: () => PrepHistoryUpdateManyArgsSchema,
  PrepHistoryUpdateManyMutationInputSchema: () => PrepHistoryUpdateManyMutationInputSchema,
  PrepHistoryUpdateManyWithWhereWithoutRecipeInputSchema: () => PrepHistoryUpdateManyWithWhereWithoutRecipeInputSchema,
  PrepHistoryUpdateManyWithoutRecipeNestedInputSchema: () => PrepHistoryUpdateManyWithoutRecipeNestedInputSchema,
  PrepHistoryUpdateWithWhereUniqueWithoutRecipeInputSchema: () => PrepHistoryUpdateWithWhereUniqueWithoutRecipeInputSchema,
  PrepHistoryUpdateWithoutRecipeInputSchema: () => PrepHistoryUpdateWithoutRecipeInputSchema,
  PrepHistoryUpsertArgsSchema: () => PrepHistoryUpsertArgsSchema,
  PrepHistoryUpsertWithWhereUniqueWithoutRecipeInputSchema: () => PrepHistoryUpsertWithWhereUniqueWithoutRecipeInputSchema,
  PrepHistoryWhereInputSchema: () => PrepHistoryWhereInputSchema,
  PrepHistoryWhereUniqueInputSchema: () => PrepHistoryWhereUniqueInputSchema,
  PrepItemAggregateArgsSchema: () => PrepItemAggregateArgsSchema,
  PrepItemArgsSchema: () => PrepItemArgsSchema,
  PrepItemAvgOrderByAggregateInputSchema: () => PrepItemAvgOrderByAggregateInputSchema,
  PrepItemCountOrderByAggregateInputSchema: () => PrepItemCountOrderByAggregateInputSchema,
  PrepItemCreateArgsSchema: () => PrepItemCreateArgsSchema,
  PrepItemCreateInputSchema: () => PrepItemCreateInputSchema,
  PrepItemCreateManyAndReturnArgsSchema: () => PrepItemCreateManyAndReturnArgsSchema,
  PrepItemCreateManyArgsSchema: () => PrepItemCreateManyArgsSchema,
  PrepItemCreateManyAssignedToInputEnvelopeSchema: () => PrepItemCreateManyAssignedToInputEnvelopeSchema,
  PrepItemCreateManyAssignedToInputSchema: () => PrepItemCreateManyAssignedToInputSchema,
  PrepItemCreateManyInputSchema: () => PrepItemCreateManyInputSchema,
  PrepItemCreateManyPrepBoardInputEnvelopeSchema: () => PrepItemCreateManyPrepBoardInputEnvelopeSchema,
  PrepItemCreateManyPrepBoardInputSchema: () => PrepItemCreateManyPrepBoardInputSchema,
  PrepItemCreateManyRecipeInputEnvelopeSchema: () => PrepItemCreateManyRecipeInputEnvelopeSchema,
  PrepItemCreateManyRecipeInputSchema: () => PrepItemCreateManyRecipeInputSchema,
  PrepItemCreateNestedManyWithoutAssignedToInputSchema: () => PrepItemCreateNestedManyWithoutAssignedToInputSchema,
  PrepItemCreateNestedManyWithoutPrepBoardInputSchema: () => PrepItemCreateNestedManyWithoutPrepBoardInputSchema,
  PrepItemCreateNestedManyWithoutRecipeInputSchema: () => PrepItemCreateNestedManyWithoutRecipeInputSchema,
  PrepItemCreateOrConnectWithoutAssignedToInputSchema: () => PrepItemCreateOrConnectWithoutAssignedToInputSchema,
  PrepItemCreateOrConnectWithoutPrepBoardInputSchema: () => PrepItemCreateOrConnectWithoutPrepBoardInputSchema,
  PrepItemCreateOrConnectWithoutRecipeInputSchema: () => PrepItemCreateOrConnectWithoutRecipeInputSchema,
  PrepItemCreateWithoutAssignedToInputSchema: () => PrepItemCreateWithoutAssignedToInputSchema,
  PrepItemCreateWithoutPrepBoardInputSchema: () => PrepItemCreateWithoutPrepBoardInputSchema,
  PrepItemCreateWithoutRecipeInputSchema: () => PrepItemCreateWithoutRecipeInputSchema,
  PrepItemDeleteArgsSchema: () => PrepItemDeleteArgsSchema,
  PrepItemDeleteManyArgsSchema: () => PrepItemDeleteManyArgsSchema,
  PrepItemFindFirstArgsSchema: () => PrepItemFindFirstArgsSchema,
  PrepItemFindFirstOrThrowArgsSchema: () => PrepItemFindFirstOrThrowArgsSchema,
  PrepItemFindManyArgsSchema: () => PrepItemFindManyArgsSchema,
  PrepItemFindUniqueArgsSchema: () => PrepItemFindUniqueArgsSchema,
  PrepItemFindUniqueOrThrowArgsSchema: () => PrepItemFindUniqueOrThrowArgsSchema,
  PrepItemGroupByArgsSchema: () => PrepItemGroupByArgsSchema,
  PrepItemIncludeSchema: () => PrepItemIncludeSchema,
  PrepItemListRelationFilterSchema: () => PrepItemListRelationFilterSchema,
  PrepItemMaxOrderByAggregateInputSchema: () => PrepItemMaxOrderByAggregateInputSchema,
  PrepItemMinOrderByAggregateInputSchema: () => PrepItemMinOrderByAggregateInputSchema,
  PrepItemOrderByRelationAggregateInputSchema: () => PrepItemOrderByRelationAggregateInputSchema,
  PrepItemOrderByWithAggregationInputSchema: () => PrepItemOrderByWithAggregationInputSchema,
  PrepItemOrderByWithRelationInputSchema: () => PrepItemOrderByWithRelationInputSchema,
  PrepItemScalarFieldEnumSchema: () => PrepItemScalarFieldEnumSchema,
  PrepItemScalarWhereInputSchema: () => PrepItemScalarWhereInputSchema,
  PrepItemScalarWhereWithAggregatesInputSchema: () => PrepItemScalarWhereWithAggregatesInputSchema,
  PrepItemSchema: () => PrepItemSchema,
  PrepItemSelectSchema: () => PrepItemSelectSchema,
  PrepItemSumOrderByAggregateInputSchema: () => PrepItemSumOrderByAggregateInputSchema,
  PrepItemUncheckedCreateInputSchema: () => PrepItemUncheckedCreateInputSchema,
  PrepItemUncheckedCreateNestedManyWithoutAssignedToInputSchema: () => PrepItemUncheckedCreateNestedManyWithoutAssignedToInputSchema,
  PrepItemUncheckedCreateNestedManyWithoutPrepBoardInputSchema: () => PrepItemUncheckedCreateNestedManyWithoutPrepBoardInputSchema,
  PrepItemUncheckedCreateNestedManyWithoutRecipeInputSchema: () => PrepItemUncheckedCreateNestedManyWithoutRecipeInputSchema,
  PrepItemUncheckedCreateWithoutAssignedToInputSchema: () => PrepItemUncheckedCreateWithoutAssignedToInputSchema,
  PrepItemUncheckedCreateWithoutPrepBoardInputSchema: () => PrepItemUncheckedCreateWithoutPrepBoardInputSchema,
  PrepItemUncheckedCreateWithoutRecipeInputSchema: () => PrepItemUncheckedCreateWithoutRecipeInputSchema,
  PrepItemUncheckedUpdateInputSchema: () => PrepItemUncheckedUpdateInputSchema,
  PrepItemUncheckedUpdateManyInputSchema: () => PrepItemUncheckedUpdateManyInputSchema,
  PrepItemUncheckedUpdateManyWithoutAssignedToInputSchema: () => PrepItemUncheckedUpdateManyWithoutAssignedToInputSchema,
  PrepItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema: () => PrepItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema,
  PrepItemUncheckedUpdateManyWithoutPrepBoardInputSchema: () => PrepItemUncheckedUpdateManyWithoutPrepBoardInputSchema,
  PrepItemUncheckedUpdateManyWithoutPrepBoardNestedInputSchema: () => PrepItemUncheckedUpdateManyWithoutPrepBoardNestedInputSchema,
  PrepItemUncheckedUpdateManyWithoutRecipeInputSchema: () => PrepItemUncheckedUpdateManyWithoutRecipeInputSchema,
  PrepItemUncheckedUpdateManyWithoutRecipeNestedInputSchema: () => PrepItemUncheckedUpdateManyWithoutRecipeNestedInputSchema,
  PrepItemUncheckedUpdateWithoutAssignedToInputSchema: () => PrepItemUncheckedUpdateWithoutAssignedToInputSchema,
  PrepItemUncheckedUpdateWithoutPrepBoardInputSchema: () => PrepItemUncheckedUpdateWithoutPrepBoardInputSchema,
  PrepItemUncheckedUpdateWithoutRecipeInputSchema: () => PrepItemUncheckedUpdateWithoutRecipeInputSchema,
  PrepItemUpdateArgsSchema: () => PrepItemUpdateArgsSchema,
  PrepItemUpdateInputSchema: () => PrepItemUpdateInputSchema,
  PrepItemUpdateManyArgsSchema: () => PrepItemUpdateManyArgsSchema,
  PrepItemUpdateManyMutationInputSchema: () => PrepItemUpdateManyMutationInputSchema,
  PrepItemUpdateManyWithWhereWithoutAssignedToInputSchema: () => PrepItemUpdateManyWithWhereWithoutAssignedToInputSchema,
  PrepItemUpdateManyWithWhereWithoutPrepBoardInputSchema: () => PrepItemUpdateManyWithWhereWithoutPrepBoardInputSchema,
  PrepItemUpdateManyWithWhereWithoutRecipeInputSchema: () => PrepItemUpdateManyWithWhereWithoutRecipeInputSchema,
  PrepItemUpdateManyWithoutAssignedToNestedInputSchema: () => PrepItemUpdateManyWithoutAssignedToNestedInputSchema,
  PrepItemUpdateManyWithoutPrepBoardNestedInputSchema: () => PrepItemUpdateManyWithoutPrepBoardNestedInputSchema,
  PrepItemUpdateManyWithoutRecipeNestedInputSchema: () => PrepItemUpdateManyWithoutRecipeNestedInputSchema,
  PrepItemUpdateWithWhereUniqueWithoutAssignedToInputSchema: () => PrepItemUpdateWithWhereUniqueWithoutAssignedToInputSchema,
  PrepItemUpdateWithWhereUniqueWithoutPrepBoardInputSchema: () => PrepItemUpdateWithWhereUniqueWithoutPrepBoardInputSchema,
  PrepItemUpdateWithWhereUniqueWithoutRecipeInputSchema: () => PrepItemUpdateWithWhereUniqueWithoutRecipeInputSchema,
  PrepItemUpdateWithoutAssignedToInputSchema: () => PrepItemUpdateWithoutAssignedToInputSchema,
  PrepItemUpdateWithoutPrepBoardInputSchema: () => PrepItemUpdateWithoutPrepBoardInputSchema,
  PrepItemUpdateWithoutRecipeInputSchema: () => PrepItemUpdateWithoutRecipeInputSchema,
  PrepItemUpsertArgsSchema: () => PrepItemUpsertArgsSchema,
  PrepItemUpsertWithWhereUniqueWithoutAssignedToInputSchema: () => PrepItemUpsertWithWhereUniqueWithoutAssignedToInputSchema,
  PrepItemUpsertWithWhereUniqueWithoutPrepBoardInputSchema: () => PrepItemUpsertWithWhereUniqueWithoutPrepBoardInputSchema,
  PrepItemUpsertWithWhereUniqueWithoutRecipeInputSchema: () => PrepItemUpsertWithWhereUniqueWithoutRecipeInputSchema,
  PrepItemWhereInputSchema: () => PrepItemWhereInputSchema,
  PrepItemWhereUniqueInputSchema: () => PrepItemWhereUniqueInputSchema,
  PrepStatusSchema: () => PrepStatusSchema,
  ProductionPlanAggregateArgsSchema: () => ProductionPlanAggregateArgsSchema,
  ProductionPlanArgsSchema: () => ProductionPlanArgsSchema,
  ProductionPlanAvgOrderByAggregateInputSchema: () => ProductionPlanAvgOrderByAggregateInputSchema,
  ProductionPlanCountOrderByAggregateInputSchema: () => ProductionPlanCountOrderByAggregateInputSchema,
  ProductionPlanCountOutputTypeArgsSchema: () => ProductionPlanCountOutputTypeArgsSchema,
  ProductionPlanCountOutputTypeSelectSchema: () => ProductionPlanCountOutputTypeSelectSchema,
  ProductionPlanCreateArgsSchema: () => ProductionPlanCreateArgsSchema,
  ProductionPlanCreateInputSchema: () => ProductionPlanCreateInputSchema,
  ProductionPlanCreateManyAndReturnArgsSchema: () => ProductionPlanCreateManyAndReturnArgsSchema,
  ProductionPlanCreateManyArgsSchema: () => ProductionPlanCreateManyArgsSchema,
  ProductionPlanCreateManyCreatedByInputEnvelopeSchema: () => ProductionPlanCreateManyCreatedByInputEnvelopeSchema,
  ProductionPlanCreateManyCreatedByInputSchema: () => ProductionPlanCreateManyCreatedByInputSchema,
  ProductionPlanCreateManyInputSchema: () => ProductionPlanCreateManyInputSchema,
  ProductionPlanCreateManyRestaurantInputEnvelopeSchema: () => ProductionPlanCreateManyRestaurantInputEnvelopeSchema,
  ProductionPlanCreateManyRestaurantInputSchema: () => ProductionPlanCreateManyRestaurantInputSchema,
  ProductionPlanCreateNestedManyWithoutCreatedByInputSchema: () => ProductionPlanCreateNestedManyWithoutCreatedByInputSchema,
  ProductionPlanCreateNestedManyWithoutRestaurantInputSchema: () => ProductionPlanCreateNestedManyWithoutRestaurantInputSchema,
  ProductionPlanCreateNestedOneWithoutItemsInputSchema: () => ProductionPlanCreateNestedOneWithoutItemsInputSchema,
  ProductionPlanCreateOrConnectWithoutCreatedByInputSchema: () => ProductionPlanCreateOrConnectWithoutCreatedByInputSchema,
  ProductionPlanCreateOrConnectWithoutItemsInputSchema: () => ProductionPlanCreateOrConnectWithoutItemsInputSchema,
  ProductionPlanCreateOrConnectWithoutRestaurantInputSchema: () => ProductionPlanCreateOrConnectWithoutRestaurantInputSchema,
  ProductionPlanCreateWithoutCreatedByInputSchema: () => ProductionPlanCreateWithoutCreatedByInputSchema,
  ProductionPlanCreateWithoutItemsInputSchema: () => ProductionPlanCreateWithoutItemsInputSchema,
  ProductionPlanCreateWithoutRestaurantInputSchema: () => ProductionPlanCreateWithoutRestaurantInputSchema,
  ProductionPlanDeleteArgsSchema: () => ProductionPlanDeleteArgsSchema,
  ProductionPlanDeleteManyArgsSchema: () => ProductionPlanDeleteManyArgsSchema,
  ProductionPlanFindFirstArgsSchema: () => ProductionPlanFindFirstArgsSchema,
  ProductionPlanFindFirstOrThrowArgsSchema: () => ProductionPlanFindFirstOrThrowArgsSchema,
  ProductionPlanFindManyArgsSchema: () => ProductionPlanFindManyArgsSchema,
  ProductionPlanFindUniqueArgsSchema: () => ProductionPlanFindUniqueArgsSchema,
  ProductionPlanFindUniqueOrThrowArgsSchema: () => ProductionPlanFindUniqueOrThrowArgsSchema,
  ProductionPlanGroupByArgsSchema: () => ProductionPlanGroupByArgsSchema,
  ProductionPlanIncludeSchema: () => ProductionPlanIncludeSchema,
  ProductionPlanItemAggregateArgsSchema: () => ProductionPlanItemAggregateArgsSchema,
  ProductionPlanItemArgsSchema: () => ProductionPlanItemArgsSchema,
  ProductionPlanItemAvgOrderByAggregateInputSchema: () => ProductionPlanItemAvgOrderByAggregateInputSchema,
  ProductionPlanItemCountOrderByAggregateInputSchema: () => ProductionPlanItemCountOrderByAggregateInputSchema,
  ProductionPlanItemCreateArgsSchema: () => ProductionPlanItemCreateArgsSchema,
  ProductionPlanItemCreateInputSchema: () => ProductionPlanItemCreateInputSchema,
  ProductionPlanItemCreateManyAndReturnArgsSchema: () => ProductionPlanItemCreateManyAndReturnArgsSchema,
  ProductionPlanItemCreateManyArgsSchema: () => ProductionPlanItemCreateManyArgsSchema,
  ProductionPlanItemCreateManyAssignedToInputEnvelopeSchema: () => ProductionPlanItemCreateManyAssignedToInputEnvelopeSchema,
  ProductionPlanItemCreateManyAssignedToInputSchema: () => ProductionPlanItemCreateManyAssignedToInputSchema,
  ProductionPlanItemCreateManyInputSchema: () => ProductionPlanItemCreateManyInputSchema,
  ProductionPlanItemCreateManyProductionPlanInputEnvelopeSchema: () => ProductionPlanItemCreateManyProductionPlanInputEnvelopeSchema,
  ProductionPlanItemCreateManyProductionPlanInputSchema: () => ProductionPlanItemCreateManyProductionPlanInputSchema,
  ProductionPlanItemCreateManyRecipeInputEnvelopeSchema: () => ProductionPlanItemCreateManyRecipeInputEnvelopeSchema,
  ProductionPlanItemCreateManyRecipeInputSchema: () => ProductionPlanItemCreateManyRecipeInputSchema,
  ProductionPlanItemCreateNestedManyWithoutAssignedToInputSchema: () => ProductionPlanItemCreateNestedManyWithoutAssignedToInputSchema,
  ProductionPlanItemCreateNestedManyWithoutProductionPlanInputSchema: () => ProductionPlanItemCreateNestedManyWithoutProductionPlanInputSchema,
  ProductionPlanItemCreateNestedManyWithoutRecipeInputSchema: () => ProductionPlanItemCreateNestedManyWithoutRecipeInputSchema,
  ProductionPlanItemCreateOrConnectWithoutAssignedToInputSchema: () => ProductionPlanItemCreateOrConnectWithoutAssignedToInputSchema,
  ProductionPlanItemCreateOrConnectWithoutProductionPlanInputSchema: () => ProductionPlanItemCreateOrConnectWithoutProductionPlanInputSchema,
  ProductionPlanItemCreateOrConnectWithoutRecipeInputSchema: () => ProductionPlanItemCreateOrConnectWithoutRecipeInputSchema,
  ProductionPlanItemCreateWithoutAssignedToInputSchema: () => ProductionPlanItemCreateWithoutAssignedToInputSchema,
  ProductionPlanItemCreateWithoutProductionPlanInputSchema: () => ProductionPlanItemCreateWithoutProductionPlanInputSchema,
  ProductionPlanItemCreateWithoutRecipeInputSchema: () => ProductionPlanItemCreateWithoutRecipeInputSchema,
  ProductionPlanItemDeleteArgsSchema: () => ProductionPlanItemDeleteArgsSchema,
  ProductionPlanItemDeleteManyArgsSchema: () => ProductionPlanItemDeleteManyArgsSchema,
  ProductionPlanItemFindFirstArgsSchema: () => ProductionPlanItemFindFirstArgsSchema,
  ProductionPlanItemFindFirstOrThrowArgsSchema: () => ProductionPlanItemFindFirstOrThrowArgsSchema,
  ProductionPlanItemFindManyArgsSchema: () => ProductionPlanItemFindManyArgsSchema,
  ProductionPlanItemFindUniqueArgsSchema: () => ProductionPlanItemFindUniqueArgsSchema,
  ProductionPlanItemFindUniqueOrThrowArgsSchema: () => ProductionPlanItemFindUniqueOrThrowArgsSchema,
  ProductionPlanItemGroupByArgsSchema: () => ProductionPlanItemGroupByArgsSchema,
  ProductionPlanItemIncludeSchema: () => ProductionPlanItemIncludeSchema,
  ProductionPlanItemListRelationFilterSchema: () => ProductionPlanItemListRelationFilterSchema,
  ProductionPlanItemMaxOrderByAggregateInputSchema: () => ProductionPlanItemMaxOrderByAggregateInputSchema,
  ProductionPlanItemMinOrderByAggregateInputSchema: () => ProductionPlanItemMinOrderByAggregateInputSchema,
  ProductionPlanItemOrderByRelationAggregateInputSchema: () => ProductionPlanItemOrderByRelationAggregateInputSchema,
  ProductionPlanItemOrderByWithAggregationInputSchema: () => ProductionPlanItemOrderByWithAggregationInputSchema,
  ProductionPlanItemOrderByWithRelationInputSchema: () => ProductionPlanItemOrderByWithRelationInputSchema,
  ProductionPlanItemScalarFieldEnumSchema: () => ProductionPlanItemScalarFieldEnumSchema,
  ProductionPlanItemScalarWhereInputSchema: () => ProductionPlanItemScalarWhereInputSchema,
  ProductionPlanItemScalarWhereWithAggregatesInputSchema: () => ProductionPlanItemScalarWhereWithAggregatesInputSchema,
  ProductionPlanItemSchema: () => ProductionPlanItemSchema,
  ProductionPlanItemSelectSchema: () => ProductionPlanItemSelectSchema,
  ProductionPlanItemSumOrderByAggregateInputSchema: () => ProductionPlanItemSumOrderByAggregateInputSchema,
  ProductionPlanItemUncheckedCreateInputSchema: () => ProductionPlanItemUncheckedCreateInputSchema,
  ProductionPlanItemUncheckedCreateNestedManyWithoutAssignedToInputSchema: () => ProductionPlanItemUncheckedCreateNestedManyWithoutAssignedToInputSchema,
  ProductionPlanItemUncheckedCreateNestedManyWithoutProductionPlanInputSchema: () => ProductionPlanItemUncheckedCreateNestedManyWithoutProductionPlanInputSchema,
  ProductionPlanItemUncheckedCreateNestedManyWithoutRecipeInputSchema: () => ProductionPlanItemUncheckedCreateNestedManyWithoutRecipeInputSchema,
  ProductionPlanItemUncheckedCreateWithoutAssignedToInputSchema: () => ProductionPlanItemUncheckedCreateWithoutAssignedToInputSchema,
  ProductionPlanItemUncheckedCreateWithoutProductionPlanInputSchema: () => ProductionPlanItemUncheckedCreateWithoutProductionPlanInputSchema,
  ProductionPlanItemUncheckedCreateWithoutRecipeInputSchema: () => ProductionPlanItemUncheckedCreateWithoutRecipeInputSchema,
  ProductionPlanItemUncheckedUpdateInputSchema: () => ProductionPlanItemUncheckedUpdateInputSchema,
  ProductionPlanItemUncheckedUpdateManyInputSchema: () => ProductionPlanItemUncheckedUpdateManyInputSchema,
  ProductionPlanItemUncheckedUpdateManyWithoutAssignedToInputSchema: () => ProductionPlanItemUncheckedUpdateManyWithoutAssignedToInputSchema,
  ProductionPlanItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema: () => ProductionPlanItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema,
  ProductionPlanItemUncheckedUpdateManyWithoutProductionPlanInputSchema: () => ProductionPlanItemUncheckedUpdateManyWithoutProductionPlanInputSchema,
  ProductionPlanItemUncheckedUpdateManyWithoutProductionPlanNestedInputSchema: () => ProductionPlanItemUncheckedUpdateManyWithoutProductionPlanNestedInputSchema,
  ProductionPlanItemUncheckedUpdateManyWithoutRecipeInputSchema: () => ProductionPlanItemUncheckedUpdateManyWithoutRecipeInputSchema,
  ProductionPlanItemUncheckedUpdateManyWithoutRecipeNestedInputSchema: () => ProductionPlanItemUncheckedUpdateManyWithoutRecipeNestedInputSchema,
  ProductionPlanItemUncheckedUpdateWithoutAssignedToInputSchema: () => ProductionPlanItemUncheckedUpdateWithoutAssignedToInputSchema,
  ProductionPlanItemUncheckedUpdateWithoutProductionPlanInputSchema: () => ProductionPlanItemUncheckedUpdateWithoutProductionPlanInputSchema,
  ProductionPlanItemUncheckedUpdateWithoutRecipeInputSchema: () => ProductionPlanItemUncheckedUpdateWithoutRecipeInputSchema,
  ProductionPlanItemUpdateArgsSchema: () => ProductionPlanItemUpdateArgsSchema,
  ProductionPlanItemUpdateInputSchema: () => ProductionPlanItemUpdateInputSchema,
  ProductionPlanItemUpdateManyArgsSchema: () => ProductionPlanItemUpdateManyArgsSchema,
  ProductionPlanItemUpdateManyMutationInputSchema: () => ProductionPlanItemUpdateManyMutationInputSchema,
  ProductionPlanItemUpdateManyWithWhereWithoutAssignedToInputSchema: () => ProductionPlanItemUpdateManyWithWhereWithoutAssignedToInputSchema,
  ProductionPlanItemUpdateManyWithWhereWithoutProductionPlanInputSchema: () => ProductionPlanItemUpdateManyWithWhereWithoutProductionPlanInputSchema,
  ProductionPlanItemUpdateManyWithWhereWithoutRecipeInputSchema: () => ProductionPlanItemUpdateManyWithWhereWithoutRecipeInputSchema,
  ProductionPlanItemUpdateManyWithoutAssignedToNestedInputSchema: () => ProductionPlanItemUpdateManyWithoutAssignedToNestedInputSchema,
  ProductionPlanItemUpdateManyWithoutProductionPlanNestedInputSchema: () => ProductionPlanItemUpdateManyWithoutProductionPlanNestedInputSchema,
  ProductionPlanItemUpdateManyWithoutRecipeNestedInputSchema: () => ProductionPlanItemUpdateManyWithoutRecipeNestedInputSchema,
  ProductionPlanItemUpdateWithWhereUniqueWithoutAssignedToInputSchema: () => ProductionPlanItemUpdateWithWhereUniqueWithoutAssignedToInputSchema,
  ProductionPlanItemUpdateWithWhereUniqueWithoutProductionPlanInputSchema: () => ProductionPlanItemUpdateWithWhereUniqueWithoutProductionPlanInputSchema,
  ProductionPlanItemUpdateWithWhereUniqueWithoutRecipeInputSchema: () => ProductionPlanItemUpdateWithWhereUniqueWithoutRecipeInputSchema,
  ProductionPlanItemUpdateWithoutAssignedToInputSchema: () => ProductionPlanItemUpdateWithoutAssignedToInputSchema,
  ProductionPlanItemUpdateWithoutProductionPlanInputSchema: () => ProductionPlanItemUpdateWithoutProductionPlanInputSchema,
  ProductionPlanItemUpdateWithoutRecipeInputSchema: () => ProductionPlanItemUpdateWithoutRecipeInputSchema,
  ProductionPlanItemUpsertArgsSchema: () => ProductionPlanItemUpsertArgsSchema,
  ProductionPlanItemUpsertWithWhereUniqueWithoutAssignedToInputSchema: () => ProductionPlanItemUpsertWithWhereUniqueWithoutAssignedToInputSchema,
  ProductionPlanItemUpsertWithWhereUniqueWithoutProductionPlanInputSchema: () => ProductionPlanItemUpsertWithWhereUniqueWithoutProductionPlanInputSchema,
  ProductionPlanItemUpsertWithWhereUniqueWithoutRecipeInputSchema: () => ProductionPlanItemUpsertWithWhereUniqueWithoutRecipeInputSchema,
  ProductionPlanItemWhereInputSchema: () => ProductionPlanItemWhereInputSchema,
  ProductionPlanItemWhereUniqueInputSchema: () => ProductionPlanItemWhereUniqueInputSchema,
  ProductionPlanListRelationFilterSchema: () => ProductionPlanListRelationFilterSchema,
  ProductionPlanMaxOrderByAggregateInputSchema: () => ProductionPlanMaxOrderByAggregateInputSchema,
  ProductionPlanMinOrderByAggregateInputSchema: () => ProductionPlanMinOrderByAggregateInputSchema,
  ProductionPlanOrderByRelationAggregateInputSchema: () => ProductionPlanOrderByRelationAggregateInputSchema,
  ProductionPlanOrderByWithAggregationInputSchema: () => ProductionPlanOrderByWithAggregationInputSchema,
  ProductionPlanOrderByWithRelationInputSchema: () => ProductionPlanOrderByWithRelationInputSchema,
  ProductionPlanRelationFilterSchema: () => ProductionPlanRelationFilterSchema,
  ProductionPlanScalarFieldEnumSchema: () => ProductionPlanScalarFieldEnumSchema,
  ProductionPlanScalarWhereInputSchema: () => ProductionPlanScalarWhereInputSchema,
  ProductionPlanScalarWhereWithAggregatesInputSchema: () => ProductionPlanScalarWhereWithAggregatesInputSchema,
  ProductionPlanSchema: () => ProductionPlanSchema,
  ProductionPlanSelectSchema: () => ProductionPlanSelectSchema,
  ProductionPlanSumOrderByAggregateInputSchema: () => ProductionPlanSumOrderByAggregateInputSchema,
  ProductionPlanUncheckedCreateInputSchema: () => ProductionPlanUncheckedCreateInputSchema,
  ProductionPlanUncheckedCreateNestedManyWithoutCreatedByInputSchema: () => ProductionPlanUncheckedCreateNestedManyWithoutCreatedByInputSchema,
  ProductionPlanUncheckedCreateNestedManyWithoutRestaurantInputSchema: () => ProductionPlanUncheckedCreateNestedManyWithoutRestaurantInputSchema,
  ProductionPlanUncheckedCreateWithoutCreatedByInputSchema: () => ProductionPlanUncheckedCreateWithoutCreatedByInputSchema,
  ProductionPlanUncheckedCreateWithoutItemsInputSchema: () => ProductionPlanUncheckedCreateWithoutItemsInputSchema,
  ProductionPlanUncheckedCreateWithoutRestaurantInputSchema: () => ProductionPlanUncheckedCreateWithoutRestaurantInputSchema,
  ProductionPlanUncheckedUpdateInputSchema: () => ProductionPlanUncheckedUpdateInputSchema,
  ProductionPlanUncheckedUpdateManyInputSchema: () => ProductionPlanUncheckedUpdateManyInputSchema,
  ProductionPlanUncheckedUpdateManyWithoutCreatedByInputSchema: () => ProductionPlanUncheckedUpdateManyWithoutCreatedByInputSchema,
  ProductionPlanUncheckedUpdateManyWithoutCreatedByNestedInputSchema: () => ProductionPlanUncheckedUpdateManyWithoutCreatedByNestedInputSchema,
  ProductionPlanUncheckedUpdateManyWithoutRestaurantInputSchema: () => ProductionPlanUncheckedUpdateManyWithoutRestaurantInputSchema,
  ProductionPlanUncheckedUpdateManyWithoutRestaurantNestedInputSchema: () => ProductionPlanUncheckedUpdateManyWithoutRestaurantNestedInputSchema,
  ProductionPlanUncheckedUpdateWithoutCreatedByInputSchema: () => ProductionPlanUncheckedUpdateWithoutCreatedByInputSchema,
  ProductionPlanUncheckedUpdateWithoutItemsInputSchema: () => ProductionPlanUncheckedUpdateWithoutItemsInputSchema,
  ProductionPlanUncheckedUpdateWithoutRestaurantInputSchema: () => ProductionPlanUncheckedUpdateWithoutRestaurantInputSchema,
  ProductionPlanUpdateArgsSchema: () => ProductionPlanUpdateArgsSchema,
  ProductionPlanUpdateInputSchema: () => ProductionPlanUpdateInputSchema,
  ProductionPlanUpdateManyArgsSchema: () => ProductionPlanUpdateManyArgsSchema,
  ProductionPlanUpdateManyMutationInputSchema: () => ProductionPlanUpdateManyMutationInputSchema,
  ProductionPlanUpdateManyWithWhereWithoutCreatedByInputSchema: () => ProductionPlanUpdateManyWithWhereWithoutCreatedByInputSchema,
  ProductionPlanUpdateManyWithWhereWithoutRestaurantInputSchema: () => ProductionPlanUpdateManyWithWhereWithoutRestaurantInputSchema,
  ProductionPlanUpdateManyWithoutCreatedByNestedInputSchema: () => ProductionPlanUpdateManyWithoutCreatedByNestedInputSchema,
  ProductionPlanUpdateManyWithoutRestaurantNestedInputSchema: () => ProductionPlanUpdateManyWithoutRestaurantNestedInputSchema,
  ProductionPlanUpdateOneRequiredWithoutItemsNestedInputSchema: () => ProductionPlanUpdateOneRequiredWithoutItemsNestedInputSchema,
  ProductionPlanUpdateToOneWithWhereWithoutItemsInputSchema: () => ProductionPlanUpdateToOneWithWhereWithoutItemsInputSchema,
  ProductionPlanUpdateWithWhereUniqueWithoutCreatedByInputSchema: () => ProductionPlanUpdateWithWhereUniqueWithoutCreatedByInputSchema,
  ProductionPlanUpdateWithWhereUniqueWithoutRestaurantInputSchema: () => ProductionPlanUpdateWithWhereUniqueWithoutRestaurantInputSchema,
  ProductionPlanUpdateWithoutCreatedByInputSchema: () => ProductionPlanUpdateWithoutCreatedByInputSchema,
  ProductionPlanUpdateWithoutItemsInputSchema: () => ProductionPlanUpdateWithoutItemsInputSchema,
  ProductionPlanUpdateWithoutRestaurantInputSchema: () => ProductionPlanUpdateWithoutRestaurantInputSchema,
  ProductionPlanUpsertArgsSchema: () => ProductionPlanUpsertArgsSchema,
  ProductionPlanUpsertWithWhereUniqueWithoutCreatedByInputSchema: () => ProductionPlanUpsertWithWhereUniqueWithoutCreatedByInputSchema,
  ProductionPlanUpsertWithWhereUniqueWithoutRestaurantInputSchema: () => ProductionPlanUpsertWithWhereUniqueWithoutRestaurantInputSchema,
  ProductionPlanUpsertWithoutItemsInputSchema: () => ProductionPlanUpsertWithoutItemsInputSchema,
  ProductionPlanWhereInputSchema: () => ProductionPlanWhereInputSchema,
  ProductionPlanWhereUniqueInputSchema: () => ProductionPlanWhereUniqueInputSchema,
  ProductionStatusSchema: () => ProductionStatusSchema,
  QualityChecklistAggregateArgsSchema: () => QualityChecklistAggregateArgsSchema,
  QualityChecklistArgsSchema: () => QualityChecklistArgsSchema,
  QualityChecklistAvgOrderByAggregateInputSchema: () => QualityChecklistAvgOrderByAggregateInputSchema,
  QualityChecklistCountOrderByAggregateInputSchema: () => QualityChecklistCountOrderByAggregateInputSchema,
  QualityChecklistCountOutputTypeArgsSchema: () => QualityChecklistCountOutputTypeArgsSchema,
  QualityChecklistCountOutputTypeSelectSchema: () => QualityChecklistCountOutputTypeSelectSchema,
  QualityChecklistCreateArgsSchema: () => QualityChecklistCreateArgsSchema,
  QualityChecklistCreateInputSchema: () => QualityChecklistCreateInputSchema,
  QualityChecklistCreateManyAndReturnArgsSchema: () => QualityChecklistCreateManyAndReturnArgsSchema,
  QualityChecklistCreateManyArgsSchema: () => QualityChecklistCreateManyArgsSchema,
  QualityChecklistCreateManyInputSchema: () => QualityChecklistCreateManyInputSchema,
  QualityChecklistCreateManyRestaurantInputEnvelopeSchema: () => QualityChecklistCreateManyRestaurantInputEnvelopeSchema,
  QualityChecklistCreateManyRestaurantInputSchema: () => QualityChecklistCreateManyRestaurantInputSchema,
  QualityChecklistCreateNestedManyWithoutRestaurantInputSchema: () => QualityChecklistCreateNestedManyWithoutRestaurantInputSchema,
  QualityChecklistCreateNestedOneWithoutCompletionsInputSchema: () => QualityChecklistCreateNestedOneWithoutCompletionsInputSchema,
  QualityChecklistCreateNestedOneWithoutItemsInputSchema: () => QualityChecklistCreateNestedOneWithoutItemsInputSchema,
  QualityChecklistCreateOrConnectWithoutCompletionsInputSchema: () => QualityChecklistCreateOrConnectWithoutCompletionsInputSchema,
  QualityChecklistCreateOrConnectWithoutItemsInputSchema: () => QualityChecklistCreateOrConnectWithoutItemsInputSchema,
  QualityChecklistCreateOrConnectWithoutRestaurantInputSchema: () => QualityChecklistCreateOrConnectWithoutRestaurantInputSchema,
  QualityChecklistCreateWithoutCompletionsInputSchema: () => QualityChecklistCreateWithoutCompletionsInputSchema,
  QualityChecklistCreateWithoutItemsInputSchema: () => QualityChecklistCreateWithoutItemsInputSchema,
  QualityChecklistCreateWithoutRestaurantInputSchema: () => QualityChecklistCreateWithoutRestaurantInputSchema,
  QualityChecklistDeleteArgsSchema: () => QualityChecklistDeleteArgsSchema,
  QualityChecklistDeleteManyArgsSchema: () => QualityChecklistDeleteManyArgsSchema,
  QualityChecklistFindFirstArgsSchema: () => QualityChecklistFindFirstArgsSchema,
  QualityChecklistFindFirstOrThrowArgsSchema: () => QualityChecklistFindFirstOrThrowArgsSchema,
  QualityChecklistFindManyArgsSchema: () => QualityChecklistFindManyArgsSchema,
  QualityChecklistFindUniqueArgsSchema: () => QualityChecklistFindUniqueArgsSchema,
  QualityChecklistFindUniqueOrThrowArgsSchema: () => QualityChecklistFindUniqueOrThrowArgsSchema,
  QualityChecklistGroupByArgsSchema: () => QualityChecklistGroupByArgsSchema,
  QualityChecklistIncludeSchema: () => QualityChecklistIncludeSchema,
  QualityChecklistListRelationFilterSchema: () => QualityChecklistListRelationFilterSchema,
  QualityChecklistMaxOrderByAggregateInputSchema: () => QualityChecklistMaxOrderByAggregateInputSchema,
  QualityChecklistMinOrderByAggregateInputSchema: () => QualityChecklistMinOrderByAggregateInputSchema,
  QualityChecklistOrderByRelationAggregateInputSchema: () => QualityChecklistOrderByRelationAggregateInputSchema,
  QualityChecklistOrderByWithAggregationInputSchema: () => QualityChecklistOrderByWithAggregationInputSchema,
  QualityChecklistOrderByWithRelationInputSchema: () => QualityChecklistOrderByWithRelationInputSchema,
  QualityChecklistRelationFilterSchema: () => QualityChecklistRelationFilterSchema,
  QualityChecklistScalarFieldEnumSchema: () => QualityChecklistScalarFieldEnumSchema,
  QualityChecklistScalarWhereInputSchema: () => QualityChecklistScalarWhereInputSchema,
  QualityChecklistScalarWhereWithAggregatesInputSchema: () => QualityChecklistScalarWhereWithAggregatesInputSchema,
  QualityChecklistSchema: () => QualityChecklistSchema,
  QualityChecklistSelectSchema: () => QualityChecklistSelectSchema,
  QualityChecklistSumOrderByAggregateInputSchema: () => QualityChecklistSumOrderByAggregateInputSchema,
  QualityChecklistUncheckedCreateInputSchema: () => QualityChecklistUncheckedCreateInputSchema,
  QualityChecklistUncheckedCreateNestedManyWithoutRestaurantInputSchema: () => QualityChecklistUncheckedCreateNestedManyWithoutRestaurantInputSchema,
  QualityChecklistUncheckedCreateWithoutCompletionsInputSchema: () => QualityChecklistUncheckedCreateWithoutCompletionsInputSchema,
  QualityChecklistUncheckedCreateWithoutItemsInputSchema: () => QualityChecklistUncheckedCreateWithoutItemsInputSchema,
  QualityChecklistUncheckedCreateWithoutRestaurantInputSchema: () => QualityChecklistUncheckedCreateWithoutRestaurantInputSchema,
  QualityChecklistUncheckedUpdateInputSchema: () => QualityChecklistUncheckedUpdateInputSchema,
  QualityChecklistUncheckedUpdateManyInputSchema: () => QualityChecklistUncheckedUpdateManyInputSchema,
  QualityChecklistUncheckedUpdateManyWithoutRestaurantInputSchema: () => QualityChecklistUncheckedUpdateManyWithoutRestaurantInputSchema,
  QualityChecklistUncheckedUpdateManyWithoutRestaurantNestedInputSchema: () => QualityChecklistUncheckedUpdateManyWithoutRestaurantNestedInputSchema,
  QualityChecklistUncheckedUpdateWithoutCompletionsInputSchema: () => QualityChecklistUncheckedUpdateWithoutCompletionsInputSchema,
  QualityChecklistUncheckedUpdateWithoutItemsInputSchema: () => QualityChecklistUncheckedUpdateWithoutItemsInputSchema,
  QualityChecklistUncheckedUpdateWithoutRestaurantInputSchema: () => QualityChecklistUncheckedUpdateWithoutRestaurantInputSchema,
  QualityChecklistUpdateArgsSchema: () => QualityChecklistUpdateArgsSchema,
  QualityChecklistUpdateInputSchema: () => QualityChecklistUpdateInputSchema,
  QualityChecklistUpdateManyArgsSchema: () => QualityChecklistUpdateManyArgsSchema,
  QualityChecklistUpdateManyMutationInputSchema: () => QualityChecklistUpdateManyMutationInputSchema,
  QualityChecklistUpdateManyWithWhereWithoutRestaurantInputSchema: () => QualityChecklistUpdateManyWithWhereWithoutRestaurantInputSchema,
  QualityChecklistUpdateManyWithoutRestaurantNestedInputSchema: () => QualityChecklistUpdateManyWithoutRestaurantNestedInputSchema,
  QualityChecklistUpdateOneRequiredWithoutCompletionsNestedInputSchema: () => QualityChecklistUpdateOneRequiredWithoutCompletionsNestedInputSchema,
  QualityChecklistUpdateOneRequiredWithoutItemsNestedInputSchema: () => QualityChecklistUpdateOneRequiredWithoutItemsNestedInputSchema,
  QualityChecklistUpdateToOneWithWhereWithoutCompletionsInputSchema: () => QualityChecklistUpdateToOneWithWhereWithoutCompletionsInputSchema,
  QualityChecklistUpdateToOneWithWhereWithoutItemsInputSchema: () => QualityChecklistUpdateToOneWithWhereWithoutItemsInputSchema,
  QualityChecklistUpdateWithWhereUniqueWithoutRestaurantInputSchema: () => QualityChecklistUpdateWithWhereUniqueWithoutRestaurantInputSchema,
  QualityChecklistUpdateWithoutCompletionsInputSchema: () => QualityChecklistUpdateWithoutCompletionsInputSchema,
  QualityChecklistUpdateWithoutItemsInputSchema: () => QualityChecklistUpdateWithoutItemsInputSchema,
  QualityChecklistUpdateWithoutRestaurantInputSchema: () => QualityChecklistUpdateWithoutRestaurantInputSchema,
  QualityChecklistUpsertArgsSchema: () => QualityChecklistUpsertArgsSchema,
  QualityChecklistUpsertWithWhereUniqueWithoutRestaurantInputSchema: () => QualityChecklistUpsertWithWhereUniqueWithoutRestaurantInputSchema,
  QualityChecklistUpsertWithoutCompletionsInputSchema: () => QualityChecklistUpsertWithoutCompletionsInputSchema,
  QualityChecklistUpsertWithoutItemsInputSchema: () => QualityChecklistUpsertWithoutItemsInputSchema,
  QualityChecklistWhereInputSchema: () => QualityChecklistWhereInputSchema,
  QualityChecklistWhereUniqueInputSchema: () => QualityChecklistWhereUniqueInputSchema,
  QueryModeSchema: () => QueryModeSchema,
  RecipeAggregateArgsSchema: () => RecipeAggregateArgsSchema,
  RecipeArgsSchema: () => RecipeArgsSchema,
  RecipeAvgOrderByAggregateInputSchema: () => RecipeAvgOrderByAggregateInputSchema,
  RecipeCountOrderByAggregateInputSchema: () => RecipeCountOrderByAggregateInputSchema,
  RecipeCountOutputTypeArgsSchema: () => RecipeCountOutputTypeArgsSchema,
  RecipeCountOutputTypeSelectSchema: () => RecipeCountOutputTypeSelectSchema,
  RecipeCreateArgsSchema: () => RecipeCreateArgsSchema,
  RecipeCreateInputSchema: () => RecipeCreateInputSchema,
  RecipeCreateManyAndReturnArgsSchema: () => RecipeCreateManyAndReturnArgsSchema,
  RecipeCreateManyArgsSchema: () => RecipeCreateManyArgsSchema,
  RecipeCreateManyCookBookInputEnvelopeSchema: () => RecipeCreateManyCookBookInputEnvelopeSchema,
  RecipeCreateManyCookBookInputSchema: () => RecipeCreateManyCookBookInputSchema,
  RecipeCreateManyInputSchema: () => RecipeCreateManyInputSchema,
  RecipeCreateManyRestaurantInputEnvelopeSchema: () => RecipeCreateManyRestaurantInputEnvelopeSchema,
  RecipeCreateManyRestaurantInputSchema: () => RecipeCreateManyRestaurantInputSchema,
  RecipeCreateNestedManyWithoutCookBookInputSchema: () => RecipeCreateNestedManyWithoutCookBookInputSchema,
  RecipeCreateNestedManyWithoutDietaryRestrictionsInputSchema: () => RecipeCreateNestedManyWithoutDietaryRestrictionsInputSchema,
  RecipeCreateNestedManyWithoutMenuItemsInputSchema: () => RecipeCreateNestedManyWithoutMenuItemsInputSchema,
  RecipeCreateNestedManyWithoutPrepBoardsInputSchema: () => RecipeCreateNestedManyWithoutPrepBoardsInputSchema,
  RecipeCreateNestedManyWithoutRestaurantInputSchema: () => RecipeCreateNestedManyWithoutRestaurantInputSchema,
  RecipeCreateNestedManyWithoutTagsInputSchema: () => RecipeCreateNestedManyWithoutTagsInputSchema,
  RecipeCreateNestedOneWithoutEquipmentInputSchema: () => RecipeCreateNestedOneWithoutEquipmentInputSchema,
  RecipeCreateNestedOneWithoutFoodCostHistoryInputSchema: () => RecipeCreateNestedOneWithoutFoodCostHistoryInputSchema,
  RecipeCreateNestedOneWithoutIngredientsInputSchema: () => RecipeCreateNestedOneWithoutIngredientsInputSchema,
  RecipeCreateNestedOneWithoutInstructionsInputSchema: () => RecipeCreateNestedOneWithoutInstructionsInputSchema,
  RecipeCreateNestedOneWithoutInventoryWithdrawalInputSchema: () => RecipeCreateNestedOneWithoutInventoryWithdrawalInputSchema,
  RecipeCreateNestedOneWithoutMenuItemRecipeInputSchema: () => RecipeCreateNestedOneWithoutMenuItemRecipeInputSchema,
  RecipeCreateNestedOneWithoutPrepHistoryInputSchema: () => RecipeCreateNestedOneWithoutPrepHistoryInputSchema,
  RecipeCreateNestedOneWithoutPrepItemsInputSchema: () => RecipeCreateNestedOneWithoutPrepItemsInputSchema,
  RecipeCreateNestedOneWithoutProductionPlanItemInputSchema: () => RecipeCreateNestedOneWithoutProductionPlanItemInputSchema,
  RecipeCreateNestedOneWithoutVersionsInputSchema: () => RecipeCreateNestedOneWithoutVersionsInputSchema,
  RecipeCreateOrConnectWithoutCookBookInputSchema: () => RecipeCreateOrConnectWithoutCookBookInputSchema,
  RecipeCreateOrConnectWithoutDietaryRestrictionsInputSchema: () => RecipeCreateOrConnectWithoutDietaryRestrictionsInputSchema,
  RecipeCreateOrConnectWithoutEquipmentInputSchema: () => RecipeCreateOrConnectWithoutEquipmentInputSchema,
  RecipeCreateOrConnectWithoutFoodCostHistoryInputSchema: () => RecipeCreateOrConnectWithoutFoodCostHistoryInputSchema,
  RecipeCreateOrConnectWithoutIngredientsInputSchema: () => RecipeCreateOrConnectWithoutIngredientsInputSchema,
  RecipeCreateOrConnectWithoutInstructionsInputSchema: () => RecipeCreateOrConnectWithoutInstructionsInputSchema,
  RecipeCreateOrConnectWithoutInventoryWithdrawalInputSchema: () => RecipeCreateOrConnectWithoutInventoryWithdrawalInputSchema,
  RecipeCreateOrConnectWithoutMenuItemRecipeInputSchema: () => RecipeCreateOrConnectWithoutMenuItemRecipeInputSchema,
  RecipeCreateOrConnectWithoutMenuItemsInputSchema: () => RecipeCreateOrConnectWithoutMenuItemsInputSchema,
  RecipeCreateOrConnectWithoutPrepBoardsInputSchema: () => RecipeCreateOrConnectWithoutPrepBoardsInputSchema,
  RecipeCreateOrConnectWithoutPrepHistoryInputSchema: () => RecipeCreateOrConnectWithoutPrepHistoryInputSchema,
  RecipeCreateOrConnectWithoutPrepItemsInputSchema: () => RecipeCreateOrConnectWithoutPrepItemsInputSchema,
  RecipeCreateOrConnectWithoutProductionPlanItemInputSchema: () => RecipeCreateOrConnectWithoutProductionPlanItemInputSchema,
  RecipeCreateOrConnectWithoutRestaurantInputSchema: () => RecipeCreateOrConnectWithoutRestaurantInputSchema,
  RecipeCreateOrConnectWithoutTagsInputSchema: () => RecipeCreateOrConnectWithoutTagsInputSchema,
  RecipeCreateOrConnectWithoutVersionsInputSchema: () => RecipeCreateOrConnectWithoutVersionsInputSchema,
  RecipeCreateWithoutCookBookInputSchema: () => RecipeCreateWithoutCookBookInputSchema,
  RecipeCreateWithoutDietaryRestrictionsInputSchema: () => RecipeCreateWithoutDietaryRestrictionsInputSchema,
  RecipeCreateWithoutEquipmentInputSchema: () => RecipeCreateWithoutEquipmentInputSchema,
  RecipeCreateWithoutFoodCostHistoryInputSchema: () => RecipeCreateWithoutFoodCostHistoryInputSchema,
  RecipeCreateWithoutIngredientsInputSchema: () => RecipeCreateWithoutIngredientsInputSchema,
  RecipeCreateWithoutInstructionsInputSchema: () => RecipeCreateWithoutInstructionsInputSchema,
  RecipeCreateWithoutInventoryWithdrawalInputSchema: () => RecipeCreateWithoutInventoryWithdrawalInputSchema,
  RecipeCreateWithoutMenuItemRecipeInputSchema: () => RecipeCreateWithoutMenuItemRecipeInputSchema,
  RecipeCreateWithoutMenuItemsInputSchema: () => RecipeCreateWithoutMenuItemsInputSchema,
  RecipeCreateWithoutPrepBoardsInputSchema: () => RecipeCreateWithoutPrepBoardsInputSchema,
  RecipeCreateWithoutPrepHistoryInputSchema: () => RecipeCreateWithoutPrepHistoryInputSchema,
  RecipeCreateWithoutPrepItemsInputSchema: () => RecipeCreateWithoutPrepItemsInputSchema,
  RecipeCreateWithoutProductionPlanItemInputSchema: () => RecipeCreateWithoutProductionPlanItemInputSchema,
  RecipeCreateWithoutRestaurantInputSchema: () => RecipeCreateWithoutRestaurantInputSchema,
  RecipeCreateWithoutTagsInputSchema: () => RecipeCreateWithoutTagsInputSchema,
  RecipeCreateWithoutVersionsInputSchema: () => RecipeCreateWithoutVersionsInputSchema,
  RecipeCreateimageUrlInputSchema: () => RecipeCreateimageUrlInputSchema,
  RecipeDeleteArgsSchema: () => RecipeDeleteArgsSchema,
  RecipeDeleteManyArgsSchema: () => RecipeDeleteManyArgsSchema,
  RecipeEquipmentAggregateArgsSchema: () => RecipeEquipmentAggregateArgsSchema,
  RecipeEquipmentArgsSchema: () => RecipeEquipmentArgsSchema,
  RecipeEquipmentAvgOrderByAggregateInputSchema: () => RecipeEquipmentAvgOrderByAggregateInputSchema,
  RecipeEquipmentCountOrderByAggregateInputSchema: () => RecipeEquipmentCountOrderByAggregateInputSchema,
  RecipeEquipmentCreateArgsSchema: () => RecipeEquipmentCreateArgsSchema,
  RecipeEquipmentCreateInputSchema: () => RecipeEquipmentCreateInputSchema,
  RecipeEquipmentCreateManyAndReturnArgsSchema: () => RecipeEquipmentCreateManyAndReturnArgsSchema,
  RecipeEquipmentCreateManyArgsSchema: () => RecipeEquipmentCreateManyArgsSchema,
  RecipeEquipmentCreateManyEquipmentInputEnvelopeSchema: () => RecipeEquipmentCreateManyEquipmentInputEnvelopeSchema,
  RecipeEquipmentCreateManyEquipmentInputSchema: () => RecipeEquipmentCreateManyEquipmentInputSchema,
  RecipeEquipmentCreateManyInputSchema: () => RecipeEquipmentCreateManyInputSchema,
  RecipeEquipmentCreateManyRecipeInputEnvelopeSchema: () => RecipeEquipmentCreateManyRecipeInputEnvelopeSchema,
  RecipeEquipmentCreateManyRecipeInputSchema: () => RecipeEquipmentCreateManyRecipeInputSchema,
  RecipeEquipmentCreateNestedManyWithoutEquipmentInputSchema: () => RecipeEquipmentCreateNestedManyWithoutEquipmentInputSchema,
  RecipeEquipmentCreateNestedManyWithoutRecipeInputSchema: () => RecipeEquipmentCreateNestedManyWithoutRecipeInputSchema,
  RecipeEquipmentCreateOrConnectWithoutEquipmentInputSchema: () => RecipeEquipmentCreateOrConnectWithoutEquipmentInputSchema,
  RecipeEquipmentCreateOrConnectWithoutRecipeInputSchema: () => RecipeEquipmentCreateOrConnectWithoutRecipeInputSchema,
  RecipeEquipmentCreateWithoutEquipmentInputSchema: () => RecipeEquipmentCreateWithoutEquipmentInputSchema,
  RecipeEquipmentCreateWithoutRecipeInputSchema: () => RecipeEquipmentCreateWithoutRecipeInputSchema,
  RecipeEquipmentDeleteArgsSchema: () => RecipeEquipmentDeleteArgsSchema,
  RecipeEquipmentDeleteManyArgsSchema: () => RecipeEquipmentDeleteManyArgsSchema,
  RecipeEquipmentFindFirstArgsSchema: () => RecipeEquipmentFindFirstArgsSchema,
  RecipeEquipmentFindFirstOrThrowArgsSchema: () => RecipeEquipmentFindFirstOrThrowArgsSchema,
  RecipeEquipmentFindManyArgsSchema: () => RecipeEquipmentFindManyArgsSchema,
  RecipeEquipmentFindUniqueArgsSchema: () => RecipeEquipmentFindUniqueArgsSchema,
  RecipeEquipmentFindUniqueOrThrowArgsSchema: () => RecipeEquipmentFindUniqueOrThrowArgsSchema,
  RecipeEquipmentGroupByArgsSchema: () => RecipeEquipmentGroupByArgsSchema,
  RecipeEquipmentIncludeSchema: () => RecipeEquipmentIncludeSchema,
  RecipeEquipmentListRelationFilterSchema: () => RecipeEquipmentListRelationFilterSchema,
  RecipeEquipmentMaxOrderByAggregateInputSchema: () => RecipeEquipmentMaxOrderByAggregateInputSchema,
  RecipeEquipmentMinOrderByAggregateInputSchema: () => RecipeEquipmentMinOrderByAggregateInputSchema,
  RecipeEquipmentOrderByRelationAggregateInputSchema: () => RecipeEquipmentOrderByRelationAggregateInputSchema,
  RecipeEquipmentOrderByWithAggregationInputSchema: () => RecipeEquipmentOrderByWithAggregationInputSchema,
  RecipeEquipmentOrderByWithRelationInputSchema: () => RecipeEquipmentOrderByWithRelationInputSchema,
  RecipeEquipmentRecipeIdEquipmentIdCompoundUniqueInputSchema: () => RecipeEquipmentRecipeIdEquipmentIdCompoundUniqueInputSchema,
  RecipeEquipmentScalarFieldEnumSchema: () => RecipeEquipmentScalarFieldEnumSchema,
  RecipeEquipmentScalarWhereInputSchema: () => RecipeEquipmentScalarWhereInputSchema,
  RecipeEquipmentScalarWhereWithAggregatesInputSchema: () => RecipeEquipmentScalarWhereWithAggregatesInputSchema,
  RecipeEquipmentSchema: () => RecipeEquipmentSchema,
  RecipeEquipmentSelectSchema: () => RecipeEquipmentSelectSchema,
  RecipeEquipmentSumOrderByAggregateInputSchema: () => RecipeEquipmentSumOrderByAggregateInputSchema,
  RecipeEquipmentUncheckedCreateInputSchema: () => RecipeEquipmentUncheckedCreateInputSchema,
  RecipeEquipmentUncheckedCreateNestedManyWithoutEquipmentInputSchema: () => RecipeEquipmentUncheckedCreateNestedManyWithoutEquipmentInputSchema,
  RecipeEquipmentUncheckedCreateNestedManyWithoutRecipeInputSchema: () => RecipeEquipmentUncheckedCreateNestedManyWithoutRecipeInputSchema,
  RecipeEquipmentUncheckedCreateWithoutEquipmentInputSchema: () => RecipeEquipmentUncheckedCreateWithoutEquipmentInputSchema,
  RecipeEquipmentUncheckedCreateWithoutRecipeInputSchema: () => RecipeEquipmentUncheckedCreateWithoutRecipeInputSchema,
  RecipeEquipmentUncheckedUpdateInputSchema: () => RecipeEquipmentUncheckedUpdateInputSchema,
  RecipeEquipmentUncheckedUpdateManyInputSchema: () => RecipeEquipmentUncheckedUpdateManyInputSchema,
  RecipeEquipmentUncheckedUpdateManyWithoutEquipmentInputSchema: () => RecipeEquipmentUncheckedUpdateManyWithoutEquipmentInputSchema,
  RecipeEquipmentUncheckedUpdateManyWithoutEquipmentNestedInputSchema: () => RecipeEquipmentUncheckedUpdateManyWithoutEquipmentNestedInputSchema,
  RecipeEquipmentUncheckedUpdateManyWithoutRecipeInputSchema: () => RecipeEquipmentUncheckedUpdateManyWithoutRecipeInputSchema,
  RecipeEquipmentUncheckedUpdateManyWithoutRecipeNestedInputSchema: () => RecipeEquipmentUncheckedUpdateManyWithoutRecipeNestedInputSchema,
  RecipeEquipmentUncheckedUpdateWithoutEquipmentInputSchema: () => RecipeEquipmentUncheckedUpdateWithoutEquipmentInputSchema,
  RecipeEquipmentUncheckedUpdateWithoutRecipeInputSchema: () => RecipeEquipmentUncheckedUpdateWithoutRecipeInputSchema,
  RecipeEquipmentUpdateArgsSchema: () => RecipeEquipmentUpdateArgsSchema,
  RecipeEquipmentUpdateInputSchema: () => RecipeEquipmentUpdateInputSchema,
  RecipeEquipmentUpdateManyArgsSchema: () => RecipeEquipmentUpdateManyArgsSchema,
  RecipeEquipmentUpdateManyMutationInputSchema: () => RecipeEquipmentUpdateManyMutationInputSchema,
  RecipeEquipmentUpdateManyWithWhereWithoutEquipmentInputSchema: () => RecipeEquipmentUpdateManyWithWhereWithoutEquipmentInputSchema,
  RecipeEquipmentUpdateManyWithWhereWithoutRecipeInputSchema: () => RecipeEquipmentUpdateManyWithWhereWithoutRecipeInputSchema,
  RecipeEquipmentUpdateManyWithoutEquipmentNestedInputSchema: () => RecipeEquipmentUpdateManyWithoutEquipmentNestedInputSchema,
  RecipeEquipmentUpdateManyWithoutRecipeNestedInputSchema: () => RecipeEquipmentUpdateManyWithoutRecipeNestedInputSchema,
  RecipeEquipmentUpdateWithWhereUniqueWithoutEquipmentInputSchema: () => RecipeEquipmentUpdateWithWhereUniqueWithoutEquipmentInputSchema,
  RecipeEquipmentUpdateWithWhereUniqueWithoutRecipeInputSchema: () => RecipeEquipmentUpdateWithWhereUniqueWithoutRecipeInputSchema,
  RecipeEquipmentUpdateWithoutEquipmentInputSchema: () => RecipeEquipmentUpdateWithoutEquipmentInputSchema,
  RecipeEquipmentUpdateWithoutRecipeInputSchema: () => RecipeEquipmentUpdateWithoutRecipeInputSchema,
  RecipeEquipmentUpsertArgsSchema: () => RecipeEquipmentUpsertArgsSchema,
  RecipeEquipmentUpsertWithWhereUniqueWithoutEquipmentInputSchema: () => RecipeEquipmentUpsertWithWhereUniqueWithoutEquipmentInputSchema,
  RecipeEquipmentUpsertWithWhereUniqueWithoutRecipeInputSchema: () => RecipeEquipmentUpsertWithWhereUniqueWithoutRecipeInputSchema,
  RecipeEquipmentWhereInputSchema: () => RecipeEquipmentWhereInputSchema,
  RecipeEquipmentWhereUniqueInputSchema: () => RecipeEquipmentWhereUniqueInputSchema,
  RecipeFindFirstArgsSchema: () => RecipeFindFirstArgsSchema,
  RecipeFindFirstOrThrowArgsSchema: () => RecipeFindFirstOrThrowArgsSchema,
  RecipeFindManyArgsSchema: () => RecipeFindManyArgsSchema,
  RecipeFindUniqueArgsSchema: () => RecipeFindUniqueArgsSchema,
  RecipeFindUniqueOrThrowArgsSchema: () => RecipeFindUniqueOrThrowArgsSchema,
  RecipeGroupByArgsSchema: () => RecipeGroupByArgsSchema,
  RecipeIncludeSchema: () => RecipeIncludeSchema,
  RecipeIngredientAggregateArgsSchema: () => RecipeIngredientAggregateArgsSchema,
  RecipeIngredientArgsSchema: () => RecipeIngredientArgsSchema,
  RecipeIngredientAvgOrderByAggregateInputSchema: () => RecipeIngredientAvgOrderByAggregateInputSchema,
  RecipeIngredientCountOrderByAggregateInputSchema: () => RecipeIngredientCountOrderByAggregateInputSchema,
  RecipeIngredientCreateArgsSchema: () => RecipeIngredientCreateArgsSchema,
  RecipeIngredientCreateInputSchema: () => RecipeIngredientCreateInputSchema,
  RecipeIngredientCreateManyAndReturnArgsSchema: () => RecipeIngredientCreateManyAndReturnArgsSchema,
  RecipeIngredientCreateManyArgsSchema: () => RecipeIngredientCreateManyArgsSchema,
  RecipeIngredientCreateManyIngredientInputEnvelopeSchema: () => RecipeIngredientCreateManyIngredientInputEnvelopeSchema,
  RecipeIngredientCreateManyIngredientInputSchema: () => RecipeIngredientCreateManyIngredientInputSchema,
  RecipeIngredientCreateManyInputSchema: () => RecipeIngredientCreateManyInputSchema,
  RecipeIngredientCreateManyRecipeInputEnvelopeSchema: () => RecipeIngredientCreateManyRecipeInputEnvelopeSchema,
  RecipeIngredientCreateManyRecipeInputSchema: () => RecipeIngredientCreateManyRecipeInputSchema,
  RecipeIngredientCreateManyRecipeVersionInputEnvelopeSchema: () => RecipeIngredientCreateManyRecipeVersionInputEnvelopeSchema,
  RecipeIngredientCreateManyRecipeVersionInputSchema: () => RecipeIngredientCreateManyRecipeVersionInputSchema,
  RecipeIngredientCreateNestedManyWithoutIngredientInputSchema: () => RecipeIngredientCreateNestedManyWithoutIngredientInputSchema,
  RecipeIngredientCreateNestedManyWithoutRecipeInputSchema: () => RecipeIngredientCreateNestedManyWithoutRecipeInputSchema,
  RecipeIngredientCreateNestedManyWithoutRecipeVersionInputSchema: () => RecipeIngredientCreateNestedManyWithoutRecipeVersionInputSchema,
  RecipeIngredientCreateOrConnectWithoutIngredientInputSchema: () => RecipeIngredientCreateOrConnectWithoutIngredientInputSchema,
  RecipeIngredientCreateOrConnectWithoutRecipeInputSchema: () => RecipeIngredientCreateOrConnectWithoutRecipeInputSchema,
  RecipeIngredientCreateOrConnectWithoutRecipeVersionInputSchema: () => RecipeIngredientCreateOrConnectWithoutRecipeVersionInputSchema,
  RecipeIngredientCreateWithoutIngredientInputSchema: () => RecipeIngredientCreateWithoutIngredientInputSchema,
  RecipeIngredientCreateWithoutRecipeInputSchema: () => RecipeIngredientCreateWithoutRecipeInputSchema,
  RecipeIngredientCreateWithoutRecipeVersionInputSchema: () => RecipeIngredientCreateWithoutRecipeVersionInputSchema,
  RecipeIngredientDeleteArgsSchema: () => RecipeIngredientDeleteArgsSchema,
  RecipeIngredientDeleteManyArgsSchema: () => RecipeIngredientDeleteManyArgsSchema,
  RecipeIngredientFindFirstArgsSchema: () => RecipeIngredientFindFirstArgsSchema,
  RecipeIngredientFindFirstOrThrowArgsSchema: () => RecipeIngredientFindFirstOrThrowArgsSchema,
  RecipeIngredientFindManyArgsSchema: () => RecipeIngredientFindManyArgsSchema,
  RecipeIngredientFindUniqueArgsSchema: () => RecipeIngredientFindUniqueArgsSchema,
  RecipeIngredientFindUniqueOrThrowArgsSchema: () => RecipeIngredientFindUniqueOrThrowArgsSchema,
  RecipeIngredientGroupByArgsSchema: () => RecipeIngredientGroupByArgsSchema,
  RecipeIngredientIncludeSchema: () => RecipeIngredientIncludeSchema,
  RecipeIngredientListRelationFilterSchema: () => RecipeIngredientListRelationFilterSchema,
  RecipeIngredientMaxOrderByAggregateInputSchema: () => RecipeIngredientMaxOrderByAggregateInputSchema,
  RecipeIngredientMinOrderByAggregateInputSchema: () => RecipeIngredientMinOrderByAggregateInputSchema,
  RecipeIngredientOrderByRelationAggregateInputSchema: () => RecipeIngredientOrderByRelationAggregateInputSchema,
  RecipeIngredientOrderByWithAggregationInputSchema: () => RecipeIngredientOrderByWithAggregationInputSchema,
  RecipeIngredientOrderByWithRelationInputSchema: () => RecipeIngredientOrderByWithRelationInputSchema,
  RecipeIngredientRecipeIdIngredientIdCompoundUniqueInputSchema: () => RecipeIngredientRecipeIdIngredientIdCompoundUniqueInputSchema,
  RecipeIngredientScalarFieldEnumSchema: () => RecipeIngredientScalarFieldEnumSchema,
  RecipeIngredientScalarWhereInputSchema: () => RecipeIngredientScalarWhereInputSchema,
  RecipeIngredientScalarWhereWithAggregatesInputSchema: () => RecipeIngredientScalarWhereWithAggregatesInputSchema,
  RecipeIngredientSchema: () => RecipeIngredientSchema,
  RecipeIngredientSelectSchema: () => RecipeIngredientSelectSchema,
  RecipeIngredientSumOrderByAggregateInputSchema: () => RecipeIngredientSumOrderByAggregateInputSchema,
  RecipeIngredientUncheckedCreateInputSchema: () => RecipeIngredientUncheckedCreateInputSchema,
  RecipeIngredientUncheckedCreateNestedManyWithoutIngredientInputSchema: () => RecipeIngredientUncheckedCreateNestedManyWithoutIngredientInputSchema,
  RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInputSchema: () => RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInputSchema,
  RecipeIngredientUncheckedCreateNestedManyWithoutRecipeVersionInputSchema: () => RecipeIngredientUncheckedCreateNestedManyWithoutRecipeVersionInputSchema,
  RecipeIngredientUncheckedCreateWithoutIngredientInputSchema: () => RecipeIngredientUncheckedCreateWithoutIngredientInputSchema,
  RecipeIngredientUncheckedCreateWithoutRecipeInputSchema: () => RecipeIngredientUncheckedCreateWithoutRecipeInputSchema,
  RecipeIngredientUncheckedCreateWithoutRecipeVersionInputSchema: () => RecipeIngredientUncheckedCreateWithoutRecipeVersionInputSchema,
  RecipeIngredientUncheckedUpdateInputSchema: () => RecipeIngredientUncheckedUpdateInputSchema,
  RecipeIngredientUncheckedUpdateManyInputSchema: () => RecipeIngredientUncheckedUpdateManyInputSchema,
  RecipeIngredientUncheckedUpdateManyWithoutIngredientInputSchema: () => RecipeIngredientUncheckedUpdateManyWithoutIngredientInputSchema,
  RecipeIngredientUncheckedUpdateManyWithoutIngredientNestedInputSchema: () => RecipeIngredientUncheckedUpdateManyWithoutIngredientNestedInputSchema,
  RecipeIngredientUncheckedUpdateManyWithoutRecipeInputSchema: () => RecipeIngredientUncheckedUpdateManyWithoutRecipeInputSchema,
  RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInputSchema: () => RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInputSchema,
  RecipeIngredientUncheckedUpdateManyWithoutRecipeVersionInputSchema: () => RecipeIngredientUncheckedUpdateManyWithoutRecipeVersionInputSchema,
  RecipeIngredientUncheckedUpdateManyWithoutRecipeVersionNestedInputSchema: () => RecipeIngredientUncheckedUpdateManyWithoutRecipeVersionNestedInputSchema,
  RecipeIngredientUncheckedUpdateWithoutIngredientInputSchema: () => RecipeIngredientUncheckedUpdateWithoutIngredientInputSchema,
  RecipeIngredientUncheckedUpdateWithoutRecipeInputSchema: () => RecipeIngredientUncheckedUpdateWithoutRecipeInputSchema,
  RecipeIngredientUncheckedUpdateWithoutRecipeVersionInputSchema: () => RecipeIngredientUncheckedUpdateWithoutRecipeVersionInputSchema,
  RecipeIngredientUpdateArgsSchema: () => RecipeIngredientUpdateArgsSchema,
  RecipeIngredientUpdateInputSchema: () => RecipeIngredientUpdateInputSchema,
  RecipeIngredientUpdateManyArgsSchema: () => RecipeIngredientUpdateManyArgsSchema,
  RecipeIngredientUpdateManyMutationInputSchema: () => RecipeIngredientUpdateManyMutationInputSchema,
  RecipeIngredientUpdateManyWithWhereWithoutIngredientInputSchema: () => RecipeIngredientUpdateManyWithWhereWithoutIngredientInputSchema,
  RecipeIngredientUpdateManyWithWhereWithoutRecipeInputSchema: () => RecipeIngredientUpdateManyWithWhereWithoutRecipeInputSchema,
  RecipeIngredientUpdateManyWithWhereWithoutRecipeVersionInputSchema: () => RecipeIngredientUpdateManyWithWhereWithoutRecipeVersionInputSchema,
  RecipeIngredientUpdateManyWithoutIngredientNestedInputSchema: () => RecipeIngredientUpdateManyWithoutIngredientNestedInputSchema,
  RecipeIngredientUpdateManyWithoutRecipeNestedInputSchema: () => RecipeIngredientUpdateManyWithoutRecipeNestedInputSchema,
  RecipeIngredientUpdateManyWithoutRecipeVersionNestedInputSchema: () => RecipeIngredientUpdateManyWithoutRecipeVersionNestedInputSchema,
  RecipeIngredientUpdateWithWhereUniqueWithoutIngredientInputSchema: () => RecipeIngredientUpdateWithWhereUniqueWithoutIngredientInputSchema,
  RecipeIngredientUpdateWithWhereUniqueWithoutRecipeInputSchema: () => RecipeIngredientUpdateWithWhereUniqueWithoutRecipeInputSchema,
  RecipeIngredientUpdateWithWhereUniqueWithoutRecipeVersionInputSchema: () => RecipeIngredientUpdateWithWhereUniqueWithoutRecipeVersionInputSchema,
  RecipeIngredientUpdateWithoutIngredientInputSchema: () => RecipeIngredientUpdateWithoutIngredientInputSchema,
  RecipeIngredientUpdateWithoutRecipeInputSchema: () => RecipeIngredientUpdateWithoutRecipeInputSchema,
  RecipeIngredientUpdateWithoutRecipeVersionInputSchema: () => RecipeIngredientUpdateWithoutRecipeVersionInputSchema,
  RecipeIngredientUpsertArgsSchema: () => RecipeIngredientUpsertArgsSchema,
  RecipeIngredientUpsertWithWhereUniqueWithoutIngredientInputSchema: () => RecipeIngredientUpsertWithWhereUniqueWithoutIngredientInputSchema,
  RecipeIngredientUpsertWithWhereUniqueWithoutRecipeInputSchema: () => RecipeIngredientUpsertWithWhereUniqueWithoutRecipeInputSchema,
  RecipeIngredientUpsertWithWhereUniqueWithoutRecipeVersionInputSchema: () => RecipeIngredientUpsertWithWhereUniqueWithoutRecipeVersionInputSchema,
  RecipeIngredientWhereInputSchema: () => RecipeIngredientWhereInputSchema,
  RecipeIngredientWhereUniqueInputSchema: () => RecipeIngredientWhereUniqueInputSchema,
  RecipeInstructionAggregateArgsSchema: () => RecipeInstructionAggregateArgsSchema,
  RecipeInstructionArgsSchema: () => RecipeInstructionArgsSchema,
  RecipeInstructionAvgOrderByAggregateInputSchema: () => RecipeInstructionAvgOrderByAggregateInputSchema,
  RecipeInstructionCountOrderByAggregateInputSchema: () => RecipeInstructionCountOrderByAggregateInputSchema,
  RecipeInstructionCreateArgsSchema: () => RecipeInstructionCreateArgsSchema,
  RecipeInstructionCreateInputSchema: () => RecipeInstructionCreateInputSchema,
  RecipeInstructionCreateManyAndReturnArgsSchema: () => RecipeInstructionCreateManyAndReturnArgsSchema,
  RecipeInstructionCreateManyArgsSchema: () => RecipeInstructionCreateManyArgsSchema,
  RecipeInstructionCreateManyInputSchema: () => RecipeInstructionCreateManyInputSchema,
  RecipeInstructionCreateManyRecipeInputEnvelopeSchema: () => RecipeInstructionCreateManyRecipeInputEnvelopeSchema,
  RecipeInstructionCreateManyRecipeInputSchema: () => RecipeInstructionCreateManyRecipeInputSchema,
  RecipeInstructionCreateManyRecipeVersionInputEnvelopeSchema: () => RecipeInstructionCreateManyRecipeVersionInputEnvelopeSchema,
  RecipeInstructionCreateManyRecipeVersionInputSchema: () => RecipeInstructionCreateManyRecipeVersionInputSchema,
  RecipeInstructionCreateNestedManyWithoutRecipeInputSchema: () => RecipeInstructionCreateNestedManyWithoutRecipeInputSchema,
  RecipeInstructionCreateNestedManyWithoutRecipeVersionInputSchema: () => RecipeInstructionCreateNestedManyWithoutRecipeVersionInputSchema,
  RecipeInstructionCreateOrConnectWithoutRecipeInputSchema: () => RecipeInstructionCreateOrConnectWithoutRecipeInputSchema,
  RecipeInstructionCreateOrConnectWithoutRecipeVersionInputSchema: () => RecipeInstructionCreateOrConnectWithoutRecipeVersionInputSchema,
  RecipeInstructionCreateWithoutRecipeInputSchema: () => RecipeInstructionCreateWithoutRecipeInputSchema,
  RecipeInstructionCreateWithoutRecipeVersionInputSchema: () => RecipeInstructionCreateWithoutRecipeVersionInputSchema,
  RecipeInstructionDeleteArgsSchema: () => RecipeInstructionDeleteArgsSchema,
  RecipeInstructionDeleteManyArgsSchema: () => RecipeInstructionDeleteManyArgsSchema,
  RecipeInstructionFindFirstArgsSchema: () => RecipeInstructionFindFirstArgsSchema,
  RecipeInstructionFindFirstOrThrowArgsSchema: () => RecipeInstructionFindFirstOrThrowArgsSchema,
  RecipeInstructionFindManyArgsSchema: () => RecipeInstructionFindManyArgsSchema,
  RecipeInstructionFindUniqueArgsSchema: () => RecipeInstructionFindUniqueArgsSchema,
  RecipeInstructionFindUniqueOrThrowArgsSchema: () => RecipeInstructionFindUniqueOrThrowArgsSchema,
  RecipeInstructionGroupByArgsSchema: () => RecipeInstructionGroupByArgsSchema,
  RecipeInstructionIncludeSchema: () => RecipeInstructionIncludeSchema,
  RecipeInstructionListRelationFilterSchema: () => RecipeInstructionListRelationFilterSchema,
  RecipeInstructionMaxOrderByAggregateInputSchema: () => RecipeInstructionMaxOrderByAggregateInputSchema,
  RecipeInstructionMinOrderByAggregateInputSchema: () => RecipeInstructionMinOrderByAggregateInputSchema,
  RecipeInstructionOrderByRelationAggregateInputSchema: () => RecipeInstructionOrderByRelationAggregateInputSchema,
  RecipeInstructionOrderByWithAggregationInputSchema: () => RecipeInstructionOrderByWithAggregationInputSchema,
  RecipeInstructionOrderByWithRelationInputSchema: () => RecipeInstructionOrderByWithRelationInputSchema,
  RecipeInstructionRecipeIdStepNumberCompoundUniqueInputSchema: () => RecipeInstructionRecipeIdStepNumberCompoundUniqueInputSchema,
  RecipeInstructionScalarFieldEnumSchema: () => RecipeInstructionScalarFieldEnumSchema,
  RecipeInstructionScalarWhereInputSchema: () => RecipeInstructionScalarWhereInputSchema,
  RecipeInstructionScalarWhereWithAggregatesInputSchema: () => RecipeInstructionScalarWhereWithAggregatesInputSchema,
  RecipeInstructionSchema: () => RecipeInstructionSchema,
  RecipeInstructionSelectSchema: () => RecipeInstructionSelectSchema,
  RecipeInstructionSumOrderByAggregateInputSchema: () => RecipeInstructionSumOrderByAggregateInputSchema,
  RecipeInstructionUncheckedCreateInputSchema: () => RecipeInstructionUncheckedCreateInputSchema,
  RecipeInstructionUncheckedCreateNestedManyWithoutRecipeInputSchema: () => RecipeInstructionUncheckedCreateNestedManyWithoutRecipeInputSchema,
  RecipeInstructionUncheckedCreateNestedManyWithoutRecipeVersionInputSchema: () => RecipeInstructionUncheckedCreateNestedManyWithoutRecipeVersionInputSchema,
  RecipeInstructionUncheckedCreateWithoutRecipeInputSchema: () => RecipeInstructionUncheckedCreateWithoutRecipeInputSchema,
  RecipeInstructionUncheckedCreateWithoutRecipeVersionInputSchema: () => RecipeInstructionUncheckedCreateWithoutRecipeVersionInputSchema,
  RecipeInstructionUncheckedUpdateInputSchema: () => RecipeInstructionUncheckedUpdateInputSchema,
  RecipeInstructionUncheckedUpdateManyInputSchema: () => RecipeInstructionUncheckedUpdateManyInputSchema,
  RecipeInstructionUncheckedUpdateManyWithoutRecipeInputSchema: () => RecipeInstructionUncheckedUpdateManyWithoutRecipeInputSchema,
  RecipeInstructionUncheckedUpdateManyWithoutRecipeNestedInputSchema: () => RecipeInstructionUncheckedUpdateManyWithoutRecipeNestedInputSchema,
  RecipeInstructionUncheckedUpdateManyWithoutRecipeVersionInputSchema: () => RecipeInstructionUncheckedUpdateManyWithoutRecipeVersionInputSchema,
  RecipeInstructionUncheckedUpdateManyWithoutRecipeVersionNestedInputSchema: () => RecipeInstructionUncheckedUpdateManyWithoutRecipeVersionNestedInputSchema,
  RecipeInstructionUncheckedUpdateWithoutRecipeInputSchema: () => RecipeInstructionUncheckedUpdateWithoutRecipeInputSchema,
  RecipeInstructionUncheckedUpdateWithoutRecipeVersionInputSchema: () => RecipeInstructionUncheckedUpdateWithoutRecipeVersionInputSchema,
  RecipeInstructionUpdateArgsSchema: () => RecipeInstructionUpdateArgsSchema,
  RecipeInstructionUpdateInputSchema: () => RecipeInstructionUpdateInputSchema,
  RecipeInstructionUpdateManyArgsSchema: () => RecipeInstructionUpdateManyArgsSchema,
  RecipeInstructionUpdateManyMutationInputSchema: () => RecipeInstructionUpdateManyMutationInputSchema,
  RecipeInstructionUpdateManyWithWhereWithoutRecipeInputSchema: () => RecipeInstructionUpdateManyWithWhereWithoutRecipeInputSchema,
  RecipeInstructionUpdateManyWithWhereWithoutRecipeVersionInputSchema: () => RecipeInstructionUpdateManyWithWhereWithoutRecipeVersionInputSchema,
  RecipeInstructionUpdateManyWithoutRecipeNestedInputSchema: () => RecipeInstructionUpdateManyWithoutRecipeNestedInputSchema,
  RecipeInstructionUpdateManyWithoutRecipeVersionNestedInputSchema: () => RecipeInstructionUpdateManyWithoutRecipeVersionNestedInputSchema,
  RecipeInstructionUpdateWithWhereUniqueWithoutRecipeInputSchema: () => RecipeInstructionUpdateWithWhereUniqueWithoutRecipeInputSchema,
  RecipeInstructionUpdateWithWhereUniqueWithoutRecipeVersionInputSchema: () => RecipeInstructionUpdateWithWhereUniqueWithoutRecipeVersionInputSchema,
  RecipeInstructionUpdateWithoutRecipeInputSchema: () => RecipeInstructionUpdateWithoutRecipeInputSchema,
  RecipeInstructionUpdateWithoutRecipeVersionInputSchema: () => RecipeInstructionUpdateWithoutRecipeVersionInputSchema,
  RecipeInstructionUpsertArgsSchema: () => RecipeInstructionUpsertArgsSchema,
  RecipeInstructionUpsertWithWhereUniqueWithoutRecipeInputSchema: () => RecipeInstructionUpsertWithWhereUniqueWithoutRecipeInputSchema,
  RecipeInstructionUpsertWithWhereUniqueWithoutRecipeVersionInputSchema: () => RecipeInstructionUpsertWithWhereUniqueWithoutRecipeVersionInputSchema,
  RecipeInstructionWhereInputSchema: () => RecipeInstructionWhereInputSchema,
  RecipeInstructionWhereUniqueInputSchema: () => RecipeInstructionWhereUniqueInputSchema,
  RecipeListRelationFilterSchema: () => RecipeListRelationFilterSchema,
  RecipeMaxOrderByAggregateInputSchema: () => RecipeMaxOrderByAggregateInputSchema,
  RecipeMinOrderByAggregateInputSchema: () => RecipeMinOrderByAggregateInputSchema,
  RecipeNullableRelationFilterSchema: () => RecipeNullableRelationFilterSchema,
  RecipeOrderByRelationAggregateInputSchema: () => RecipeOrderByRelationAggregateInputSchema,
  RecipeOrderByWithAggregationInputSchema: () => RecipeOrderByWithAggregationInputSchema,
  RecipeOrderByWithRelationInputSchema: () => RecipeOrderByWithRelationInputSchema,
  RecipeRelationFilterSchema: () => RecipeRelationFilterSchema,
  RecipeScalarFieldEnumSchema: () => RecipeScalarFieldEnumSchema,
  RecipeScalarWhereInputSchema: () => RecipeScalarWhereInputSchema,
  RecipeScalarWhereWithAggregatesInputSchema: () => RecipeScalarWhereWithAggregatesInputSchema,
  RecipeSchema: () => RecipeSchema,
  RecipeSelectSchema: () => RecipeSelectSchema,
  RecipeSumOrderByAggregateInputSchema: () => RecipeSumOrderByAggregateInputSchema,
  RecipeTagAggregateArgsSchema: () => RecipeTagAggregateArgsSchema,
  RecipeTagArgsSchema: () => RecipeTagArgsSchema,
  RecipeTagAvgOrderByAggregateInputSchema: () => RecipeTagAvgOrderByAggregateInputSchema,
  RecipeTagCountOrderByAggregateInputSchema: () => RecipeTagCountOrderByAggregateInputSchema,
  RecipeTagCountOutputTypeArgsSchema: () => RecipeTagCountOutputTypeArgsSchema,
  RecipeTagCountOutputTypeSelectSchema: () => RecipeTagCountOutputTypeSelectSchema,
  RecipeTagCreateArgsSchema: () => RecipeTagCreateArgsSchema,
  RecipeTagCreateInputSchema: () => RecipeTagCreateInputSchema,
  RecipeTagCreateManyAndReturnArgsSchema: () => RecipeTagCreateManyAndReturnArgsSchema,
  RecipeTagCreateManyArgsSchema: () => RecipeTagCreateManyArgsSchema,
  RecipeTagCreateManyInputSchema: () => RecipeTagCreateManyInputSchema,
  RecipeTagCreateNestedManyWithoutRecipesInputSchema: () => RecipeTagCreateNestedManyWithoutRecipesInputSchema,
  RecipeTagCreateOrConnectWithoutRecipesInputSchema: () => RecipeTagCreateOrConnectWithoutRecipesInputSchema,
  RecipeTagCreateWithoutRecipesInputSchema: () => RecipeTagCreateWithoutRecipesInputSchema,
  RecipeTagDeleteArgsSchema: () => RecipeTagDeleteArgsSchema,
  RecipeTagDeleteManyArgsSchema: () => RecipeTagDeleteManyArgsSchema,
  RecipeTagFindFirstArgsSchema: () => RecipeTagFindFirstArgsSchema,
  RecipeTagFindFirstOrThrowArgsSchema: () => RecipeTagFindFirstOrThrowArgsSchema,
  RecipeTagFindManyArgsSchema: () => RecipeTagFindManyArgsSchema,
  RecipeTagFindUniqueArgsSchema: () => RecipeTagFindUniqueArgsSchema,
  RecipeTagFindUniqueOrThrowArgsSchema: () => RecipeTagFindUniqueOrThrowArgsSchema,
  RecipeTagGroupByArgsSchema: () => RecipeTagGroupByArgsSchema,
  RecipeTagIncludeSchema: () => RecipeTagIncludeSchema,
  RecipeTagListRelationFilterSchema: () => RecipeTagListRelationFilterSchema,
  RecipeTagMaxOrderByAggregateInputSchema: () => RecipeTagMaxOrderByAggregateInputSchema,
  RecipeTagMinOrderByAggregateInputSchema: () => RecipeTagMinOrderByAggregateInputSchema,
  RecipeTagOrderByRelationAggregateInputSchema: () => RecipeTagOrderByRelationAggregateInputSchema,
  RecipeTagOrderByWithAggregationInputSchema: () => RecipeTagOrderByWithAggregationInputSchema,
  RecipeTagOrderByWithRelationInputSchema: () => RecipeTagOrderByWithRelationInputSchema,
  RecipeTagScalarFieldEnumSchema: () => RecipeTagScalarFieldEnumSchema,
  RecipeTagScalarWhereInputSchema: () => RecipeTagScalarWhereInputSchema,
  RecipeTagScalarWhereWithAggregatesInputSchema: () => RecipeTagScalarWhereWithAggregatesInputSchema,
  RecipeTagSchema: () => RecipeTagSchema,
  RecipeTagSelectSchema: () => RecipeTagSelectSchema,
  RecipeTagSumOrderByAggregateInputSchema: () => RecipeTagSumOrderByAggregateInputSchema,
  RecipeTagUncheckedCreateInputSchema: () => RecipeTagUncheckedCreateInputSchema,
  RecipeTagUncheckedCreateNestedManyWithoutRecipesInputSchema: () => RecipeTagUncheckedCreateNestedManyWithoutRecipesInputSchema,
  RecipeTagUncheckedCreateWithoutRecipesInputSchema: () => RecipeTagUncheckedCreateWithoutRecipesInputSchema,
  RecipeTagUncheckedUpdateInputSchema: () => RecipeTagUncheckedUpdateInputSchema,
  RecipeTagUncheckedUpdateManyInputSchema: () => RecipeTagUncheckedUpdateManyInputSchema,
  RecipeTagUncheckedUpdateManyWithoutRecipesInputSchema: () => RecipeTagUncheckedUpdateManyWithoutRecipesInputSchema,
  RecipeTagUncheckedUpdateManyWithoutRecipesNestedInputSchema: () => RecipeTagUncheckedUpdateManyWithoutRecipesNestedInputSchema,
  RecipeTagUncheckedUpdateWithoutRecipesInputSchema: () => RecipeTagUncheckedUpdateWithoutRecipesInputSchema,
  RecipeTagUpdateArgsSchema: () => RecipeTagUpdateArgsSchema,
  RecipeTagUpdateInputSchema: () => RecipeTagUpdateInputSchema,
  RecipeTagUpdateManyArgsSchema: () => RecipeTagUpdateManyArgsSchema,
  RecipeTagUpdateManyMutationInputSchema: () => RecipeTagUpdateManyMutationInputSchema,
  RecipeTagUpdateManyWithWhereWithoutRecipesInputSchema: () => RecipeTagUpdateManyWithWhereWithoutRecipesInputSchema,
  RecipeTagUpdateManyWithoutRecipesNestedInputSchema: () => RecipeTagUpdateManyWithoutRecipesNestedInputSchema,
  RecipeTagUpdateWithWhereUniqueWithoutRecipesInputSchema: () => RecipeTagUpdateWithWhereUniqueWithoutRecipesInputSchema,
  RecipeTagUpdateWithoutRecipesInputSchema: () => RecipeTagUpdateWithoutRecipesInputSchema,
  RecipeTagUpsertArgsSchema: () => RecipeTagUpsertArgsSchema,
  RecipeTagUpsertWithWhereUniqueWithoutRecipesInputSchema: () => RecipeTagUpsertWithWhereUniqueWithoutRecipesInputSchema,
  RecipeTagWhereInputSchema: () => RecipeTagWhereInputSchema,
  RecipeTagWhereUniqueInputSchema: () => RecipeTagWhereUniqueInputSchema,
  RecipeUncheckedCreateInputSchema: () => RecipeUncheckedCreateInputSchema,
  RecipeUncheckedCreateNestedManyWithoutCookBookInputSchema: () => RecipeUncheckedCreateNestedManyWithoutCookBookInputSchema,
  RecipeUncheckedCreateNestedManyWithoutDietaryRestrictionsInputSchema: () => RecipeUncheckedCreateNestedManyWithoutDietaryRestrictionsInputSchema,
  RecipeUncheckedCreateNestedManyWithoutMenuItemsInputSchema: () => RecipeUncheckedCreateNestedManyWithoutMenuItemsInputSchema,
  RecipeUncheckedCreateNestedManyWithoutPrepBoardsInputSchema: () => RecipeUncheckedCreateNestedManyWithoutPrepBoardsInputSchema,
  RecipeUncheckedCreateNestedManyWithoutRestaurantInputSchema: () => RecipeUncheckedCreateNestedManyWithoutRestaurantInputSchema,
  RecipeUncheckedCreateNestedManyWithoutTagsInputSchema: () => RecipeUncheckedCreateNestedManyWithoutTagsInputSchema,
  RecipeUncheckedCreateWithoutCookBookInputSchema: () => RecipeUncheckedCreateWithoutCookBookInputSchema,
  RecipeUncheckedCreateWithoutDietaryRestrictionsInputSchema: () => RecipeUncheckedCreateWithoutDietaryRestrictionsInputSchema,
  RecipeUncheckedCreateWithoutEquipmentInputSchema: () => RecipeUncheckedCreateWithoutEquipmentInputSchema,
  RecipeUncheckedCreateWithoutFoodCostHistoryInputSchema: () => RecipeUncheckedCreateWithoutFoodCostHistoryInputSchema,
  RecipeUncheckedCreateWithoutIngredientsInputSchema: () => RecipeUncheckedCreateWithoutIngredientsInputSchema,
  RecipeUncheckedCreateWithoutInstructionsInputSchema: () => RecipeUncheckedCreateWithoutInstructionsInputSchema,
  RecipeUncheckedCreateWithoutInventoryWithdrawalInputSchema: () => RecipeUncheckedCreateWithoutInventoryWithdrawalInputSchema,
  RecipeUncheckedCreateWithoutMenuItemRecipeInputSchema: () => RecipeUncheckedCreateWithoutMenuItemRecipeInputSchema,
  RecipeUncheckedCreateWithoutMenuItemsInputSchema: () => RecipeUncheckedCreateWithoutMenuItemsInputSchema,
  RecipeUncheckedCreateWithoutPrepBoardsInputSchema: () => RecipeUncheckedCreateWithoutPrepBoardsInputSchema,
  RecipeUncheckedCreateWithoutPrepHistoryInputSchema: () => RecipeUncheckedCreateWithoutPrepHistoryInputSchema,
  RecipeUncheckedCreateWithoutPrepItemsInputSchema: () => RecipeUncheckedCreateWithoutPrepItemsInputSchema,
  RecipeUncheckedCreateWithoutProductionPlanItemInputSchema: () => RecipeUncheckedCreateWithoutProductionPlanItemInputSchema,
  RecipeUncheckedCreateWithoutRestaurantInputSchema: () => RecipeUncheckedCreateWithoutRestaurantInputSchema,
  RecipeUncheckedCreateWithoutTagsInputSchema: () => RecipeUncheckedCreateWithoutTagsInputSchema,
  RecipeUncheckedCreateWithoutVersionsInputSchema: () => RecipeUncheckedCreateWithoutVersionsInputSchema,
  RecipeUncheckedUpdateInputSchema: () => RecipeUncheckedUpdateInputSchema,
  RecipeUncheckedUpdateManyInputSchema: () => RecipeUncheckedUpdateManyInputSchema,
  RecipeUncheckedUpdateManyWithoutCookBookInputSchema: () => RecipeUncheckedUpdateManyWithoutCookBookInputSchema,
  RecipeUncheckedUpdateManyWithoutCookBookNestedInputSchema: () => RecipeUncheckedUpdateManyWithoutCookBookNestedInputSchema,
  RecipeUncheckedUpdateManyWithoutDietaryRestrictionsInputSchema: () => RecipeUncheckedUpdateManyWithoutDietaryRestrictionsInputSchema,
  RecipeUncheckedUpdateManyWithoutDietaryRestrictionsNestedInputSchema: () => RecipeUncheckedUpdateManyWithoutDietaryRestrictionsNestedInputSchema,
  RecipeUncheckedUpdateManyWithoutMenuItemsInputSchema: () => RecipeUncheckedUpdateManyWithoutMenuItemsInputSchema,
  RecipeUncheckedUpdateManyWithoutMenuItemsNestedInputSchema: () => RecipeUncheckedUpdateManyWithoutMenuItemsNestedInputSchema,
  RecipeUncheckedUpdateManyWithoutPrepBoardsInputSchema: () => RecipeUncheckedUpdateManyWithoutPrepBoardsInputSchema,
  RecipeUncheckedUpdateManyWithoutPrepBoardsNestedInputSchema: () => RecipeUncheckedUpdateManyWithoutPrepBoardsNestedInputSchema,
  RecipeUncheckedUpdateManyWithoutRestaurantInputSchema: () => RecipeUncheckedUpdateManyWithoutRestaurantInputSchema,
  RecipeUncheckedUpdateManyWithoutRestaurantNestedInputSchema: () => RecipeUncheckedUpdateManyWithoutRestaurantNestedInputSchema,
  RecipeUncheckedUpdateManyWithoutTagsInputSchema: () => RecipeUncheckedUpdateManyWithoutTagsInputSchema,
  RecipeUncheckedUpdateManyWithoutTagsNestedInputSchema: () => RecipeUncheckedUpdateManyWithoutTagsNestedInputSchema,
  RecipeUncheckedUpdateWithoutCookBookInputSchema: () => RecipeUncheckedUpdateWithoutCookBookInputSchema,
  RecipeUncheckedUpdateWithoutDietaryRestrictionsInputSchema: () => RecipeUncheckedUpdateWithoutDietaryRestrictionsInputSchema,
  RecipeUncheckedUpdateWithoutEquipmentInputSchema: () => RecipeUncheckedUpdateWithoutEquipmentInputSchema,
  RecipeUncheckedUpdateWithoutFoodCostHistoryInputSchema: () => RecipeUncheckedUpdateWithoutFoodCostHistoryInputSchema,
  RecipeUncheckedUpdateWithoutIngredientsInputSchema: () => RecipeUncheckedUpdateWithoutIngredientsInputSchema,
  RecipeUncheckedUpdateWithoutInstructionsInputSchema: () => RecipeUncheckedUpdateWithoutInstructionsInputSchema,
  RecipeUncheckedUpdateWithoutInventoryWithdrawalInputSchema: () => RecipeUncheckedUpdateWithoutInventoryWithdrawalInputSchema,
  RecipeUncheckedUpdateWithoutMenuItemRecipeInputSchema: () => RecipeUncheckedUpdateWithoutMenuItemRecipeInputSchema,
  RecipeUncheckedUpdateWithoutMenuItemsInputSchema: () => RecipeUncheckedUpdateWithoutMenuItemsInputSchema,
  RecipeUncheckedUpdateWithoutPrepBoardsInputSchema: () => RecipeUncheckedUpdateWithoutPrepBoardsInputSchema,
  RecipeUncheckedUpdateWithoutPrepHistoryInputSchema: () => RecipeUncheckedUpdateWithoutPrepHistoryInputSchema,
  RecipeUncheckedUpdateWithoutPrepItemsInputSchema: () => RecipeUncheckedUpdateWithoutPrepItemsInputSchema,
  RecipeUncheckedUpdateWithoutProductionPlanItemInputSchema: () => RecipeUncheckedUpdateWithoutProductionPlanItemInputSchema,
  RecipeUncheckedUpdateWithoutRestaurantInputSchema: () => RecipeUncheckedUpdateWithoutRestaurantInputSchema,
  RecipeUncheckedUpdateWithoutTagsInputSchema: () => RecipeUncheckedUpdateWithoutTagsInputSchema,
  RecipeUncheckedUpdateWithoutVersionsInputSchema: () => RecipeUncheckedUpdateWithoutVersionsInputSchema,
  RecipeUpdateArgsSchema: () => RecipeUpdateArgsSchema,
  RecipeUpdateInputSchema: () => RecipeUpdateInputSchema,
  RecipeUpdateManyArgsSchema: () => RecipeUpdateManyArgsSchema,
  RecipeUpdateManyMutationInputSchema: () => RecipeUpdateManyMutationInputSchema,
  RecipeUpdateManyWithWhereWithoutCookBookInputSchema: () => RecipeUpdateManyWithWhereWithoutCookBookInputSchema,
  RecipeUpdateManyWithWhereWithoutDietaryRestrictionsInputSchema: () => RecipeUpdateManyWithWhereWithoutDietaryRestrictionsInputSchema,
  RecipeUpdateManyWithWhereWithoutMenuItemsInputSchema: () => RecipeUpdateManyWithWhereWithoutMenuItemsInputSchema,
  RecipeUpdateManyWithWhereWithoutPrepBoardsInputSchema: () => RecipeUpdateManyWithWhereWithoutPrepBoardsInputSchema,
  RecipeUpdateManyWithWhereWithoutRestaurantInputSchema: () => RecipeUpdateManyWithWhereWithoutRestaurantInputSchema,
  RecipeUpdateManyWithWhereWithoutTagsInputSchema: () => RecipeUpdateManyWithWhereWithoutTagsInputSchema,
  RecipeUpdateManyWithoutCookBookNestedInputSchema: () => RecipeUpdateManyWithoutCookBookNestedInputSchema,
  RecipeUpdateManyWithoutDietaryRestrictionsNestedInputSchema: () => RecipeUpdateManyWithoutDietaryRestrictionsNestedInputSchema,
  RecipeUpdateManyWithoutMenuItemsNestedInputSchema: () => RecipeUpdateManyWithoutMenuItemsNestedInputSchema,
  RecipeUpdateManyWithoutPrepBoardsNestedInputSchema: () => RecipeUpdateManyWithoutPrepBoardsNestedInputSchema,
  RecipeUpdateManyWithoutRestaurantNestedInputSchema: () => RecipeUpdateManyWithoutRestaurantNestedInputSchema,
  RecipeUpdateManyWithoutTagsNestedInputSchema: () => RecipeUpdateManyWithoutTagsNestedInputSchema,
  RecipeUpdateOneRequiredWithoutEquipmentNestedInputSchema: () => RecipeUpdateOneRequiredWithoutEquipmentNestedInputSchema,
  RecipeUpdateOneRequiredWithoutFoodCostHistoryNestedInputSchema: () => RecipeUpdateOneRequiredWithoutFoodCostHistoryNestedInputSchema,
  RecipeUpdateOneRequiredWithoutIngredientsNestedInputSchema: () => RecipeUpdateOneRequiredWithoutIngredientsNestedInputSchema,
  RecipeUpdateOneRequiredWithoutInstructionsNestedInputSchema: () => RecipeUpdateOneRequiredWithoutInstructionsNestedInputSchema,
  RecipeUpdateOneRequiredWithoutMenuItemRecipeNestedInputSchema: () => RecipeUpdateOneRequiredWithoutMenuItemRecipeNestedInputSchema,
  RecipeUpdateOneRequiredWithoutPrepHistoryNestedInputSchema: () => RecipeUpdateOneRequiredWithoutPrepHistoryNestedInputSchema,
  RecipeUpdateOneRequiredWithoutPrepItemsNestedInputSchema: () => RecipeUpdateOneRequiredWithoutPrepItemsNestedInputSchema,
  RecipeUpdateOneRequiredWithoutProductionPlanItemNestedInputSchema: () => RecipeUpdateOneRequiredWithoutProductionPlanItemNestedInputSchema,
  RecipeUpdateOneRequiredWithoutVersionsNestedInputSchema: () => RecipeUpdateOneRequiredWithoutVersionsNestedInputSchema,
  RecipeUpdateOneWithoutInventoryWithdrawalNestedInputSchema: () => RecipeUpdateOneWithoutInventoryWithdrawalNestedInputSchema,
  RecipeUpdateToOneWithWhereWithoutEquipmentInputSchema: () => RecipeUpdateToOneWithWhereWithoutEquipmentInputSchema,
  RecipeUpdateToOneWithWhereWithoutFoodCostHistoryInputSchema: () => RecipeUpdateToOneWithWhereWithoutFoodCostHistoryInputSchema,
  RecipeUpdateToOneWithWhereWithoutIngredientsInputSchema: () => RecipeUpdateToOneWithWhereWithoutIngredientsInputSchema,
  RecipeUpdateToOneWithWhereWithoutInstructionsInputSchema: () => RecipeUpdateToOneWithWhereWithoutInstructionsInputSchema,
  RecipeUpdateToOneWithWhereWithoutInventoryWithdrawalInputSchema: () => RecipeUpdateToOneWithWhereWithoutInventoryWithdrawalInputSchema,
  RecipeUpdateToOneWithWhereWithoutMenuItemRecipeInputSchema: () => RecipeUpdateToOneWithWhereWithoutMenuItemRecipeInputSchema,
  RecipeUpdateToOneWithWhereWithoutPrepHistoryInputSchema: () => RecipeUpdateToOneWithWhereWithoutPrepHistoryInputSchema,
  RecipeUpdateToOneWithWhereWithoutPrepItemsInputSchema: () => RecipeUpdateToOneWithWhereWithoutPrepItemsInputSchema,
  RecipeUpdateToOneWithWhereWithoutProductionPlanItemInputSchema: () => RecipeUpdateToOneWithWhereWithoutProductionPlanItemInputSchema,
  RecipeUpdateToOneWithWhereWithoutVersionsInputSchema: () => RecipeUpdateToOneWithWhereWithoutVersionsInputSchema,
  RecipeUpdateWithWhereUniqueWithoutCookBookInputSchema: () => RecipeUpdateWithWhereUniqueWithoutCookBookInputSchema,
  RecipeUpdateWithWhereUniqueWithoutDietaryRestrictionsInputSchema: () => RecipeUpdateWithWhereUniqueWithoutDietaryRestrictionsInputSchema,
  RecipeUpdateWithWhereUniqueWithoutMenuItemsInputSchema: () => RecipeUpdateWithWhereUniqueWithoutMenuItemsInputSchema,
  RecipeUpdateWithWhereUniqueWithoutPrepBoardsInputSchema: () => RecipeUpdateWithWhereUniqueWithoutPrepBoardsInputSchema,
  RecipeUpdateWithWhereUniqueWithoutRestaurantInputSchema: () => RecipeUpdateWithWhereUniqueWithoutRestaurantInputSchema,
  RecipeUpdateWithWhereUniqueWithoutTagsInputSchema: () => RecipeUpdateWithWhereUniqueWithoutTagsInputSchema,
  RecipeUpdateWithoutCookBookInputSchema: () => RecipeUpdateWithoutCookBookInputSchema,
  RecipeUpdateWithoutDietaryRestrictionsInputSchema: () => RecipeUpdateWithoutDietaryRestrictionsInputSchema,
  RecipeUpdateWithoutEquipmentInputSchema: () => RecipeUpdateWithoutEquipmentInputSchema,
  RecipeUpdateWithoutFoodCostHistoryInputSchema: () => RecipeUpdateWithoutFoodCostHistoryInputSchema,
  RecipeUpdateWithoutIngredientsInputSchema: () => RecipeUpdateWithoutIngredientsInputSchema,
  RecipeUpdateWithoutInstructionsInputSchema: () => RecipeUpdateWithoutInstructionsInputSchema,
  RecipeUpdateWithoutInventoryWithdrawalInputSchema: () => RecipeUpdateWithoutInventoryWithdrawalInputSchema,
  RecipeUpdateWithoutMenuItemRecipeInputSchema: () => RecipeUpdateWithoutMenuItemRecipeInputSchema,
  RecipeUpdateWithoutMenuItemsInputSchema: () => RecipeUpdateWithoutMenuItemsInputSchema,
  RecipeUpdateWithoutPrepBoardsInputSchema: () => RecipeUpdateWithoutPrepBoardsInputSchema,
  RecipeUpdateWithoutPrepHistoryInputSchema: () => RecipeUpdateWithoutPrepHistoryInputSchema,
  RecipeUpdateWithoutPrepItemsInputSchema: () => RecipeUpdateWithoutPrepItemsInputSchema,
  RecipeUpdateWithoutProductionPlanItemInputSchema: () => RecipeUpdateWithoutProductionPlanItemInputSchema,
  RecipeUpdateWithoutRestaurantInputSchema: () => RecipeUpdateWithoutRestaurantInputSchema,
  RecipeUpdateWithoutTagsInputSchema: () => RecipeUpdateWithoutTagsInputSchema,
  RecipeUpdateWithoutVersionsInputSchema: () => RecipeUpdateWithoutVersionsInputSchema,
  RecipeUpdateimageUrlInputSchema: () => RecipeUpdateimageUrlInputSchema,
  RecipeUpsertArgsSchema: () => RecipeUpsertArgsSchema,
  RecipeUpsertWithWhereUniqueWithoutCookBookInputSchema: () => RecipeUpsertWithWhereUniqueWithoutCookBookInputSchema,
  RecipeUpsertWithWhereUniqueWithoutDietaryRestrictionsInputSchema: () => RecipeUpsertWithWhereUniqueWithoutDietaryRestrictionsInputSchema,
  RecipeUpsertWithWhereUniqueWithoutMenuItemsInputSchema: () => RecipeUpsertWithWhereUniqueWithoutMenuItemsInputSchema,
  RecipeUpsertWithWhereUniqueWithoutPrepBoardsInputSchema: () => RecipeUpsertWithWhereUniqueWithoutPrepBoardsInputSchema,
  RecipeUpsertWithWhereUniqueWithoutRestaurantInputSchema: () => RecipeUpsertWithWhereUniqueWithoutRestaurantInputSchema,
  RecipeUpsertWithWhereUniqueWithoutTagsInputSchema: () => RecipeUpsertWithWhereUniqueWithoutTagsInputSchema,
  RecipeUpsertWithoutEquipmentInputSchema: () => RecipeUpsertWithoutEquipmentInputSchema,
  RecipeUpsertWithoutFoodCostHistoryInputSchema: () => RecipeUpsertWithoutFoodCostHistoryInputSchema,
  RecipeUpsertWithoutIngredientsInputSchema: () => RecipeUpsertWithoutIngredientsInputSchema,
  RecipeUpsertWithoutInstructionsInputSchema: () => RecipeUpsertWithoutInstructionsInputSchema,
  RecipeUpsertWithoutInventoryWithdrawalInputSchema: () => RecipeUpsertWithoutInventoryWithdrawalInputSchema,
  RecipeUpsertWithoutMenuItemRecipeInputSchema: () => RecipeUpsertWithoutMenuItemRecipeInputSchema,
  RecipeUpsertWithoutPrepHistoryInputSchema: () => RecipeUpsertWithoutPrepHistoryInputSchema,
  RecipeUpsertWithoutPrepItemsInputSchema: () => RecipeUpsertWithoutPrepItemsInputSchema,
  RecipeUpsertWithoutProductionPlanItemInputSchema: () => RecipeUpsertWithoutProductionPlanItemInputSchema,
  RecipeUpsertWithoutVersionsInputSchema: () => RecipeUpsertWithoutVersionsInputSchema,
  RecipeVersionAggregateArgsSchema: () => RecipeVersionAggregateArgsSchema,
  RecipeVersionArgsSchema: () => RecipeVersionArgsSchema,
  RecipeVersionAvgOrderByAggregateInputSchema: () => RecipeVersionAvgOrderByAggregateInputSchema,
  RecipeVersionCountOrderByAggregateInputSchema: () => RecipeVersionCountOrderByAggregateInputSchema,
  RecipeVersionCountOutputTypeArgsSchema: () => RecipeVersionCountOutputTypeArgsSchema,
  RecipeVersionCountOutputTypeSelectSchema: () => RecipeVersionCountOutputTypeSelectSchema,
  RecipeVersionCreateArgsSchema: () => RecipeVersionCreateArgsSchema,
  RecipeVersionCreateInputSchema: () => RecipeVersionCreateInputSchema,
  RecipeVersionCreateManyAndReturnArgsSchema: () => RecipeVersionCreateManyAndReturnArgsSchema,
  RecipeVersionCreateManyApprovedByInputEnvelopeSchema: () => RecipeVersionCreateManyApprovedByInputEnvelopeSchema,
  RecipeVersionCreateManyApprovedByInputSchema: () => RecipeVersionCreateManyApprovedByInputSchema,
  RecipeVersionCreateManyArgsSchema: () => RecipeVersionCreateManyArgsSchema,
  RecipeVersionCreateManyCreatedByInputEnvelopeSchema: () => RecipeVersionCreateManyCreatedByInputEnvelopeSchema,
  RecipeVersionCreateManyCreatedByInputSchema: () => RecipeVersionCreateManyCreatedByInputSchema,
  RecipeVersionCreateManyInputSchema: () => RecipeVersionCreateManyInputSchema,
  RecipeVersionCreateManyRecipeInputEnvelopeSchema: () => RecipeVersionCreateManyRecipeInputEnvelopeSchema,
  RecipeVersionCreateManyRecipeInputSchema: () => RecipeVersionCreateManyRecipeInputSchema,
  RecipeVersionCreateNestedManyWithoutApprovedByInputSchema: () => RecipeVersionCreateNestedManyWithoutApprovedByInputSchema,
  RecipeVersionCreateNestedManyWithoutCreatedByInputSchema: () => RecipeVersionCreateNestedManyWithoutCreatedByInputSchema,
  RecipeVersionCreateNestedManyWithoutRecipeInputSchema: () => RecipeVersionCreateNestedManyWithoutRecipeInputSchema,
  RecipeVersionCreateNestedOneWithoutIngredientsInputSchema: () => RecipeVersionCreateNestedOneWithoutIngredientsInputSchema,
  RecipeVersionCreateNestedOneWithoutInstructionsInputSchema: () => RecipeVersionCreateNestedOneWithoutInstructionsInputSchema,
  RecipeVersionCreateOrConnectWithoutApprovedByInputSchema: () => RecipeVersionCreateOrConnectWithoutApprovedByInputSchema,
  RecipeVersionCreateOrConnectWithoutCreatedByInputSchema: () => RecipeVersionCreateOrConnectWithoutCreatedByInputSchema,
  RecipeVersionCreateOrConnectWithoutIngredientsInputSchema: () => RecipeVersionCreateOrConnectWithoutIngredientsInputSchema,
  RecipeVersionCreateOrConnectWithoutInstructionsInputSchema: () => RecipeVersionCreateOrConnectWithoutInstructionsInputSchema,
  RecipeVersionCreateOrConnectWithoutRecipeInputSchema: () => RecipeVersionCreateOrConnectWithoutRecipeInputSchema,
  RecipeVersionCreateWithoutApprovedByInputSchema: () => RecipeVersionCreateWithoutApprovedByInputSchema,
  RecipeVersionCreateWithoutCreatedByInputSchema: () => RecipeVersionCreateWithoutCreatedByInputSchema,
  RecipeVersionCreateWithoutIngredientsInputSchema: () => RecipeVersionCreateWithoutIngredientsInputSchema,
  RecipeVersionCreateWithoutInstructionsInputSchema: () => RecipeVersionCreateWithoutInstructionsInputSchema,
  RecipeVersionCreateWithoutRecipeInputSchema: () => RecipeVersionCreateWithoutRecipeInputSchema,
  RecipeVersionDeleteArgsSchema: () => RecipeVersionDeleteArgsSchema,
  RecipeVersionDeleteManyArgsSchema: () => RecipeVersionDeleteManyArgsSchema,
  RecipeVersionFindFirstArgsSchema: () => RecipeVersionFindFirstArgsSchema,
  RecipeVersionFindFirstOrThrowArgsSchema: () => RecipeVersionFindFirstOrThrowArgsSchema,
  RecipeVersionFindManyArgsSchema: () => RecipeVersionFindManyArgsSchema,
  RecipeVersionFindUniqueArgsSchema: () => RecipeVersionFindUniqueArgsSchema,
  RecipeVersionFindUniqueOrThrowArgsSchema: () => RecipeVersionFindUniqueOrThrowArgsSchema,
  RecipeVersionGroupByArgsSchema: () => RecipeVersionGroupByArgsSchema,
  RecipeVersionIncludeSchema: () => RecipeVersionIncludeSchema,
  RecipeVersionListRelationFilterSchema: () => RecipeVersionListRelationFilterSchema,
  RecipeVersionMaxOrderByAggregateInputSchema: () => RecipeVersionMaxOrderByAggregateInputSchema,
  RecipeVersionMinOrderByAggregateInputSchema: () => RecipeVersionMinOrderByAggregateInputSchema,
  RecipeVersionNullableRelationFilterSchema: () => RecipeVersionNullableRelationFilterSchema,
  RecipeVersionOrderByRelationAggregateInputSchema: () => RecipeVersionOrderByRelationAggregateInputSchema,
  RecipeVersionOrderByWithAggregationInputSchema: () => RecipeVersionOrderByWithAggregationInputSchema,
  RecipeVersionOrderByWithRelationInputSchema: () => RecipeVersionOrderByWithRelationInputSchema,
  RecipeVersionRecipeIdVersionNumberCompoundUniqueInputSchema: () => RecipeVersionRecipeIdVersionNumberCompoundUniqueInputSchema,
  RecipeVersionScalarFieldEnumSchema: () => RecipeVersionScalarFieldEnumSchema,
  RecipeVersionScalarWhereInputSchema: () => RecipeVersionScalarWhereInputSchema,
  RecipeVersionScalarWhereWithAggregatesInputSchema: () => RecipeVersionScalarWhereWithAggregatesInputSchema,
  RecipeVersionSchema: () => RecipeVersionSchema,
  RecipeVersionSelectSchema: () => RecipeVersionSelectSchema,
  RecipeVersionSumOrderByAggregateInputSchema: () => RecipeVersionSumOrderByAggregateInputSchema,
  RecipeVersionUncheckedCreateInputSchema: () => RecipeVersionUncheckedCreateInputSchema,
  RecipeVersionUncheckedCreateNestedManyWithoutApprovedByInputSchema: () => RecipeVersionUncheckedCreateNestedManyWithoutApprovedByInputSchema,
  RecipeVersionUncheckedCreateNestedManyWithoutCreatedByInputSchema: () => RecipeVersionUncheckedCreateNestedManyWithoutCreatedByInputSchema,
  RecipeVersionUncheckedCreateNestedManyWithoutRecipeInputSchema: () => RecipeVersionUncheckedCreateNestedManyWithoutRecipeInputSchema,
  RecipeVersionUncheckedCreateWithoutApprovedByInputSchema: () => RecipeVersionUncheckedCreateWithoutApprovedByInputSchema,
  RecipeVersionUncheckedCreateWithoutCreatedByInputSchema: () => RecipeVersionUncheckedCreateWithoutCreatedByInputSchema,
  RecipeVersionUncheckedCreateWithoutIngredientsInputSchema: () => RecipeVersionUncheckedCreateWithoutIngredientsInputSchema,
  RecipeVersionUncheckedCreateWithoutInstructionsInputSchema: () => RecipeVersionUncheckedCreateWithoutInstructionsInputSchema,
  RecipeVersionUncheckedCreateWithoutRecipeInputSchema: () => RecipeVersionUncheckedCreateWithoutRecipeInputSchema,
  RecipeVersionUncheckedUpdateInputSchema: () => RecipeVersionUncheckedUpdateInputSchema,
  RecipeVersionUncheckedUpdateManyInputSchema: () => RecipeVersionUncheckedUpdateManyInputSchema,
  RecipeVersionUncheckedUpdateManyWithoutApprovedByInputSchema: () => RecipeVersionUncheckedUpdateManyWithoutApprovedByInputSchema,
  RecipeVersionUncheckedUpdateManyWithoutApprovedByNestedInputSchema: () => RecipeVersionUncheckedUpdateManyWithoutApprovedByNestedInputSchema,
  RecipeVersionUncheckedUpdateManyWithoutCreatedByInputSchema: () => RecipeVersionUncheckedUpdateManyWithoutCreatedByInputSchema,
  RecipeVersionUncheckedUpdateManyWithoutCreatedByNestedInputSchema: () => RecipeVersionUncheckedUpdateManyWithoutCreatedByNestedInputSchema,
  RecipeVersionUncheckedUpdateManyWithoutRecipeInputSchema: () => RecipeVersionUncheckedUpdateManyWithoutRecipeInputSchema,
  RecipeVersionUncheckedUpdateManyWithoutRecipeNestedInputSchema: () => RecipeVersionUncheckedUpdateManyWithoutRecipeNestedInputSchema,
  RecipeVersionUncheckedUpdateWithoutApprovedByInputSchema: () => RecipeVersionUncheckedUpdateWithoutApprovedByInputSchema,
  RecipeVersionUncheckedUpdateWithoutCreatedByInputSchema: () => RecipeVersionUncheckedUpdateWithoutCreatedByInputSchema,
  RecipeVersionUncheckedUpdateWithoutIngredientsInputSchema: () => RecipeVersionUncheckedUpdateWithoutIngredientsInputSchema,
  RecipeVersionUncheckedUpdateWithoutInstructionsInputSchema: () => RecipeVersionUncheckedUpdateWithoutInstructionsInputSchema,
  RecipeVersionUncheckedUpdateWithoutRecipeInputSchema: () => RecipeVersionUncheckedUpdateWithoutRecipeInputSchema,
  RecipeVersionUpdateArgsSchema: () => RecipeVersionUpdateArgsSchema,
  RecipeVersionUpdateInputSchema: () => RecipeVersionUpdateInputSchema,
  RecipeVersionUpdateManyArgsSchema: () => RecipeVersionUpdateManyArgsSchema,
  RecipeVersionUpdateManyMutationInputSchema: () => RecipeVersionUpdateManyMutationInputSchema,
  RecipeVersionUpdateManyWithWhereWithoutApprovedByInputSchema: () => RecipeVersionUpdateManyWithWhereWithoutApprovedByInputSchema,
  RecipeVersionUpdateManyWithWhereWithoutCreatedByInputSchema: () => RecipeVersionUpdateManyWithWhereWithoutCreatedByInputSchema,
  RecipeVersionUpdateManyWithWhereWithoutRecipeInputSchema: () => RecipeVersionUpdateManyWithWhereWithoutRecipeInputSchema,
  RecipeVersionUpdateManyWithoutApprovedByNestedInputSchema: () => RecipeVersionUpdateManyWithoutApprovedByNestedInputSchema,
  RecipeVersionUpdateManyWithoutCreatedByNestedInputSchema: () => RecipeVersionUpdateManyWithoutCreatedByNestedInputSchema,
  RecipeVersionUpdateManyWithoutRecipeNestedInputSchema: () => RecipeVersionUpdateManyWithoutRecipeNestedInputSchema,
  RecipeVersionUpdateOneWithoutIngredientsNestedInputSchema: () => RecipeVersionUpdateOneWithoutIngredientsNestedInputSchema,
  RecipeVersionUpdateOneWithoutInstructionsNestedInputSchema: () => RecipeVersionUpdateOneWithoutInstructionsNestedInputSchema,
  RecipeVersionUpdateToOneWithWhereWithoutIngredientsInputSchema: () => RecipeVersionUpdateToOneWithWhereWithoutIngredientsInputSchema,
  RecipeVersionUpdateToOneWithWhereWithoutInstructionsInputSchema: () => RecipeVersionUpdateToOneWithWhereWithoutInstructionsInputSchema,
  RecipeVersionUpdateWithWhereUniqueWithoutApprovedByInputSchema: () => RecipeVersionUpdateWithWhereUniqueWithoutApprovedByInputSchema,
  RecipeVersionUpdateWithWhereUniqueWithoutCreatedByInputSchema: () => RecipeVersionUpdateWithWhereUniqueWithoutCreatedByInputSchema,
  RecipeVersionUpdateWithWhereUniqueWithoutRecipeInputSchema: () => RecipeVersionUpdateWithWhereUniqueWithoutRecipeInputSchema,
  RecipeVersionUpdateWithoutApprovedByInputSchema: () => RecipeVersionUpdateWithoutApprovedByInputSchema,
  RecipeVersionUpdateWithoutCreatedByInputSchema: () => RecipeVersionUpdateWithoutCreatedByInputSchema,
  RecipeVersionUpdateWithoutIngredientsInputSchema: () => RecipeVersionUpdateWithoutIngredientsInputSchema,
  RecipeVersionUpdateWithoutInstructionsInputSchema: () => RecipeVersionUpdateWithoutInstructionsInputSchema,
  RecipeVersionUpdateWithoutRecipeInputSchema: () => RecipeVersionUpdateWithoutRecipeInputSchema,
  RecipeVersionUpsertArgsSchema: () => RecipeVersionUpsertArgsSchema,
  RecipeVersionUpsertWithWhereUniqueWithoutApprovedByInputSchema: () => RecipeVersionUpsertWithWhereUniqueWithoutApprovedByInputSchema,
  RecipeVersionUpsertWithWhereUniqueWithoutCreatedByInputSchema: () => RecipeVersionUpsertWithWhereUniqueWithoutCreatedByInputSchema,
  RecipeVersionUpsertWithWhereUniqueWithoutRecipeInputSchema: () => RecipeVersionUpsertWithWhereUniqueWithoutRecipeInputSchema,
  RecipeVersionUpsertWithoutIngredientsInputSchema: () => RecipeVersionUpsertWithoutIngredientsInputSchema,
  RecipeVersionUpsertWithoutInstructionsInputSchema: () => RecipeVersionUpsertWithoutInstructionsInputSchema,
  RecipeVersionWhereInputSchema: () => RecipeVersionWhereInputSchema,
  RecipeVersionWhereUniqueInputSchema: () => RecipeVersionWhereUniqueInputSchema,
  RecipeWhereInputSchema: () => RecipeWhereInputSchema,
  RecipeWhereUniqueInputSchema: () => RecipeWhereUniqueInputSchema,
  RestaurantAggregateArgsSchema: () => RestaurantAggregateArgsSchema,
  RestaurantArgsSchema: () => RestaurantArgsSchema,
  RestaurantAvgOrderByAggregateInputSchema: () => RestaurantAvgOrderByAggregateInputSchema,
  RestaurantCountOrderByAggregateInputSchema: () => RestaurantCountOrderByAggregateInputSchema,
  RestaurantCountOutputTypeArgsSchema: () => RestaurantCountOutputTypeArgsSchema,
  RestaurantCountOutputTypeSelectSchema: () => RestaurantCountOutputTypeSelectSchema,
  RestaurantCreateArgsSchema: () => RestaurantCreateArgsSchema,
  RestaurantCreateInputSchema: () => RestaurantCreateInputSchema,
  RestaurantCreateManyAndReturnArgsSchema: () => RestaurantCreateManyAndReturnArgsSchema,
  RestaurantCreateManyArgsSchema: () => RestaurantCreateManyArgsSchema,
  RestaurantCreateManyInputSchema: () => RestaurantCreateManyInputSchema,
  RestaurantCreateManyOrganizationInputEnvelopeSchema: () => RestaurantCreateManyOrganizationInputEnvelopeSchema,
  RestaurantCreateManyOrganizationInputSchema: () => RestaurantCreateManyOrganizationInputSchema,
  RestaurantCreateNestedManyWithoutOrganizationInputSchema: () => RestaurantCreateNestedManyWithoutOrganizationInputSchema,
  RestaurantCreateNestedOneWithoutCookbooksInputSchema: () => RestaurantCreateNestedOneWithoutCookbooksInputSchema,
  RestaurantCreateNestedOneWithoutEquipmentInputSchema: () => RestaurantCreateNestedOneWithoutEquipmentInputSchema,
  RestaurantCreateNestedOneWithoutInventoryInputSchema: () => RestaurantCreateNestedOneWithoutInventoryInputSchema,
  RestaurantCreateNestedOneWithoutLeftoverItemInputSchema: () => RestaurantCreateNestedOneWithoutLeftoverItemInputSchema,
  RestaurantCreateNestedOneWithoutMenusInputSchema: () => RestaurantCreateNestedOneWithoutMenusInputSchema,
  RestaurantCreateNestedOneWithoutOrdersInputSchema: () => RestaurantCreateNestedOneWithoutOrdersInputSchema,
  RestaurantCreateNestedOneWithoutProductionPlanInputSchema: () => RestaurantCreateNestedOneWithoutProductionPlanInputSchema,
  RestaurantCreateNestedOneWithoutQualityChecklistInputSchema: () => RestaurantCreateNestedOneWithoutQualityChecklistInputSchema,
  RestaurantCreateNestedOneWithoutQustomerFeedbackInputSchema: () => RestaurantCreateNestedOneWithoutQustomerFeedbackInputSchema,
  RestaurantCreateNestedOneWithoutRecipesInputSchema: () => RestaurantCreateNestedOneWithoutRecipesInputSchema,
  RestaurantCreateNestedOneWithoutSalesTransactionsInputSchema: () => RestaurantCreateNestedOneWithoutSalesTransactionsInputSchema,
  RestaurantCreateNestedOneWithoutUsersInputSchema: () => RestaurantCreateNestedOneWithoutUsersInputSchema,
  RestaurantCreateNestedOneWithoutWasteRecordInputSchema: () => RestaurantCreateNestedOneWithoutWasteRecordInputSchema,
  RestaurantCreateOrConnectWithoutCookbooksInputSchema: () => RestaurantCreateOrConnectWithoutCookbooksInputSchema,
  RestaurantCreateOrConnectWithoutEquipmentInputSchema: () => RestaurantCreateOrConnectWithoutEquipmentInputSchema,
  RestaurantCreateOrConnectWithoutInventoryInputSchema: () => RestaurantCreateOrConnectWithoutInventoryInputSchema,
  RestaurantCreateOrConnectWithoutLeftoverItemInputSchema: () => RestaurantCreateOrConnectWithoutLeftoverItemInputSchema,
  RestaurantCreateOrConnectWithoutMenusInputSchema: () => RestaurantCreateOrConnectWithoutMenusInputSchema,
  RestaurantCreateOrConnectWithoutOrdersInputSchema: () => RestaurantCreateOrConnectWithoutOrdersInputSchema,
  RestaurantCreateOrConnectWithoutOrganizationInputSchema: () => RestaurantCreateOrConnectWithoutOrganizationInputSchema,
  RestaurantCreateOrConnectWithoutProductionPlanInputSchema: () => RestaurantCreateOrConnectWithoutProductionPlanInputSchema,
  RestaurantCreateOrConnectWithoutQualityChecklistInputSchema: () => RestaurantCreateOrConnectWithoutQualityChecklistInputSchema,
  RestaurantCreateOrConnectWithoutQustomerFeedbackInputSchema: () => RestaurantCreateOrConnectWithoutQustomerFeedbackInputSchema,
  RestaurantCreateOrConnectWithoutRecipesInputSchema: () => RestaurantCreateOrConnectWithoutRecipesInputSchema,
  RestaurantCreateOrConnectWithoutSalesTransactionsInputSchema: () => RestaurantCreateOrConnectWithoutSalesTransactionsInputSchema,
  RestaurantCreateOrConnectWithoutUsersInputSchema: () => RestaurantCreateOrConnectWithoutUsersInputSchema,
  RestaurantCreateOrConnectWithoutWasteRecordInputSchema: () => RestaurantCreateOrConnectWithoutWasteRecordInputSchema,
  RestaurantCreateWithoutCookbooksInputSchema: () => RestaurantCreateWithoutCookbooksInputSchema,
  RestaurantCreateWithoutEquipmentInputSchema: () => RestaurantCreateWithoutEquipmentInputSchema,
  RestaurantCreateWithoutInventoryInputSchema: () => RestaurantCreateWithoutInventoryInputSchema,
  RestaurantCreateWithoutLeftoverItemInputSchema: () => RestaurantCreateWithoutLeftoverItemInputSchema,
  RestaurantCreateWithoutMenusInputSchema: () => RestaurantCreateWithoutMenusInputSchema,
  RestaurantCreateWithoutOrdersInputSchema: () => RestaurantCreateWithoutOrdersInputSchema,
  RestaurantCreateWithoutOrganizationInputSchema: () => RestaurantCreateWithoutOrganizationInputSchema,
  RestaurantCreateWithoutProductionPlanInputSchema: () => RestaurantCreateWithoutProductionPlanInputSchema,
  RestaurantCreateWithoutQualityChecklistInputSchema: () => RestaurantCreateWithoutQualityChecklistInputSchema,
  RestaurantCreateWithoutQustomerFeedbackInputSchema: () => RestaurantCreateWithoutQustomerFeedbackInputSchema,
  RestaurantCreateWithoutRecipesInputSchema: () => RestaurantCreateWithoutRecipesInputSchema,
  RestaurantCreateWithoutSalesTransactionsInputSchema: () => RestaurantCreateWithoutSalesTransactionsInputSchema,
  RestaurantCreateWithoutUsersInputSchema: () => RestaurantCreateWithoutUsersInputSchema,
  RestaurantCreateWithoutWasteRecordInputSchema: () => RestaurantCreateWithoutWasteRecordInputSchema,
  RestaurantDeleteArgsSchema: () => RestaurantDeleteArgsSchema,
  RestaurantDeleteManyArgsSchema: () => RestaurantDeleteManyArgsSchema,
  RestaurantFindFirstArgsSchema: () => RestaurantFindFirstArgsSchema,
  RestaurantFindFirstOrThrowArgsSchema: () => RestaurantFindFirstOrThrowArgsSchema,
  RestaurantFindManyArgsSchema: () => RestaurantFindManyArgsSchema,
  RestaurantFindUniqueArgsSchema: () => RestaurantFindUniqueArgsSchema,
  RestaurantFindUniqueOrThrowArgsSchema: () => RestaurantFindUniqueOrThrowArgsSchema,
  RestaurantGroupByArgsSchema: () => RestaurantGroupByArgsSchema,
  RestaurantIncludeSchema: () => RestaurantIncludeSchema,
  RestaurantListRelationFilterSchema: () => RestaurantListRelationFilterSchema,
  RestaurantMaxOrderByAggregateInputSchema: () => RestaurantMaxOrderByAggregateInputSchema,
  RestaurantMinOrderByAggregateInputSchema: () => RestaurantMinOrderByAggregateInputSchema,
  RestaurantNullableRelationFilterSchema: () => RestaurantNullableRelationFilterSchema,
  RestaurantOrderByRelationAggregateInputSchema: () => RestaurantOrderByRelationAggregateInputSchema,
  RestaurantOrderByWithAggregationInputSchema: () => RestaurantOrderByWithAggregationInputSchema,
  RestaurantOrderByWithRelationInputSchema: () => RestaurantOrderByWithRelationInputSchema,
  RestaurantRelationFilterSchema: () => RestaurantRelationFilterSchema,
  RestaurantScalarFieldEnumSchema: () => RestaurantScalarFieldEnumSchema,
  RestaurantScalarWhereInputSchema: () => RestaurantScalarWhereInputSchema,
  RestaurantScalarWhereWithAggregatesInputSchema: () => RestaurantScalarWhereWithAggregatesInputSchema,
  RestaurantSchema: () => RestaurantSchema,
  RestaurantSelectSchema: () => RestaurantSelectSchema,
  RestaurantSumOrderByAggregateInputSchema: () => RestaurantSumOrderByAggregateInputSchema,
  RestaurantUncheckedCreateInputSchema: () => RestaurantUncheckedCreateInputSchema,
  RestaurantUncheckedCreateNestedManyWithoutOrganizationInputSchema: () => RestaurantUncheckedCreateNestedManyWithoutOrganizationInputSchema,
  RestaurantUncheckedCreateWithoutCookbooksInputSchema: () => RestaurantUncheckedCreateWithoutCookbooksInputSchema,
  RestaurantUncheckedCreateWithoutEquipmentInputSchema: () => RestaurantUncheckedCreateWithoutEquipmentInputSchema,
  RestaurantUncheckedCreateWithoutInventoryInputSchema: () => RestaurantUncheckedCreateWithoutInventoryInputSchema,
  RestaurantUncheckedCreateWithoutLeftoverItemInputSchema: () => RestaurantUncheckedCreateWithoutLeftoverItemInputSchema,
  RestaurantUncheckedCreateWithoutMenusInputSchema: () => RestaurantUncheckedCreateWithoutMenusInputSchema,
  RestaurantUncheckedCreateWithoutOrdersInputSchema: () => RestaurantUncheckedCreateWithoutOrdersInputSchema,
  RestaurantUncheckedCreateWithoutOrganizationInputSchema: () => RestaurantUncheckedCreateWithoutOrganizationInputSchema,
  RestaurantUncheckedCreateWithoutProductionPlanInputSchema: () => RestaurantUncheckedCreateWithoutProductionPlanInputSchema,
  RestaurantUncheckedCreateWithoutQualityChecklistInputSchema: () => RestaurantUncheckedCreateWithoutQualityChecklistInputSchema,
  RestaurantUncheckedCreateWithoutQustomerFeedbackInputSchema: () => RestaurantUncheckedCreateWithoutQustomerFeedbackInputSchema,
  RestaurantUncheckedCreateWithoutRecipesInputSchema: () => RestaurantUncheckedCreateWithoutRecipesInputSchema,
  RestaurantUncheckedCreateWithoutSalesTransactionsInputSchema: () => RestaurantUncheckedCreateWithoutSalesTransactionsInputSchema,
  RestaurantUncheckedCreateWithoutUsersInputSchema: () => RestaurantUncheckedCreateWithoutUsersInputSchema,
  RestaurantUncheckedCreateWithoutWasteRecordInputSchema: () => RestaurantUncheckedCreateWithoutWasteRecordInputSchema,
  RestaurantUncheckedUpdateInputSchema: () => RestaurantUncheckedUpdateInputSchema,
  RestaurantUncheckedUpdateManyInputSchema: () => RestaurantUncheckedUpdateManyInputSchema,
  RestaurantUncheckedUpdateManyWithoutOrganizationInputSchema: () => RestaurantUncheckedUpdateManyWithoutOrganizationInputSchema,
  RestaurantUncheckedUpdateManyWithoutOrganizationNestedInputSchema: () => RestaurantUncheckedUpdateManyWithoutOrganizationNestedInputSchema,
  RestaurantUncheckedUpdateWithoutCookbooksInputSchema: () => RestaurantUncheckedUpdateWithoutCookbooksInputSchema,
  RestaurantUncheckedUpdateWithoutEquipmentInputSchema: () => RestaurantUncheckedUpdateWithoutEquipmentInputSchema,
  RestaurantUncheckedUpdateWithoutInventoryInputSchema: () => RestaurantUncheckedUpdateWithoutInventoryInputSchema,
  RestaurantUncheckedUpdateWithoutLeftoverItemInputSchema: () => RestaurantUncheckedUpdateWithoutLeftoverItemInputSchema,
  RestaurantUncheckedUpdateWithoutMenusInputSchema: () => RestaurantUncheckedUpdateWithoutMenusInputSchema,
  RestaurantUncheckedUpdateWithoutOrdersInputSchema: () => RestaurantUncheckedUpdateWithoutOrdersInputSchema,
  RestaurantUncheckedUpdateWithoutOrganizationInputSchema: () => RestaurantUncheckedUpdateWithoutOrganizationInputSchema,
  RestaurantUncheckedUpdateWithoutProductionPlanInputSchema: () => RestaurantUncheckedUpdateWithoutProductionPlanInputSchema,
  RestaurantUncheckedUpdateWithoutQualityChecklistInputSchema: () => RestaurantUncheckedUpdateWithoutQualityChecklistInputSchema,
  RestaurantUncheckedUpdateWithoutQustomerFeedbackInputSchema: () => RestaurantUncheckedUpdateWithoutQustomerFeedbackInputSchema,
  RestaurantUncheckedUpdateWithoutRecipesInputSchema: () => RestaurantUncheckedUpdateWithoutRecipesInputSchema,
  RestaurantUncheckedUpdateWithoutSalesTransactionsInputSchema: () => RestaurantUncheckedUpdateWithoutSalesTransactionsInputSchema,
  RestaurantUncheckedUpdateWithoutUsersInputSchema: () => RestaurantUncheckedUpdateWithoutUsersInputSchema,
  RestaurantUncheckedUpdateWithoutWasteRecordInputSchema: () => RestaurantUncheckedUpdateWithoutWasteRecordInputSchema,
  RestaurantUpdateArgsSchema: () => RestaurantUpdateArgsSchema,
  RestaurantUpdateInputSchema: () => RestaurantUpdateInputSchema,
  RestaurantUpdateManyArgsSchema: () => RestaurantUpdateManyArgsSchema,
  RestaurantUpdateManyMutationInputSchema: () => RestaurantUpdateManyMutationInputSchema,
  RestaurantUpdateManyWithWhereWithoutOrganizationInputSchema: () => RestaurantUpdateManyWithWhereWithoutOrganizationInputSchema,
  RestaurantUpdateManyWithoutOrganizationNestedInputSchema: () => RestaurantUpdateManyWithoutOrganizationNestedInputSchema,
  RestaurantUpdateOneRequiredWithoutEquipmentNestedInputSchema: () => RestaurantUpdateOneRequiredWithoutEquipmentNestedInputSchema,
  RestaurantUpdateOneRequiredWithoutInventoryNestedInputSchema: () => RestaurantUpdateOneRequiredWithoutInventoryNestedInputSchema,
  RestaurantUpdateOneRequiredWithoutLeftoverItemNestedInputSchema: () => RestaurantUpdateOneRequiredWithoutLeftoverItemNestedInputSchema,
  RestaurantUpdateOneRequiredWithoutMenusNestedInputSchema: () => RestaurantUpdateOneRequiredWithoutMenusNestedInputSchema,
  RestaurantUpdateOneRequiredWithoutOrdersNestedInputSchema: () => RestaurantUpdateOneRequiredWithoutOrdersNestedInputSchema,
  RestaurantUpdateOneRequiredWithoutProductionPlanNestedInputSchema: () => RestaurantUpdateOneRequiredWithoutProductionPlanNestedInputSchema,
  RestaurantUpdateOneRequiredWithoutQualityChecklistNestedInputSchema: () => RestaurantUpdateOneRequiredWithoutQualityChecklistNestedInputSchema,
  RestaurantUpdateOneRequiredWithoutQustomerFeedbackNestedInputSchema: () => RestaurantUpdateOneRequiredWithoutQustomerFeedbackNestedInputSchema,
  RestaurantUpdateOneRequiredWithoutRecipesNestedInputSchema: () => RestaurantUpdateOneRequiredWithoutRecipesNestedInputSchema,
  RestaurantUpdateOneRequiredWithoutSalesTransactionsNestedInputSchema: () => RestaurantUpdateOneRequiredWithoutSalesTransactionsNestedInputSchema,
  RestaurantUpdateOneRequiredWithoutWasteRecordNestedInputSchema: () => RestaurantUpdateOneRequiredWithoutWasteRecordNestedInputSchema,
  RestaurantUpdateOneWithoutCookbooksNestedInputSchema: () => RestaurantUpdateOneWithoutCookbooksNestedInputSchema,
  RestaurantUpdateOneWithoutUsersNestedInputSchema: () => RestaurantUpdateOneWithoutUsersNestedInputSchema,
  RestaurantUpdateToOneWithWhereWithoutCookbooksInputSchema: () => RestaurantUpdateToOneWithWhereWithoutCookbooksInputSchema,
  RestaurantUpdateToOneWithWhereWithoutEquipmentInputSchema: () => RestaurantUpdateToOneWithWhereWithoutEquipmentInputSchema,
  RestaurantUpdateToOneWithWhereWithoutInventoryInputSchema: () => RestaurantUpdateToOneWithWhereWithoutInventoryInputSchema,
  RestaurantUpdateToOneWithWhereWithoutLeftoverItemInputSchema: () => RestaurantUpdateToOneWithWhereWithoutLeftoverItemInputSchema,
  RestaurantUpdateToOneWithWhereWithoutMenusInputSchema: () => RestaurantUpdateToOneWithWhereWithoutMenusInputSchema,
  RestaurantUpdateToOneWithWhereWithoutOrdersInputSchema: () => RestaurantUpdateToOneWithWhereWithoutOrdersInputSchema,
  RestaurantUpdateToOneWithWhereWithoutProductionPlanInputSchema: () => RestaurantUpdateToOneWithWhereWithoutProductionPlanInputSchema,
  RestaurantUpdateToOneWithWhereWithoutQualityChecklistInputSchema: () => RestaurantUpdateToOneWithWhereWithoutQualityChecklistInputSchema,
  RestaurantUpdateToOneWithWhereWithoutQustomerFeedbackInputSchema: () => RestaurantUpdateToOneWithWhereWithoutQustomerFeedbackInputSchema,
  RestaurantUpdateToOneWithWhereWithoutRecipesInputSchema: () => RestaurantUpdateToOneWithWhereWithoutRecipesInputSchema,
  RestaurantUpdateToOneWithWhereWithoutSalesTransactionsInputSchema: () => RestaurantUpdateToOneWithWhereWithoutSalesTransactionsInputSchema,
  RestaurantUpdateToOneWithWhereWithoutUsersInputSchema: () => RestaurantUpdateToOneWithWhereWithoutUsersInputSchema,
  RestaurantUpdateToOneWithWhereWithoutWasteRecordInputSchema: () => RestaurantUpdateToOneWithWhereWithoutWasteRecordInputSchema,
  RestaurantUpdateWithWhereUniqueWithoutOrganizationInputSchema: () => RestaurantUpdateWithWhereUniqueWithoutOrganizationInputSchema,
  RestaurantUpdateWithoutCookbooksInputSchema: () => RestaurantUpdateWithoutCookbooksInputSchema,
  RestaurantUpdateWithoutEquipmentInputSchema: () => RestaurantUpdateWithoutEquipmentInputSchema,
  RestaurantUpdateWithoutInventoryInputSchema: () => RestaurantUpdateWithoutInventoryInputSchema,
  RestaurantUpdateWithoutLeftoverItemInputSchema: () => RestaurantUpdateWithoutLeftoverItemInputSchema,
  RestaurantUpdateWithoutMenusInputSchema: () => RestaurantUpdateWithoutMenusInputSchema,
  RestaurantUpdateWithoutOrdersInputSchema: () => RestaurantUpdateWithoutOrdersInputSchema,
  RestaurantUpdateWithoutOrganizationInputSchema: () => RestaurantUpdateWithoutOrganizationInputSchema,
  RestaurantUpdateWithoutProductionPlanInputSchema: () => RestaurantUpdateWithoutProductionPlanInputSchema,
  RestaurantUpdateWithoutQualityChecklistInputSchema: () => RestaurantUpdateWithoutQualityChecklistInputSchema,
  RestaurantUpdateWithoutQustomerFeedbackInputSchema: () => RestaurantUpdateWithoutQustomerFeedbackInputSchema,
  RestaurantUpdateWithoutRecipesInputSchema: () => RestaurantUpdateWithoutRecipesInputSchema,
  RestaurantUpdateWithoutSalesTransactionsInputSchema: () => RestaurantUpdateWithoutSalesTransactionsInputSchema,
  RestaurantUpdateWithoutUsersInputSchema: () => RestaurantUpdateWithoutUsersInputSchema,
  RestaurantUpdateWithoutWasteRecordInputSchema: () => RestaurantUpdateWithoutWasteRecordInputSchema,
  RestaurantUpsertArgsSchema: () => RestaurantUpsertArgsSchema,
  RestaurantUpsertWithWhereUniqueWithoutOrganizationInputSchema: () => RestaurantUpsertWithWhereUniqueWithoutOrganizationInputSchema,
  RestaurantUpsertWithoutCookbooksInputSchema: () => RestaurantUpsertWithoutCookbooksInputSchema,
  RestaurantUpsertWithoutEquipmentInputSchema: () => RestaurantUpsertWithoutEquipmentInputSchema,
  RestaurantUpsertWithoutInventoryInputSchema: () => RestaurantUpsertWithoutInventoryInputSchema,
  RestaurantUpsertWithoutLeftoverItemInputSchema: () => RestaurantUpsertWithoutLeftoverItemInputSchema,
  RestaurantUpsertWithoutMenusInputSchema: () => RestaurantUpsertWithoutMenusInputSchema,
  RestaurantUpsertWithoutOrdersInputSchema: () => RestaurantUpsertWithoutOrdersInputSchema,
  RestaurantUpsertWithoutProductionPlanInputSchema: () => RestaurantUpsertWithoutProductionPlanInputSchema,
  RestaurantUpsertWithoutQualityChecklistInputSchema: () => RestaurantUpsertWithoutQualityChecklistInputSchema,
  RestaurantUpsertWithoutQustomerFeedbackInputSchema: () => RestaurantUpsertWithoutQustomerFeedbackInputSchema,
  RestaurantUpsertWithoutRecipesInputSchema: () => RestaurantUpsertWithoutRecipesInputSchema,
  RestaurantUpsertWithoutSalesTransactionsInputSchema: () => RestaurantUpsertWithoutSalesTransactionsInputSchema,
  RestaurantUpsertWithoutUsersInputSchema: () => RestaurantUpsertWithoutUsersInputSchema,
  RestaurantUpsertWithoutWasteRecordInputSchema: () => RestaurantUpsertWithoutWasteRecordInputSchema,
  RestaurantWhereInputSchema: () => RestaurantWhereInputSchema,
  RestaurantWhereUniqueInputSchema: () => RestaurantWhereUniqueInputSchema,
  SalesTransactionsAggregateArgsSchema: () => SalesTransactionsAggregateArgsSchema,
  SalesTransactionsArgsSchema: () => SalesTransactionsArgsSchema,
  SalesTransactionsAvgOrderByAggregateInputSchema: () => SalesTransactionsAvgOrderByAggregateInputSchema,
  SalesTransactionsCountOrderByAggregateInputSchema: () => SalesTransactionsCountOrderByAggregateInputSchema,
  SalesTransactionsCreateArgsSchema: () => SalesTransactionsCreateArgsSchema,
  SalesTransactionsCreateInputSchema: () => SalesTransactionsCreateInputSchema,
  SalesTransactionsCreateManyAndReturnArgsSchema: () => SalesTransactionsCreateManyAndReturnArgsSchema,
  SalesTransactionsCreateManyArgsSchema: () => SalesTransactionsCreateManyArgsSchema,
  SalesTransactionsCreateManyInputSchema: () => SalesTransactionsCreateManyInputSchema,
  SalesTransactionsCreateManyMenuItemInputEnvelopeSchema: () => SalesTransactionsCreateManyMenuItemInputEnvelopeSchema,
  SalesTransactionsCreateManyMenuItemInputSchema: () => SalesTransactionsCreateManyMenuItemInputSchema,
  SalesTransactionsCreateManyRestaurantInputEnvelopeSchema: () => SalesTransactionsCreateManyRestaurantInputEnvelopeSchema,
  SalesTransactionsCreateManyRestaurantInputSchema: () => SalesTransactionsCreateManyRestaurantInputSchema,
  SalesTransactionsCreateNestedManyWithoutMenuItemInputSchema: () => SalesTransactionsCreateNestedManyWithoutMenuItemInputSchema,
  SalesTransactionsCreateNestedManyWithoutRestaurantInputSchema: () => SalesTransactionsCreateNestedManyWithoutRestaurantInputSchema,
  SalesTransactionsCreateOrConnectWithoutMenuItemInputSchema: () => SalesTransactionsCreateOrConnectWithoutMenuItemInputSchema,
  SalesTransactionsCreateOrConnectWithoutRestaurantInputSchema: () => SalesTransactionsCreateOrConnectWithoutRestaurantInputSchema,
  SalesTransactionsCreateWithoutMenuItemInputSchema: () => SalesTransactionsCreateWithoutMenuItemInputSchema,
  SalesTransactionsCreateWithoutRestaurantInputSchema: () => SalesTransactionsCreateWithoutRestaurantInputSchema,
  SalesTransactionsDeleteArgsSchema: () => SalesTransactionsDeleteArgsSchema,
  SalesTransactionsDeleteManyArgsSchema: () => SalesTransactionsDeleteManyArgsSchema,
  SalesTransactionsFindFirstArgsSchema: () => SalesTransactionsFindFirstArgsSchema,
  SalesTransactionsFindFirstOrThrowArgsSchema: () => SalesTransactionsFindFirstOrThrowArgsSchema,
  SalesTransactionsFindManyArgsSchema: () => SalesTransactionsFindManyArgsSchema,
  SalesTransactionsFindUniqueArgsSchema: () => SalesTransactionsFindUniqueArgsSchema,
  SalesTransactionsFindUniqueOrThrowArgsSchema: () => SalesTransactionsFindUniqueOrThrowArgsSchema,
  SalesTransactionsGroupByArgsSchema: () => SalesTransactionsGroupByArgsSchema,
  SalesTransactionsIncludeSchema: () => SalesTransactionsIncludeSchema,
  SalesTransactionsListRelationFilterSchema: () => SalesTransactionsListRelationFilterSchema,
  SalesTransactionsMaxOrderByAggregateInputSchema: () => SalesTransactionsMaxOrderByAggregateInputSchema,
  SalesTransactionsMinOrderByAggregateInputSchema: () => SalesTransactionsMinOrderByAggregateInputSchema,
  SalesTransactionsOrderByRelationAggregateInputSchema: () => SalesTransactionsOrderByRelationAggregateInputSchema,
  SalesTransactionsOrderByWithAggregationInputSchema: () => SalesTransactionsOrderByWithAggregationInputSchema,
  SalesTransactionsOrderByWithRelationInputSchema: () => SalesTransactionsOrderByWithRelationInputSchema,
  SalesTransactionsScalarFieldEnumSchema: () => SalesTransactionsScalarFieldEnumSchema,
  SalesTransactionsScalarWhereInputSchema: () => SalesTransactionsScalarWhereInputSchema,
  SalesTransactionsScalarWhereWithAggregatesInputSchema: () => SalesTransactionsScalarWhereWithAggregatesInputSchema,
  SalesTransactionsSchema: () => SalesTransactionsSchema,
  SalesTransactionsSelectSchema: () => SalesTransactionsSelectSchema,
  SalesTransactionsSumOrderByAggregateInputSchema: () => SalesTransactionsSumOrderByAggregateInputSchema,
  SalesTransactionsUncheckedCreateInputSchema: () => SalesTransactionsUncheckedCreateInputSchema,
  SalesTransactionsUncheckedCreateNestedManyWithoutMenuItemInputSchema: () => SalesTransactionsUncheckedCreateNestedManyWithoutMenuItemInputSchema,
  SalesTransactionsUncheckedCreateNestedManyWithoutRestaurantInputSchema: () => SalesTransactionsUncheckedCreateNestedManyWithoutRestaurantInputSchema,
  SalesTransactionsUncheckedCreateWithoutMenuItemInputSchema: () => SalesTransactionsUncheckedCreateWithoutMenuItemInputSchema,
  SalesTransactionsUncheckedCreateWithoutRestaurantInputSchema: () => SalesTransactionsUncheckedCreateWithoutRestaurantInputSchema,
  SalesTransactionsUncheckedUpdateInputSchema: () => SalesTransactionsUncheckedUpdateInputSchema,
  SalesTransactionsUncheckedUpdateManyInputSchema: () => SalesTransactionsUncheckedUpdateManyInputSchema,
  SalesTransactionsUncheckedUpdateManyWithoutMenuItemInputSchema: () => SalesTransactionsUncheckedUpdateManyWithoutMenuItemInputSchema,
  SalesTransactionsUncheckedUpdateManyWithoutMenuItemNestedInputSchema: () => SalesTransactionsUncheckedUpdateManyWithoutMenuItemNestedInputSchema,
  SalesTransactionsUncheckedUpdateManyWithoutRestaurantInputSchema: () => SalesTransactionsUncheckedUpdateManyWithoutRestaurantInputSchema,
  SalesTransactionsUncheckedUpdateManyWithoutRestaurantNestedInputSchema: () => SalesTransactionsUncheckedUpdateManyWithoutRestaurantNestedInputSchema,
  SalesTransactionsUncheckedUpdateWithoutMenuItemInputSchema: () => SalesTransactionsUncheckedUpdateWithoutMenuItemInputSchema,
  SalesTransactionsUncheckedUpdateWithoutRestaurantInputSchema: () => SalesTransactionsUncheckedUpdateWithoutRestaurantInputSchema,
  SalesTransactionsUpdateArgsSchema: () => SalesTransactionsUpdateArgsSchema,
  SalesTransactionsUpdateInputSchema: () => SalesTransactionsUpdateInputSchema,
  SalesTransactionsUpdateManyArgsSchema: () => SalesTransactionsUpdateManyArgsSchema,
  SalesTransactionsUpdateManyMutationInputSchema: () => SalesTransactionsUpdateManyMutationInputSchema,
  SalesTransactionsUpdateManyWithWhereWithoutMenuItemInputSchema: () => SalesTransactionsUpdateManyWithWhereWithoutMenuItemInputSchema,
  SalesTransactionsUpdateManyWithWhereWithoutRestaurantInputSchema: () => SalesTransactionsUpdateManyWithWhereWithoutRestaurantInputSchema,
  SalesTransactionsUpdateManyWithoutMenuItemNestedInputSchema: () => SalesTransactionsUpdateManyWithoutMenuItemNestedInputSchema,
  SalesTransactionsUpdateManyWithoutRestaurantNestedInputSchema: () => SalesTransactionsUpdateManyWithoutRestaurantNestedInputSchema,
  SalesTransactionsUpdateWithWhereUniqueWithoutMenuItemInputSchema: () => SalesTransactionsUpdateWithWhereUniqueWithoutMenuItemInputSchema,
  SalesTransactionsUpdateWithWhereUniqueWithoutRestaurantInputSchema: () => SalesTransactionsUpdateWithWhereUniqueWithoutRestaurantInputSchema,
  SalesTransactionsUpdateWithoutMenuItemInputSchema: () => SalesTransactionsUpdateWithoutMenuItemInputSchema,
  SalesTransactionsUpdateWithoutRestaurantInputSchema: () => SalesTransactionsUpdateWithoutRestaurantInputSchema,
  SalesTransactionsUpsertArgsSchema: () => SalesTransactionsUpsertArgsSchema,
  SalesTransactionsUpsertWithWhereUniqueWithoutMenuItemInputSchema: () => SalesTransactionsUpsertWithWhereUniqueWithoutMenuItemInputSchema,
  SalesTransactionsUpsertWithWhereUniqueWithoutRestaurantInputSchema: () => SalesTransactionsUpsertWithWhereUniqueWithoutRestaurantInputSchema,
  SalesTransactionsWhereInputSchema: () => SalesTransactionsWhereInputSchema,
  SalesTransactionsWhereUniqueInputSchema: () => SalesTransactionsWhereUniqueInputSchema,
  SchedulingConstraintAggregateArgsSchema: () => SchedulingConstraintAggregateArgsSchema,
  SchedulingConstraintArgsSchema: () => SchedulingConstraintArgsSchema,
  SchedulingConstraintAvgOrderByAggregateInputSchema: () => SchedulingConstraintAvgOrderByAggregateInputSchema,
  SchedulingConstraintCountOrderByAggregateInputSchema: () => SchedulingConstraintCountOrderByAggregateInputSchema,
  SchedulingConstraintCreateArgsSchema: () => SchedulingConstraintCreateArgsSchema,
  SchedulingConstraintCreateInputSchema: () => SchedulingConstraintCreateInputSchema,
  SchedulingConstraintCreateManyAndReturnArgsSchema: () => SchedulingConstraintCreateManyAndReturnArgsSchema,
  SchedulingConstraintCreateManyArgsSchema: () => SchedulingConstraintCreateManyArgsSchema,
  SchedulingConstraintCreateManyInputSchema: () => SchedulingConstraintCreateManyInputSchema,
  SchedulingConstraintCreateManyUserInputEnvelopeSchema: () => SchedulingConstraintCreateManyUserInputEnvelopeSchema,
  SchedulingConstraintCreateManyUserInputSchema: () => SchedulingConstraintCreateManyUserInputSchema,
  SchedulingConstraintCreateNestedManyWithoutUserInputSchema: () => SchedulingConstraintCreateNestedManyWithoutUserInputSchema,
  SchedulingConstraintCreateOrConnectWithoutUserInputSchema: () => SchedulingConstraintCreateOrConnectWithoutUserInputSchema,
  SchedulingConstraintCreateWithoutUserInputSchema: () => SchedulingConstraintCreateWithoutUserInputSchema,
  SchedulingConstraintDeleteArgsSchema: () => SchedulingConstraintDeleteArgsSchema,
  SchedulingConstraintDeleteManyArgsSchema: () => SchedulingConstraintDeleteManyArgsSchema,
  SchedulingConstraintFindFirstArgsSchema: () => SchedulingConstraintFindFirstArgsSchema,
  SchedulingConstraintFindFirstOrThrowArgsSchema: () => SchedulingConstraintFindFirstOrThrowArgsSchema,
  SchedulingConstraintFindManyArgsSchema: () => SchedulingConstraintFindManyArgsSchema,
  SchedulingConstraintFindUniqueArgsSchema: () => SchedulingConstraintFindUniqueArgsSchema,
  SchedulingConstraintFindUniqueOrThrowArgsSchema: () => SchedulingConstraintFindUniqueOrThrowArgsSchema,
  SchedulingConstraintGroupByArgsSchema: () => SchedulingConstraintGroupByArgsSchema,
  SchedulingConstraintIncludeSchema: () => SchedulingConstraintIncludeSchema,
  SchedulingConstraintListRelationFilterSchema: () => SchedulingConstraintListRelationFilterSchema,
  SchedulingConstraintMaxOrderByAggregateInputSchema: () => SchedulingConstraintMaxOrderByAggregateInputSchema,
  SchedulingConstraintMinOrderByAggregateInputSchema: () => SchedulingConstraintMinOrderByAggregateInputSchema,
  SchedulingConstraintOrderByRelationAggregateInputSchema: () => SchedulingConstraintOrderByRelationAggregateInputSchema,
  SchedulingConstraintOrderByWithAggregationInputSchema: () => SchedulingConstraintOrderByWithAggregationInputSchema,
  SchedulingConstraintOrderByWithRelationInputSchema: () => SchedulingConstraintOrderByWithRelationInputSchema,
  SchedulingConstraintScalarFieldEnumSchema: () => SchedulingConstraintScalarFieldEnumSchema,
  SchedulingConstraintScalarWhereInputSchema: () => SchedulingConstraintScalarWhereInputSchema,
  SchedulingConstraintScalarWhereWithAggregatesInputSchema: () => SchedulingConstraintScalarWhereWithAggregatesInputSchema,
  SchedulingConstraintSchema: () => SchedulingConstraintSchema,
  SchedulingConstraintSelectSchema: () => SchedulingConstraintSelectSchema,
  SchedulingConstraintSumOrderByAggregateInputSchema: () => SchedulingConstraintSumOrderByAggregateInputSchema,
  SchedulingConstraintUncheckedCreateInputSchema: () => SchedulingConstraintUncheckedCreateInputSchema,
  SchedulingConstraintUncheckedCreateNestedManyWithoutUserInputSchema: () => SchedulingConstraintUncheckedCreateNestedManyWithoutUserInputSchema,
  SchedulingConstraintUncheckedCreateWithoutUserInputSchema: () => SchedulingConstraintUncheckedCreateWithoutUserInputSchema,
  SchedulingConstraintUncheckedUpdateInputSchema: () => SchedulingConstraintUncheckedUpdateInputSchema,
  SchedulingConstraintUncheckedUpdateManyInputSchema: () => SchedulingConstraintUncheckedUpdateManyInputSchema,
  SchedulingConstraintUncheckedUpdateManyWithoutUserInputSchema: () => SchedulingConstraintUncheckedUpdateManyWithoutUserInputSchema,
  SchedulingConstraintUncheckedUpdateManyWithoutUserNestedInputSchema: () => SchedulingConstraintUncheckedUpdateManyWithoutUserNestedInputSchema,
  SchedulingConstraintUncheckedUpdateWithoutUserInputSchema: () => SchedulingConstraintUncheckedUpdateWithoutUserInputSchema,
  SchedulingConstraintUpdateArgsSchema: () => SchedulingConstraintUpdateArgsSchema,
  SchedulingConstraintUpdateInputSchema: () => SchedulingConstraintUpdateInputSchema,
  SchedulingConstraintUpdateManyArgsSchema: () => SchedulingConstraintUpdateManyArgsSchema,
  SchedulingConstraintUpdateManyMutationInputSchema: () => SchedulingConstraintUpdateManyMutationInputSchema,
  SchedulingConstraintUpdateManyWithWhereWithoutUserInputSchema: () => SchedulingConstraintUpdateManyWithWhereWithoutUserInputSchema,
  SchedulingConstraintUpdateManyWithoutUserNestedInputSchema: () => SchedulingConstraintUpdateManyWithoutUserNestedInputSchema,
  SchedulingConstraintUpdateWithWhereUniqueWithoutUserInputSchema: () => SchedulingConstraintUpdateWithWhereUniqueWithoutUserInputSchema,
  SchedulingConstraintUpdateWithoutUserInputSchema: () => SchedulingConstraintUpdateWithoutUserInputSchema,
  SchedulingConstraintUpsertArgsSchema: () => SchedulingConstraintUpsertArgsSchema,
  SchedulingConstraintUpsertWithWhereUniqueWithoutUserInputSchema: () => SchedulingConstraintUpsertWithWhereUniqueWithoutUserInputSchema,
  SchedulingConstraintWhereInputSchema: () => SchedulingConstraintWhereInputSchema,
  SchedulingConstraintWhereUniqueInputSchema: () => SchedulingConstraintWhereUniqueInputSchema,
  SessionAggregateArgsSchema: () => SessionAggregateArgsSchema,
  SessionArgsSchema: () => SessionArgsSchema,
  SessionAvgOrderByAggregateInputSchema: () => SessionAvgOrderByAggregateInputSchema,
  SessionCountOrderByAggregateInputSchema: () => SessionCountOrderByAggregateInputSchema,
  SessionCreateArgsSchema: () => SessionCreateArgsSchema,
  SessionCreateInputSchema: () => SessionCreateInputSchema,
  SessionCreateManyAndReturnArgsSchema: () => SessionCreateManyAndReturnArgsSchema,
  SessionCreateManyArgsSchema: () => SessionCreateManyArgsSchema,
  SessionCreateManyInputSchema: () => SessionCreateManyInputSchema,
  SessionCreateManyUserInputEnvelopeSchema: () => SessionCreateManyUserInputEnvelopeSchema,
  SessionCreateManyUserInputSchema: () => SessionCreateManyUserInputSchema,
  SessionCreateNestedManyWithoutUserInputSchema: () => SessionCreateNestedManyWithoutUserInputSchema,
  SessionCreateOrConnectWithoutUserInputSchema: () => SessionCreateOrConnectWithoutUserInputSchema,
  SessionCreateWithoutUserInputSchema: () => SessionCreateWithoutUserInputSchema,
  SessionDeleteArgsSchema: () => SessionDeleteArgsSchema,
  SessionDeleteManyArgsSchema: () => SessionDeleteManyArgsSchema,
  SessionFindFirstArgsSchema: () => SessionFindFirstArgsSchema,
  SessionFindFirstOrThrowArgsSchema: () => SessionFindFirstOrThrowArgsSchema,
  SessionFindManyArgsSchema: () => SessionFindManyArgsSchema,
  SessionFindUniqueArgsSchema: () => SessionFindUniqueArgsSchema,
  SessionFindUniqueOrThrowArgsSchema: () => SessionFindUniqueOrThrowArgsSchema,
  SessionGroupByArgsSchema: () => SessionGroupByArgsSchema,
  SessionIncludeSchema: () => SessionIncludeSchema,
  SessionListRelationFilterSchema: () => SessionListRelationFilterSchema,
  SessionMaxOrderByAggregateInputSchema: () => SessionMaxOrderByAggregateInputSchema,
  SessionMinOrderByAggregateInputSchema: () => SessionMinOrderByAggregateInputSchema,
  SessionOrderByRelationAggregateInputSchema: () => SessionOrderByRelationAggregateInputSchema,
  SessionOrderByWithAggregationInputSchema: () => SessionOrderByWithAggregationInputSchema,
  SessionOrderByWithRelationInputSchema: () => SessionOrderByWithRelationInputSchema,
  SessionScalarFieldEnumSchema: () => SessionScalarFieldEnumSchema,
  SessionScalarWhereInputSchema: () => SessionScalarWhereInputSchema,
  SessionScalarWhereWithAggregatesInputSchema: () => SessionScalarWhereWithAggregatesInputSchema,
  SessionSchema: () => SessionSchema,
  SessionSelectSchema: () => SessionSelectSchema,
  SessionSumOrderByAggregateInputSchema: () => SessionSumOrderByAggregateInputSchema,
  SessionUncheckedCreateInputSchema: () => SessionUncheckedCreateInputSchema,
  SessionUncheckedCreateNestedManyWithoutUserInputSchema: () => SessionUncheckedCreateNestedManyWithoutUserInputSchema,
  SessionUncheckedCreateWithoutUserInputSchema: () => SessionUncheckedCreateWithoutUserInputSchema,
  SessionUncheckedUpdateInputSchema: () => SessionUncheckedUpdateInputSchema,
  SessionUncheckedUpdateManyInputSchema: () => SessionUncheckedUpdateManyInputSchema,
  SessionUncheckedUpdateManyWithoutUserInputSchema: () => SessionUncheckedUpdateManyWithoutUserInputSchema,
  SessionUncheckedUpdateManyWithoutUserNestedInputSchema: () => SessionUncheckedUpdateManyWithoutUserNestedInputSchema,
  SessionUncheckedUpdateWithoutUserInputSchema: () => SessionUncheckedUpdateWithoutUserInputSchema,
  SessionUpdateArgsSchema: () => SessionUpdateArgsSchema,
  SessionUpdateInputSchema: () => SessionUpdateInputSchema,
  SessionUpdateManyArgsSchema: () => SessionUpdateManyArgsSchema,
  SessionUpdateManyMutationInputSchema: () => SessionUpdateManyMutationInputSchema,
  SessionUpdateManyWithWhereWithoutUserInputSchema: () => SessionUpdateManyWithWhereWithoutUserInputSchema,
  SessionUpdateManyWithoutUserNestedInputSchema: () => SessionUpdateManyWithoutUserNestedInputSchema,
  SessionUpdateWithWhereUniqueWithoutUserInputSchema: () => SessionUpdateWithWhereUniqueWithoutUserInputSchema,
  SessionUpdateWithoutUserInputSchema: () => SessionUpdateWithoutUserInputSchema,
  SessionUpsertArgsSchema: () => SessionUpsertArgsSchema,
  SessionUpsertWithWhereUniqueWithoutUserInputSchema: () => SessionUpsertWithWhereUniqueWithoutUserInputSchema,
  SessionWhereInputSchema: () => SessionWhereInputSchema,
  SessionWhereUniqueInputSchema: () => SessionWhereUniqueInputSchema,
  ShiftAggregateArgsSchema: () => ShiftAggregateArgsSchema,
  ShiftArgsSchema: () => ShiftArgsSchema,
  ShiftAvgOrderByAggregateInputSchema: () => ShiftAvgOrderByAggregateInputSchema,
  ShiftCountOrderByAggregateInputSchema: () => ShiftCountOrderByAggregateInputSchema,
  ShiftCountOutputTypeArgsSchema: () => ShiftCountOutputTypeArgsSchema,
  ShiftCountOutputTypeSelectSchema: () => ShiftCountOutputTypeSelectSchema,
  ShiftCreateArgsSchema: () => ShiftCreateArgsSchema,
  ShiftCreateInputSchema: () => ShiftCreateInputSchema,
  ShiftCreateManyAndReturnArgsSchema: () => ShiftCreateManyAndReturnArgsSchema,
  ShiftCreateManyArgsSchema: () => ShiftCreateManyArgsSchema,
  ShiftCreateManyInputSchema: () => ShiftCreateManyInputSchema,
  ShiftCreateManyUserInputEnvelopeSchema: () => ShiftCreateManyUserInputEnvelopeSchema,
  ShiftCreateManyUserInputSchema: () => ShiftCreateManyUserInputSchema,
  ShiftCreateNestedManyWithoutUserInputSchema: () => ShiftCreateNestedManyWithoutUserInputSchema,
  ShiftCreateNestedOneWithoutShiftTaskInputSchema: () => ShiftCreateNestedOneWithoutShiftTaskInputSchema,
  ShiftCreateOrConnectWithoutShiftTaskInputSchema: () => ShiftCreateOrConnectWithoutShiftTaskInputSchema,
  ShiftCreateOrConnectWithoutUserInputSchema: () => ShiftCreateOrConnectWithoutUserInputSchema,
  ShiftCreateWithoutShiftTaskInputSchema: () => ShiftCreateWithoutShiftTaskInputSchema,
  ShiftCreateWithoutUserInputSchema: () => ShiftCreateWithoutUserInputSchema,
  ShiftDeleteArgsSchema: () => ShiftDeleteArgsSchema,
  ShiftDeleteManyArgsSchema: () => ShiftDeleteManyArgsSchema,
  ShiftFindFirstArgsSchema: () => ShiftFindFirstArgsSchema,
  ShiftFindFirstOrThrowArgsSchema: () => ShiftFindFirstOrThrowArgsSchema,
  ShiftFindManyArgsSchema: () => ShiftFindManyArgsSchema,
  ShiftFindUniqueArgsSchema: () => ShiftFindUniqueArgsSchema,
  ShiftFindUniqueOrThrowArgsSchema: () => ShiftFindUniqueOrThrowArgsSchema,
  ShiftGroupByArgsSchema: () => ShiftGroupByArgsSchema,
  ShiftIncludeSchema: () => ShiftIncludeSchema,
  ShiftListRelationFilterSchema: () => ShiftListRelationFilterSchema,
  ShiftMaxOrderByAggregateInputSchema: () => ShiftMaxOrderByAggregateInputSchema,
  ShiftMinOrderByAggregateInputSchema: () => ShiftMinOrderByAggregateInputSchema,
  ShiftOrderByRelationAggregateInputSchema: () => ShiftOrderByRelationAggregateInputSchema,
  ShiftOrderByWithAggregationInputSchema: () => ShiftOrderByWithAggregationInputSchema,
  ShiftOrderByWithRelationInputSchema: () => ShiftOrderByWithRelationInputSchema,
  ShiftRelationFilterSchema: () => ShiftRelationFilterSchema,
  ShiftScalarFieldEnumSchema: () => ShiftScalarFieldEnumSchema,
  ShiftScalarWhereInputSchema: () => ShiftScalarWhereInputSchema,
  ShiftScalarWhereWithAggregatesInputSchema: () => ShiftScalarWhereWithAggregatesInputSchema,
  ShiftSchema: () => ShiftSchema,
  ShiftSelectSchema: () => ShiftSelectSchema,
  ShiftStatusSchema: () => ShiftStatusSchema,
  ShiftSumOrderByAggregateInputSchema: () => ShiftSumOrderByAggregateInputSchema,
  ShiftTaskAggregateArgsSchema: () => ShiftTaskAggregateArgsSchema,
  ShiftTaskArgsSchema: () => ShiftTaskArgsSchema,
  ShiftTaskAvgOrderByAggregateInputSchema: () => ShiftTaskAvgOrderByAggregateInputSchema,
  ShiftTaskCountOrderByAggregateInputSchema: () => ShiftTaskCountOrderByAggregateInputSchema,
  ShiftTaskCreateArgsSchema: () => ShiftTaskCreateArgsSchema,
  ShiftTaskCreateInputSchema: () => ShiftTaskCreateInputSchema,
  ShiftTaskCreateManyAndReturnArgsSchema: () => ShiftTaskCreateManyAndReturnArgsSchema,
  ShiftTaskCreateManyArgsSchema: () => ShiftTaskCreateManyArgsSchema,
  ShiftTaskCreateManyInputSchema: () => ShiftTaskCreateManyInputSchema,
  ShiftTaskCreateManyShiftInputEnvelopeSchema: () => ShiftTaskCreateManyShiftInputEnvelopeSchema,
  ShiftTaskCreateManyShiftInputSchema: () => ShiftTaskCreateManyShiftInputSchema,
  ShiftTaskCreateNestedManyWithoutShiftInputSchema: () => ShiftTaskCreateNestedManyWithoutShiftInputSchema,
  ShiftTaskCreateOrConnectWithoutShiftInputSchema: () => ShiftTaskCreateOrConnectWithoutShiftInputSchema,
  ShiftTaskCreateWithoutShiftInputSchema: () => ShiftTaskCreateWithoutShiftInputSchema,
  ShiftTaskDeleteArgsSchema: () => ShiftTaskDeleteArgsSchema,
  ShiftTaskDeleteManyArgsSchema: () => ShiftTaskDeleteManyArgsSchema,
  ShiftTaskFindFirstArgsSchema: () => ShiftTaskFindFirstArgsSchema,
  ShiftTaskFindFirstOrThrowArgsSchema: () => ShiftTaskFindFirstOrThrowArgsSchema,
  ShiftTaskFindManyArgsSchema: () => ShiftTaskFindManyArgsSchema,
  ShiftTaskFindUniqueArgsSchema: () => ShiftTaskFindUniqueArgsSchema,
  ShiftTaskFindUniqueOrThrowArgsSchema: () => ShiftTaskFindUniqueOrThrowArgsSchema,
  ShiftTaskGroupByArgsSchema: () => ShiftTaskGroupByArgsSchema,
  ShiftTaskIncludeSchema: () => ShiftTaskIncludeSchema,
  ShiftTaskListRelationFilterSchema: () => ShiftTaskListRelationFilterSchema,
  ShiftTaskMaxOrderByAggregateInputSchema: () => ShiftTaskMaxOrderByAggregateInputSchema,
  ShiftTaskMinOrderByAggregateInputSchema: () => ShiftTaskMinOrderByAggregateInputSchema,
  ShiftTaskOrderByRelationAggregateInputSchema: () => ShiftTaskOrderByRelationAggregateInputSchema,
  ShiftTaskOrderByWithAggregationInputSchema: () => ShiftTaskOrderByWithAggregationInputSchema,
  ShiftTaskOrderByWithRelationInputSchema: () => ShiftTaskOrderByWithRelationInputSchema,
  ShiftTaskScalarFieldEnumSchema: () => ShiftTaskScalarFieldEnumSchema,
  ShiftTaskScalarWhereInputSchema: () => ShiftTaskScalarWhereInputSchema,
  ShiftTaskScalarWhereWithAggregatesInputSchema: () => ShiftTaskScalarWhereWithAggregatesInputSchema,
  ShiftTaskSchema: () => ShiftTaskSchema,
  ShiftTaskSelectSchema: () => ShiftTaskSelectSchema,
  ShiftTaskSumOrderByAggregateInputSchema: () => ShiftTaskSumOrderByAggregateInputSchema,
  ShiftTaskUncheckedCreateInputSchema: () => ShiftTaskUncheckedCreateInputSchema,
  ShiftTaskUncheckedCreateNestedManyWithoutShiftInputSchema: () => ShiftTaskUncheckedCreateNestedManyWithoutShiftInputSchema,
  ShiftTaskUncheckedCreateWithoutShiftInputSchema: () => ShiftTaskUncheckedCreateWithoutShiftInputSchema,
  ShiftTaskUncheckedUpdateInputSchema: () => ShiftTaskUncheckedUpdateInputSchema,
  ShiftTaskUncheckedUpdateManyInputSchema: () => ShiftTaskUncheckedUpdateManyInputSchema,
  ShiftTaskUncheckedUpdateManyWithoutShiftInputSchema: () => ShiftTaskUncheckedUpdateManyWithoutShiftInputSchema,
  ShiftTaskUncheckedUpdateManyWithoutShiftNestedInputSchema: () => ShiftTaskUncheckedUpdateManyWithoutShiftNestedInputSchema,
  ShiftTaskUncheckedUpdateWithoutShiftInputSchema: () => ShiftTaskUncheckedUpdateWithoutShiftInputSchema,
  ShiftTaskUpdateArgsSchema: () => ShiftTaskUpdateArgsSchema,
  ShiftTaskUpdateInputSchema: () => ShiftTaskUpdateInputSchema,
  ShiftTaskUpdateManyArgsSchema: () => ShiftTaskUpdateManyArgsSchema,
  ShiftTaskUpdateManyMutationInputSchema: () => ShiftTaskUpdateManyMutationInputSchema,
  ShiftTaskUpdateManyWithWhereWithoutShiftInputSchema: () => ShiftTaskUpdateManyWithWhereWithoutShiftInputSchema,
  ShiftTaskUpdateManyWithoutShiftNestedInputSchema: () => ShiftTaskUpdateManyWithoutShiftNestedInputSchema,
  ShiftTaskUpdateWithWhereUniqueWithoutShiftInputSchema: () => ShiftTaskUpdateWithWhereUniqueWithoutShiftInputSchema,
  ShiftTaskUpdateWithoutShiftInputSchema: () => ShiftTaskUpdateWithoutShiftInputSchema,
  ShiftTaskUpsertArgsSchema: () => ShiftTaskUpsertArgsSchema,
  ShiftTaskUpsertWithWhereUniqueWithoutShiftInputSchema: () => ShiftTaskUpsertWithWhereUniqueWithoutShiftInputSchema,
  ShiftTaskWhereInputSchema: () => ShiftTaskWhereInputSchema,
  ShiftTaskWhereUniqueInputSchema: () => ShiftTaskWhereUniqueInputSchema,
  ShiftUncheckedCreateInputSchema: () => ShiftUncheckedCreateInputSchema,
  ShiftUncheckedCreateNestedManyWithoutUserInputSchema: () => ShiftUncheckedCreateNestedManyWithoutUserInputSchema,
  ShiftUncheckedCreateWithoutShiftTaskInputSchema: () => ShiftUncheckedCreateWithoutShiftTaskInputSchema,
  ShiftUncheckedCreateWithoutUserInputSchema: () => ShiftUncheckedCreateWithoutUserInputSchema,
  ShiftUncheckedUpdateInputSchema: () => ShiftUncheckedUpdateInputSchema,
  ShiftUncheckedUpdateManyInputSchema: () => ShiftUncheckedUpdateManyInputSchema,
  ShiftUncheckedUpdateManyWithoutUserInputSchema: () => ShiftUncheckedUpdateManyWithoutUserInputSchema,
  ShiftUncheckedUpdateManyWithoutUserNestedInputSchema: () => ShiftUncheckedUpdateManyWithoutUserNestedInputSchema,
  ShiftUncheckedUpdateWithoutShiftTaskInputSchema: () => ShiftUncheckedUpdateWithoutShiftTaskInputSchema,
  ShiftUncheckedUpdateWithoutUserInputSchema: () => ShiftUncheckedUpdateWithoutUserInputSchema,
  ShiftUpdateArgsSchema: () => ShiftUpdateArgsSchema,
  ShiftUpdateInputSchema: () => ShiftUpdateInputSchema,
  ShiftUpdateManyArgsSchema: () => ShiftUpdateManyArgsSchema,
  ShiftUpdateManyMutationInputSchema: () => ShiftUpdateManyMutationInputSchema,
  ShiftUpdateManyWithWhereWithoutUserInputSchema: () => ShiftUpdateManyWithWhereWithoutUserInputSchema,
  ShiftUpdateManyWithoutUserNestedInputSchema: () => ShiftUpdateManyWithoutUserNestedInputSchema,
  ShiftUpdateOneRequiredWithoutShiftTaskNestedInputSchema: () => ShiftUpdateOneRequiredWithoutShiftTaskNestedInputSchema,
  ShiftUpdateToOneWithWhereWithoutShiftTaskInputSchema: () => ShiftUpdateToOneWithWhereWithoutShiftTaskInputSchema,
  ShiftUpdateWithWhereUniqueWithoutUserInputSchema: () => ShiftUpdateWithWhereUniqueWithoutUserInputSchema,
  ShiftUpdateWithoutShiftTaskInputSchema: () => ShiftUpdateWithoutShiftTaskInputSchema,
  ShiftUpdateWithoutUserInputSchema: () => ShiftUpdateWithoutUserInputSchema,
  ShiftUpsertArgsSchema: () => ShiftUpsertArgsSchema,
  ShiftUpsertWithWhereUniqueWithoutUserInputSchema: () => ShiftUpsertWithWhereUniqueWithoutUserInputSchema,
  ShiftUpsertWithoutShiftTaskInputSchema: () => ShiftUpsertWithoutShiftTaskInputSchema,
  ShiftWhereInputSchema: () => ShiftWhereInputSchema,
  ShiftWhereUniqueInputSchema: () => ShiftWhereUniqueInputSchema,
  SortOrderInputSchema: () => SortOrderInputSchema,
  SortOrderSchema: () => SortOrderSchema,
  StringFieldUpdateOperationsInputSchema: () => StringFieldUpdateOperationsInputSchema,
  StringFilterSchema: () => StringFilterSchema,
  StringNullableFilterSchema: () => StringNullableFilterSchema,
  StringNullableListFilterSchema: () => StringNullableListFilterSchema,
  StringNullableWithAggregatesFilterSchema: () => StringNullableWithAggregatesFilterSchema,
  StringWithAggregatesFilterSchema: () => StringWithAggregatesFilterSchema,
  SupplierPriceHistoryAggregateArgsSchema: () => SupplierPriceHistoryAggregateArgsSchema,
  SupplierPriceHistoryArgsSchema: () => SupplierPriceHistoryArgsSchema,
  SupplierPriceHistoryAvgOrderByAggregateInputSchema: () => SupplierPriceHistoryAvgOrderByAggregateInputSchema,
  SupplierPriceHistoryCountOrderByAggregateInputSchema: () => SupplierPriceHistoryCountOrderByAggregateInputSchema,
  SupplierPriceHistoryCreateArgsSchema: () => SupplierPriceHistoryCreateArgsSchema,
  SupplierPriceHistoryCreateInputSchema: () => SupplierPriceHistoryCreateInputSchema,
  SupplierPriceHistoryCreateManyAndReturnArgsSchema: () => SupplierPriceHistoryCreateManyAndReturnArgsSchema,
  SupplierPriceHistoryCreateManyArgsSchema: () => SupplierPriceHistoryCreateManyArgsSchema,
  SupplierPriceHistoryCreateManyIngredientInputEnvelopeSchema: () => SupplierPriceHistoryCreateManyIngredientInputEnvelopeSchema,
  SupplierPriceHistoryCreateManyIngredientInputSchema: () => SupplierPriceHistoryCreateManyIngredientInputSchema,
  SupplierPriceHistoryCreateManyInputSchema: () => SupplierPriceHistoryCreateManyInputSchema,
  SupplierPriceHistoryCreateManyVendorInputEnvelopeSchema: () => SupplierPriceHistoryCreateManyVendorInputEnvelopeSchema,
  SupplierPriceHistoryCreateManyVendorInputSchema: () => SupplierPriceHistoryCreateManyVendorInputSchema,
  SupplierPriceHistoryCreateNestedManyWithoutIngredientInputSchema: () => SupplierPriceHistoryCreateNestedManyWithoutIngredientInputSchema,
  SupplierPriceHistoryCreateNestedManyWithoutVendorInputSchema: () => SupplierPriceHistoryCreateNestedManyWithoutVendorInputSchema,
  SupplierPriceHistoryCreateOrConnectWithoutIngredientInputSchema: () => SupplierPriceHistoryCreateOrConnectWithoutIngredientInputSchema,
  SupplierPriceHistoryCreateOrConnectWithoutVendorInputSchema: () => SupplierPriceHistoryCreateOrConnectWithoutVendorInputSchema,
  SupplierPriceHistoryCreateWithoutIngredientInputSchema: () => SupplierPriceHistoryCreateWithoutIngredientInputSchema,
  SupplierPriceHistoryCreateWithoutVendorInputSchema: () => SupplierPriceHistoryCreateWithoutVendorInputSchema,
  SupplierPriceHistoryDeleteArgsSchema: () => SupplierPriceHistoryDeleteArgsSchema,
  SupplierPriceHistoryDeleteManyArgsSchema: () => SupplierPriceHistoryDeleteManyArgsSchema,
  SupplierPriceHistoryFindFirstArgsSchema: () => SupplierPriceHistoryFindFirstArgsSchema,
  SupplierPriceHistoryFindFirstOrThrowArgsSchema: () => SupplierPriceHistoryFindFirstOrThrowArgsSchema,
  SupplierPriceHistoryFindManyArgsSchema: () => SupplierPriceHistoryFindManyArgsSchema,
  SupplierPriceHistoryFindUniqueArgsSchema: () => SupplierPriceHistoryFindUniqueArgsSchema,
  SupplierPriceHistoryFindUniqueOrThrowArgsSchema: () => SupplierPriceHistoryFindUniqueOrThrowArgsSchema,
  SupplierPriceHistoryGroupByArgsSchema: () => SupplierPriceHistoryGroupByArgsSchema,
  SupplierPriceHistoryIncludeSchema: () => SupplierPriceHistoryIncludeSchema,
  SupplierPriceHistoryListRelationFilterSchema: () => SupplierPriceHistoryListRelationFilterSchema,
  SupplierPriceHistoryMaxOrderByAggregateInputSchema: () => SupplierPriceHistoryMaxOrderByAggregateInputSchema,
  SupplierPriceHistoryMinOrderByAggregateInputSchema: () => SupplierPriceHistoryMinOrderByAggregateInputSchema,
  SupplierPriceHistoryOrderByRelationAggregateInputSchema: () => SupplierPriceHistoryOrderByRelationAggregateInputSchema,
  SupplierPriceHistoryOrderByWithAggregationInputSchema: () => SupplierPriceHistoryOrderByWithAggregationInputSchema,
  SupplierPriceHistoryOrderByWithRelationInputSchema: () => SupplierPriceHistoryOrderByWithRelationInputSchema,
  SupplierPriceHistoryScalarFieldEnumSchema: () => SupplierPriceHistoryScalarFieldEnumSchema,
  SupplierPriceHistoryScalarWhereInputSchema: () => SupplierPriceHistoryScalarWhereInputSchema,
  SupplierPriceHistoryScalarWhereWithAggregatesInputSchema: () => SupplierPriceHistoryScalarWhereWithAggregatesInputSchema,
  SupplierPriceHistorySchema: () => SupplierPriceHistorySchema,
  SupplierPriceHistorySelectSchema: () => SupplierPriceHistorySelectSchema,
  SupplierPriceHistorySumOrderByAggregateInputSchema: () => SupplierPriceHistorySumOrderByAggregateInputSchema,
  SupplierPriceHistoryUncheckedCreateInputSchema: () => SupplierPriceHistoryUncheckedCreateInputSchema,
  SupplierPriceHistoryUncheckedCreateNestedManyWithoutIngredientInputSchema: () => SupplierPriceHistoryUncheckedCreateNestedManyWithoutIngredientInputSchema,
  SupplierPriceHistoryUncheckedCreateNestedManyWithoutVendorInputSchema: () => SupplierPriceHistoryUncheckedCreateNestedManyWithoutVendorInputSchema,
  SupplierPriceHistoryUncheckedCreateWithoutIngredientInputSchema: () => SupplierPriceHistoryUncheckedCreateWithoutIngredientInputSchema,
  SupplierPriceHistoryUncheckedCreateWithoutVendorInputSchema: () => SupplierPriceHistoryUncheckedCreateWithoutVendorInputSchema,
  SupplierPriceHistoryUncheckedUpdateInputSchema: () => SupplierPriceHistoryUncheckedUpdateInputSchema,
  SupplierPriceHistoryUncheckedUpdateManyInputSchema: () => SupplierPriceHistoryUncheckedUpdateManyInputSchema,
  SupplierPriceHistoryUncheckedUpdateManyWithoutIngredientInputSchema: () => SupplierPriceHistoryUncheckedUpdateManyWithoutIngredientInputSchema,
  SupplierPriceHistoryUncheckedUpdateManyWithoutIngredientNestedInputSchema: () => SupplierPriceHistoryUncheckedUpdateManyWithoutIngredientNestedInputSchema,
  SupplierPriceHistoryUncheckedUpdateManyWithoutVendorInputSchema: () => SupplierPriceHistoryUncheckedUpdateManyWithoutVendorInputSchema,
  SupplierPriceHistoryUncheckedUpdateManyWithoutVendorNestedInputSchema: () => SupplierPriceHistoryUncheckedUpdateManyWithoutVendorNestedInputSchema,
  SupplierPriceHistoryUncheckedUpdateWithoutIngredientInputSchema: () => SupplierPriceHistoryUncheckedUpdateWithoutIngredientInputSchema,
  SupplierPriceHistoryUncheckedUpdateWithoutVendorInputSchema: () => SupplierPriceHistoryUncheckedUpdateWithoutVendorInputSchema,
  SupplierPriceHistoryUpdateArgsSchema: () => SupplierPriceHistoryUpdateArgsSchema,
  SupplierPriceHistoryUpdateInputSchema: () => SupplierPriceHistoryUpdateInputSchema,
  SupplierPriceHistoryUpdateManyArgsSchema: () => SupplierPriceHistoryUpdateManyArgsSchema,
  SupplierPriceHistoryUpdateManyMutationInputSchema: () => SupplierPriceHistoryUpdateManyMutationInputSchema,
  SupplierPriceHistoryUpdateManyWithWhereWithoutIngredientInputSchema: () => SupplierPriceHistoryUpdateManyWithWhereWithoutIngredientInputSchema,
  SupplierPriceHistoryUpdateManyWithWhereWithoutVendorInputSchema: () => SupplierPriceHistoryUpdateManyWithWhereWithoutVendorInputSchema,
  SupplierPriceHistoryUpdateManyWithoutIngredientNestedInputSchema: () => SupplierPriceHistoryUpdateManyWithoutIngredientNestedInputSchema,
  SupplierPriceHistoryUpdateManyWithoutVendorNestedInputSchema: () => SupplierPriceHistoryUpdateManyWithoutVendorNestedInputSchema,
  SupplierPriceHistoryUpdateWithWhereUniqueWithoutIngredientInputSchema: () => SupplierPriceHistoryUpdateWithWhereUniqueWithoutIngredientInputSchema,
  SupplierPriceHistoryUpdateWithWhereUniqueWithoutVendorInputSchema: () => SupplierPriceHistoryUpdateWithWhereUniqueWithoutVendorInputSchema,
  SupplierPriceHistoryUpdateWithoutIngredientInputSchema: () => SupplierPriceHistoryUpdateWithoutIngredientInputSchema,
  SupplierPriceHistoryUpdateWithoutVendorInputSchema: () => SupplierPriceHistoryUpdateWithoutVendorInputSchema,
  SupplierPriceHistoryUpsertArgsSchema: () => SupplierPriceHistoryUpsertArgsSchema,
  SupplierPriceHistoryUpsertWithWhereUniqueWithoutIngredientInputSchema: () => SupplierPriceHistoryUpsertWithWhereUniqueWithoutIngredientInputSchema,
  SupplierPriceHistoryUpsertWithWhereUniqueWithoutVendorInputSchema: () => SupplierPriceHistoryUpsertWithWhereUniqueWithoutVendorInputSchema,
  SupplierPriceHistoryWhereInputSchema: () => SupplierPriceHistoryWhereInputSchema,
  SupplierPriceHistoryWhereUniqueInputSchema: () => SupplierPriceHistoryWhereUniqueInputSchema,
  TaskTypeSchema: () => TaskTypeSchema,
  TransactionIsolationLevelSchema: () => TransactionIsolationLevelSchema,
  UserAggregateArgsSchema: () => UserAggregateArgsSchema,
  UserArgsSchema: () => UserArgsSchema,
  UserAvgOrderByAggregateInputSchema: () => UserAvgOrderByAggregateInputSchema,
  UserCountOrderByAggregateInputSchema: () => UserCountOrderByAggregateInputSchema,
  UserCountOutputTypeArgsSchema: () => UserCountOutputTypeArgsSchema,
  UserCountOutputTypeSelectSchema: () => UserCountOutputTypeSelectSchema,
  UserCreateArgsSchema: () => UserCreateArgsSchema,
  UserCreateInputSchema: () => UserCreateInputSchema,
  UserCreateManyAndReturnArgsSchema: () => UserCreateManyAndReturnArgsSchema,
  UserCreateManyArgsSchema: () => UserCreateManyArgsSchema,
  UserCreateManyInputSchema: () => UserCreateManyInputSchema,
  UserCreateManyOrganizationInputEnvelopeSchema: () => UserCreateManyOrganizationInputEnvelopeSchema,
  UserCreateManyOrganizationInputSchema: () => UserCreateManyOrganizationInputSchema,
  UserCreateManyRestaurantInputEnvelopeSchema: () => UserCreateManyRestaurantInputEnvelopeSchema,
  UserCreateManyRestaurantInputSchema: () => UserCreateManyRestaurantInputSchema,
  UserCreateNestedManyWithoutOrganizationInputSchema: () => UserCreateNestedManyWithoutOrganizationInputSchema,
  UserCreateNestedManyWithoutRestaurantInputSchema: () => UserCreateNestedManyWithoutRestaurantInputSchema,
  UserCreateNestedOneWithoutAvailabilityInputSchema: () => UserCreateNestedOneWithoutAvailabilityInputSchema,
  UserCreateNestedOneWithoutChecklistCompleteInputSchema: () => UserCreateNestedOneWithoutChecklistCompleteInputSchema,
  UserCreateNestedOneWithoutCustomerFeedbackInputSchema: () => UserCreateNestedOneWithoutCustomerFeedbackInputSchema,
  UserCreateNestedOneWithoutInventoryUpdatesInputSchema: () => UserCreateNestedOneWithoutInventoryUpdatesInputSchema,
  UserCreateNestedOneWithoutInventoryWithdrawalInputSchema: () => UserCreateNestedOneWithoutInventoryWithdrawalInputSchema,
  UserCreateNestedOneWithoutLeftoverItemInputSchema: () => UserCreateNestedOneWithoutLeftoverItemInputSchema,
  UserCreateNestedOneWithoutPasswordResetsInputSchema: () => UserCreateNestedOneWithoutPasswordResetsInputSchema,
  UserCreateNestedOneWithoutPrepItemsInputSchema: () => UserCreateNestedOneWithoutPrepItemsInputSchema,
  UserCreateNestedOneWithoutProductionPlanInputSchema: () => UserCreateNestedOneWithoutProductionPlanInputSchema,
  UserCreateNestedOneWithoutProductionPlanItemInputSchema: () => UserCreateNestedOneWithoutProductionPlanItemInputSchema,
  UserCreateNestedOneWithoutRecipeVersionsApprovedInputSchema: () => UserCreateNestedOneWithoutRecipeVersionsApprovedInputSchema,
  UserCreateNestedOneWithoutRecipeVersionsCreatedInputSchema: () => UserCreateNestedOneWithoutRecipeVersionsCreatedInputSchema,
  UserCreateNestedOneWithoutSchedulingConstraintInputSchema: () => UserCreateNestedOneWithoutSchedulingConstraintInputSchema,
  UserCreateNestedOneWithoutSessionsInputSchema: () => UserCreateNestedOneWithoutSessionsInputSchema,
  UserCreateNestedOneWithoutShiftsInputSchema: () => UserCreateNestedOneWithoutShiftsInputSchema,
  UserCreateNestedOneWithoutWasteRecordInputSchema: () => UserCreateNestedOneWithoutWasteRecordInputSchema,
  UserCreateOrConnectWithoutAvailabilityInputSchema: () => UserCreateOrConnectWithoutAvailabilityInputSchema,
  UserCreateOrConnectWithoutChecklistCompleteInputSchema: () => UserCreateOrConnectWithoutChecklistCompleteInputSchema,
  UserCreateOrConnectWithoutCustomerFeedbackInputSchema: () => UserCreateOrConnectWithoutCustomerFeedbackInputSchema,
  UserCreateOrConnectWithoutInventoryUpdatesInputSchema: () => UserCreateOrConnectWithoutInventoryUpdatesInputSchema,
  UserCreateOrConnectWithoutInventoryWithdrawalInputSchema: () => UserCreateOrConnectWithoutInventoryWithdrawalInputSchema,
  UserCreateOrConnectWithoutLeftoverItemInputSchema: () => UserCreateOrConnectWithoutLeftoverItemInputSchema,
  UserCreateOrConnectWithoutOrganizationInputSchema: () => UserCreateOrConnectWithoutOrganizationInputSchema,
  UserCreateOrConnectWithoutPasswordResetsInputSchema: () => UserCreateOrConnectWithoutPasswordResetsInputSchema,
  UserCreateOrConnectWithoutPrepItemsInputSchema: () => UserCreateOrConnectWithoutPrepItemsInputSchema,
  UserCreateOrConnectWithoutProductionPlanInputSchema: () => UserCreateOrConnectWithoutProductionPlanInputSchema,
  UserCreateOrConnectWithoutProductionPlanItemInputSchema: () => UserCreateOrConnectWithoutProductionPlanItemInputSchema,
  UserCreateOrConnectWithoutRecipeVersionsApprovedInputSchema: () => UserCreateOrConnectWithoutRecipeVersionsApprovedInputSchema,
  UserCreateOrConnectWithoutRecipeVersionsCreatedInputSchema: () => UserCreateOrConnectWithoutRecipeVersionsCreatedInputSchema,
  UserCreateOrConnectWithoutRestaurantInputSchema: () => UserCreateOrConnectWithoutRestaurantInputSchema,
  UserCreateOrConnectWithoutSchedulingConstraintInputSchema: () => UserCreateOrConnectWithoutSchedulingConstraintInputSchema,
  UserCreateOrConnectWithoutSessionsInputSchema: () => UserCreateOrConnectWithoutSessionsInputSchema,
  UserCreateOrConnectWithoutShiftsInputSchema: () => UserCreateOrConnectWithoutShiftsInputSchema,
  UserCreateOrConnectWithoutWasteRecordInputSchema: () => UserCreateOrConnectWithoutWasteRecordInputSchema,
  UserCreateWithoutAvailabilityInputSchema: () => UserCreateWithoutAvailabilityInputSchema,
  UserCreateWithoutChecklistCompleteInputSchema: () => UserCreateWithoutChecklistCompleteInputSchema,
  UserCreateWithoutCustomerFeedbackInputSchema: () => UserCreateWithoutCustomerFeedbackInputSchema,
  UserCreateWithoutInventoryUpdatesInputSchema: () => UserCreateWithoutInventoryUpdatesInputSchema,
  UserCreateWithoutInventoryWithdrawalInputSchema: () => UserCreateWithoutInventoryWithdrawalInputSchema,
  UserCreateWithoutLeftoverItemInputSchema: () => UserCreateWithoutLeftoverItemInputSchema,
  UserCreateWithoutOrganizationInputSchema: () => UserCreateWithoutOrganizationInputSchema,
  UserCreateWithoutPasswordResetsInputSchema: () => UserCreateWithoutPasswordResetsInputSchema,
  UserCreateWithoutPrepItemsInputSchema: () => UserCreateWithoutPrepItemsInputSchema,
  UserCreateWithoutProductionPlanInputSchema: () => UserCreateWithoutProductionPlanInputSchema,
  UserCreateWithoutProductionPlanItemInputSchema: () => UserCreateWithoutProductionPlanItemInputSchema,
  UserCreateWithoutRecipeVersionsApprovedInputSchema: () => UserCreateWithoutRecipeVersionsApprovedInputSchema,
  UserCreateWithoutRecipeVersionsCreatedInputSchema: () => UserCreateWithoutRecipeVersionsCreatedInputSchema,
  UserCreateWithoutRestaurantInputSchema: () => UserCreateWithoutRestaurantInputSchema,
  UserCreateWithoutSchedulingConstraintInputSchema: () => UserCreateWithoutSchedulingConstraintInputSchema,
  UserCreateWithoutSessionsInputSchema: () => UserCreateWithoutSessionsInputSchema,
  UserCreateWithoutShiftsInputSchema: () => UserCreateWithoutShiftsInputSchema,
  UserCreateWithoutWasteRecordInputSchema: () => UserCreateWithoutWasteRecordInputSchema,
  UserDeleteArgsSchema: () => UserDeleteArgsSchema,
  UserDeleteManyArgsSchema: () => UserDeleteManyArgsSchema,
  UserFindFirstArgsSchema: () => UserFindFirstArgsSchema,
  UserFindFirstOrThrowArgsSchema: () => UserFindFirstOrThrowArgsSchema,
  UserFindManyArgsSchema: () => UserFindManyArgsSchema,
  UserFindUniqueArgsSchema: () => UserFindUniqueArgsSchema,
  UserFindUniqueOrThrowArgsSchema: () => UserFindUniqueOrThrowArgsSchema,
  UserGroupByArgsSchema: () => UserGroupByArgsSchema,
  UserIncludeSchema: () => UserIncludeSchema,
  UserListRelationFilterSchema: () => UserListRelationFilterSchema,
  UserMaxOrderByAggregateInputSchema: () => UserMaxOrderByAggregateInputSchema,
  UserMinOrderByAggregateInputSchema: () => UserMinOrderByAggregateInputSchema,
  UserNullableRelationFilterSchema: () => UserNullableRelationFilterSchema,
  UserOrderByRelationAggregateInputSchema: () => UserOrderByRelationAggregateInputSchema,
  UserOrderByWithAggregationInputSchema: () => UserOrderByWithAggregationInputSchema,
  UserOrderByWithRelationInputSchema: () => UserOrderByWithRelationInputSchema,
  UserRelationFilterSchema: () => UserRelationFilterSchema,
  UserRoleSchema: () => UserRoleSchema,
  UserScalarFieldEnumSchema: () => UserScalarFieldEnumSchema,
  UserScalarWhereInputSchema: () => UserScalarWhereInputSchema,
  UserScalarWhereWithAggregatesInputSchema: () => UserScalarWhereWithAggregatesInputSchema,
  UserSchema: () => UserSchema$2,
  UserSelectSchema: () => UserSelectSchema,
  UserSumOrderByAggregateInputSchema: () => UserSumOrderByAggregateInputSchema,
  UserUncheckedCreateInputSchema: () => UserUncheckedCreateInputSchema,
  UserUncheckedCreateNestedManyWithoutOrganizationInputSchema: () => UserUncheckedCreateNestedManyWithoutOrganizationInputSchema,
  UserUncheckedCreateNestedManyWithoutRestaurantInputSchema: () => UserUncheckedCreateNestedManyWithoutRestaurantInputSchema,
  UserUncheckedCreateWithoutAvailabilityInputSchema: () => UserUncheckedCreateWithoutAvailabilityInputSchema,
  UserUncheckedCreateWithoutChecklistCompleteInputSchema: () => UserUncheckedCreateWithoutChecklistCompleteInputSchema,
  UserUncheckedCreateWithoutCustomerFeedbackInputSchema: () => UserUncheckedCreateWithoutCustomerFeedbackInputSchema,
  UserUncheckedCreateWithoutInventoryUpdatesInputSchema: () => UserUncheckedCreateWithoutInventoryUpdatesInputSchema,
  UserUncheckedCreateWithoutInventoryWithdrawalInputSchema: () => UserUncheckedCreateWithoutInventoryWithdrawalInputSchema,
  UserUncheckedCreateWithoutLeftoverItemInputSchema: () => UserUncheckedCreateWithoutLeftoverItemInputSchema,
  UserUncheckedCreateWithoutOrganizationInputSchema: () => UserUncheckedCreateWithoutOrganizationInputSchema,
  UserUncheckedCreateWithoutPasswordResetsInputSchema: () => UserUncheckedCreateWithoutPasswordResetsInputSchema,
  UserUncheckedCreateWithoutPrepItemsInputSchema: () => UserUncheckedCreateWithoutPrepItemsInputSchema,
  UserUncheckedCreateWithoutProductionPlanInputSchema: () => UserUncheckedCreateWithoutProductionPlanInputSchema,
  UserUncheckedCreateWithoutProductionPlanItemInputSchema: () => UserUncheckedCreateWithoutProductionPlanItemInputSchema,
  UserUncheckedCreateWithoutRecipeVersionsApprovedInputSchema: () => UserUncheckedCreateWithoutRecipeVersionsApprovedInputSchema,
  UserUncheckedCreateWithoutRecipeVersionsCreatedInputSchema: () => UserUncheckedCreateWithoutRecipeVersionsCreatedInputSchema,
  UserUncheckedCreateWithoutRestaurantInputSchema: () => UserUncheckedCreateWithoutRestaurantInputSchema,
  UserUncheckedCreateWithoutSchedulingConstraintInputSchema: () => UserUncheckedCreateWithoutSchedulingConstraintInputSchema,
  UserUncheckedCreateWithoutSessionsInputSchema: () => UserUncheckedCreateWithoutSessionsInputSchema,
  UserUncheckedCreateWithoutShiftsInputSchema: () => UserUncheckedCreateWithoutShiftsInputSchema,
  UserUncheckedCreateWithoutWasteRecordInputSchema: () => UserUncheckedCreateWithoutWasteRecordInputSchema,
  UserUncheckedUpdateInputSchema: () => UserUncheckedUpdateInputSchema,
  UserUncheckedUpdateManyInputSchema: () => UserUncheckedUpdateManyInputSchema,
  UserUncheckedUpdateManyWithoutOrganizationInputSchema: () => UserUncheckedUpdateManyWithoutOrganizationInputSchema,
  UserUncheckedUpdateManyWithoutOrganizationNestedInputSchema: () => UserUncheckedUpdateManyWithoutOrganizationNestedInputSchema,
  UserUncheckedUpdateManyWithoutRestaurantInputSchema: () => UserUncheckedUpdateManyWithoutRestaurantInputSchema,
  UserUncheckedUpdateManyWithoutRestaurantNestedInputSchema: () => UserUncheckedUpdateManyWithoutRestaurantNestedInputSchema,
  UserUncheckedUpdateWithoutAvailabilityInputSchema: () => UserUncheckedUpdateWithoutAvailabilityInputSchema,
  UserUncheckedUpdateWithoutChecklistCompleteInputSchema: () => UserUncheckedUpdateWithoutChecklistCompleteInputSchema,
  UserUncheckedUpdateWithoutCustomerFeedbackInputSchema: () => UserUncheckedUpdateWithoutCustomerFeedbackInputSchema,
  UserUncheckedUpdateWithoutInventoryUpdatesInputSchema: () => UserUncheckedUpdateWithoutInventoryUpdatesInputSchema,
  UserUncheckedUpdateWithoutInventoryWithdrawalInputSchema: () => UserUncheckedUpdateWithoutInventoryWithdrawalInputSchema,
  UserUncheckedUpdateWithoutLeftoverItemInputSchema: () => UserUncheckedUpdateWithoutLeftoverItemInputSchema,
  UserUncheckedUpdateWithoutOrganizationInputSchema: () => UserUncheckedUpdateWithoutOrganizationInputSchema,
  UserUncheckedUpdateWithoutPasswordResetsInputSchema: () => UserUncheckedUpdateWithoutPasswordResetsInputSchema,
  UserUncheckedUpdateWithoutPrepItemsInputSchema: () => UserUncheckedUpdateWithoutPrepItemsInputSchema,
  UserUncheckedUpdateWithoutProductionPlanInputSchema: () => UserUncheckedUpdateWithoutProductionPlanInputSchema,
  UserUncheckedUpdateWithoutProductionPlanItemInputSchema: () => UserUncheckedUpdateWithoutProductionPlanItemInputSchema,
  UserUncheckedUpdateWithoutRecipeVersionsApprovedInputSchema: () => UserUncheckedUpdateWithoutRecipeVersionsApprovedInputSchema,
  UserUncheckedUpdateWithoutRecipeVersionsCreatedInputSchema: () => UserUncheckedUpdateWithoutRecipeVersionsCreatedInputSchema,
  UserUncheckedUpdateWithoutRestaurantInputSchema: () => UserUncheckedUpdateWithoutRestaurantInputSchema,
  UserUncheckedUpdateWithoutSchedulingConstraintInputSchema: () => UserUncheckedUpdateWithoutSchedulingConstraintInputSchema,
  UserUncheckedUpdateWithoutSessionsInputSchema: () => UserUncheckedUpdateWithoutSessionsInputSchema,
  UserUncheckedUpdateWithoutShiftsInputSchema: () => UserUncheckedUpdateWithoutShiftsInputSchema,
  UserUncheckedUpdateWithoutWasteRecordInputSchema: () => UserUncheckedUpdateWithoutWasteRecordInputSchema,
  UserUpdateArgsSchema: () => UserUpdateArgsSchema,
  UserUpdateInputSchema: () => UserUpdateInputSchema,
  UserUpdateManyArgsSchema: () => UserUpdateManyArgsSchema,
  UserUpdateManyMutationInputSchema: () => UserUpdateManyMutationInputSchema,
  UserUpdateManyWithWhereWithoutOrganizationInputSchema: () => UserUpdateManyWithWhereWithoutOrganizationInputSchema,
  UserUpdateManyWithWhereWithoutRestaurantInputSchema: () => UserUpdateManyWithWhereWithoutRestaurantInputSchema,
  UserUpdateManyWithoutOrganizationNestedInputSchema: () => UserUpdateManyWithoutOrganizationNestedInputSchema,
  UserUpdateManyWithoutRestaurantNestedInputSchema: () => UserUpdateManyWithoutRestaurantNestedInputSchema,
  UserUpdateOneRequiredWithoutAvailabilityNestedInputSchema: () => UserUpdateOneRequiredWithoutAvailabilityNestedInputSchema,
  UserUpdateOneRequiredWithoutChecklistCompleteNestedInputSchema: () => UserUpdateOneRequiredWithoutChecklistCompleteNestedInputSchema,
  UserUpdateOneRequiredWithoutInventoryWithdrawalNestedInputSchema: () => UserUpdateOneRequiredWithoutInventoryWithdrawalNestedInputSchema,
  UserUpdateOneRequiredWithoutLeftoverItemNestedInputSchema: () => UserUpdateOneRequiredWithoutLeftoverItemNestedInputSchema,
  UserUpdateOneRequiredWithoutPasswordResetsNestedInputSchema: () => UserUpdateOneRequiredWithoutPasswordResetsNestedInputSchema,
  UserUpdateOneRequiredWithoutPrepItemsNestedInputSchema: () => UserUpdateOneRequiredWithoutPrepItemsNestedInputSchema,
  UserUpdateOneRequiredWithoutProductionPlanNestedInputSchema: () => UserUpdateOneRequiredWithoutProductionPlanNestedInputSchema,
  UserUpdateOneRequiredWithoutRecipeVersionsCreatedNestedInputSchema: () => UserUpdateOneRequiredWithoutRecipeVersionsCreatedNestedInputSchema,
  UserUpdateOneRequiredWithoutSchedulingConstraintNestedInputSchema: () => UserUpdateOneRequiredWithoutSchedulingConstraintNestedInputSchema,
  UserUpdateOneRequiredWithoutSessionsNestedInputSchema: () => UserUpdateOneRequiredWithoutSessionsNestedInputSchema,
  UserUpdateOneRequiredWithoutShiftsNestedInputSchema: () => UserUpdateOneRequiredWithoutShiftsNestedInputSchema,
  UserUpdateOneRequiredWithoutWasteRecordNestedInputSchema: () => UserUpdateOneRequiredWithoutWasteRecordNestedInputSchema,
  UserUpdateOneWithoutCustomerFeedbackNestedInputSchema: () => UserUpdateOneWithoutCustomerFeedbackNestedInputSchema,
  UserUpdateOneWithoutInventoryUpdatesNestedInputSchema: () => UserUpdateOneWithoutInventoryUpdatesNestedInputSchema,
  UserUpdateOneWithoutProductionPlanItemNestedInputSchema: () => UserUpdateOneWithoutProductionPlanItemNestedInputSchema,
  UserUpdateOneWithoutRecipeVersionsApprovedNestedInputSchema: () => UserUpdateOneWithoutRecipeVersionsApprovedNestedInputSchema,
  UserUpdateToOneWithWhereWithoutAvailabilityInputSchema: () => UserUpdateToOneWithWhereWithoutAvailabilityInputSchema,
  UserUpdateToOneWithWhereWithoutChecklistCompleteInputSchema: () => UserUpdateToOneWithWhereWithoutChecklistCompleteInputSchema,
  UserUpdateToOneWithWhereWithoutCustomerFeedbackInputSchema: () => UserUpdateToOneWithWhereWithoutCustomerFeedbackInputSchema,
  UserUpdateToOneWithWhereWithoutInventoryUpdatesInputSchema: () => UserUpdateToOneWithWhereWithoutInventoryUpdatesInputSchema,
  UserUpdateToOneWithWhereWithoutInventoryWithdrawalInputSchema: () => UserUpdateToOneWithWhereWithoutInventoryWithdrawalInputSchema,
  UserUpdateToOneWithWhereWithoutLeftoverItemInputSchema: () => UserUpdateToOneWithWhereWithoutLeftoverItemInputSchema,
  UserUpdateToOneWithWhereWithoutPasswordResetsInputSchema: () => UserUpdateToOneWithWhereWithoutPasswordResetsInputSchema,
  UserUpdateToOneWithWhereWithoutPrepItemsInputSchema: () => UserUpdateToOneWithWhereWithoutPrepItemsInputSchema,
  UserUpdateToOneWithWhereWithoutProductionPlanInputSchema: () => UserUpdateToOneWithWhereWithoutProductionPlanInputSchema,
  UserUpdateToOneWithWhereWithoutProductionPlanItemInputSchema: () => UserUpdateToOneWithWhereWithoutProductionPlanItemInputSchema,
  UserUpdateToOneWithWhereWithoutRecipeVersionsApprovedInputSchema: () => UserUpdateToOneWithWhereWithoutRecipeVersionsApprovedInputSchema,
  UserUpdateToOneWithWhereWithoutRecipeVersionsCreatedInputSchema: () => UserUpdateToOneWithWhereWithoutRecipeVersionsCreatedInputSchema,
  UserUpdateToOneWithWhereWithoutSchedulingConstraintInputSchema: () => UserUpdateToOneWithWhereWithoutSchedulingConstraintInputSchema,
  UserUpdateToOneWithWhereWithoutSessionsInputSchema: () => UserUpdateToOneWithWhereWithoutSessionsInputSchema,
  UserUpdateToOneWithWhereWithoutShiftsInputSchema: () => UserUpdateToOneWithWhereWithoutShiftsInputSchema,
  UserUpdateToOneWithWhereWithoutWasteRecordInputSchema: () => UserUpdateToOneWithWhereWithoutWasteRecordInputSchema,
  UserUpdateWithWhereUniqueWithoutOrganizationInputSchema: () => UserUpdateWithWhereUniqueWithoutOrganizationInputSchema,
  UserUpdateWithWhereUniqueWithoutRestaurantInputSchema: () => UserUpdateWithWhereUniqueWithoutRestaurantInputSchema,
  UserUpdateWithoutAvailabilityInputSchema: () => UserUpdateWithoutAvailabilityInputSchema,
  UserUpdateWithoutChecklistCompleteInputSchema: () => UserUpdateWithoutChecklistCompleteInputSchema,
  UserUpdateWithoutCustomerFeedbackInputSchema: () => UserUpdateWithoutCustomerFeedbackInputSchema,
  UserUpdateWithoutInventoryUpdatesInputSchema: () => UserUpdateWithoutInventoryUpdatesInputSchema,
  UserUpdateWithoutInventoryWithdrawalInputSchema: () => UserUpdateWithoutInventoryWithdrawalInputSchema,
  UserUpdateWithoutLeftoverItemInputSchema: () => UserUpdateWithoutLeftoverItemInputSchema,
  UserUpdateWithoutOrganizationInputSchema: () => UserUpdateWithoutOrganizationInputSchema,
  UserUpdateWithoutPasswordResetsInputSchema: () => UserUpdateWithoutPasswordResetsInputSchema,
  UserUpdateWithoutPrepItemsInputSchema: () => UserUpdateWithoutPrepItemsInputSchema,
  UserUpdateWithoutProductionPlanInputSchema: () => UserUpdateWithoutProductionPlanInputSchema,
  UserUpdateWithoutProductionPlanItemInputSchema: () => UserUpdateWithoutProductionPlanItemInputSchema,
  UserUpdateWithoutRecipeVersionsApprovedInputSchema: () => UserUpdateWithoutRecipeVersionsApprovedInputSchema,
  UserUpdateWithoutRecipeVersionsCreatedInputSchema: () => UserUpdateWithoutRecipeVersionsCreatedInputSchema,
  UserUpdateWithoutRestaurantInputSchema: () => UserUpdateWithoutRestaurantInputSchema,
  UserUpdateWithoutSchedulingConstraintInputSchema: () => UserUpdateWithoutSchedulingConstraintInputSchema,
  UserUpdateWithoutSessionsInputSchema: () => UserUpdateWithoutSessionsInputSchema,
  UserUpdateWithoutShiftsInputSchema: () => UserUpdateWithoutShiftsInputSchema,
  UserUpdateWithoutWasteRecordInputSchema: () => UserUpdateWithoutWasteRecordInputSchema,
  UserUpsertArgsSchema: () => UserUpsertArgsSchema,
  UserUpsertWithWhereUniqueWithoutOrganizationInputSchema: () => UserUpsertWithWhereUniqueWithoutOrganizationInputSchema,
  UserUpsertWithWhereUniqueWithoutRestaurantInputSchema: () => UserUpsertWithWhereUniqueWithoutRestaurantInputSchema,
  UserUpsertWithoutAvailabilityInputSchema: () => UserUpsertWithoutAvailabilityInputSchema,
  UserUpsertWithoutChecklistCompleteInputSchema: () => UserUpsertWithoutChecklistCompleteInputSchema,
  UserUpsertWithoutCustomerFeedbackInputSchema: () => UserUpsertWithoutCustomerFeedbackInputSchema,
  UserUpsertWithoutInventoryUpdatesInputSchema: () => UserUpsertWithoutInventoryUpdatesInputSchema,
  UserUpsertWithoutInventoryWithdrawalInputSchema: () => UserUpsertWithoutInventoryWithdrawalInputSchema,
  UserUpsertWithoutLeftoverItemInputSchema: () => UserUpsertWithoutLeftoverItemInputSchema,
  UserUpsertWithoutPasswordResetsInputSchema: () => UserUpsertWithoutPasswordResetsInputSchema,
  UserUpsertWithoutPrepItemsInputSchema: () => UserUpsertWithoutPrepItemsInputSchema,
  UserUpsertWithoutProductionPlanInputSchema: () => UserUpsertWithoutProductionPlanInputSchema,
  UserUpsertWithoutProductionPlanItemInputSchema: () => UserUpsertWithoutProductionPlanItemInputSchema,
  UserUpsertWithoutRecipeVersionsApprovedInputSchema: () => UserUpsertWithoutRecipeVersionsApprovedInputSchema,
  UserUpsertWithoutRecipeVersionsCreatedInputSchema: () => UserUpsertWithoutRecipeVersionsCreatedInputSchema,
  UserUpsertWithoutSchedulingConstraintInputSchema: () => UserUpsertWithoutSchedulingConstraintInputSchema,
  UserUpsertWithoutSessionsInputSchema: () => UserUpsertWithoutSessionsInputSchema,
  UserUpsertWithoutShiftsInputSchema: () => UserUpsertWithoutShiftsInputSchema,
  UserUpsertWithoutWasteRecordInputSchema: () => UserUpsertWithoutWasteRecordInputSchema,
  UserWhereInputSchema: () => UserWhereInputSchema,
  UserWhereUniqueInputSchema: () => UserWhereUniqueInputSchema,
  VendorAggregateArgsSchema: () => VendorAggregateArgsSchema,
  VendorArgsSchema: () => VendorArgsSchema,
  VendorAvgOrderByAggregateInputSchema: () => VendorAvgOrderByAggregateInputSchema,
  VendorCountOrderByAggregateInputSchema: () => VendorCountOrderByAggregateInputSchema,
  VendorCountOutputTypeArgsSchema: () => VendorCountOutputTypeArgsSchema,
  VendorCountOutputTypeSelectSchema: () => VendorCountOutputTypeSelectSchema,
  VendorCreateArgsSchema: () => VendorCreateArgsSchema,
  VendorCreateInputSchema: () => VendorCreateInputSchema,
  VendorCreateManyAndReturnArgsSchema: () => VendorCreateManyAndReturnArgsSchema,
  VendorCreateManyArgsSchema: () => VendorCreateManyArgsSchema,
  VendorCreateManyInputSchema: () => VendorCreateManyInputSchema,
  VendorCreateNestedManyWithoutIngredientsInputSchema: () => VendorCreateNestedManyWithoutIngredientsInputSchema,
  VendorCreateNestedOneWithoutOrdersInputSchema: () => VendorCreateNestedOneWithoutOrdersInputSchema,
  VendorCreateNestedOneWithoutSupplierPriceHistoryInputSchema: () => VendorCreateNestedOneWithoutSupplierPriceHistoryInputSchema,
  VendorCreateOrConnectWithoutIngredientsInputSchema: () => VendorCreateOrConnectWithoutIngredientsInputSchema,
  VendorCreateOrConnectWithoutOrdersInputSchema: () => VendorCreateOrConnectWithoutOrdersInputSchema,
  VendorCreateOrConnectWithoutSupplierPriceHistoryInputSchema: () => VendorCreateOrConnectWithoutSupplierPriceHistoryInputSchema,
  VendorCreateWithoutIngredientsInputSchema: () => VendorCreateWithoutIngredientsInputSchema,
  VendorCreateWithoutOrdersInputSchema: () => VendorCreateWithoutOrdersInputSchema,
  VendorCreateWithoutSupplierPriceHistoryInputSchema: () => VendorCreateWithoutSupplierPriceHistoryInputSchema,
  VendorDeleteArgsSchema: () => VendorDeleteArgsSchema,
  VendorDeleteManyArgsSchema: () => VendorDeleteManyArgsSchema,
  VendorFindFirstArgsSchema: () => VendorFindFirstArgsSchema,
  VendorFindFirstOrThrowArgsSchema: () => VendorFindFirstOrThrowArgsSchema,
  VendorFindManyArgsSchema: () => VendorFindManyArgsSchema,
  VendorFindUniqueArgsSchema: () => VendorFindUniqueArgsSchema,
  VendorFindUniqueOrThrowArgsSchema: () => VendorFindUniqueOrThrowArgsSchema,
  VendorGroupByArgsSchema: () => VendorGroupByArgsSchema,
  VendorIncludeSchema: () => VendorIncludeSchema,
  VendorListRelationFilterSchema: () => VendorListRelationFilterSchema,
  VendorMaxOrderByAggregateInputSchema: () => VendorMaxOrderByAggregateInputSchema,
  VendorMinOrderByAggregateInputSchema: () => VendorMinOrderByAggregateInputSchema,
  VendorOrderByRelationAggregateInputSchema: () => VendorOrderByRelationAggregateInputSchema,
  VendorOrderByWithAggregationInputSchema: () => VendorOrderByWithAggregationInputSchema,
  VendorOrderByWithRelationInputSchema: () => VendorOrderByWithRelationInputSchema,
  VendorRelationFilterSchema: () => VendorRelationFilterSchema,
  VendorScalarFieldEnumSchema: () => VendorScalarFieldEnumSchema,
  VendorScalarWhereInputSchema: () => VendorScalarWhereInputSchema,
  VendorScalarWhereWithAggregatesInputSchema: () => VendorScalarWhereWithAggregatesInputSchema,
  VendorSchema: () => VendorSchema$2,
  VendorSelectSchema: () => VendorSelectSchema,
  VendorSumOrderByAggregateInputSchema: () => VendorSumOrderByAggregateInputSchema,
  VendorUncheckedCreateInputSchema: () => VendorUncheckedCreateInputSchema,
  VendorUncheckedCreateNestedManyWithoutIngredientsInputSchema: () => VendorUncheckedCreateNestedManyWithoutIngredientsInputSchema,
  VendorUncheckedCreateWithoutIngredientsInputSchema: () => VendorUncheckedCreateWithoutIngredientsInputSchema,
  VendorUncheckedCreateWithoutOrdersInputSchema: () => VendorUncheckedCreateWithoutOrdersInputSchema,
  VendorUncheckedCreateWithoutSupplierPriceHistoryInputSchema: () => VendorUncheckedCreateWithoutSupplierPriceHistoryInputSchema,
  VendorUncheckedUpdateInputSchema: () => VendorUncheckedUpdateInputSchema,
  VendorUncheckedUpdateManyInputSchema: () => VendorUncheckedUpdateManyInputSchema,
  VendorUncheckedUpdateManyWithoutIngredientsInputSchema: () => VendorUncheckedUpdateManyWithoutIngredientsInputSchema,
  VendorUncheckedUpdateManyWithoutIngredientsNestedInputSchema: () => VendorUncheckedUpdateManyWithoutIngredientsNestedInputSchema,
  VendorUncheckedUpdateWithoutIngredientsInputSchema: () => VendorUncheckedUpdateWithoutIngredientsInputSchema,
  VendorUncheckedUpdateWithoutOrdersInputSchema: () => VendorUncheckedUpdateWithoutOrdersInputSchema,
  VendorUncheckedUpdateWithoutSupplierPriceHistoryInputSchema: () => VendorUncheckedUpdateWithoutSupplierPriceHistoryInputSchema,
  VendorUpdateArgsSchema: () => VendorUpdateArgsSchema,
  VendorUpdateInputSchema: () => VendorUpdateInputSchema,
  VendorUpdateManyArgsSchema: () => VendorUpdateManyArgsSchema,
  VendorUpdateManyMutationInputSchema: () => VendorUpdateManyMutationInputSchema,
  VendorUpdateManyWithWhereWithoutIngredientsInputSchema: () => VendorUpdateManyWithWhereWithoutIngredientsInputSchema,
  VendorUpdateManyWithoutIngredientsNestedInputSchema: () => VendorUpdateManyWithoutIngredientsNestedInputSchema,
  VendorUpdateOneRequiredWithoutOrdersNestedInputSchema: () => VendorUpdateOneRequiredWithoutOrdersNestedInputSchema,
  VendorUpdateOneRequiredWithoutSupplierPriceHistoryNestedInputSchema: () => VendorUpdateOneRequiredWithoutSupplierPriceHistoryNestedInputSchema,
  VendorUpdateToOneWithWhereWithoutOrdersInputSchema: () => VendorUpdateToOneWithWhereWithoutOrdersInputSchema,
  VendorUpdateToOneWithWhereWithoutSupplierPriceHistoryInputSchema: () => VendorUpdateToOneWithWhereWithoutSupplierPriceHistoryInputSchema,
  VendorUpdateWithWhereUniqueWithoutIngredientsInputSchema: () => VendorUpdateWithWhereUniqueWithoutIngredientsInputSchema,
  VendorUpdateWithoutIngredientsInputSchema: () => VendorUpdateWithoutIngredientsInputSchema,
  VendorUpdateWithoutOrdersInputSchema: () => VendorUpdateWithoutOrdersInputSchema,
  VendorUpdateWithoutSupplierPriceHistoryInputSchema: () => VendorUpdateWithoutSupplierPriceHistoryInputSchema,
  VendorUpsertArgsSchema: () => VendorUpsertArgsSchema,
  VendorUpsertWithWhereUniqueWithoutIngredientsInputSchema: () => VendorUpsertWithWhereUniqueWithoutIngredientsInputSchema,
  VendorUpsertWithoutOrdersInputSchema: () => VendorUpsertWithoutOrdersInputSchema,
  VendorUpsertWithoutSupplierPriceHistoryInputSchema: () => VendorUpsertWithoutSupplierPriceHistoryInputSchema,
  VendorWhereInputSchema: () => VendorWhereInputSchema,
  VendorWhereUniqueInputSchema: () => VendorWhereUniqueInputSchema,
  WasteRecordAggregateArgsSchema: () => WasteRecordAggregateArgsSchema,
  WasteRecordArgsSchema: () => WasteRecordArgsSchema,
  WasteRecordAvgOrderByAggregateInputSchema: () => WasteRecordAvgOrderByAggregateInputSchema,
  WasteRecordCountOrderByAggregateInputSchema: () => WasteRecordCountOrderByAggregateInputSchema,
  WasteRecordCreateArgsSchema: () => WasteRecordCreateArgsSchema,
  WasteRecordCreateInputSchema: () => WasteRecordCreateInputSchema,
  WasteRecordCreateManyAndReturnArgsSchema: () => WasteRecordCreateManyAndReturnArgsSchema,
  WasteRecordCreateManyArgsSchema: () => WasteRecordCreateManyArgsSchema,
  WasteRecordCreateManyIngredienteInputEnvelopeSchema: () => WasteRecordCreateManyIngredienteInputEnvelopeSchema,
  WasteRecordCreateManyIngredienteInputSchema: () => WasteRecordCreateManyIngredienteInputSchema,
  WasteRecordCreateManyInputSchema: () => WasteRecordCreateManyInputSchema,
  WasteRecordCreateManyRecordedByInputEnvelopeSchema: () => WasteRecordCreateManyRecordedByInputEnvelopeSchema,
  WasteRecordCreateManyRecordedByInputSchema: () => WasteRecordCreateManyRecordedByInputSchema,
  WasteRecordCreateManyRestaurantInputEnvelopeSchema: () => WasteRecordCreateManyRestaurantInputEnvelopeSchema,
  WasteRecordCreateManyRestaurantInputSchema: () => WasteRecordCreateManyRestaurantInputSchema,
  WasteRecordCreateNestedManyWithoutIngredienteInputSchema: () => WasteRecordCreateNestedManyWithoutIngredienteInputSchema,
  WasteRecordCreateNestedManyWithoutRecordedByInputSchema: () => WasteRecordCreateNestedManyWithoutRecordedByInputSchema,
  WasteRecordCreateNestedManyWithoutRestaurantInputSchema: () => WasteRecordCreateNestedManyWithoutRestaurantInputSchema,
  WasteRecordCreateOrConnectWithoutIngredienteInputSchema: () => WasteRecordCreateOrConnectWithoutIngredienteInputSchema,
  WasteRecordCreateOrConnectWithoutRecordedByInputSchema: () => WasteRecordCreateOrConnectWithoutRecordedByInputSchema,
  WasteRecordCreateOrConnectWithoutRestaurantInputSchema: () => WasteRecordCreateOrConnectWithoutRestaurantInputSchema,
  WasteRecordCreateWithoutIngredienteInputSchema: () => WasteRecordCreateWithoutIngredienteInputSchema,
  WasteRecordCreateWithoutRecordedByInputSchema: () => WasteRecordCreateWithoutRecordedByInputSchema,
  WasteRecordCreateWithoutRestaurantInputSchema: () => WasteRecordCreateWithoutRestaurantInputSchema,
  WasteRecordDeleteArgsSchema: () => WasteRecordDeleteArgsSchema,
  WasteRecordDeleteManyArgsSchema: () => WasteRecordDeleteManyArgsSchema,
  WasteRecordFindFirstArgsSchema: () => WasteRecordFindFirstArgsSchema,
  WasteRecordFindFirstOrThrowArgsSchema: () => WasteRecordFindFirstOrThrowArgsSchema,
  WasteRecordFindManyArgsSchema: () => WasteRecordFindManyArgsSchema,
  WasteRecordFindUniqueArgsSchema: () => WasteRecordFindUniqueArgsSchema,
  WasteRecordFindUniqueOrThrowArgsSchema: () => WasteRecordFindUniqueOrThrowArgsSchema,
  WasteRecordGroupByArgsSchema: () => WasteRecordGroupByArgsSchema,
  WasteRecordIncludeSchema: () => WasteRecordIncludeSchema,
  WasteRecordListRelationFilterSchema: () => WasteRecordListRelationFilterSchema,
  WasteRecordMaxOrderByAggregateInputSchema: () => WasteRecordMaxOrderByAggregateInputSchema,
  WasteRecordMinOrderByAggregateInputSchema: () => WasteRecordMinOrderByAggregateInputSchema,
  WasteRecordOrderByRelationAggregateInputSchema: () => WasteRecordOrderByRelationAggregateInputSchema,
  WasteRecordOrderByWithAggregationInputSchema: () => WasteRecordOrderByWithAggregationInputSchema,
  WasteRecordOrderByWithRelationInputSchema: () => WasteRecordOrderByWithRelationInputSchema,
  WasteRecordScalarFieldEnumSchema: () => WasteRecordScalarFieldEnumSchema,
  WasteRecordScalarWhereInputSchema: () => WasteRecordScalarWhereInputSchema,
  WasteRecordScalarWhereWithAggregatesInputSchema: () => WasteRecordScalarWhereWithAggregatesInputSchema,
  WasteRecordSchema: () => WasteRecordSchema,
  WasteRecordSelectSchema: () => WasteRecordSelectSchema,
  WasteRecordSumOrderByAggregateInputSchema: () => WasteRecordSumOrderByAggregateInputSchema,
  WasteRecordUncheckedCreateInputSchema: () => WasteRecordUncheckedCreateInputSchema,
  WasteRecordUncheckedCreateNestedManyWithoutIngredienteInputSchema: () => WasteRecordUncheckedCreateNestedManyWithoutIngredienteInputSchema,
  WasteRecordUncheckedCreateNestedManyWithoutRecordedByInputSchema: () => WasteRecordUncheckedCreateNestedManyWithoutRecordedByInputSchema,
  WasteRecordUncheckedCreateNestedManyWithoutRestaurantInputSchema: () => WasteRecordUncheckedCreateNestedManyWithoutRestaurantInputSchema,
  WasteRecordUncheckedCreateWithoutIngredienteInputSchema: () => WasteRecordUncheckedCreateWithoutIngredienteInputSchema,
  WasteRecordUncheckedCreateWithoutRecordedByInputSchema: () => WasteRecordUncheckedCreateWithoutRecordedByInputSchema,
  WasteRecordUncheckedCreateWithoutRestaurantInputSchema: () => WasteRecordUncheckedCreateWithoutRestaurantInputSchema,
  WasteRecordUncheckedUpdateInputSchema: () => WasteRecordUncheckedUpdateInputSchema,
  WasteRecordUncheckedUpdateManyInputSchema: () => WasteRecordUncheckedUpdateManyInputSchema,
  WasteRecordUncheckedUpdateManyWithoutIngredienteInputSchema: () => WasteRecordUncheckedUpdateManyWithoutIngredienteInputSchema,
  WasteRecordUncheckedUpdateManyWithoutIngredienteNestedInputSchema: () => WasteRecordUncheckedUpdateManyWithoutIngredienteNestedInputSchema,
  WasteRecordUncheckedUpdateManyWithoutRecordedByInputSchema: () => WasteRecordUncheckedUpdateManyWithoutRecordedByInputSchema,
  WasteRecordUncheckedUpdateManyWithoutRecordedByNestedInputSchema: () => WasteRecordUncheckedUpdateManyWithoutRecordedByNestedInputSchema,
  WasteRecordUncheckedUpdateManyWithoutRestaurantInputSchema: () => WasteRecordUncheckedUpdateManyWithoutRestaurantInputSchema,
  WasteRecordUncheckedUpdateManyWithoutRestaurantNestedInputSchema: () => WasteRecordUncheckedUpdateManyWithoutRestaurantNestedInputSchema,
  WasteRecordUncheckedUpdateWithoutIngredienteInputSchema: () => WasteRecordUncheckedUpdateWithoutIngredienteInputSchema,
  WasteRecordUncheckedUpdateWithoutRecordedByInputSchema: () => WasteRecordUncheckedUpdateWithoutRecordedByInputSchema,
  WasteRecordUncheckedUpdateWithoutRestaurantInputSchema: () => WasteRecordUncheckedUpdateWithoutRestaurantInputSchema,
  WasteRecordUpdateArgsSchema: () => WasteRecordUpdateArgsSchema,
  WasteRecordUpdateInputSchema: () => WasteRecordUpdateInputSchema,
  WasteRecordUpdateManyArgsSchema: () => WasteRecordUpdateManyArgsSchema,
  WasteRecordUpdateManyMutationInputSchema: () => WasteRecordUpdateManyMutationInputSchema,
  WasteRecordUpdateManyWithWhereWithoutIngredienteInputSchema: () => WasteRecordUpdateManyWithWhereWithoutIngredienteInputSchema,
  WasteRecordUpdateManyWithWhereWithoutRecordedByInputSchema: () => WasteRecordUpdateManyWithWhereWithoutRecordedByInputSchema,
  WasteRecordUpdateManyWithWhereWithoutRestaurantInputSchema: () => WasteRecordUpdateManyWithWhereWithoutRestaurantInputSchema,
  WasteRecordUpdateManyWithoutIngredienteNestedInputSchema: () => WasteRecordUpdateManyWithoutIngredienteNestedInputSchema,
  WasteRecordUpdateManyWithoutRecordedByNestedInputSchema: () => WasteRecordUpdateManyWithoutRecordedByNestedInputSchema,
  WasteRecordUpdateManyWithoutRestaurantNestedInputSchema: () => WasteRecordUpdateManyWithoutRestaurantNestedInputSchema,
  WasteRecordUpdateWithWhereUniqueWithoutIngredienteInputSchema: () => WasteRecordUpdateWithWhereUniqueWithoutIngredienteInputSchema,
  WasteRecordUpdateWithWhereUniqueWithoutRecordedByInputSchema: () => WasteRecordUpdateWithWhereUniqueWithoutRecordedByInputSchema,
  WasteRecordUpdateWithWhereUniqueWithoutRestaurantInputSchema: () => WasteRecordUpdateWithWhereUniqueWithoutRestaurantInputSchema,
  WasteRecordUpdateWithoutIngredienteInputSchema: () => WasteRecordUpdateWithoutIngredienteInputSchema,
  WasteRecordUpdateWithoutRecordedByInputSchema: () => WasteRecordUpdateWithoutRecordedByInputSchema,
  WasteRecordUpdateWithoutRestaurantInputSchema: () => WasteRecordUpdateWithoutRestaurantInputSchema,
  WasteRecordUpsertArgsSchema: () => WasteRecordUpsertArgsSchema,
  WasteRecordUpsertWithWhereUniqueWithoutIngredienteInputSchema: () => WasteRecordUpsertWithWhereUniqueWithoutIngredienteInputSchema,
  WasteRecordUpsertWithWhereUniqueWithoutRecordedByInputSchema: () => WasteRecordUpsertWithWhereUniqueWithoutRecordedByInputSchema,
  WasteRecordUpsertWithWhereUniqueWithoutRestaurantInputSchema: () => WasteRecordUpsertWithWhereUniqueWithoutRestaurantInputSchema,
  WasteRecordWhereInputSchema: () => WasteRecordWhereInputSchema,
  WasteRecordWhereUniqueInputSchema: () => WasteRecordWhereUniqueInputSchema
});
var TransactionIsolationLevelSchema = z$2.enum(["ReadUncommitted", "ReadCommitted", "RepeatableRead", "Serializable"]);
var SalesTransactionsScalarFieldEnumSchema = z$2.enum(["id", "posTransactionID", "restaurantId", "menuItemId", "price", "total", "transactionDate", "createdAt", "updatedAt"]);
var MenuCategoryScalarFieldEnumSchema = z$2.enum(["id", "name", "description", "displayOrder", "menuId", "isActive", "createdAt", "updatedAt"]);
var RecipeVersionScalarFieldEnumSchema = z$2.enum(["id", "recipeId", "versionNumber", "description", "changes", "isActive", "createdById", "approvedById", "approvedAt", "createdAt", "updatedAt"]);
var EquipmentScalarFieldEnumSchema = z$2.enum(["id", "name", "description", "model", "serialNumber", "purchaseDate", "lastMaintenance", "nextMaintenance", "status", "location", "restaurantId", "createdAt", "updatedAt"]);
var RecipeEquipmentScalarFieldEnumSchema = z$2.enum(["id", "recipeId", "equipmentId", "notes"]);
var MaintenanceLogScalarFieldEnumSchema = z$2.enum(["id", "equipmentId", "date", "type", "description", "cost", "performedBy", "notes", "createdAt", "updatedAt"]);
var QualityChecklistScalarFieldEnumSchema = z$2.enum(["id", "name", "description", "restaurantId", "frequency", "isActive", "createdAt", "updatedAt"]);
var ChecklistItemScalarFieldEnumSchema = z$2.enum(["id", "checklistId", "description", "order", "type", "requiredPhotos", "createdAt", "updatedAt"]);
var ChecklistCompleteScalarFieldEnumSchema = z$2.enum(["id", "checklistId", "completedById", "date", "notes", "createdAt", "updatedAt"]);
var ChecklistItemCompleteScalarFieldEnumSchema = z$2.enum(["id", "checklistCompleteId", "checklistItemId", "status", "notes", "photoUrls", "createdAt", "updatedAt"]);
var SupplierPriceHistoryScalarFieldEnumSchema = z$2.enum(["id", "vendorId", "ingredientId", "price", "unit", "startDate", "endDate", "notes", "createdAt", "updatedAt"]);
var CustomerFeedbackScalarFieldEnumSchema = z$2.enum(["id", "restaurantId", "menuItemId", "rating", "comment", "source", "tags", "status", "responseText", "respondedAt", "respondedById", "createdAt", "updatedAt"]);
var DietaryRestrictionScalarFieldEnumSchema = z$2.enum(["id", "name", "description", "icon", "createdAt", "updatedAt"]);
var RecipeTagScalarFieldEnumSchema = z$2.enum(["id", "name", "description", "createdAt", "updatedAt"]);
var LeftoverItemScalarFieldEnumSchema = z$2.enum(["id", "restaurantId", "date", "menuItemId", "quantity", "reason", "recordedById", "createdAt", "updatedAt"]);
var WasteRecordScalarFieldEnumSchema = z$2.enum(["id", "restaurantId", "date", "ingredientId", "quantity", "unit", "reason", "recordedById", "createdAt", "updatedAt"]);
var ProductionPlanScalarFieldEnumSchema = z$2.enum(["id", "restaurantId", "date", "createdById", "createdAt", "updatedAt"]);
var ProductionPlanItemScalarFieldEnumSchema = z$2.enum(["id", "productionPlanId", "recipeId", "quantity", "unit", "assignedToId", "createdAt", "updatedAt"]);
var ShiftTaskScalarFieldEnumSchema = z$2.enum(["id", "shiftId", "taskType", "startTime", "endTime", "duration", "notes", "createdAt", "updatedAt"]);
var AvailabilityScalarFieldEnumSchema = z$2.enum(["id", "userId", "dayOfWeek", "startTime", "endTime", "createdAt", "updatedAt"]);
var SchedulingConstraintScalarFieldEnumSchema = z$2.enum(["id", "userId", "date", "constraintsType", "startTime", "endTime", "notes", "createdAt", "updatedAt"]);
var InventoryWithdrawalScalarFieldEnumSchema = z$2.enum(["id", "inventoryItemId", "dateTime", "quantity", "unit", "recipeId", "createdById", "createdAt", "updatedAt"]);
var AllergenScalarFieldEnumSchema = z$2.enum(["id", "name", "description"]);
var IngredientAllergenScalarFieldEnumSchema = z$2.enum(["id", "ingredientId", "allergenId"]);
var NutritionalRecommendationScalarFieldEnumSchema = z$2.enum(["id", "menuItemId", "recommendation", "createdAt", "updatedAt"]);
var EarlyAccessScalarFieldEnumSchema = z$2.enum(["id", "email", "isEmailSent", "createdAt", "updatedAt"]);
var OrganizationScalarFieldEnumSchema = z$2.enum(["id", "name", "imageUrl", "createdAt", "updatedAt"]);
var RestaurantScalarFieldEnumSchema = z$2.enum(["id", "name", "imageUrl", "address", "city", "zipCode", "state", "owner", "organizationId", "foodCost", "createdAt", "updatedAt", "isDeleted", "deleted"]);
var UserScalarFieldEnumSchema = z$2.enum(["id", "email", "sub", "passwordHash", "firstName", "lastName", "profileImage", "verified", "role", "organizationId", "restaurantId", "createdAt", "updatedAt"]);
var SessionScalarFieldEnumSchema = z$2.enum(["id", "userId", "code", "token", "expiresAt", "createdAt"]);
var CookBookScalarFieldEnumSchema = z$2.enum(["id", "name", "imageUrl", "category", "restaurantId"]);
var RecipeScalarFieldEnumSchema = z$2.enum(["id", "name", "imageUrl", "description", "servings", "cookTime", "prepTime", "frequency", "restaurantId", "cookBookId", "foodCost", "isDeleted", "createdAt", "updatedAt"]);
var IngredientScalarFieldEnumSchema = z$2.enum(["id", "name", "category", "price", "dietaryRestrictionId"]);
var RecipeIngredientScalarFieldEnumSchema = z$2.enum(["id", "recipeId", "ingredientId", "quantity", "unit", "joinAt", "recipeVersionId"]);
var RecipeInstructionScalarFieldEnumSchema = z$2.enum(["id", "recipeId", "stepNumber", "instruction", "imageUrl", "recipeVersionId"]);
var InventoryScalarFieldEnumSchema = z$2.enum(["id", "restaurantId"]);
var InventoryItemScalarFieldEnumSchema = z$2.enum(["id", "inventoryId", "ingredientId", "quantity", "unit", "minQuantity", "restockThreshold", "lastUpdatedById", "lastUpdated"]);
var OrderScalarFieldEnumSchema = z$2.enum(["id", "restaurantId", "vendorId", "status", "createdAt", "updatedAt"]);
var OrderItemScalarFieldEnumSchema = z$2.enum(["id", "orderId", "ingredientId", "quantity", "unit", "price"]);
var VendorScalarFieldEnumSchema = z$2.enum(["id", "name", "contact", "email", "phone", "createdAt", "updatedAt"]);
var ShiftScalarFieldEnumSchema = z$2.enum(["id", "userId", "startTime", "endTime", "status"]);
var PrepBoardScalarFieldEnumSchema = z$2.enum(["id", "name", "status", "createdAt", "updatedAt"]);
var PrepItemScalarFieldEnumSchema = z$2.enum(["id", "prepBoardId", "recipeId", "quantity", "status", "assignedToId"]);
var PasswordResetScalarFieldEnumSchema = z$2.enum(["id", "token", "userId", "expiresAt", "createdAt", "updatedAt"]);
var MenuScalarFieldEnumSchema = z$2.enum(["id", "name", "restaurantId", "createdAt", "updatedAt"]);
var MenuItemRecipeScalarFieldEnumSchema = z$2.enum(["id", "menuItemId", "recipeId", "joinAt"]);
var MenuItemScalarFieldEnumSchema = z$2.enum(["id", "name", "description", "price", "foodCost", "recipeIds", "recipeServingsAmount", "recipeServingsCost", "allergens", "nutritionalInfoId", "menuId", "createdAt", "updatedAt", "categoryId"]);
var NutritionalInfoScalarFieldEnumSchema = z$2.enum(["id", "menuItemId", "calories", "fat", "saturatedFat", "transFat", "cholesterol", "sodium", "carbohydrates", "fiber", "sugar", "protein", "createdAt", "updatedAt"]);
var FoodCostHistoryScalarFieldEnumSchema = z$2.enum(["id", "recipeId", "cost", "date", "createdAt", "updatedAt"]);
var PrepHistoryScalarFieldEnumSchema = z$2.enum(["id", "recipeId", "quantity", "date", "createdAt", "updatedAt"]);
var SortOrderSchema = z$2.enum(["asc", "desc"]);
var QueryModeSchema = z$2.enum(["default", "insensitive"]);
var NullsOrderSchema = z$2.enum(["first", "last"]);
var ChecklistItemTypeSchema = z$2.enum(["BOOLEAN", "NUMERIC", "TEXT", "TEMPERATURE", "PHOTO"]);
var EquipmentStatusSchema = z$2.enum(["ACTIVE", "MAINTENANCE", "REPAIR", "RETIRED"]);
var MaintenanceTypeSchema = z$2.enum(["ROUTINE", "REPAIR", "INSPECTION", "CLEANING", "CALIBRATION"]);
var ChecklistFrequencySchema = z$2.enum(["DAILY", "WEEKLY", "MONTHLY", "QUARTERLY", "CUSTOM"]);
var ChecklistStatusSchema = z$2.enum(["COMPLETED", "FAILED", "SKIPPED", "NEEDS_ATTENTION"]);
var FeedbackSourceSchema = z$2.enum(["IN_PERSON", "ONLINE", "MOBILE_APP", "THIRD_PARTY"]);
var FeedbackStatusSchema = z$2.enum(["NEW", "IN_PROGRESS", "RESPONDED", "CLOSED", "FLAGGED"]);
var ProductionStatusSchema = z$2.enum(["PLANNED", "IN_PROGRESS", "COMPLETED", "CANCELLED"]);
var TaskTypeSchema = z$2.enum(["PREP", "COOKING", "CLEANING", "INVENTORY", "OTHER"]);
var DayOfWeekSchema = z$2.enum(["MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY"]);
var ConstraintTypeSchema = z$2.enum(["UNAVAILABLE", "PREFERRED"]);
var UserRoleSchema = z$2.enum(["ADMIN", "MANAGER", "CHEF", "STAFF", "VENDOR"]);
var OrderStatusSchema = z$2.enum(["PENDING", "APPROVED", "ORDERED", "RECEIVED", "CANCELLED"]);
var ShiftStatusSchema = z$2.enum(["SCHEDULED", "COMPLETED", "CANCELLED"]);
var PrepStatusSchema = z$2.enum(["COMPLETED", "CANCELLED", "MISSING_ITEM", "PENDING", "ON_PROGRESS", "POSTPONE"]);
var SalesTransactionsSchema = z$2.object({
  id: z$2.number().int(),
  posTransactionID: z$2.string().nullable(),
  restaurantId: z$2.number().int(),
  menuItemId: z$2.number().int(),
  price: z$2.number(),
  total: z$2.number(),
  transactionDate: z$2.coerce.date(),
  createdAt: z$2.coerce.date(),
  updatedAt: z$2.coerce.date()
});
var MenuCategorySchema = z$2.object({
  id: z$2.number().int(),
  name: z$2.string(),
  description: z$2.string().nullable(),
  displayOrder: z$2.number().int(),
  menuId: z$2.number().int(),
  isActive: z$2.boolean(),
  createdAt: z$2.coerce.date(),
  updatedAt: z$2.coerce.date()
});
var RecipeVersionSchema = z$2.object({
  id: z$2.number().int(),
  recipeId: z$2.number().int(),
  versionNumber: z$2.number().int(),
  description: z$2.string().nullable(),
  changes: z$2.string().nullable(),
  isActive: z$2.boolean(),
  createdById: z$2.number().int(),
  approvedById: z$2.number().int().nullable(),
  approvedAt: z$2.coerce.date().nullable(),
  createdAt: z$2.coerce.date(),
  updatedAt: z$2.coerce.date()
});
var EquipmentSchema = z$2.object({
  status: EquipmentStatusSchema,
  id: z$2.number().int(),
  name: z$2.string(),
  description: z$2.string().nullable(),
  model: z$2.string().nullable(),
  serialNumber: z$2.string().nullable(),
  purchaseDate: z$2.coerce.date().nullable(),
  lastMaintenance: z$2.coerce.date().nullable(),
  nextMaintenance: z$2.coerce.date().nullable(),
  location: z$2.string().nullable(),
  restaurantId: z$2.number().int(),
  createdAt: z$2.coerce.date(),
  updatedAt: z$2.coerce.date()
});
var RecipeEquipmentSchema = z$2.object({
  id: z$2.number().int(),
  recipeId: z$2.number().int(),
  equipmentId: z$2.number().int(),
  notes: z$2.string().nullable()
});
var MaintenanceLogSchema = z$2.object({
  type: MaintenanceTypeSchema,
  id: z$2.number().int(),
  equipmentId: z$2.number().int(),
  date: z$2.coerce.date(),
  description: z$2.string(),
  cost: z$2.number().nullable(),
  performedBy: z$2.string(),
  notes: z$2.string().nullable(),
  createdAt: z$2.coerce.date(),
  updatedAt: z$2.coerce.date()
});
var QualityChecklistSchema = z$2.object({
  frequency: ChecklistFrequencySchema,
  id: z$2.number().int(),
  name: z$2.string(),
  description: z$2.string().nullable(),
  restaurantId: z$2.number().int(),
  isActive: z$2.boolean(),
  createdAt: z$2.coerce.date(),
  updatedAt: z$2.coerce.date()
});
var ChecklistItemSchema = z$2.object({
  type: ChecklistItemTypeSchema,
  id: z$2.number().int(),
  checklistId: z$2.number().int(),
  description: z$2.string(),
  order: z$2.number().int(),
  requiredPhotos: z$2.boolean(),
  createdAt: z$2.coerce.date(),
  updatedAt: z$2.coerce.date()
});
var ChecklistCompleteSchema = z$2.object({
  id: z$2.number().int(),
  checklistId: z$2.number().int(),
  completedById: z$2.number().int(),
  date: z$2.coerce.date(),
  notes: z$2.string().nullable(),
  createdAt: z$2.coerce.date(),
  updatedAt: z$2.coerce.date()
});
var ChecklistItemCompleteSchema = z$2.object({
  status: ChecklistStatusSchema,
  id: z$2.number().int(),
  checklistCompleteId: z$2.number().int(),
  checklistItemId: z$2.number().int(),
  notes: z$2.string().nullable(),
  photoUrls: z$2.string().array(),
  createdAt: z$2.coerce.date(),
  updatedAt: z$2.coerce.date()
});
var SupplierPriceHistorySchema = z$2.object({
  id: z$2.number().int(),
  vendorId: z$2.number().int(),
  ingredientId: z$2.number().int(),
  price: z$2.number(),
  unit: z$2.string(),
  startDate: z$2.coerce.date(),
  endDate: z$2.coerce.date().nullable(),
  notes: z$2.string().nullable(),
  createdAt: z$2.coerce.date(),
  updatedAt: z$2.coerce.date()
});
var CustomerFeedbackSchema = z$2.object({
  source: FeedbackSourceSchema,
  status: FeedbackStatusSchema,
  id: z$2.number().int(),
  restaurantId: z$2.number().int(),
  menuItemId: z$2.number().int().nullable(),
  rating: z$2.number().int(),
  comment: z$2.string().nullable(),
  tags: z$2.string().array(),
  responseText: z$2.string().nullable(),
  respondedAt: z$2.coerce.date().nullable(),
  respondedById: z$2.number().int().nullable(),
  createdAt: z$2.coerce.date(),
  updatedAt: z$2.coerce.date()
});
var DietaryRestrictionSchema = z$2.object({
  id: z$2.number().int(),
  name: z$2.string(),
  description: z$2.string().nullable(),
  icon: z$2.string().nullable(),
  createdAt: z$2.coerce.date(),
  updatedAt: z$2.coerce.date()
});
var RecipeTagSchema = z$2.object({
  id: z$2.number().int(),
  name: z$2.string(),
  description: z$2.string().nullable(),
  createdAt: z$2.coerce.date(),
  updatedAt: z$2.coerce.date()
});
var LeftoverItemSchema = z$2.object({
  id: z$2.number().int(),
  restaurantId: z$2.number().int(),
  date: z$2.coerce.date(),
  menuItemId: z$2.number().int(),
  quantity: z$2.number().int(),
  reason: z$2.string(),
  recordedById: z$2.number().int(),
  createdAt: z$2.coerce.date(),
  updatedAt: z$2.coerce.date()
});
var WasteRecordSchema = z$2.object({
  id: z$2.number().int(),
  restaurantId: z$2.number().int(),
  date: z$2.coerce.date(),
  ingredientId: z$2.number().int(),
  quantity: z$2.number(),
  unit: z$2.string(),
  reason: z$2.string(),
  recordedById: z$2.number().int(),
  createdAt: z$2.coerce.date(),
  updatedAt: z$2.coerce.date()
});
var ProductionPlanSchema = z$2.object({
  id: z$2.number().int(),
  restaurantId: z$2.number().int(),
  date: z$2.coerce.date(),
  createdById: z$2.number().int(),
  createdAt: z$2.coerce.date(),
  updatedAt: z$2.coerce.date()
});
var ProductionPlanItemSchema = z$2.object({
  id: z$2.number().int(),
  productionPlanId: z$2.number().int(),
  recipeId: z$2.number().int(),
  quantity: z$2.number().int(),
  unit: z$2.string(),
  assignedToId: z$2.number().int().nullable(),
  createdAt: z$2.coerce.date(),
  updatedAt: z$2.coerce.date()
});
var ShiftTaskSchema = z$2.object({
  taskType: TaskTypeSchema,
  id: z$2.number().int(),
  shiftId: z$2.number().int(),
  startTime: z$2.coerce.date(),
  endTime: z$2.coerce.date(),
  duration: z$2.number().int(),
  notes: z$2.string().nullable(),
  createdAt: z$2.coerce.date(),
  updatedAt: z$2.coerce.date()
});
var AvailabilitySchema = z$2.object({
  dayOfWeek: DayOfWeekSchema,
  id: z$2.number().int(),
  userId: z$2.number().int(),
  startTime: z$2.coerce.date(),
  endTime: z$2.coerce.date(),
  createdAt: z$2.coerce.date(),
  updatedAt: z$2.coerce.date()
});
var SchedulingConstraintSchema = z$2.object({
  constraintsType: ConstraintTypeSchema,
  id: z$2.number().int(),
  userId: z$2.number().int(),
  date: z$2.coerce.date(),
  startTime: z$2.coerce.date(),
  endTime: z$2.coerce.date(),
  notes: z$2.string().nullable(),
  createdAt: z$2.coerce.date(),
  updatedAt: z$2.coerce.date()
});
var InventoryWithdrawalSchema = z$2.object({
  id: z$2.number().int(),
  inventoryItemId: z$2.number().int(),
  dateTime: z$2.coerce.date(),
  quantity: z$2.number(),
  unit: z$2.string(),
  recipeId: z$2.number().int().nullable(),
  createdById: z$2.number().int(),
  createdAt: z$2.coerce.date(),
  updatedAt: z$2.coerce.date()
});
var AllergenSchema = z$2.object({
  id: z$2.number().int(),
  name: z$2.string(),
  description: z$2.string().nullable()
});
var IngredientAllergenSchema = z$2.object({
  id: z$2.number().int(),
  ingredientId: z$2.number().int(),
  allergenId: z$2.number().int()
});
var NutritionalRecommendationSchema = z$2.object({
  id: z$2.number().int(),
  menuItemId: z$2.number().int(),
  recommendation: z$2.string(),
  createdAt: z$2.coerce.date(),
  updatedAt: z$2.coerce.date()
});
var EarlyAccessSchema = z$2.object({
  id: z$2.number().int(),
  email: z$2.string(),
  isEmailSent: z$2.boolean(),
  createdAt: z$2.coerce.date(),
  updatedAt: z$2.coerce.date()
});
var OrganizationSchema$1 = z$2.object({
  id: z$2.number().int(),
  name: z$2.string(),
  imageUrl: z$2.string().nullable(),
  createdAt: z$2.coerce.date(),
  updatedAt: z$2.coerce.date()
});
var RestaurantSchema = z$2.object({
  id: z$2.number().int(),
  name: z$2.string(),
  imageUrl: z$2.string().nullable(),
  address: z$2.string(),
  city: z$2.string(),
  zipCode: z$2.string(),
  state: z$2.string(),
  owner: z$2.string(),
  organizationId: z$2.number().int().nullable(),
  foodCost: z$2.number().nullable(),
  createdAt: z$2.coerce.date(),
  updatedAt: z$2.coerce.date(),
  isDeleted: z$2.boolean(),
  deleted: z$2.coerce.date().nullable()
});
var UserSchema$2 = z$2.object({
  role: UserRoleSchema,
  id: z$2.number().int(),
  email: z$2.string(),
  sub: z$2.number().int().nullable(),
  passwordHash: z$2.string(),
  firstName: z$2.string(),
  lastName: z$2.string(),
  profileImage: z$2.string().nullable(),
  verified: z$2.boolean(),
  organizationId: z$2.number().int().nullable(),
  restaurantId: z$2.number().int().nullable(),
  createdAt: z$2.coerce.date(),
  updatedAt: z$2.coerce.date()
});
var SessionSchema = z$2.object({
  id: z$2.string(),
  userId: z$2.number().int(),
  code: z$2.string(),
  token: z$2.string(),
  expiresAt: z$2.coerce.date(),
  createdAt: z$2.coerce.date()
});
var CookBookSchema = z$2.object({
  id: z$2.number().int(),
  name: z$2.string(),
  imageUrl: z$2.string().nullable(),
  category: z$2.string(),
  restaurantId: z$2.number().int().nullable()
});
var RecipeSchema = z$2.object({
  id: z$2.number().int(),
  name: z$2.string(),
  imageUrl: z$2.string().array(),
  description: z$2.string().nullable(),
  servings: z$2.number().int(),
  cookTime: z$2.number().int(),
  prepTime: z$2.number().int(),
  frequency: z$2.number().int().nullable(),
  restaurantId: z$2.number().int(),
  cookBookId: z$2.number().int(),
  foodCost: z$2.number().nullable(),
  isDeleted: z$2.boolean(),
  createdAt: z$2.coerce.date(),
  updatedAt: z$2.coerce.date()
});
var IngredientSchema = z$2.object({
  id: z$2.number().int(),
  name: z$2.string(),
  category: z$2.string(),
  price: z$2.number(),
  dietaryRestrictionId: z$2.number().int().nullable()
});
var RecipeIngredientSchema = z$2.object({
  id: z$2.number().int(),
  recipeId: z$2.number().int(),
  ingredientId: z$2.number().int(),
  quantity: z$2.number(),
  unit: z$2.string(),
  joinAt: z$2.coerce.date(),
  recipeVersionId: z$2.number().int().nullable()
});
var RecipeInstructionSchema = z$2.object({
  id: z$2.number().int(),
  recipeId: z$2.number().int(),
  stepNumber: z$2.number().int(),
  instruction: z$2.string(),
  imageUrl: z$2.string().nullable(),
  recipeVersionId: z$2.number().int().nullable()
});
var InventorySchema = z$2.object({
  id: z$2.number().int(),
  restaurantId: z$2.number().int()
});
var InventoryItemSchema = z$2.object({
  id: z$2.number().int(),
  inventoryId: z$2.number().int(),
  ingredientId: z$2.number().int(),
  quantity: z$2.number(),
  unit: z$2.string(),
  minQuantity: z$2.number(),
  restockThreshold: z$2.number(),
  lastUpdatedById: z$2.number().int().nullable(),
  lastUpdated: z$2.coerce.date()
});
var OrderSchema$2 = z$2.object({
  status: OrderStatusSchema,
  id: z$2.number().int(),
  restaurantId: z$2.number().int(),
  vendorId: z$2.number().int(),
  createdAt: z$2.coerce.date(),
  updatedAt: z$2.coerce.date()
});
var OrderItemSchema$2 = z$2.object({
  id: z$2.number().int(),
  orderId: z$2.number().int(),
  ingredientId: z$2.number().int(),
  quantity: z$2.number(),
  unit: z$2.string(),
  price: z$2.number()
});
var VendorSchema$2 = z$2.object({
  id: z$2.number().int(),
  name: z$2.string(),
  contact: z$2.string(),
  email: z$2.string(),
  phone: z$2.string(),
  createdAt: z$2.coerce.date(),
  updatedAt: z$2.coerce.date()
});
var ShiftSchema = z$2.object({
  status: ShiftStatusSchema,
  id: z$2.number().int(),
  userId: z$2.number().int(),
  startTime: z$2.coerce.date(),
  endTime: z$2.coerce.date()
});
var PrepBoardSchema = z$2.object({
  status: PrepStatusSchema,
  id: z$2.number().int(),
  name: z$2.string(),
  createdAt: z$2.coerce.date(),
  updatedAt: z$2.coerce.date()
});
var PrepItemSchema = z$2.object({
  status: PrepStatusSchema,
  id: z$2.number().int(),
  prepBoardId: z$2.number().int(),
  recipeId: z$2.number().int(),
  quantity: z$2.number().int(),
  assignedToId: z$2.number().int()
});
var PasswordResetSchema = z$2.object({
  id: z$2.number().int(),
  token: z$2.string(),
  userId: z$2.number().int(),
  expiresAt: z$2.coerce.date(),
  createdAt: z$2.coerce.date(),
  updatedAt: z$2.coerce.date()
});
var MenuSchema = z$2.object({
  id: z$2.number().int(),
  name: z$2.string(),
  restaurantId: z$2.number().int(),
  createdAt: z$2.coerce.date(),
  updatedAt: z$2.coerce.date()
});
var MenuItemRecipeSchema = z$2.object({
  id: z$2.number().int(),
  menuItemId: z$2.number().int(),
  recipeId: z$2.number().int(),
  joinAt: z$2.coerce.date()
});
var MenuItemSchema = z$2.object({
  id: z$2.number().int(),
  name: z$2.string(),
  description: z$2.string().nullable(),
  price: z$2.number(),
  foodCost: z$2.number(),
  recipeIds: z$2.number().int().array(),
  recipeServingsAmount: z$2.number().array(),
  recipeServingsCost: z$2.number().array(),
  allergens: z$2.string().array(),
  nutritionalInfoId: z$2.number().int().nullable(),
  menuId: z$2.number().int(),
  createdAt: z$2.coerce.date(),
  updatedAt: z$2.coerce.date(),
  categoryId: z$2.number().int().nullable()
});
var NutritionalInfoSchema = z$2.object({
  id: z$2.number().int(),
  menuItemId: z$2.number().int().nullable(),
  calories: z$2.number(),
  fat: z$2.number(),
  saturatedFat: z$2.number(),
  transFat: z$2.number(),
  cholesterol: z$2.number(),
  sodium: z$2.number(),
  carbohydrates: z$2.number(),
  fiber: z$2.number(),
  sugar: z$2.number(),
  protein: z$2.number(),
  createdAt: z$2.coerce.date(),
  updatedAt: z$2.coerce.date()
});
var FoodCostHistorySchema = z$2.object({
  id: z$2.number().int(),
  recipeId: z$2.number().int(),
  cost: z$2.number(),
  date: z$2.coerce.date(),
  createdAt: z$2.coerce.date(),
  updatedAt: z$2.coerce.date()
});
var PrepHistorySchema = z$2.object({
  id: z$2.number().int(),
  recipeId: z$2.number().int(),
  quantity: z$2.number().int(),
  date: z$2.coerce.date(),
  createdAt: z$2.coerce.date(),
  updatedAt: z$2.coerce.date()
});
var SalesTransactionsIncludeSchema = z$2.object({
  restaurant: z$2.union([z$2.boolean(), z$2.lazy(() => RestaurantArgsSchema)]).optional(),
  menuItem: z$2.union([z$2.boolean(), z$2.lazy(() => MenuItemArgsSchema)]).optional()
}).strict();
var SalesTransactionsArgsSchema = z$2.object({
  select: z$2.lazy(() => SalesTransactionsSelectSchema).optional(),
  include: z$2.lazy(() => SalesTransactionsIncludeSchema).optional()
}).strict();
var SalesTransactionsSelectSchema = z$2.object({
  id: z$2.boolean().optional(),
  posTransactionID: z$2.boolean().optional(),
  restaurantId: z$2.boolean().optional(),
  menuItemId: z$2.boolean().optional(),
  price: z$2.boolean().optional(),
  total: z$2.boolean().optional(),
  transactionDate: z$2.boolean().optional(),
  createdAt: z$2.boolean().optional(),
  updatedAt: z$2.boolean().optional(),
  restaurant: z$2.union([z$2.boolean(), z$2.lazy(() => RestaurantArgsSchema)]).optional(),
  menuItem: z$2.union([z$2.boolean(), z$2.lazy(() => MenuItemArgsSchema)]).optional()
}).strict();
var MenuCategoryIncludeSchema = z$2.object({
  menu: z$2.union([z$2.boolean(), z$2.lazy(() => MenuArgsSchema)]).optional(),
  menuItems: z$2.union([z$2.boolean(), z$2.lazy(() => MenuItemFindManyArgsSchema)]).optional(),
  _count: z$2.union([z$2.boolean(), z$2.lazy(() => MenuCategoryCountOutputTypeArgsSchema)]).optional()
}).strict();
var MenuCategoryArgsSchema = z$2.object({
  select: z$2.lazy(() => MenuCategorySelectSchema).optional(),
  include: z$2.lazy(() => MenuCategoryIncludeSchema).optional()
}).strict();
var MenuCategoryCountOutputTypeArgsSchema = z$2.object({
  select: z$2.lazy(() => MenuCategoryCountOutputTypeSelectSchema).nullish()
}).strict();
var MenuCategoryCountOutputTypeSelectSchema = z$2.object({
  menuItems: z$2.boolean().optional()
}).strict();
var MenuCategorySelectSchema = z$2.object({
  id: z$2.boolean().optional(),
  name: z$2.boolean().optional(),
  description: z$2.boolean().optional(),
  displayOrder: z$2.boolean().optional(),
  menuId: z$2.boolean().optional(),
  isActive: z$2.boolean().optional(),
  createdAt: z$2.boolean().optional(),
  updatedAt: z$2.boolean().optional(),
  menu: z$2.union([z$2.boolean(), z$2.lazy(() => MenuArgsSchema)]).optional(),
  menuItems: z$2.union([z$2.boolean(), z$2.lazy(() => MenuItemFindManyArgsSchema)]).optional(),
  _count: z$2.union([z$2.boolean(), z$2.lazy(() => MenuCategoryCountOutputTypeArgsSchema)]).optional()
}).strict();
var RecipeVersionIncludeSchema = z$2.object({
  recipe: z$2.union([z$2.boolean(), z$2.lazy(() => RecipeArgsSchema)]).optional(),
  ingredients: z$2.union([z$2.boolean(), z$2.lazy(() => RecipeIngredientFindManyArgsSchema)]).optional(),
  instructions: z$2.union([z$2.boolean(), z$2.lazy(() => RecipeInstructionFindManyArgsSchema)]).optional(),
  createdBy: z$2.union([z$2.boolean(), z$2.lazy(() => UserArgsSchema)]).optional(),
  approvedBy: z$2.union([z$2.boolean(), z$2.lazy(() => UserArgsSchema)]).optional(),
  _count: z$2.union([z$2.boolean(), z$2.lazy(() => RecipeVersionCountOutputTypeArgsSchema)]).optional()
}).strict();
var RecipeVersionArgsSchema = z$2.object({
  select: z$2.lazy(() => RecipeVersionSelectSchema).optional(),
  include: z$2.lazy(() => RecipeVersionIncludeSchema).optional()
}).strict();
var RecipeVersionCountOutputTypeArgsSchema = z$2.object({
  select: z$2.lazy(() => RecipeVersionCountOutputTypeSelectSchema).nullish()
}).strict();
var RecipeVersionCountOutputTypeSelectSchema = z$2.object({
  ingredients: z$2.boolean().optional(),
  instructions: z$2.boolean().optional()
}).strict();
var RecipeVersionSelectSchema = z$2.object({
  id: z$2.boolean().optional(),
  recipeId: z$2.boolean().optional(),
  versionNumber: z$2.boolean().optional(),
  description: z$2.boolean().optional(),
  changes: z$2.boolean().optional(),
  isActive: z$2.boolean().optional(),
  createdById: z$2.boolean().optional(),
  approvedById: z$2.boolean().optional(),
  approvedAt: z$2.boolean().optional(),
  createdAt: z$2.boolean().optional(),
  updatedAt: z$2.boolean().optional(),
  recipe: z$2.union([z$2.boolean(), z$2.lazy(() => RecipeArgsSchema)]).optional(),
  ingredients: z$2.union([z$2.boolean(), z$2.lazy(() => RecipeIngredientFindManyArgsSchema)]).optional(),
  instructions: z$2.union([z$2.boolean(), z$2.lazy(() => RecipeInstructionFindManyArgsSchema)]).optional(),
  createdBy: z$2.union([z$2.boolean(), z$2.lazy(() => UserArgsSchema)]).optional(),
  approvedBy: z$2.union([z$2.boolean(), z$2.lazy(() => UserArgsSchema)]).optional(),
  _count: z$2.union([z$2.boolean(), z$2.lazy(() => RecipeVersionCountOutputTypeArgsSchema)]).optional()
}).strict();
var EquipmentIncludeSchema = z$2.object({
  restaurant: z$2.union([z$2.boolean(), z$2.lazy(() => RestaurantArgsSchema)]).optional(),
  recipes: z$2.union([z$2.boolean(), z$2.lazy(() => RecipeEquipmentFindManyArgsSchema)]).optional(),
  maintenanceLogs: z$2.union([z$2.boolean(), z$2.lazy(() => MaintenanceLogFindManyArgsSchema)]).optional(),
  _count: z$2.union([z$2.boolean(), z$2.lazy(() => EquipmentCountOutputTypeArgsSchema)]).optional()
}).strict();
var EquipmentArgsSchema = z$2.object({
  select: z$2.lazy(() => EquipmentSelectSchema).optional(),
  include: z$2.lazy(() => EquipmentIncludeSchema).optional()
}).strict();
var EquipmentCountOutputTypeArgsSchema = z$2.object({
  select: z$2.lazy(() => EquipmentCountOutputTypeSelectSchema).nullish()
}).strict();
var EquipmentCountOutputTypeSelectSchema = z$2.object({
  recipes: z$2.boolean().optional(),
  maintenanceLogs: z$2.boolean().optional()
}).strict();
var EquipmentSelectSchema = z$2.object({
  id: z$2.boolean().optional(),
  name: z$2.boolean().optional(),
  description: z$2.boolean().optional(),
  model: z$2.boolean().optional(),
  serialNumber: z$2.boolean().optional(),
  purchaseDate: z$2.boolean().optional(),
  lastMaintenance: z$2.boolean().optional(),
  nextMaintenance: z$2.boolean().optional(),
  status: z$2.boolean().optional(),
  location: z$2.boolean().optional(),
  restaurantId: z$2.boolean().optional(),
  createdAt: z$2.boolean().optional(),
  updatedAt: z$2.boolean().optional(),
  restaurant: z$2.union([z$2.boolean(), z$2.lazy(() => RestaurantArgsSchema)]).optional(),
  recipes: z$2.union([z$2.boolean(), z$2.lazy(() => RecipeEquipmentFindManyArgsSchema)]).optional(),
  maintenanceLogs: z$2.union([z$2.boolean(), z$2.lazy(() => MaintenanceLogFindManyArgsSchema)]).optional(),
  _count: z$2.union([z$2.boolean(), z$2.lazy(() => EquipmentCountOutputTypeArgsSchema)]).optional()
}).strict();
var RecipeEquipmentIncludeSchema = z$2.object({
  recipe: z$2.union([z$2.boolean(), z$2.lazy(() => RecipeArgsSchema)]).optional(),
  equipment: z$2.union([z$2.boolean(), z$2.lazy(() => EquipmentArgsSchema)]).optional()
}).strict();
var RecipeEquipmentArgsSchema = z$2.object({
  select: z$2.lazy(() => RecipeEquipmentSelectSchema).optional(),
  include: z$2.lazy(() => RecipeEquipmentIncludeSchema).optional()
}).strict();
var RecipeEquipmentSelectSchema = z$2.object({
  id: z$2.boolean().optional(),
  recipeId: z$2.boolean().optional(),
  equipmentId: z$2.boolean().optional(),
  notes: z$2.boolean().optional(),
  recipe: z$2.union([z$2.boolean(), z$2.lazy(() => RecipeArgsSchema)]).optional(),
  equipment: z$2.union([z$2.boolean(), z$2.lazy(() => EquipmentArgsSchema)]).optional()
}).strict();
var MaintenanceLogIncludeSchema = z$2.object({
  equipment: z$2.union([z$2.boolean(), z$2.lazy(() => EquipmentArgsSchema)]).optional()
}).strict();
var MaintenanceLogArgsSchema = z$2.object({
  select: z$2.lazy(() => MaintenanceLogSelectSchema).optional(),
  include: z$2.lazy(() => MaintenanceLogIncludeSchema).optional()
}).strict();
var MaintenanceLogSelectSchema = z$2.object({
  id: z$2.boolean().optional(),
  equipmentId: z$2.boolean().optional(),
  date: z$2.boolean().optional(),
  type: z$2.boolean().optional(),
  description: z$2.boolean().optional(),
  cost: z$2.boolean().optional(),
  performedBy: z$2.boolean().optional(),
  notes: z$2.boolean().optional(),
  createdAt: z$2.boolean().optional(),
  updatedAt: z$2.boolean().optional(),
  equipment: z$2.union([z$2.boolean(), z$2.lazy(() => EquipmentArgsSchema)]).optional()
}).strict();
var QualityChecklistIncludeSchema = z$2.object({
  restaurant: z$2.union([z$2.boolean(), z$2.lazy(() => RestaurantArgsSchema)]).optional(),
  items: z$2.union([z$2.boolean(), z$2.lazy(() => ChecklistItemFindManyArgsSchema)]).optional(),
  completions: z$2.union([z$2.boolean(), z$2.lazy(() => ChecklistCompleteFindManyArgsSchema)]).optional(),
  _count: z$2.union([z$2.boolean(), z$2.lazy(() => QualityChecklistCountOutputTypeArgsSchema)]).optional()
}).strict();
var QualityChecklistArgsSchema = z$2.object({
  select: z$2.lazy(() => QualityChecklistSelectSchema).optional(),
  include: z$2.lazy(() => QualityChecklistIncludeSchema).optional()
}).strict();
var QualityChecklistCountOutputTypeArgsSchema = z$2.object({
  select: z$2.lazy(() => QualityChecklistCountOutputTypeSelectSchema).nullish()
}).strict();
var QualityChecklistCountOutputTypeSelectSchema = z$2.object({
  items: z$2.boolean().optional(),
  completions: z$2.boolean().optional()
}).strict();
var QualityChecklistSelectSchema = z$2.object({
  id: z$2.boolean().optional(),
  name: z$2.boolean().optional(),
  description: z$2.boolean().optional(),
  restaurantId: z$2.boolean().optional(),
  frequency: z$2.boolean().optional(),
  isActive: z$2.boolean().optional(),
  createdAt: z$2.boolean().optional(),
  updatedAt: z$2.boolean().optional(),
  restaurant: z$2.union([z$2.boolean(), z$2.lazy(() => RestaurantArgsSchema)]).optional(),
  items: z$2.union([z$2.boolean(), z$2.lazy(() => ChecklistItemFindManyArgsSchema)]).optional(),
  completions: z$2.union([z$2.boolean(), z$2.lazy(() => ChecklistCompleteFindManyArgsSchema)]).optional(),
  _count: z$2.union([z$2.boolean(), z$2.lazy(() => QualityChecklistCountOutputTypeArgsSchema)]).optional()
}).strict();
var ChecklistItemIncludeSchema = z$2.object({
  checklist: z$2.union([z$2.boolean(), z$2.lazy(() => QualityChecklistArgsSchema)]).optional(),
  completions: z$2.union([z$2.boolean(), z$2.lazy(() => ChecklistItemCompleteFindManyArgsSchema)]).optional(),
  _count: z$2.union([z$2.boolean(), z$2.lazy(() => ChecklistItemCountOutputTypeArgsSchema)]).optional()
}).strict();
var ChecklistItemArgsSchema = z$2.object({
  select: z$2.lazy(() => ChecklistItemSelectSchema).optional(),
  include: z$2.lazy(() => ChecklistItemIncludeSchema).optional()
}).strict();
var ChecklistItemCountOutputTypeArgsSchema = z$2.object({
  select: z$2.lazy(() => ChecklistItemCountOutputTypeSelectSchema).nullish()
}).strict();
var ChecklistItemCountOutputTypeSelectSchema = z$2.object({
  completions: z$2.boolean().optional()
}).strict();
var ChecklistItemSelectSchema = z$2.object({
  id: z$2.boolean().optional(),
  checklistId: z$2.boolean().optional(),
  description: z$2.boolean().optional(),
  order: z$2.boolean().optional(),
  type: z$2.boolean().optional(),
  requiredPhotos: z$2.boolean().optional(),
  createdAt: z$2.boolean().optional(),
  updatedAt: z$2.boolean().optional(),
  checklist: z$2.union([z$2.boolean(), z$2.lazy(() => QualityChecklistArgsSchema)]).optional(),
  completions: z$2.union([z$2.boolean(), z$2.lazy(() => ChecklistItemCompleteFindManyArgsSchema)]).optional(),
  _count: z$2.union([z$2.boolean(), z$2.lazy(() => ChecklistItemCountOutputTypeArgsSchema)]).optional()
}).strict();
var ChecklistCompleteIncludeSchema = z$2.object({
  checklist: z$2.union([z$2.boolean(), z$2.lazy(() => QualityChecklistArgsSchema)]).optional(),
  completedBy: z$2.union([z$2.boolean(), z$2.lazy(() => UserArgsSchema)]).optional(),
  items: z$2.union([z$2.boolean(), z$2.lazy(() => ChecklistItemCompleteFindManyArgsSchema)]).optional(),
  _count: z$2.union([z$2.boolean(), z$2.lazy(() => ChecklistCompleteCountOutputTypeArgsSchema)]).optional()
}).strict();
var ChecklistCompleteArgsSchema = z$2.object({
  select: z$2.lazy(() => ChecklistCompleteSelectSchema).optional(),
  include: z$2.lazy(() => ChecklistCompleteIncludeSchema).optional()
}).strict();
var ChecklistCompleteCountOutputTypeArgsSchema = z$2.object({
  select: z$2.lazy(() => ChecklistCompleteCountOutputTypeSelectSchema).nullish()
}).strict();
var ChecklistCompleteCountOutputTypeSelectSchema = z$2.object({
  items: z$2.boolean().optional()
}).strict();
var ChecklistCompleteSelectSchema = z$2.object({
  id: z$2.boolean().optional(),
  checklistId: z$2.boolean().optional(),
  completedById: z$2.boolean().optional(),
  date: z$2.boolean().optional(),
  notes: z$2.boolean().optional(),
  createdAt: z$2.boolean().optional(),
  updatedAt: z$2.boolean().optional(),
  checklist: z$2.union([z$2.boolean(), z$2.lazy(() => QualityChecklistArgsSchema)]).optional(),
  completedBy: z$2.union([z$2.boolean(), z$2.lazy(() => UserArgsSchema)]).optional(),
  items: z$2.union([z$2.boolean(), z$2.lazy(() => ChecklistItemCompleteFindManyArgsSchema)]).optional(),
  _count: z$2.union([z$2.boolean(), z$2.lazy(() => ChecklistCompleteCountOutputTypeArgsSchema)]).optional()
}).strict();
var ChecklistItemCompleteIncludeSchema = z$2.object({
  checklistComplete: z$2.union([z$2.boolean(), z$2.lazy(() => ChecklistCompleteArgsSchema)]).optional(),
  checklistItem: z$2.union([z$2.boolean(), z$2.lazy(() => ChecklistItemArgsSchema)]).optional()
}).strict();
var ChecklistItemCompleteArgsSchema = z$2.object({
  select: z$2.lazy(() => ChecklistItemCompleteSelectSchema).optional(),
  include: z$2.lazy(() => ChecklistItemCompleteIncludeSchema).optional()
}).strict();
var ChecklistItemCompleteSelectSchema = z$2.object({
  id: z$2.boolean().optional(),
  checklistCompleteId: z$2.boolean().optional(),
  checklistItemId: z$2.boolean().optional(),
  status: z$2.boolean().optional(),
  notes: z$2.boolean().optional(),
  photoUrls: z$2.boolean().optional(),
  createdAt: z$2.boolean().optional(),
  updatedAt: z$2.boolean().optional(),
  checklistComplete: z$2.union([z$2.boolean(), z$2.lazy(() => ChecklistCompleteArgsSchema)]).optional(),
  checklistItem: z$2.union([z$2.boolean(), z$2.lazy(() => ChecklistItemArgsSchema)]).optional()
}).strict();
var SupplierPriceHistoryIncludeSchema = z$2.object({
  vendor: z$2.union([z$2.boolean(), z$2.lazy(() => VendorArgsSchema)]).optional(),
  ingredient: z$2.union([z$2.boolean(), z$2.lazy(() => IngredientArgsSchema)]).optional()
}).strict();
var SupplierPriceHistoryArgsSchema = z$2.object({
  select: z$2.lazy(() => SupplierPriceHistorySelectSchema).optional(),
  include: z$2.lazy(() => SupplierPriceHistoryIncludeSchema).optional()
}).strict();
var SupplierPriceHistorySelectSchema = z$2.object({
  id: z$2.boolean().optional(),
  vendorId: z$2.boolean().optional(),
  ingredientId: z$2.boolean().optional(),
  price: z$2.boolean().optional(),
  unit: z$2.boolean().optional(),
  startDate: z$2.boolean().optional(),
  endDate: z$2.boolean().optional(),
  notes: z$2.boolean().optional(),
  createdAt: z$2.boolean().optional(),
  updatedAt: z$2.boolean().optional(),
  vendor: z$2.union([z$2.boolean(), z$2.lazy(() => VendorArgsSchema)]).optional(),
  ingredient: z$2.union([z$2.boolean(), z$2.lazy(() => IngredientArgsSchema)]).optional()
}).strict();
var CustomerFeedbackIncludeSchema = z$2.object({
  restaurant: z$2.union([z$2.boolean(), z$2.lazy(() => RestaurantArgsSchema)]).optional(),
  menuItem: z$2.union([z$2.boolean(), z$2.lazy(() => MenuItemArgsSchema)]).optional(),
  respondedBy: z$2.union([z$2.boolean(), z$2.lazy(() => UserArgsSchema)]).optional()
}).strict();
var CustomerFeedbackArgsSchema = z$2.object({
  select: z$2.lazy(() => CustomerFeedbackSelectSchema).optional(),
  include: z$2.lazy(() => CustomerFeedbackIncludeSchema).optional()
}).strict();
var CustomerFeedbackSelectSchema = z$2.object({
  id: z$2.boolean().optional(),
  restaurantId: z$2.boolean().optional(),
  menuItemId: z$2.boolean().optional(),
  rating: z$2.boolean().optional(),
  comment: z$2.boolean().optional(),
  source: z$2.boolean().optional(),
  tags: z$2.boolean().optional(),
  status: z$2.boolean().optional(),
  responseText: z$2.boolean().optional(),
  respondedAt: z$2.boolean().optional(),
  respondedById: z$2.boolean().optional(),
  createdAt: z$2.boolean().optional(),
  updatedAt: z$2.boolean().optional(),
  restaurant: z$2.union([z$2.boolean(), z$2.lazy(() => RestaurantArgsSchema)]).optional(),
  menuItem: z$2.union([z$2.boolean(), z$2.lazy(() => MenuItemArgsSchema)]).optional(),
  respondedBy: z$2.union([z$2.boolean(), z$2.lazy(() => UserArgsSchema)]).optional()
}).strict();
var DietaryRestrictionIncludeSchema = z$2.object({
  menuItems: z$2.union([z$2.boolean(), z$2.lazy(() => MenuItemFindManyArgsSchema)]).optional(),
  recipes: z$2.union([z$2.boolean(), z$2.lazy(() => RecipeFindManyArgsSchema)]).optional(),
  ingredients: z$2.union([z$2.boolean(), z$2.lazy(() => IngredientFindManyArgsSchema)]).optional(),
  _count: z$2.union([z$2.boolean(), z$2.lazy(() => DietaryRestrictionCountOutputTypeArgsSchema)]).optional()
}).strict();
var DietaryRestrictionArgsSchema = z$2.object({
  select: z$2.lazy(() => DietaryRestrictionSelectSchema).optional(),
  include: z$2.lazy(() => DietaryRestrictionIncludeSchema).optional()
}).strict();
var DietaryRestrictionCountOutputTypeArgsSchema = z$2.object({
  select: z$2.lazy(() => DietaryRestrictionCountOutputTypeSelectSchema).nullish()
}).strict();
var DietaryRestrictionCountOutputTypeSelectSchema = z$2.object({
  menuItems: z$2.boolean().optional(),
  recipes: z$2.boolean().optional(),
  ingredients: z$2.boolean().optional()
}).strict();
var DietaryRestrictionSelectSchema = z$2.object({
  id: z$2.boolean().optional(),
  name: z$2.boolean().optional(),
  description: z$2.boolean().optional(),
  icon: z$2.boolean().optional(),
  createdAt: z$2.boolean().optional(),
  updatedAt: z$2.boolean().optional(),
  menuItems: z$2.union([z$2.boolean(), z$2.lazy(() => MenuItemFindManyArgsSchema)]).optional(),
  recipes: z$2.union([z$2.boolean(), z$2.lazy(() => RecipeFindManyArgsSchema)]).optional(),
  ingredients: z$2.union([z$2.boolean(), z$2.lazy(() => IngredientFindManyArgsSchema)]).optional(),
  _count: z$2.union([z$2.boolean(), z$2.lazy(() => DietaryRestrictionCountOutputTypeArgsSchema)]).optional()
}).strict();
var RecipeTagIncludeSchema = z$2.object({
  recipes: z$2.union([z$2.boolean(), z$2.lazy(() => RecipeFindManyArgsSchema)]).optional(),
  _count: z$2.union([z$2.boolean(), z$2.lazy(() => RecipeTagCountOutputTypeArgsSchema)]).optional()
}).strict();
var RecipeTagArgsSchema = z$2.object({
  select: z$2.lazy(() => RecipeTagSelectSchema).optional(),
  include: z$2.lazy(() => RecipeTagIncludeSchema).optional()
}).strict();
var RecipeTagCountOutputTypeArgsSchema = z$2.object({
  select: z$2.lazy(() => RecipeTagCountOutputTypeSelectSchema).nullish()
}).strict();
var RecipeTagCountOutputTypeSelectSchema = z$2.object({
  recipes: z$2.boolean().optional()
}).strict();
var RecipeTagSelectSchema = z$2.object({
  id: z$2.boolean().optional(),
  name: z$2.boolean().optional(),
  description: z$2.boolean().optional(),
  createdAt: z$2.boolean().optional(),
  updatedAt: z$2.boolean().optional(),
  recipes: z$2.union([z$2.boolean(), z$2.lazy(() => RecipeFindManyArgsSchema)]).optional(),
  _count: z$2.union([z$2.boolean(), z$2.lazy(() => RecipeTagCountOutputTypeArgsSchema)]).optional()
}).strict();
var LeftoverItemIncludeSchema = z$2.object({
  restaurant: z$2.union([z$2.boolean(), z$2.lazy(() => RestaurantArgsSchema)]).optional(),
  menuItem: z$2.union([z$2.boolean(), z$2.lazy(() => MenuItemArgsSchema)]).optional(),
  recordedBy: z$2.union([z$2.boolean(), z$2.lazy(() => UserArgsSchema)]).optional()
}).strict();
var LeftoverItemArgsSchema = z$2.object({
  select: z$2.lazy(() => LeftoverItemSelectSchema).optional(),
  include: z$2.lazy(() => LeftoverItemIncludeSchema).optional()
}).strict();
var LeftoverItemSelectSchema = z$2.object({
  id: z$2.boolean().optional(),
  restaurantId: z$2.boolean().optional(),
  date: z$2.boolean().optional(),
  menuItemId: z$2.boolean().optional(),
  quantity: z$2.boolean().optional(),
  reason: z$2.boolean().optional(),
  recordedById: z$2.boolean().optional(),
  createdAt: z$2.boolean().optional(),
  updatedAt: z$2.boolean().optional(),
  restaurant: z$2.union([z$2.boolean(), z$2.lazy(() => RestaurantArgsSchema)]).optional(),
  menuItem: z$2.union([z$2.boolean(), z$2.lazy(() => MenuItemArgsSchema)]).optional(),
  recordedBy: z$2.union([z$2.boolean(), z$2.lazy(() => UserArgsSchema)]).optional()
}).strict();
var WasteRecordIncludeSchema = z$2.object({
  restaurant: z$2.union([z$2.boolean(), z$2.lazy(() => RestaurantArgsSchema)]).optional(),
  ingrediente: z$2.union([z$2.boolean(), z$2.lazy(() => IngredientArgsSchema)]).optional(),
  recordedBy: z$2.union([z$2.boolean(), z$2.lazy(() => UserArgsSchema)]).optional()
}).strict();
var WasteRecordArgsSchema = z$2.object({
  select: z$2.lazy(() => WasteRecordSelectSchema).optional(),
  include: z$2.lazy(() => WasteRecordIncludeSchema).optional()
}).strict();
var WasteRecordSelectSchema = z$2.object({
  id: z$2.boolean().optional(),
  restaurantId: z$2.boolean().optional(),
  date: z$2.boolean().optional(),
  ingredientId: z$2.boolean().optional(),
  quantity: z$2.boolean().optional(),
  unit: z$2.boolean().optional(),
  reason: z$2.boolean().optional(),
  recordedById: z$2.boolean().optional(),
  createdAt: z$2.boolean().optional(),
  updatedAt: z$2.boolean().optional(),
  restaurant: z$2.union([z$2.boolean(), z$2.lazy(() => RestaurantArgsSchema)]).optional(),
  ingrediente: z$2.union([z$2.boolean(), z$2.lazy(() => IngredientArgsSchema)]).optional(),
  recordedBy: z$2.union([z$2.boolean(), z$2.lazy(() => UserArgsSchema)]).optional()
}).strict();
var ProductionPlanIncludeSchema = z$2.object({
  restaurant: z$2.union([z$2.boolean(), z$2.lazy(() => RestaurantArgsSchema)]).optional(),
  createdBy: z$2.union([z$2.boolean(), z$2.lazy(() => UserArgsSchema)]).optional(),
  items: z$2.union([z$2.boolean(), z$2.lazy(() => ProductionPlanItemFindManyArgsSchema)]).optional(),
  _count: z$2.union([z$2.boolean(), z$2.lazy(() => ProductionPlanCountOutputTypeArgsSchema)]).optional()
}).strict();
var ProductionPlanArgsSchema = z$2.object({
  select: z$2.lazy(() => ProductionPlanSelectSchema).optional(),
  include: z$2.lazy(() => ProductionPlanIncludeSchema).optional()
}).strict();
var ProductionPlanCountOutputTypeArgsSchema = z$2.object({
  select: z$2.lazy(() => ProductionPlanCountOutputTypeSelectSchema).nullish()
}).strict();
var ProductionPlanCountOutputTypeSelectSchema = z$2.object({
  items: z$2.boolean().optional()
}).strict();
var ProductionPlanSelectSchema = z$2.object({
  id: z$2.boolean().optional(),
  restaurantId: z$2.boolean().optional(),
  date: z$2.boolean().optional(),
  createdById: z$2.boolean().optional(),
  createdAt: z$2.boolean().optional(),
  updatedAt: z$2.boolean().optional(),
  restaurant: z$2.union([z$2.boolean(), z$2.lazy(() => RestaurantArgsSchema)]).optional(),
  createdBy: z$2.union([z$2.boolean(), z$2.lazy(() => UserArgsSchema)]).optional(),
  items: z$2.union([z$2.boolean(), z$2.lazy(() => ProductionPlanItemFindManyArgsSchema)]).optional(),
  _count: z$2.union([z$2.boolean(), z$2.lazy(() => ProductionPlanCountOutputTypeArgsSchema)]).optional()
}).strict();
var ProductionPlanItemIncludeSchema = z$2.object({
  productionPlan: z$2.union([z$2.boolean(), z$2.lazy(() => ProductionPlanArgsSchema)]).optional(),
  recipe: z$2.union([z$2.boolean(), z$2.lazy(() => RecipeArgsSchema)]).optional(),
  assignedTo: z$2.union([z$2.boolean(), z$2.lazy(() => UserArgsSchema)]).optional()
}).strict();
var ProductionPlanItemArgsSchema = z$2.object({
  select: z$2.lazy(() => ProductionPlanItemSelectSchema).optional(),
  include: z$2.lazy(() => ProductionPlanItemIncludeSchema).optional()
}).strict();
var ProductionPlanItemSelectSchema = z$2.object({
  id: z$2.boolean().optional(),
  productionPlanId: z$2.boolean().optional(),
  recipeId: z$2.boolean().optional(),
  quantity: z$2.boolean().optional(),
  unit: z$2.boolean().optional(),
  assignedToId: z$2.boolean().optional(),
  createdAt: z$2.boolean().optional(),
  updatedAt: z$2.boolean().optional(),
  productionPlan: z$2.union([z$2.boolean(), z$2.lazy(() => ProductionPlanArgsSchema)]).optional(),
  recipe: z$2.union([z$2.boolean(), z$2.lazy(() => RecipeArgsSchema)]).optional(),
  assignedTo: z$2.union([z$2.boolean(), z$2.lazy(() => UserArgsSchema)]).optional()
}).strict();
var ShiftTaskIncludeSchema = z$2.object({
  shift: z$2.union([z$2.boolean(), z$2.lazy(() => ShiftArgsSchema)]).optional()
}).strict();
var ShiftTaskArgsSchema = z$2.object({
  select: z$2.lazy(() => ShiftTaskSelectSchema).optional(),
  include: z$2.lazy(() => ShiftTaskIncludeSchema).optional()
}).strict();
var ShiftTaskSelectSchema = z$2.object({
  id: z$2.boolean().optional(),
  shiftId: z$2.boolean().optional(),
  taskType: z$2.boolean().optional(),
  startTime: z$2.boolean().optional(),
  endTime: z$2.boolean().optional(),
  duration: z$2.boolean().optional(),
  notes: z$2.boolean().optional(),
  createdAt: z$2.boolean().optional(),
  updatedAt: z$2.boolean().optional(),
  shift: z$2.union([z$2.boolean(), z$2.lazy(() => ShiftArgsSchema)]).optional()
}).strict();
var AvailabilityIncludeSchema = z$2.object({
  user: z$2.union([z$2.boolean(), z$2.lazy(() => UserArgsSchema)]).optional()
}).strict();
var AvailabilityArgsSchema = z$2.object({
  select: z$2.lazy(() => AvailabilitySelectSchema).optional(),
  include: z$2.lazy(() => AvailabilityIncludeSchema).optional()
}).strict();
var AvailabilitySelectSchema = z$2.object({
  id: z$2.boolean().optional(),
  userId: z$2.boolean().optional(),
  dayOfWeek: z$2.boolean().optional(),
  startTime: z$2.boolean().optional(),
  endTime: z$2.boolean().optional(),
  createdAt: z$2.boolean().optional(),
  updatedAt: z$2.boolean().optional(),
  user: z$2.union([z$2.boolean(), z$2.lazy(() => UserArgsSchema)]).optional()
}).strict();
var SchedulingConstraintIncludeSchema = z$2.object({
  user: z$2.union([z$2.boolean(), z$2.lazy(() => UserArgsSchema)]).optional()
}).strict();
var SchedulingConstraintArgsSchema = z$2.object({
  select: z$2.lazy(() => SchedulingConstraintSelectSchema).optional(),
  include: z$2.lazy(() => SchedulingConstraintIncludeSchema).optional()
}).strict();
var SchedulingConstraintSelectSchema = z$2.object({
  id: z$2.boolean().optional(),
  userId: z$2.boolean().optional(),
  date: z$2.boolean().optional(),
  constraintsType: z$2.boolean().optional(),
  startTime: z$2.boolean().optional(),
  endTime: z$2.boolean().optional(),
  notes: z$2.boolean().optional(),
  createdAt: z$2.boolean().optional(),
  updatedAt: z$2.boolean().optional(),
  user: z$2.union([z$2.boolean(), z$2.lazy(() => UserArgsSchema)]).optional()
}).strict();
var InventoryWithdrawalIncludeSchema = z$2.object({
  inventoryItem: z$2.union([z$2.boolean(), z$2.lazy(() => InventoryItemArgsSchema)]).optional(),
  recipe: z$2.union([z$2.boolean(), z$2.lazy(() => RecipeArgsSchema)]).optional(),
  createdBy: z$2.union([z$2.boolean(), z$2.lazy(() => UserArgsSchema)]).optional()
}).strict();
var InventoryWithdrawalArgsSchema = z$2.object({
  select: z$2.lazy(() => InventoryWithdrawalSelectSchema).optional(),
  include: z$2.lazy(() => InventoryWithdrawalIncludeSchema).optional()
}).strict();
var InventoryWithdrawalSelectSchema = z$2.object({
  id: z$2.boolean().optional(),
  inventoryItemId: z$2.boolean().optional(),
  dateTime: z$2.boolean().optional(),
  quantity: z$2.boolean().optional(),
  unit: z$2.boolean().optional(),
  recipeId: z$2.boolean().optional(),
  createdById: z$2.boolean().optional(),
  createdAt: z$2.boolean().optional(),
  updatedAt: z$2.boolean().optional(),
  inventoryItem: z$2.union([z$2.boolean(), z$2.lazy(() => InventoryItemArgsSchema)]).optional(),
  recipe: z$2.union([z$2.boolean(), z$2.lazy(() => RecipeArgsSchema)]).optional(),
  createdBy: z$2.union([z$2.boolean(), z$2.lazy(() => UserArgsSchema)]).optional()
}).strict();
var AllergenIncludeSchema = z$2.object({
  ingredients: z$2.union([z$2.boolean(), z$2.lazy(() => IngredientAllergenFindManyArgsSchema)]).optional(),
  _count: z$2.union([z$2.boolean(), z$2.lazy(() => AllergenCountOutputTypeArgsSchema)]).optional()
}).strict();
var AllergenArgsSchema = z$2.object({
  select: z$2.lazy(() => AllergenSelectSchema).optional(),
  include: z$2.lazy(() => AllergenIncludeSchema).optional()
}).strict();
var AllergenCountOutputTypeArgsSchema = z$2.object({
  select: z$2.lazy(() => AllergenCountOutputTypeSelectSchema).nullish()
}).strict();
var AllergenCountOutputTypeSelectSchema = z$2.object({
  ingredients: z$2.boolean().optional()
}).strict();
var AllergenSelectSchema = z$2.object({
  id: z$2.boolean().optional(),
  name: z$2.boolean().optional(),
  description: z$2.boolean().optional(),
  ingredients: z$2.union([z$2.boolean(), z$2.lazy(() => IngredientAllergenFindManyArgsSchema)]).optional(),
  _count: z$2.union([z$2.boolean(), z$2.lazy(() => AllergenCountOutputTypeArgsSchema)]).optional()
}).strict();
var IngredientAllergenIncludeSchema = z$2.object({
  ingredient: z$2.union([z$2.boolean(), z$2.lazy(() => IngredientArgsSchema)]).optional(),
  allergen: z$2.union([z$2.boolean(), z$2.lazy(() => AllergenArgsSchema)]).optional()
}).strict();
var IngredientAllergenArgsSchema = z$2.object({
  select: z$2.lazy(() => IngredientAllergenSelectSchema).optional(),
  include: z$2.lazy(() => IngredientAllergenIncludeSchema).optional()
}).strict();
var IngredientAllergenSelectSchema = z$2.object({
  id: z$2.boolean().optional(),
  ingredientId: z$2.boolean().optional(),
  allergenId: z$2.boolean().optional(),
  ingredient: z$2.union([z$2.boolean(), z$2.lazy(() => IngredientArgsSchema)]).optional(),
  allergen: z$2.union([z$2.boolean(), z$2.lazy(() => AllergenArgsSchema)]).optional()
}).strict();
var NutritionalRecommendationIncludeSchema = z$2.object({
  menuItem: z$2.union([z$2.boolean(), z$2.lazy(() => MenuItemArgsSchema)]).optional()
}).strict();
var NutritionalRecommendationArgsSchema = z$2.object({
  select: z$2.lazy(() => NutritionalRecommendationSelectSchema).optional(),
  include: z$2.lazy(() => NutritionalRecommendationIncludeSchema).optional()
}).strict();
var NutritionalRecommendationSelectSchema = z$2.object({
  id: z$2.boolean().optional(),
  menuItemId: z$2.boolean().optional(),
  recommendation: z$2.boolean().optional(),
  createdAt: z$2.boolean().optional(),
  updatedAt: z$2.boolean().optional(),
  menuItem: z$2.union([z$2.boolean(), z$2.lazy(() => MenuItemArgsSchema)]).optional()
}).strict();
var EarlyAccessSelectSchema = z$2.object({
  id: z$2.boolean().optional(),
  email: z$2.boolean().optional(),
  isEmailSent: z$2.boolean().optional(),
  createdAt: z$2.boolean().optional(),
  updatedAt: z$2.boolean().optional()
}).strict();
var OrganizationIncludeSchema = z$2.object({
  restaurants: z$2.union([z$2.boolean(), z$2.lazy(() => RestaurantFindManyArgsSchema)]).optional(),
  users: z$2.union([z$2.boolean(), z$2.lazy(() => UserFindManyArgsSchema)]).optional(),
  _count: z$2.union([z$2.boolean(), z$2.lazy(() => OrganizationCountOutputTypeArgsSchema)]).optional()
}).strict();
var OrganizationArgsSchema = z$2.object({
  select: z$2.lazy(() => OrganizationSelectSchema).optional(),
  include: z$2.lazy(() => OrganizationIncludeSchema).optional()
}).strict();
var OrganizationCountOutputTypeArgsSchema = z$2.object({
  select: z$2.lazy(() => OrganizationCountOutputTypeSelectSchema).nullish()
}).strict();
var OrganizationCountOutputTypeSelectSchema = z$2.object({
  restaurants: z$2.boolean().optional(),
  users: z$2.boolean().optional()
}).strict();
var OrganizationSelectSchema = z$2.object({
  id: z$2.boolean().optional(),
  name: z$2.boolean().optional(),
  imageUrl: z$2.boolean().optional(),
  createdAt: z$2.boolean().optional(),
  updatedAt: z$2.boolean().optional(),
  restaurants: z$2.union([z$2.boolean(), z$2.lazy(() => RestaurantFindManyArgsSchema)]).optional(),
  users: z$2.union([z$2.boolean(), z$2.lazy(() => UserFindManyArgsSchema)]).optional(),
  _count: z$2.union([z$2.boolean(), z$2.lazy(() => OrganizationCountOutputTypeArgsSchema)]).optional()
}).strict();
var RestaurantIncludeSchema = z$2.object({
  organization: z$2.union([z$2.boolean(), z$2.lazy(() => OrganizationArgsSchema)]).optional(),
  users: z$2.union([z$2.boolean(), z$2.lazy(() => UserFindManyArgsSchema)]).optional(),
  cookbooks: z$2.union([z$2.boolean(), z$2.lazy(() => CookBookFindManyArgsSchema)]).optional(),
  inventory: z$2.union([z$2.boolean(), z$2.lazy(() => InventoryArgsSchema)]).optional(),
  orders: z$2.union([z$2.boolean(), z$2.lazy(() => OrderFindManyArgsSchema)]).optional(),
  recipes: z$2.union([z$2.boolean(), z$2.lazy(() => RecipeFindManyArgsSchema)]).optional(),
  menus: z$2.union([z$2.boolean(), z$2.lazy(() => MenuFindManyArgsSchema)]).optional(),
  salesTransactions: z$2.union([z$2.boolean(), z$2.lazy(() => SalesTransactionsFindManyArgsSchema)]).optional(),
  leftoverItem: z$2.union([z$2.boolean(), z$2.lazy(() => LeftoverItemFindManyArgsSchema)]).optional(),
  wasteRecord: z$2.union([z$2.boolean(), z$2.lazy(() => WasteRecordFindManyArgsSchema)]).optional(),
  productionPlan: z$2.union([z$2.boolean(), z$2.lazy(() => ProductionPlanFindManyArgsSchema)]).optional(),
  equipment: z$2.union([z$2.boolean(), z$2.lazy(() => EquipmentFindManyArgsSchema)]).optional(),
  qualityChecklist: z$2.union([z$2.boolean(), z$2.lazy(() => QualityChecklistFindManyArgsSchema)]).optional(),
  qustomerFeedback: z$2.union([z$2.boolean(), z$2.lazy(() => CustomerFeedbackFindManyArgsSchema)]).optional(),
  _count: z$2.union([z$2.boolean(), z$2.lazy(() => RestaurantCountOutputTypeArgsSchema)]).optional()
}).strict();
var RestaurantArgsSchema = z$2.object({
  select: z$2.lazy(() => RestaurantSelectSchema).optional(),
  include: z$2.lazy(() => RestaurantIncludeSchema).optional()
}).strict();
var RestaurantCountOutputTypeArgsSchema = z$2.object({
  select: z$2.lazy(() => RestaurantCountOutputTypeSelectSchema).nullish()
}).strict();
var RestaurantCountOutputTypeSelectSchema = z$2.object({
  users: z$2.boolean().optional(),
  cookbooks: z$2.boolean().optional(),
  orders: z$2.boolean().optional(),
  recipes: z$2.boolean().optional(),
  menus: z$2.boolean().optional(),
  salesTransactions: z$2.boolean().optional(),
  leftoverItem: z$2.boolean().optional(),
  wasteRecord: z$2.boolean().optional(),
  productionPlan: z$2.boolean().optional(),
  equipment: z$2.boolean().optional(),
  qualityChecklist: z$2.boolean().optional(),
  qustomerFeedback: z$2.boolean().optional()
}).strict();
var RestaurantSelectSchema = z$2.object({
  id: z$2.boolean().optional(),
  name: z$2.boolean().optional(),
  imageUrl: z$2.boolean().optional(),
  address: z$2.boolean().optional(),
  city: z$2.boolean().optional(),
  zipCode: z$2.boolean().optional(),
  state: z$2.boolean().optional(),
  owner: z$2.boolean().optional(),
  organizationId: z$2.boolean().optional(),
  foodCost: z$2.boolean().optional(),
  createdAt: z$2.boolean().optional(),
  updatedAt: z$2.boolean().optional(),
  isDeleted: z$2.boolean().optional(),
  deleted: z$2.boolean().optional(),
  organization: z$2.union([z$2.boolean(), z$2.lazy(() => OrganizationArgsSchema)]).optional(),
  users: z$2.union([z$2.boolean(), z$2.lazy(() => UserFindManyArgsSchema)]).optional(),
  cookbooks: z$2.union([z$2.boolean(), z$2.lazy(() => CookBookFindManyArgsSchema)]).optional(),
  inventory: z$2.union([z$2.boolean(), z$2.lazy(() => InventoryArgsSchema)]).optional(),
  orders: z$2.union([z$2.boolean(), z$2.lazy(() => OrderFindManyArgsSchema)]).optional(),
  recipes: z$2.union([z$2.boolean(), z$2.lazy(() => RecipeFindManyArgsSchema)]).optional(),
  menus: z$2.union([z$2.boolean(), z$2.lazy(() => MenuFindManyArgsSchema)]).optional(),
  salesTransactions: z$2.union([z$2.boolean(), z$2.lazy(() => SalesTransactionsFindManyArgsSchema)]).optional(),
  leftoverItem: z$2.union([z$2.boolean(), z$2.lazy(() => LeftoverItemFindManyArgsSchema)]).optional(),
  wasteRecord: z$2.union([z$2.boolean(), z$2.lazy(() => WasteRecordFindManyArgsSchema)]).optional(),
  productionPlan: z$2.union([z$2.boolean(), z$2.lazy(() => ProductionPlanFindManyArgsSchema)]).optional(),
  equipment: z$2.union([z$2.boolean(), z$2.lazy(() => EquipmentFindManyArgsSchema)]).optional(),
  qualityChecklist: z$2.union([z$2.boolean(), z$2.lazy(() => QualityChecklistFindManyArgsSchema)]).optional(),
  qustomerFeedback: z$2.union([z$2.boolean(), z$2.lazy(() => CustomerFeedbackFindManyArgsSchema)]).optional(),
  _count: z$2.union([z$2.boolean(), z$2.lazy(() => RestaurantCountOutputTypeArgsSchema)]).optional()
}).strict();
var UserIncludeSchema = z$2.object({
  organization: z$2.union([z$2.boolean(), z$2.lazy(() => OrganizationArgsSchema)]).optional(),
  restaurant: z$2.union([z$2.boolean(), z$2.lazy(() => RestaurantArgsSchema)]).optional(),
  shifts: z$2.union([z$2.boolean(), z$2.lazy(() => ShiftFindManyArgsSchema)]).optional(),
  prepItems: z$2.union([z$2.boolean(), z$2.lazy(() => PrepItemFindManyArgsSchema)]).optional(),
  inventoryUpdates: z$2.union([z$2.boolean(), z$2.lazy(() => InventoryItemFindManyArgsSchema)]).optional(),
  sessions: z$2.union([z$2.boolean(), z$2.lazy(() => SessionFindManyArgsSchema)]).optional(),
  passwordResets: z$2.union([z$2.boolean(), z$2.lazy(() => PasswordResetFindManyArgsSchema)]).optional(),
  leftoverItem: z$2.union([z$2.boolean(), z$2.lazy(() => LeftoverItemFindManyArgsSchema)]).optional(),
  wasteRecord: z$2.union([z$2.boolean(), z$2.lazy(() => WasteRecordFindManyArgsSchema)]).optional(),
  productionPlan: z$2.union([z$2.boolean(), z$2.lazy(() => ProductionPlanFindManyArgsSchema)]).optional(),
  productionPlanItem: z$2.union([z$2.boolean(), z$2.lazy(() => ProductionPlanItemFindManyArgsSchema)]).optional(),
  availability: z$2.union([z$2.boolean(), z$2.lazy(() => AvailabilityFindManyArgsSchema)]).optional(),
  schedulingConstraint: z$2.union([z$2.boolean(), z$2.lazy(() => SchedulingConstraintFindManyArgsSchema)]).optional(),
  inventoryWithdrawal: z$2.union([z$2.boolean(), z$2.lazy(() => InventoryWithdrawalFindManyArgsSchema)]).optional(),
  checklistComplete: z$2.union([z$2.boolean(), z$2.lazy(() => ChecklistCompleteFindManyArgsSchema)]).optional(),
  customerFeedback: z$2.union([z$2.boolean(), z$2.lazy(() => CustomerFeedbackFindManyArgsSchema)]).optional(),
  recipeVersionsCreated: z$2.union([z$2.boolean(), z$2.lazy(() => RecipeVersionFindManyArgsSchema)]).optional(),
  recipeVersionsApproved: z$2.union([z$2.boolean(), z$2.lazy(() => RecipeVersionFindManyArgsSchema)]).optional(),
  _count: z$2.union([z$2.boolean(), z$2.lazy(() => UserCountOutputTypeArgsSchema)]).optional()
}).strict();
var UserArgsSchema = z$2.object({
  select: z$2.lazy(() => UserSelectSchema).optional(),
  include: z$2.lazy(() => UserIncludeSchema).optional()
}).strict();
var UserCountOutputTypeArgsSchema = z$2.object({
  select: z$2.lazy(() => UserCountOutputTypeSelectSchema).nullish()
}).strict();
var UserCountOutputTypeSelectSchema = z$2.object({
  shifts: z$2.boolean().optional(),
  prepItems: z$2.boolean().optional(),
  inventoryUpdates: z$2.boolean().optional(),
  sessions: z$2.boolean().optional(),
  passwordResets: z$2.boolean().optional(),
  leftoverItem: z$2.boolean().optional(),
  wasteRecord: z$2.boolean().optional(),
  productionPlan: z$2.boolean().optional(),
  productionPlanItem: z$2.boolean().optional(),
  availability: z$2.boolean().optional(),
  schedulingConstraint: z$2.boolean().optional(),
  inventoryWithdrawal: z$2.boolean().optional(),
  checklistComplete: z$2.boolean().optional(),
  customerFeedback: z$2.boolean().optional(),
  recipeVersionsCreated: z$2.boolean().optional(),
  recipeVersionsApproved: z$2.boolean().optional()
}).strict();
var UserSelectSchema = z$2.object({
  id: z$2.boolean().optional(),
  email: z$2.boolean().optional(),
  sub: z$2.boolean().optional(),
  passwordHash: z$2.boolean().optional(),
  firstName: z$2.boolean().optional(),
  lastName: z$2.boolean().optional(),
  profileImage: z$2.boolean().optional(),
  verified: z$2.boolean().optional(),
  role: z$2.boolean().optional(),
  organizationId: z$2.boolean().optional(),
  restaurantId: z$2.boolean().optional(),
  createdAt: z$2.boolean().optional(),
  updatedAt: z$2.boolean().optional(),
  organization: z$2.union([z$2.boolean(), z$2.lazy(() => OrganizationArgsSchema)]).optional(),
  restaurant: z$2.union([z$2.boolean(), z$2.lazy(() => RestaurantArgsSchema)]).optional(),
  shifts: z$2.union([z$2.boolean(), z$2.lazy(() => ShiftFindManyArgsSchema)]).optional(),
  prepItems: z$2.union([z$2.boolean(), z$2.lazy(() => PrepItemFindManyArgsSchema)]).optional(),
  inventoryUpdates: z$2.union([z$2.boolean(), z$2.lazy(() => InventoryItemFindManyArgsSchema)]).optional(),
  sessions: z$2.union([z$2.boolean(), z$2.lazy(() => SessionFindManyArgsSchema)]).optional(),
  passwordResets: z$2.union([z$2.boolean(), z$2.lazy(() => PasswordResetFindManyArgsSchema)]).optional(),
  leftoverItem: z$2.union([z$2.boolean(), z$2.lazy(() => LeftoverItemFindManyArgsSchema)]).optional(),
  wasteRecord: z$2.union([z$2.boolean(), z$2.lazy(() => WasteRecordFindManyArgsSchema)]).optional(),
  productionPlan: z$2.union([z$2.boolean(), z$2.lazy(() => ProductionPlanFindManyArgsSchema)]).optional(),
  productionPlanItem: z$2.union([z$2.boolean(), z$2.lazy(() => ProductionPlanItemFindManyArgsSchema)]).optional(),
  availability: z$2.union([z$2.boolean(), z$2.lazy(() => AvailabilityFindManyArgsSchema)]).optional(),
  schedulingConstraint: z$2.union([z$2.boolean(), z$2.lazy(() => SchedulingConstraintFindManyArgsSchema)]).optional(),
  inventoryWithdrawal: z$2.union([z$2.boolean(), z$2.lazy(() => InventoryWithdrawalFindManyArgsSchema)]).optional(),
  checklistComplete: z$2.union([z$2.boolean(), z$2.lazy(() => ChecklistCompleteFindManyArgsSchema)]).optional(),
  customerFeedback: z$2.union([z$2.boolean(), z$2.lazy(() => CustomerFeedbackFindManyArgsSchema)]).optional(),
  recipeVersionsCreated: z$2.union([z$2.boolean(), z$2.lazy(() => RecipeVersionFindManyArgsSchema)]).optional(),
  recipeVersionsApproved: z$2.union([z$2.boolean(), z$2.lazy(() => RecipeVersionFindManyArgsSchema)]).optional(),
  _count: z$2.union([z$2.boolean(), z$2.lazy(() => UserCountOutputTypeArgsSchema)]).optional()
}).strict();
var SessionIncludeSchema = z$2.object({
  user: z$2.union([z$2.boolean(), z$2.lazy(() => UserArgsSchema)]).optional()
}).strict();
var SessionArgsSchema = z$2.object({
  select: z$2.lazy(() => SessionSelectSchema).optional(),
  include: z$2.lazy(() => SessionIncludeSchema).optional()
}).strict();
var SessionSelectSchema = z$2.object({
  id: z$2.boolean().optional(),
  userId: z$2.boolean().optional(),
  code: z$2.boolean().optional(),
  token: z$2.boolean().optional(),
  expiresAt: z$2.boolean().optional(),
  createdAt: z$2.boolean().optional(),
  user: z$2.union([z$2.boolean(), z$2.lazy(() => UserArgsSchema)]).optional()
}).strict();
var CookBookIncludeSchema = z$2.object({
  recipes: z$2.union([z$2.boolean(), z$2.lazy(() => RecipeFindManyArgsSchema)]).optional(),
  restaurant: z$2.union([z$2.boolean(), z$2.lazy(() => RestaurantArgsSchema)]).optional(),
  _count: z$2.union([z$2.boolean(), z$2.lazy(() => CookBookCountOutputTypeArgsSchema)]).optional()
}).strict();
var CookBookArgsSchema = z$2.object({
  select: z$2.lazy(() => CookBookSelectSchema).optional(),
  include: z$2.lazy(() => CookBookIncludeSchema).optional()
}).strict();
var CookBookCountOutputTypeArgsSchema = z$2.object({
  select: z$2.lazy(() => CookBookCountOutputTypeSelectSchema).nullish()
}).strict();
var CookBookCountOutputTypeSelectSchema = z$2.object({
  recipes: z$2.boolean().optional()
}).strict();
var CookBookSelectSchema = z$2.object({
  id: z$2.boolean().optional(),
  name: z$2.boolean().optional(),
  imageUrl: z$2.boolean().optional(),
  category: z$2.boolean().optional(),
  restaurantId: z$2.boolean().optional(),
  recipes: z$2.union([z$2.boolean(), z$2.lazy(() => RecipeFindManyArgsSchema)]).optional(),
  restaurant: z$2.union([z$2.boolean(), z$2.lazy(() => RestaurantArgsSchema)]).optional(),
  _count: z$2.union([z$2.boolean(), z$2.lazy(() => CookBookCountOutputTypeArgsSchema)]).optional()
}).strict();
var RecipeIncludeSchema = z$2.object({
  restaurant: z$2.union([z$2.boolean(), z$2.lazy(() => RestaurantArgsSchema)]).optional(),
  cookBook: z$2.union([z$2.boolean(), z$2.lazy(() => CookBookArgsSchema)]).optional(),
  ingredients: z$2.union([z$2.boolean(), z$2.lazy(() => RecipeIngredientFindManyArgsSchema)]).optional(),
  instructions: z$2.union([z$2.boolean(), z$2.lazy(() => RecipeInstructionFindManyArgsSchema)]).optional(),
  menuItems: z$2.union([z$2.boolean(), z$2.lazy(() => MenuItemFindManyArgsSchema)]).optional(),
  foodCostHistory: z$2.union([z$2.boolean(), z$2.lazy(() => FoodCostHistoryFindManyArgsSchema)]).optional(),
  prepHistory: z$2.union([z$2.boolean(), z$2.lazy(() => PrepHistoryFindManyArgsSchema)]).optional(),
  prepBoards: z$2.union([z$2.boolean(), z$2.lazy(() => PrepBoardFindManyArgsSchema)]).optional(),
  prepItems: z$2.union([z$2.boolean(), z$2.lazy(() => PrepItemFindManyArgsSchema)]).optional(),
  MenuItemRecipe: z$2.union([z$2.boolean(), z$2.lazy(() => MenuItemRecipeFindManyArgsSchema)]).optional(),
  ProductionPlanItem: z$2.union([z$2.boolean(), z$2.lazy(() => ProductionPlanItemFindManyArgsSchema)]).optional(),
  InventoryWithdrawal: z$2.union([z$2.boolean(), z$2.lazy(() => InventoryWithdrawalFindManyArgsSchema)]).optional(),
  tags: z$2.union([z$2.boolean(), z$2.lazy(() => RecipeTagFindManyArgsSchema)]).optional(),
  versions: z$2.union([z$2.boolean(), z$2.lazy(() => RecipeVersionFindManyArgsSchema)]).optional(),
  equipment: z$2.union([z$2.boolean(), z$2.lazy(() => RecipeEquipmentFindManyArgsSchema)]).optional(),
  dietaryRestrictions: z$2.union([z$2.boolean(), z$2.lazy(() => DietaryRestrictionFindManyArgsSchema)]).optional(),
  _count: z$2.union([z$2.boolean(), z$2.lazy(() => RecipeCountOutputTypeArgsSchema)]).optional()
}).strict();
var RecipeArgsSchema = z$2.object({
  select: z$2.lazy(() => RecipeSelectSchema).optional(),
  include: z$2.lazy(() => RecipeIncludeSchema).optional()
}).strict();
var RecipeCountOutputTypeArgsSchema = z$2.object({
  select: z$2.lazy(() => RecipeCountOutputTypeSelectSchema).nullish()
}).strict();
var RecipeCountOutputTypeSelectSchema = z$2.object({
  ingredients: z$2.boolean().optional(),
  instructions: z$2.boolean().optional(),
  menuItems: z$2.boolean().optional(),
  foodCostHistory: z$2.boolean().optional(),
  prepHistory: z$2.boolean().optional(),
  prepBoards: z$2.boolean().optional(),
  prepItems: z$2.boolean().optional(),
  MenuItemRecipe: z$2.boolean().optional(),
  ProductionPlanItem: z$2.boolean().optional(),
  InventoryWithdrawal: z$2.boolean().optional(),
  tags: z$2.boolean().optional(),
  versions: z$2.boolean().optional(),
  equipment: z$2.boolean().optional(),
  dietaryRestrictions: z$2.boolean().optional()
}).strict();
var RecipeSelectSchema = z$2.object({
  id: z$2.boolean().optional(),
  name: z$2.boolean().optional(),
  imageUrl: z$2.boolean().optional(),
  description: z$2.boolean().optional(),
  servings: z$2.boolean().optional(),
  cookTime: z$2.boolean().optional(),
  prepTime: z$2.boolean().optional(),
  frequency: z$2.boolean().optional(),
  restaurantId: z$2.boolean().optional(),
  cookBookId: z$2.boolean().optional(),
  foodCost: z$2.boolean().optional(),
  isDeleted: z$2.boolean().optional(),
  createdAt: z$2.boolean().optional(),
  updatedAt: z$2.boolean().optional(),
  restaurant: z$2.union([z$2.boolean(), z$2.lazy(() => RestaurantArgsSchema)]).optional(),
  cookBook: z$2.union([z$2.boolean(), z$2.lazy(() => CookBookArgsSchema)]).optional(),
  ingredients: z$2.union([z$2.boolean(), z$2.lazy(() => RecipeIngredientFindManyArgsSchema)]).optional(),
  instructions: z$2.union([z$2.boolean(), z$2.lazy(() => RecipeInstructionFindManyArgsSchema)]).optional(),
  menuItems: z$2.union([z$2.boolean(), z$2.lazy(() => MenuItemFindManyArgsSchema)]).optional(),
  foodCostHistory: z$2.union([z$2.boolean(), z$2.lazy(() => FoodCostHistoryFindManyArgsSchema)]).optional(),
  prepHistory: z$2.union([z$2.boolean(), z$2.lazy(() => PrepHistoryFindManyArgsSchema)]).optional(),
  prepBoards: z$2.union([z$2.boolean(), z$2.lazy(() => PrepBoardFindManyArgsSchema)]).optional(),
  prepItems: z$2.union([z$2.boolean(), z$2.lazy(() => PrepItemFindManyArgsSchema)]).optional(),
  MenuItemRecipe: z$2.union([z$2.boolean(), z$2.lazy(() => MenuItemRecipeFindManyArgsSchema)]).optional(),
  ProductionPlanItem: z$2.union([z$2.boolean(), z$2.lazy(() => ProductionPlanItemFindManyArgsSchema)]).optional(),
  InventoryWithdrawal: z$2.union([z$2.boolean(), z$2.lazy(() => InventoryWithdrawalFindManyArgsSchema)]).optional(),
  tags: z$2.union([z$2.boolean(), z$2.lazy(() => RecipeTagFindManyArgsSchema)]).optional(),
  versions: z$2.union([z$2.boolean(), z$2.lazy(() => RecipeVersionFindManyArgsSchema)]).optional(),
  equipment: z$2.union([z$2.boolean(), z$2.lazy(() => RecipeEquipmentFindManyArgsSchema)]).optional(),
  dietaryRestrictions: z$2.union([z$2.boolean(), z$2.lazy(() => DietaryRestrictionFindManyArgsSchema)]).optional(),
  _count: z$2.union([z$2.boolean(), z$2.lazy(() => RecipeCountOutputTypeArgsSchema)]).optional()
}).strict();
var IngredientIncludeSchema = z$2.object({
  recipeIngredients: z$2.union([z$2.boolean(), z$2.lazy(() => RecipeIngredientFindManyArgsSchema)]).optional(),
  inventoryItems: z$2.union([z$2.boolean(), z$2.lazy(() => InventoryItemFindManyArgsSchema)]).optional(),
  orderItems: z$2.union([z$2.boolean(), z$2.lazy(() => OrderItemFindManyArgsSchema)]).optional(),
  vendors: z$2.union([z$2.boolean(), z$2.lazy(() => VendorFindManyArgsSchema)]).optional(),
  WasteRecord: z$2.union([z$2.boolean(), z$2.lazy(() => WasteRecordFindManyArgsSchema)]).optional(),
  IngredientAllergen: z$2.union([z$2.boolean(), z$2.lazy(() => IngredientAllergenFindManyArgsSchema)]).optional(),
  SupplierPriceHistory: z$2.union([z$2.boolean(), z$2.lazy(() => SupplierPriceHistoryFindManyArgsSchema)]).optional(),
  DietaryRestriction: z$2.union([z$2.boolean(), z$2.lazy(() => DietaryRestrictionArgsSchema)]).optional(),
  _count: z$2.union([z$2.boolean(), z$2.lazy(() => IngredientCountOutputTypeArgsSchema)]).optional()
}).strict();
var IngredientArgsSchema = z$2.object({
  select: z$2.lazy(() => IngredientSelectSchema).optional(),
  include: z$2.lazy(() => IngredientIncludeSchema).optional()
}).strict();
var IngredientCountOutputTypeArgsSchema = z$2.object({
  select: z$2.lazy(() => IngredientCountOutputTypeSelectSchema).nullish()
}).strict();
var IngredientCountOutputTypeSelectSchema = z$2.object({
  recipeIngredients: z$2.boolean().optional(),
  inventoryItems: z$2.boolean().optional(),
  orderItems: z$2.boolean().optional(),
  vendors: z$2.boolean().optional(),
  WasteRecord: z$2.boolean().optional(),
  IngredientAllergen: z$2.boolean().optional(),
  SupplierPriceHistory: z$2.boolean().optional()
}).strict();
var IngredientSelectSchema = z$2.object({
  id: z$2.boolean().optional(),
  name: z$2.boolean().optional(),
  category: z$2.boolean().optional(),
  price: z$2.boolean().optional(),
  dietaryRestrictionId: z$2.boolean().optional(),
  recipeIngredients: z$2.union([z$2.boolean(), z$2.lazy(() => RecipeIngredientFindManyArgsSchema)]).optional(),
  inventoryItems: z$2.union([z$2.boolean(), z$2.lazy(() => InventoryItemFindManyArgsSchema)]).optional(),
  orderItems: z$2.union([z$2.boolean(), z$2.lazy(() => OrderItemFindManyArgsSchema)]).optional(),
  vendors: z$2.union([z$2.boolean(), z$2.lazy(() => VendorFindManyArgsSchema)]).optional(),
  WasteRecord: z$2.union([z$2.boolean(), z$2.lazy(() => WasteRecordFindManyArgsSchema)]).optional(),
  IngredientAllergen: z$2.union([z$2.boolean(), z$2.lazy(() => IngredientAllergenFindManyArgsSchema)]).optional(),
  SupplierPriceHistory: z$2.union([z$2.boolean(), z$2.lazy(() => SupplierPriceHistoryFindManyArgsSchema)]).optional(),
  DietaryRestriction: z$2.union([z$2.boolean(), z$2.lazy(() => DietaryRestrictionArgsSchema)]).optional(),
  _count: z$2.union([z$2.boolean(), z$2.lazy(() => IngredientCountOutputTypeArgsSchema)]).optional()
}).strict();
var RecipeIngredientIncludeSchema = z$2.object({
  recipe: z$2.union([z$2.boolean(), z$2.lazy(() => RecipeArgsSchema)]).optional(),
  ingredient: z$2.union([z$2.boolean(), z$2.lazy(() => IngredientArgsSchema)]).optional(),
  RecipeVersion: z$2.union([z$2.boolean(), z$2.lazy(() => RecipeVersionArgsSchema)]).optional()
}).strict();
var RecipeIngredientArgsSchema = z$2.object({
  select: z$2.lazy(() => RecipeIngredientSelectSchema).optional(),
  include: z$2.lazy(() => RecipeIngredientIncludeSchema).optional()
}).strict();
var RecipeIngredientSelectSchema = z$2.object({
  id: z$2.boolean().optional(),
  recipeId: z$2.boolean().optional(),
  ingredientId: z$2.boolean().optional(),
  quantity: z$2.boolean().optional(),
  unit: z$2.boolean().optional(),
  joinAt: z$2.boolean().optional(),
  recipeVersionId: z$2.boolean().optional(),
  recipe: z$2.union([z$2.boolean(), z$2.lazy(() => RecipeArgsSchema)]).optional(),
  ingredient: z$2.union([z$2.boolean(), z$2.lazy(() => IngredientArgsSchema)]).optional(),
  RecipeVersion: z$2.union([z$2.boolean(), z$2.lazy(() => RecipeVersionArgsSchema)]).optional()
}).strict();
var RecipeInstructionIncludeSchema = z$2.object({
  recipe: z$2.union([z$2.boolean(), z$2.lazy(() => RecipeArgsSchema)]).optional(),
  RecipeVersion: z$2.union([z$2.boolean(), z$2.lazy(() => RecipeVersionArgsSchema)]).optional()
}).strict();
var RecipeInstructionArgsSchema = z$2.object({
  select: z$2.lazy(() => RecipeInstructionSelectSchema).optional(),
  include: z$2.lazy(() => RecipeInstructionIncludeSchema).optional()
}).strict();
var RecipeInstructionSelectSchema = z$2.object({
  id: z$2.boolean().optional(),
  recipeId: z$2.boolean().optional(),
  stepNumber: z$2.boolean().optional(),
  instruction: z$2.boolean().optional(),
  imageUrl: z$2.boolean().optional(),
  recipeVersionId: z$2.boolean().optional(),
  recipe: z$2.union([z$2.boolean(), z$2.lazy(() => RecipeArgsSchema)]).optional(),
  RecipeVersion: z$2.union([z$2.boolean(), z$2.lazy(() => RecipeVersionArgsSchema)]).optional()
}).strict();
var InventoryIncludeSchema = z$2.object({
  restaurant: z$2.union([z$2.boolean(), z$2.lazy(() => RestaurantArgsSchema)]).optional(),
  items: z$2.union([z$2.boolean(), z$2.lazy(() => InventoryItemFindManyArgsSchema)]).optional(),
  _count: z$2.union([z$2.boolean(), z$2.lazy(() => InventoryCountOutputTypeArgsSchema)]).optional()
}).strict();
var InventoryArgsSchema = z$2.object({
  select: z$2.lazy(() => InventorySelectSchema).optional(),
  include: z$2.lazy(() => InventoryIncludeSchema).optional()
}).strict();
var InventoryCountOutputTypeArgsSchema = z$2.object({
  select: z$2.lazy(() => InventoryCountOutputTypeSelectSchema).nullish()
}).strict();
var InventoryCountOutputTypeSelectSchema = z$2.object({
  items: z$2.boolean().optional()
}).strict();
var InventorySelectSchema = z$2.object({
  id: z$2.boolean().optional(),
  restaurantId: z$2.boolean().optional(),
  restaurant: z$2.union([z$2.boolean(), z$2.lazy(() => RestaurantArgsSchema)]).optional(),
  items: z$2.union([z$2.boolean(), z$2.lazy(() => InventoryItemFindManyArgsSchema)]).optional(),
  _count: z$2.union([z$2.boolean(), z$2.lazy(() => InventoryCountOutputTypeArgsSchema)]).optional()
}).strict();
var InventoryItemIncludeSchema = z$2.object({
  inventory: z$2.union([z$2.boolean(), z$2.lazy(() => InventoryArgsSchema)]).optional(),
  ingredient: z$2.union([z$2.boolean(), z$2.lazy(() => IngredientArgsSchema)]).optional(),
  lastUpdatedBy: z$2.union([z$2.boolean(), z$2.lazy(() => UserArgsSchema)]).optional(),
  InventoryWithdrawal: z$2.union([z$2.boolean(), z$2.lazy(() => InventoryWithdrawalFindManyArgsSchema)]).optional(),
  _count: z$2.union([z$2.boolean(), z$2.lazy(() => InventoryItemCountOutputTypeArgsSchema)]).optional()
}).strict();
var InventoryItemArgsSchema = z$2.object({
  select: z$2.lazy(() => InventoryItemSelectSchema).optional(),
  include: z$2.lazy(() => InventoryItemIncludeSchema).optional()
}).strict();
var InventoryItemCountOutputTypeArgsSchema = z$2.object({
  select: z$2.lazy(() => InventoryItemCountOutputTypeSelectSchema).nullish()
}).strict();
var InventoryItemCountOutputTypeSelectSchema = z$2.object({
  InventoryWithdrawal: z$2.boolean().optional()
}).strict();
var InventoryItemSelectSchema = z$2.object({
  id: z$2.boolean().optional(),
  inventoryId: z$2.boolean().optional(),
  ingredientId: z$2.boolean().optional(),
  quantity: z$2.boolean().optional(),
  unit: z$2.boolean().optional(),
  minQuantity: z$2.boolean().optional(),
  restockThreshold: z$2.boolean().optional(),
  lastUpdatedById: z$2.boolean().optional(),
  lastUpdated: z$2.boolean().optional(),
  inventory: z$2.union([z$2.boolean(), z$2.lazy(() => InventoryArgsSchema)]).optional(),
  ingredient: z$2.union([z$2.boolean(), z$2.lazy(() => IngredientArgsSchema)]).optional(),
  lastUpdatedBy: z$2.union([z$2.boolean(), z$2.lazy(() => UserArgsSchema)]).optional(),
  InventoryWithdrawal: z$2.union([z$2.boolean(), z$2.lazy(() => InventoryWithdrawalFindManyArgsSchema)]).optional(),
  _count: z$2.union([z$2.boolean(), z$2.lazy(() => InventoryItemCountOutputTypeArgsSchema)]).optional()
}).strict();
var OrderIncludeSchema = z$2.object({
  restaurant: z$2.union([z$2.boolean(), z$2.lazy(() => RestaurantArgsSchema)]).optional(),
  vendor: z$2.union([z$2.boolean(), z$2.lazy(() => VendorArgsSchema)]).optional(),
  items: z$2.union([z$2.boolean(), z$2.lazy(() => OrderItemFindManyArgsSchema)]).optional(),
  _count: z$2.union([z$2.boolean(), z$2.lazy(() => OrderCountOutputTypeArgsSchema)]).optional()
}).strict();
var OrderArgsSchema = z$2.object({
  select: z$2.lazy(() => OrderSelectSchema).optional(),
  include: z$2.lazy(() => OrderIncludeSchema).optional()
}).strict();
var OrderCountOutputTypeArgsSchema = z$2.object({
  select: z$2.lazy(() => OrderCountOutputTypeSelectSchema).nullish()
}).strict();
var OrderCountOutputTypeSelectSchema = z$2.object({
  items: z$2.boolean().optional()
}).strict();
var OrderSelectSchema = z$2.object({
  id: z$2.boolean().optional(),
  restaurantId: z$2.boolean().optional(),
  vendorId: z$2.boolean().optional(),
  status: z$2.boolean().optional(),
  createdAt: z$2.boolean().optional(),
  updatedAt: z$2.boolean().optional(),
  restaurant: z$2.union([z$2.boolean(), z$2.lazy(() => RestaurantArgsSchema)]).optional(),
  vendor: z$2.union([z$2.boolean(), z$2.lazy(() => VendorArgsSchema)]).optional(),
  items: z$2.union([z$2.boolean(), z$2.lazy(() => OrderItemFindManyArgsSchema)]).optional(),
  _count: z$2.union([z$2.boolean(), z$2.lazy(() => OrderCountOutputTypeArgsSchema)]).optional()
}).strict();
var OrderItemIncludeSchema = z$2.object({
  order: z$2.union([z$2.boolean(), z$2.lazy(() => OrderArgsSchema)]).optional(),
  ingredient: z$2.union([z$2.boolean(), z$2.lazy(() => IngredientArgsSchema)]).optional()
}).strict();
var OrderItemArgsSchema = z$2.object({
  select: z$2.lazy(() => OrderItemSelectSchema).optional(),
  include: z$2.lazy(() => OrderItemIncludeSchema).optional()
}).strict();
var OrderItemSelectSchema = z$2.object({
  id: z$2.boolean().optional(),
  orderId: z$2.boolean().optional(),
  ingredientId: z$2.boolean().optional(),
  quantity: z$2.boolean().optional(),
  unit: z$2.boolean().optional(),
  price: z$2.boolean().optional(),
  order: z$2.union([z$2.boolean(), z$2.lazy(() => OrderArgsSchema)]).optional(),
  ingredient: z$2.union([z$2.boolean(), z$2.lazy(() => IngredientArgsSchema)]).optional()
}).strict();
var VendorIncludeSchema = z$2.object({
  orders: z$2.union([z$2.boolean(), z$2.lazy(() => OrderFindManyArgsSchema)]).optional(),
  ingredients: z$2.union([z$2.boolean(), z$2.lazy(() => IngredientFindManyArgsSchema)]).optional(),
  supplierPriceHistory: z$2.union([z$2.boolean(), z$2.lazy(() => SupplierPriceHistoryFindManyArgsSchema)]).optional(),
  _count: z$2.union([z$2.boolean(), z$2.lazy(() => VendorCountOutputTypeArgsSchema)]).optional()
}).strict();
var VendorArgsSchema = z$2.object({
  select: z$2.lazy(() => VendorSelectSchema).optional(),
  include: z$2.lazy(() => VendorIncludeSchema).optional()
}).strict();
var VendorCountOutputTypeArgsSchema = z$2.object({
  select: z$2.lazy(() => VendorCountOutputTypeSelectSchema).nullish()
}).strict();
var VendorCountOutputTypeSelectSchema = z$2.object({
  orders: z$2.boolean().optional(),
  ingredients: z$2.boolean().optional(),
  supplierPriceHistory: z$2.boolean().optional()
}).strict();
var VendorSelectSchema = z$2.object({
  id: z$2.boolean().optional(),
  name: z$2.boolean().optional(),
  contact: z$2.boolean().optional(),
  email: z$2.boolean().optional(),
  phone: z$2.boolean().optional(),
  createdAt: z$2.boolean().optional(),
  updatedAt: z$2.boolean().optional(),
  orders: z$2.union([z$2.boolean(), z$2.lazy(() => OrderFindManyArgsSchema)]).optional(),
  ingredients: z$2.union([z$2.boolean(), z$2.lazy(() => IngredientFindManyArgsSchema)]).optional(),
  supplierPriceHistory: z$2.union([z$2.boolean(), z$2.lazy(() => SupplierPriceHistoryFindManyArgsSchema)]).optional(),
  _count: z$2.union([z$2.boolean(), z$2.lazy(() => VendorCountOutputTypeArgsSchema)]).optional()
}).strict();
var ShiftIncludeSchema = z$2.object({
  user: z$2.union([z$2.boolean(), z$2.lazy(() => UserArgsSchema)]).optional(),
  ShiftTask: z$2.union([z$2.boolean(), z$2.lazy(() => ShiftTaskFindManyArgsSchema)]).optional(),
  _count: z$2.union([z$2.boolean(), z$2.lazy(() => ShiftCountOutputTypeArgsSchema)]).optional()
}).strict();
var ShiftArgsSchema = z$2.object({
  select: z$2.lazy(() => ShiftSelectSchema).optional(),
  include: z$2.lazy(() => ShiftIncludeSchema).optional()
}).strict();
var ShiftCountOutputTypeArgsSchema = z$2.object({
  select: z$2.lazy(() => ShiftCountOutputTypeSelectSchema).nullish()
}).strict();
var ShiftCountOutputTypeSelectSchema = z$2.object({
  ShiftTask: z$2.boolean().optional()
}).strict();
var ShiftSelectSchema = z$2.object({
  id: z$2.boolean().optional(),
  userId: z$2.boolean().optional(),
  startTime: z$2.boolean().optional(),
  endTime: z$2.boolean().optional(),
  status: z$2.boolean().optional(),
  user: z$2.union([z$2.boolean(), z$2.lazy(() => UserArgsSchema)]).optional(),
  ShiftTask: z$2.union([z$2.boolean(), z$2.lazy(() => ShiftTaskFindManyArgsSchema)]).optional(),
  _count: z$2.union([z$2.boolean(), z$2.lazy(() => ShiftCountOutputTypeArgsSchema)]).optional()
}).strict();
var PrepBoardIncludeSchema = z$2.object({
  recipes: z$2.union([z$2.boolean(), z$2.lazy(() => RecipeFindManyArgsSchema)]).optional(),
  prepItems: z$2.union([z$2.boolean(), z$2.lazy(() => PrepItemFindManyArgsSchema)]).optional(),
  _count: z$2.union([z$2.boolean(), z$2.lazy(() => PrepBoardCountOutputTypeArgsSchema)]).optional()
}).strict();
var PrepBoardArgsSchema = z$2.object({
  select: z$2.lazy(() => PrepBoardSelectSchema).optional(),
  include: z$2.lazy(() => PrepBoardIncludeSchema).optional()
}).strict();
var PrepBoardCountOutputTypeArgsSchema = z$2.object({
  select: z$2.lazy(() => PrepBoardCountOutputTypeSelectSchema).nullish()
}).strict();
var PrepBoardCountOutputTypeSelectSchema = z$2.object({
  recipes: z$2.boolean().optional(),
  prepItems: z$2.boolean().optional()
}).strict();
var PrepBoardSelectSchema = z$2.object({
  id: z$2.boolean().optional(),
  name: z$2.boolean().optional(),
  status: z$2.boolean().optional(),
  createdAt: z$2.boolean().optional(),
  updatedAt: z$2.boolean().optional(),
  recipes: z$2.union([z$2.boolean(), z$2.lazy(() => RecipeFindManyArgsSchema)]).optional(),
  prepItems: z$2.union([z$2.boolean(), z$2.lazy(() => PrepItemFindManyArgsSchema)]).optional(),
  _count: z$2.union([z$2.boolean(), z$2.lazy(() => PrepBoardCountOutputTypeArgsSchema)]).optional()
}).strict();
var PrepItemIncludeSchema = z$2.object({
  prepBoard: z$2.union([z$2.boolean(), z$2.lazy(() => PrepBoardArgsSchema)]).optional(),
  recipe: z$2.union([z$2.boolean(), z$2.lazy(() => RecipeArgsSchema)]).optional(),
  assignedTo: z$2.union([z$2.boolean(), z$2.lazy(() => UserArgsSchema)]).optional()
}).strict();
var PrepItemArgsSchema = z$2.object({
  select: z$2.lazy(() => PrepItemSelectSchema).optional(),
  include: z$2.lazy(() => PrepItemIncludeSchema).optional()
}).strict();
var PrepItemSelectSchema = z$2.object({
  id: z$2.boolean().optional(),
  prepBoardId: z$2.boolean().optional(),
  recipeId: z$2.boolean().optional(),
  quantity: z$2.boolean().optional(),
  status: z$2.boolean().optional(),
  assignedToId: z$2.boolean().optional(),
  prepBoard: z$2.union([z$2.boolean(), z$2.lazy(() => PrepBoardArgsSchema)]).optional(),
  recipe: z$2.union([z$2.boolean(), z$2.lazy(() => RecipeArgsSchema)]).optional(),
  assignedTo: z$2.union([z$2.boolean(), z$2.lazy(() => UserArgsSchema)]).optional()
}).strict();
var PasswordResetIncludeSchema = z$2.object({
  user: z$2.union([z$2.boolean(), z$2.lazy(() => UserArgsSchema)]).optional()
}).strict();
var PasswordResetArgsSchema = z$2.object({
  select: z$2.lazy(() => PasswordResetSelectSchema).optional(),
  include: z$2.lazy(() => PasswordResetIncludeSchema).optional()
}).strict();
var PasswordResetSelectSchema = z$2.object({
  id: z$2.boolean().optional(),
  token: z$2.boolean().optional(),
  userId: z$2.boolean().optional(),
  expiresAt: z$2.boolean().optional(),
  createdAt: z$2.boolean().optional(),
  updatedAt: z$2.boolean().optional(),
  user: z$2.union([z$2.boolean(), z$2.lazy(() => UserArgsSchema)]).optional()
}).strict();
var MenuIncludeSchema = z$2.object({
  restaurant: z$2.union([z$2.boolean(), z$2.lazy(() => RestaurantArgsSchema)]).optional(),
  menuItems: z$2.union([z$2.boolean(), z$2.lazy(() => MenuItemFindManyArgsSchema)]).optional(),
  MenuCategory: z$2.union([z$2.boolean(), z$2.lazy(() => MenuCategoryFindManyArgsSchema)]).optional(),
  _count: z$2.union([z$2.boolean(), z$2.lazy(() => MenuCountOutputTypeArgsSchema)]).optional()
}).strict();
var MenuArgsSchema = z$2.object({
  select: z$2.lazy(() => MenuSelectSchema).optional(),
  include: z$2.lazy(() => MenuIncludeSchema).optional()
}).strict();
var MenuCountOutputTypeArgsSchema = z$2.object({
  select: z$2.lazy(() => MenuCountOutputTypeSelectSchema).nullish()
}).strict();
var MenuCountOutputTypeSelectSchema = z$2.object({
  menuItems: z$2.boolean().optional(),
  MenuCategory: z$2.boolean().optional()
}).strict();
var MenuSelectSchema = z$2.object({
  id: z$2.boolean().optional(),
  name: z$2.boolean().optional(),
  restaurantId: z$2.boolean().optional(),
  createdAt: z$2.boolean().optional(),
  updatedAt: z$2.boolean().optional(),
  restaurant: z$2.union([z$2.boolean(), z$2.lazy(() => RestaurantArgsSchema)]).optional(),
  menuItems: z$2.union([z$2.boolean(), z$2.lazy(() => MenuItemFindManyArgsSchema)]).optional(),
  MenuCategory: z$2.union([z$2.boolean(), z$2.lazy(() => MenuCategoryFindManyArgsSchema)]).optional(),
  _count: z$2.union([z$2.boolean(), z$2.lazy(() => MenuCountOutputTypeArgsSchema)]).optional()
}).strict();
var MenuItemRecipeIncludeSchema = z$2.object({
  menuItem: z$2.union([z$2.boolean(), z$2.lazy(() => MenuItemArgsSchema)]).optional(),
  recipe: z$2.union([z$2.boolean(), z$2.lazy(() => RecipeArgsSchema)]).optional()
}).strict();
var MenuItemRecipeArgsSchema = z$2.object({
  select: z$2.lazy(() => MenuItemRecipeSelectSchema).optional(),
  include: z$2.lazy(() => MenuItemRecipeIncludeSchema).optional()
}).strict();
var MenuItemRecipeSelectSchema = z$2.object({
  id: z$2.boolean().optional(),
  menuItemId: z$2.boolean().optional(),
  recipeId: z$2.boolean().optional(),
  joinAt: z$2.boolean().optional(),
  menuItem: z$2.union([z$2.boolean(), z$2.lazy(() => MenuItemArgsSchema)]).optional(),
  recipe: z$2.union([z$2.boolean(), z$2.lazy(() => RecipeArgsSchema)]).optional()
}).strict();
var MenuItemIncludeSchema = z$2.object({
  nutritionalInfo: z$2.union([z$2.boolean(), z$2.lazy(() => NutritionalInfoArgsSchema)]).optional(),
  menu: z$2.union([z$2.boolean(), z$2.lazy(() => MenuArgsSchema)]).optional(),
  recipes: z$2.union([z$2.boolean(), z$2.lazy(() => RecipeFindManyArgsSchema)]).optional(),
  menuItemRecipe: z$2.union([z$2.boolean(), z$2.lazy(() => MenuItemRecipeFindManyArgsSchema)]).optional(),
  salesTransactions: z$2.union([z$2.boolean(), z$2.lazy(() => SalesTransactionsFindManyArgsSchema)]).optional(),
  leftoverItem: z$2.union([z$2.boolean(), z$2.lazy(() => LeftoverItemFindManyArgsSchema)]).optional(),
  nutritionalRecommendation: z$2.union([z$2.boolean(), z$2.lazy(() => NutritionalRecommendationFindManyArgsSchema)]).optional(),
  category: z$2.union([z$2.boolean(), z$2.lazy(() => MenuCategoryArgsSchema)]).optional(),
  feedback: z$2.union([z$2.boolean(), z$2.lazy(() => CustomerFeedbackFindManyArgsSchema)]).optional(),
  dietaryRestrictions: z$2.union([z$2.boolean(), z$2.lazy(() => DietaryRestrictionFindManyArgsSchema)]).optional(),
  _count: z$2.union([z$2.boolean(), z$2.lazy(() => MenuItemCountOutputTypeArgsSchema)]).optional()
}).strict();
var MenuItemArgsSchema = z$2.object({
  select: z$2.lazy(() => MenuItemSelectSchema).optional(),
  include: z$2.lazy(() => MenuItemIncludeSchema).optional()
}).strict();
var MenuItemCountOutputTypeArgsSchema = z$2.object({
  select: z$2.lazy(() => MenuItemCountOutputTypeSelectSchema).nullish()
}).strict();
var MenuItemCountOutputTypeSelectSchema = z$2.object({
  recipes: z$2.boolean().optional(),
  menuItemRecipe: z$2.boolean().optional(),
  salesTransactions: z$2.boolean().optional(),
  leftoverItem: z$2.boolean().optional(),
  nutritionalRecommendation: z$2.boolean().optional(),
  feedback: z$2.boolean().optional(),
  dietaryRestrictions: z$2.boolean().optional()
}).strict();
var MenuItemSelectSchema = z$2.object({
  id: z$2.boolean().optional(),
  name: z$2.boolean().optional(),
  description: z$2.boolean().optional(),
  price: z$2.boolean().optional(),
  foodCost: z$2.boolean().optional(),
  recipeIds: z$2.boolean().optional(),
  recipeServingsAmount: z$2.boolean().optional(),
  recipeServingsCost: z$2.boolean().optional(),
  allergens: z$2.boolean().optional(),
  nutritionalInfoId: z$2.boolean().optional(),
  menuId: z$2.boolean().optional(),
  createdAt: z$2.boolean().optional(),
  updatedAt: z$2.boolean().optional(),
  categoryId: z$2.boolean().optional(),
  nutritionalInfo: z$2.union([z$2.boolean(), z$2.lazy(() => NutritionalInfoArgsSchema)]).optional(),
  menu: z$2.union([z$2.boolean(), z$2.lazy(() => MenuArgsSchema)]).optional(),
  recipes: z$2.union([z$2.boolean(), z$2.lazy(() => RecipeFindManyArgsSchema)]).optional(),
  menuItemRecipe: z$2.union([z$2.boolean(), z$2.lazy(() => MenuItemRecipeFindManyArgsSchema)]).optional(),
  salesTransactions: z$2.union([z$2.boolean(), z$2.lazy(() => SalesTransactionsFindManyArgsSchema)]).optional(),
  leftoverItem: z$2.union([z$2.boolean(), z$2.lazy(() => LeftoverItemFindManyArgsSchema)]).optional(),
  nutritionalRecommendation: z$2.union([z$2.boolean(), z$2.lazy(() => NutritionalRecommendationFindManyArgsSchema)]).optional(),
  category: z$2.union([z$2.boolean(), z$2.lazy(() => MenuCategoryArgsSchema)]).optional(),
  feedback: z$2.union([z$2.boolean(), z$2.lazy(() => CustomerFeedbackFindManyArgsSchema)]).optional(),
  dietaryRestrictions: z$2.union([z$2.boolean(), z$2.lazy(() => DietaryRestrictionFindManyArgsSchema)]).optional(),
  _count: z$2.union([z$2.boolean(), z$2.lazy(() => MenuItemCountOutputTypeArgsSchema)]).optional()
}).strict();
var NutritionalInfoIncludeSchema = z$2.object({
  menuItem: z$2.union([z$2.boolean(), z$2.lazy(() => MenuItemArgsSchema)]).optional()
}).strict();
var NutritionalInfoArgsSchema = z$2.object({
  select: z$2.lazy(() => NutritionalInfoSelectSchema).optional(),
  include: z$2.lazy(() => NutritionalInfoIncludeSchema).optional()
}).strict();
var NutritionalInfoSelectSchema = z$2.object({
  id: z$2.boolean().optional(),
  menuItemId: z$2.boolean().optional(),
  calories: z$2.boolean().optional(),
  fat: z$2.boolean().optional(),
  saturatedFat: z$2.boolean().optional(),
  transFat: z$2.boolean().optional(),
  cholesterol: z$2.boolean().optional(),
  sodium: z$2.boolean().optional(),
  carbohydrates: z$2.boolean().optional(),
  fiber: z$2.boolean().optional(),
  sugar: z$2.boolean().optional(),
  protein: z$2.boolean().optional(),
  createdAt: z$2.boolean().optional(),
  updatedAt: z$2.boolean().optional(),
  menuItem: z$2.union([z$2.boolean(), z$2.lazy(() => MenuItemArgsSchema)]).optional()
}).strict();
var FoodCostHistoryIncludeSchema = z$2.object({
  recipe: z$2.union([z$2.boolean(), z$2.lazy(() => RecipeArgsSchema)]).optional()
}).strict();
var FoodCostHistoryArgsSchema = z$2.object({
  select: z$2.lazy(() => FoodCostHistorySelectSchema).optional(),
  include: z$2.lazy(() => FoodCostHistoryIncludeSchema).optional()
}).strict();
var FoodCostHistorySelectSchema = z$2.object({
  id: z$2.boolean().optional(),
  recipeId: z$2.boolean().optional(),
  cost: z$2.boolean().optional(),
  date: z$2.boolean().optional(),
  createdAt: z$2.boolean().optional(),
  updatedAt: z$2.boolean().optional(),
  recipe: z$2.union([z$2.boolean(), z$2.lazy(() => RecipeArgsSchema)]).optional()
}).strict();
var PrepHistoryIncludeSchema = z$2.object({
  recipe: z$2.union([z$2.boolean(), z$2.lazy(() => RecipeArgsSchema)]).optional()
}).strict();
var PrepHistoryArgsSchema = z$2.object({
  select: z$2.lazy(() => PrepHistorySelectSchema).optional(),
  include: z$2.lazy(() => PrepHistoryIncludeSchema).optional()
}).strict();
var PrepHistorySelectSchema = z$2.object({
  id: z$2.boolean().optional(),
  recipeId: z$2.boolean().optional(),
  quantity: z$2.boolean().optional(),
  date: z$2.boolean().optional(),
  createdAt: z$2.boolean().optional(),
  updatedAt: z$2.boolean().optional(),
  recipe: z$2.union([z$2.boolean(), z$2.lazy(() => RecipeArgsSchema)]).optional()
}).strict();
var SalesTransactionsWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => SalesTransactionsWhereInputSchema), z$2.lazy(() => SalesTransactionsWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => SalesTransactionsWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => SalesTransactionsWhereInputSchema), z$2.lazy(() => SalesTransactionsWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  posTransactionID: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  restaurantId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  menuItemId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  price: z$2.union([z$2.lazy(() => FloatFilterSchema), z$2.number()]).optional(),
  total: z$2.union([z$2.lazy(() => FloatFilterSchema), z$2.number()]).optional(),
  transactionDate: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  restaurant: z$2.union([z$2.lazy(() => RestaurantRelationFilterSchema), z$2.lazy(() => RestaurantWhereInputSchema)]).optional(),
  menuItem: z$2.union([z$2.lazy(() => MenuItemRelationFilterSchema), z$2.lazy(() => MenuItemWhereInputSchema)]).optional()
}).strict();
var SalesTransactionsOrderByWithRelationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  posTransactionID: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional(),
  menuItemId: z$2.lazy(() => SortOrderSchema).optional(),
  price: z$2.lazy(() => SortOrderSchema).optional(),
  total: z$2.lazy(() => SortOrderSchema).optional(),
  transactionDate: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional(),
  restaurant: z$2.lazy(() => RestaurantOrderByWithRelationInputSchema).optional(),
  menuItem: z$2.lazy(() => MenuItemOrderByWithRelationInputSchema).optional()
}).strict();
var SalesTransactionsWhereUniqueInputSchema = z$2.union([
  z$2.object({
    id: z$2.number().int(),
    posTransactionID: z$2.string()
  }),
  z$2.object({
    id: z$2.number().int()
  }),
  z$2.object({
    posTransactionID: z$2.string()
  })
]).and(z$2.object({
  id: z$2.number().int().optional(),
  posTransactionID: z$2.string().optional(),
  AND: z$2.union([z$2.lazy(() => SalesTransactionsWhereInputSchema), z$2.lazy(() => SalesTransactionsWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => SalesTransactionsWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => SalesTransactionsWhereInputSchema), z$2.lazy(() => SalesTransactionsWhereInputSchema).array()]).optional(),
  restaurantId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number().int()]).optional(),
  menuItemId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number().int()]).optional(),
  price: z$2.union([z$2.lazy(() => FloatFilterSchema), z$2.number()]).optional(),
  total: z$2.union([z$2.lazy(() => FloatFilterSchema), z$2.number()]).optional(),
  transactionDate: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  restaurant: z$2.union([z$2.lazy(() => RestaurantRelationFilterSchema), z$2.lazy(() => RestaurantWhereInputSchema)]).optional(),
  menuItem: z$2.union([z$2.lazy(() => MenuItemRelationFilterSchema), z$2.lazy(() => MenuItemWhereInputSchema)]).optional()
}).strict());
var SalesTransactionsOrderByWithAggregationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  posTransactionID: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional(),
  menuItemId: z$2.lazy(() => SortOrderSchema).optional(),
  price: z$2.lazy(() => SortOrderSchema).optional(),
  total: z$2.lazy(() => SortOrderSchema).optional(),
  transactionDate: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional(),
  _count: z$2.lazy(() => SalesTransactionsCountOrderByAggregateInputSchema).optional(),
  _avg: z$2.lazy(() => SalesTransactionsAvgOrderByAggregateInputSchema).optional(),
  _max: z$2.lazy(() => SalesTransactionsMaxOrderByAggregateInputSchema).optional(),
  _min: z$2.lazy(() => SalesTransactionsMinOrderByAggregateInputSchema).optional(),
  _sum: z$2.lazy(() => SalesTransactionsSumOrderByAggregateInputSchema).optional()
}).strict();
var SalesTransactionsScalarWhereWithAggregatesInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => SalesTransactionsScalarWhereWithAggregatesInputSchema), z$2.lazy(() => SalesTransactionsScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: z$2.lazy(() => SalesTransactionsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => SalesTransactionsScalarWhereWithAggregatesInputSchema), z$2.lazy(() => SalesTransactionsScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  posTransactionID: z$2.union([z$2.lazy(() => StringNullableWithAggregatesFilterSchema), z$2.string()]).optional().nullable(),
  restaurantId: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  menuItemId: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  price: z$2.union([z$2.lazy(() => FloatWithAggregatesFilterSchema), z$2.number()]).optional(),
  total: z$2.union([z$2.lazy(() => FloatWithAggregatesFilterSchema), z$2.number()]).optional(),
  transactionDate: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional()
}).strict();
var MenuCategoryWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => MenuCategoryWhereInputSchema), z$2.lazy(() => MenuCategoryWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => MenuCategoryWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => MenuCategoryWhereInputSchema), z$2.lazy(() => MenuCategoryWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  name: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  description: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  displayOrder: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  menuId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  isActive: z$2.union([z$2.lazy(() => BoolFilterSchema), z$2.boolean()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  menu: z$2.union([z$2.lazy(() => MenuRelationFilterSchema), z$2.lazy(() => MenuWhereInputSchema)]).optional(),
  menuItems: z$2.lazy(() => MenuItemListRelationFilterSchema).optional()
}).strict();
var MenuCategoryOrderByWithRelationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  name: z$2.lazy(() => SortOrderSchema).optional(),
  description: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  displayOrder: z$2.lazy(() => SortOrderSchema).optional(),
  menuId: z$2.lazy(() => SortOrderSchema).optional(),
  isActive: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional(),
  menu: z$2.lazy(() => MenuOrderByWithRelationInputSchema).optional(),
  menuItems: z$2.lazy(() => MenuItemOrderByRelationAggregateInputSchema).optional()
}).strict();
var MenuCategoryWhereUniqueInputSchema = z$2.union([
  z$2.object({
    id: z$2.number().int(),
    menuId_name: z$2.lazy(() => MenuCategoryMenuIdNameCompoundUniqueInputSchema)
  }),
  z$2.object({
    id: z$2.number().int()
  }),
  z$2.object({
    menuId_name: z$2.lazy(() => MenuCategoryMenuIdNameCompoundUniqueInputSchema)
  })
]).and(z$2.object({
  id: z$2.number().int().optional(),
  menuId_name: z$2.lazy(() => MenuCategoryMenuIdNameCompoundUniqueInputSchema).optional(),
  AND: z$2.union([z$2.lazy(() => MenuCategoryWhereInputSchema), z$2.lazy(() => MenuCategoryWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => MenuCategoryWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => MenuCategoryWhereInputSchema), z$2.lazy(() => MenuCategoryWhereInputSchema).array()]).optional(),
  name: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  description: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  displayOrder: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number().int()]).optional(),
  menuId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number().int()]).optional(),
  isActive: z$2.union([z$2.lazy(() => BoolFilterSchema), z$2.boolean()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  menu: z$2.union([z$2.lazy(() => MenuRelationFilterSchema), z$2.lazy(() => MenuWhereInputSchema)]).optional(),
  menuItems: z$2.lazy(() => MenuItemListRelationFilterSchema).optional()
}).strict());
var MenuCategoryOrderByWithAggregationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  name: z$2.lazy(() => SortOrderSchema).optional(),
  description: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  displayOrder: z$2.lazy(() => SortOrderSchema).optional(),
  menuId: z$2.lazy(() => SortOrderSchema).optional(),
  isActive: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional(),
  _count: z$2.lazy(() => MenuCategoryCountOrderByAggregateInputSchema).optional(),
  _avg: z$2.lazy(() => MenuCategoryAvgOrderByAggregateInputSchema).optional(),
  _max: z$2.lazy(() => MenuCategoryMaxOrderByAggregateInputSchema).optional(),
  _min: z$2.lazy(() => MenuCategoryMinOrderByAggregateInputSchema).optional(),
  _sum: z$2.lazy(() => MenuCategorySumOrderByAggregateInputSchema).optional()
}).strict();
var MenuCategoryScalarWhereWithAggregatesInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => MenuCategoryScalarWhereWithAggregatesInputSchema), z$2.lazy(() => MenuCategoryScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: z$2.lazy(() => MenuCategoryScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => MenuCategoryScalarWhereWithAggregatesInputSchema), z$2.lazy(() => MenuCategoryScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  name: z$2.union([z$2.lazy(() => StringWithAggregatesFilterSchema), z$2.string()]).optional(),
  description: z$2.union([z$2.lazy(() => StringNullableWithAggregatesFilterSchema), z$2.string()]).optional().nullable(),
  displayOrder: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  menuId: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  isActive: z$2.union([z$2.lazy(() => BoolWithAggregatesFilterSchema), z$2.boolean()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional()
}).strict();
var RecipeVersionWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => RecipeVersionWhereInputSchema), z$2.lazy(() => RecipeVersionWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => RecipeVersionWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => RecipeVersionWhereInputSchema), z$2.lazy(() => RecipeVersionWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  recipeId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  versionNumber: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  description: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  changes: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  isActive: z$2.union([z$2.lazy(() => BoolFilterSchema), z$2.boolean()]).optional(),
  createdById: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  approvedById: z$2.union([z$2.lazy(() => IntNullableFilterSchema), z$2.number()]).optional().nullable(),
  approvedAt: z$2.union([z$2.lazy(() => DateTimeNullableFilterSchema), z$2.coerce.date()]).optional().nullable(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  recipe: z$2.union([z$2.lazy(() => RecipeRelationFilterSchema), z$2.lazy(() => RecipeWhereInputSchema)]).optional(),
  ingredients: z$2.lazy(() => RecipeIngredientListRelationFilterSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionListRelationFilterSchema).optional(),
  createdBy: z$2.union([z$2.lazy(() => UserRelationFilterSchema), z$2.lazy(() => UserWhereInputSchema)]).optional(),
  approvedBy: z$2.union([z$2.lazy(() => UserNullableRelationFilterSchema), z$2.lazy(() => UserWhereInputSchema)]).optional().nullable()
}).strict();
var RecipeVersionOrderByWithRelationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  recipeId: z$2.lazy(() => SortOrderSchema).optional(),
  versionNumber: z$2.lazy(() => SortOrderSchema).optional(),
  description: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  changes: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  isActive: z$2.lazy(() => SortOrderSchema).optional(),
  createdById: z$2.lazy(() => SortOrderSchema).optional(),
  approvedById: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  approvedAt: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional(),
  recipe: z$2.lazy(() => RecipeOrderByWithRelationInputSchema).optional(),
  ingredients: z$2.lazy(() => RecipeIngredientOrderByRelationAggregateInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionOrderByRelationAggregateInputSchema).optional(),
  createdBy: z$2.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  approvedBy: z$2.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();
var RecipeVersionWhereUniqueInputSchema = z$2.union([
  z$2.object({
    id: z$2.number().int(),
    recipeId_versionNumber: z$2.lazy(() => RecipeVersionRecipeIdVersionNumberCompoundUniqueInputSchema)
  }),
  z$2.object({
    id: z$2.number().int()
  }),
  z$2.object({
    recipeId_versionNumber: z$2.lazy(() => RecipeVersionRecipeIdVersionNumberCompoundUniqueInputSchema)
  })
]).and(z$2.object({
  id: z$2.number().int().optional(),
  recipeId_versionNumber: z$2.lazy(() => RecipeVersionRecipeIdVersionNumberCompoundUniqueInputSchema).optional(),
  AND: z$2.union([z$2.lazy(() => RecipeVersionWhereInputSchema), z$2.lazy(() => RecipeVersionWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => RecipeVersionWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => RecipeVersionWhereInputSchema), z$2.lazy(() => RecipeVersionWhereInputSchema).array()]).optional(),
  recipeId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number().int()]).optional(),
  versionNumber: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number().int()]).optional(),
  description: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  changes: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  isActive: z$2.union([z$2.lazy(() => BoolFilterSchema), z$2.boolean()]).optional(),
  createdById: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number().int()]).optional(),
  approvedById: z$2.union([z$2.lazy(() => IntNullableFilterSchema), z$2.number().int()]).optional().nullable(),
  approvedAt: z$2.union([z$2.lazy(() => DateTimeNullableFilterSchema), z$2.coerce.date()]).optional().nullable(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  recipe: z$2.union([z$2.lazy(() => RecipeRelationFilterSchema), z$2.lazy(() => RecipeWhereInputSchema)]).optional(),
  ingredients: z$2.lazy(() => RecipeIngredientListRelationFilterSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionListRelationFilterSchema).optional(),
  createdBy: z$2.union([z$2.lazy(() => UserRelationFilterSchema), z$2.lazy(() => UserWhereInputSchema)]).optional(),
  approvedBy: z$2.union([z$2.lazy(() => UserNullableRelationFilterSchema), z$2.lazy(() => UserWhereInputSchema)]).optional().nullable()
}).strict());
var RecipeVersionOrderByWithAggregationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  recipeId: z$2.lazy(() => SortOrderSchema).optional(),
  versionNumber: z$2.lazy(() => SortOrderSchema).optional(),
  description: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  changes: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  isActive: z$2.lazy(() => SortOrderSchema).optional(),
  createdById: z$2.lazy(() => SortOrderSchema).optional(),
  approvedById: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  approvedAt: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional(),
  _count: z$2.lazy(() => RecipeVersionCountOrderByAggregateInputSchema).optional(),
  _avg: z$2.lazy(() => RecipeVersionAvgOrderByAggregateInputSchema).optional(),
  _max: z$2.lazy(() => RecipeVersionMaxOrderByAggregateInputSchema).optional(),
  _min: z$2.lazy(() => RecipeVersionMinOrderByAggregateInputSchema).optional(),
  _sum: z$2.lazy(() => RecipeVersionSumOrderByAggregateInputSchema).optional()
}).strict();
var RecipeVersionScalarWhereWithAggregatesInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => RecipeVersionScalarWhereWithAggregatesInputSchema), z$2.lazy(() => RecipeVersionScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: z$2.lazy(() => RecipeVersionScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => RecipeVersionScalarWhereWithAggregatesInputSchema), z$2.lazy(() => RecipeVersionScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  recipeId: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  versionNumber: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  description: z$2.union([z$2.lazy(() => StringNullableWithAggregatesFilterSchema), z$2.string()]).optional().nullable(),
  changes: z$2.union([z$2.lazy(() => StringNullableWithAggregatesFilterSchema), z$2.string()]).optional().nullable(),
  isActive: z$2.union([z$2.lazy(() => BoolWithAggregatesFilterSchema), z$2.boolean()]).optional(),
  createdById: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  approvedById: z$2.union([z$2.lazy(() => IntNullableWithAggregatesFilterSchema), z$2.number()]).optional().nullable(),
  approvedAt: z$2.union([z$2.lazy(() => DateTimeNullableWithAggregatesFilterSchema), z$2.coerce.date()]).optional().nullable(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional()
}).strict();
var EquipmentWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => EquipmentWhereInputSchema), z$2.lazy(() => EquipmentWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => EquipmentWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => EquipmentWhereInputSchema), z$2.lazy(() => EquipmentWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  name: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  description: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  model: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  serialNumber: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  purchaseDate: z$2.union([z$2.lazy(() => DateTimeNullableFilterSchema), z$2.coerce.date()]).optional().nullable(),
  lastMaintenance: z$2.union([z$2.lazy(() => DateTimeNullableFilterSchema), z$2.coerce.date()]).optional().nullable(),
  nextMaintenance: z$2.union([z$2.lazy(() => DateTimeNullableFilterSchema), z$2.coerce.date()]).optional().nullable(),
  status: z$2.union([z$2.lazy(() => EnumEquipmentStatusFilterSchema), z$2.lazy(() => EquipmentStatusSchema)]).optional(),
  location: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  restaurantId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  restaurant: z$2.union([z$2.lazy(() => RestaurantRelationFilterSchema), z$2.lazy(() => RestaurantWhereInputSchema)]).optional(),
  recipes: z$2.lazy(() => RecipeEquipmentListRelationFilterSchema).optional(),
  maintenanceLogs: z$2.lazy(() => MaintenanceLogListRelationFilterSchema).optional()
}).strict();
var EquipmentOrderByWithRelationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  name: z$2.lazy(() => SortOrderSchema).optional(),
  description: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  model: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  serialNumber: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  purchaseDate: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  lastMaintenance: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  nextMaintenance: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  status: z$2.lazy(() => SortOrderSchema).optional(),
  location: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional(),
  restaurant: z$2.lazy(() => RestaurantOrderByWithRelationInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeEquipmentOrderByRelationAggregateInputSchema).optional(),
  maintenanceLogs: z$2.lazy(() => MaintenanceLogOrderByRelationAggregateInputSchema).optional()
}).strict();
var EquipmentWhereUniqueInputSchema = z$2.object({
  id: z$2.number().int()
}).and(z$2.object({
  id: z$2.number().int().optional(),
  AND: z$2.union([z$2.lazy(() => EquipmentWhereInputSchema), z$2.lazy(() => EquipmentWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => EquipmentWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => EquipmentWhereInputSchema), z$2.lazy(() => EquipmentWhereInputSchema).array()]).optional(),
  name: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  description: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  model: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  serialNumber: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  purchaseDate: z$2.union([z$2.lazy(() => DateTimeNullableFilterSchema), z$2.coerce.date()]).optional().nullable(),
  lastMaintenance: z$2.union([z$2.lazy(() => DateTimeNullableFilterSchema), z$2.coerce.date()]).optional().nullable(),
  nextMaintenance: z$2.union([z$2.lazy(() => DateTimeNullableFilterSchema), z$2.coerce.date()]).optional().nullable(),
  status: z$2.union([z$2.lazy(() => EnumEquipmentStatusFilterSchema), z$2.lazy(() => EquipmentStatusSchema)]).optional(),
  location: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  restaurantId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number().int()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  restaurant: z$2.union([z$2.lazy(() => RestaurantRelationFilterSchema), z$2.lazy(() => RestaurantWhereInputSchema)]).optional(),
  recipes: z$2.lazy(() => RecipeEquipmentListRelationFilterSchema).optional(),
  maintenanceLogs: z$2.lazy(() => MaintenanceLogListRelationFilterSchema).optional()
}).strict());
var EquipmentOrderByWithAggregationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  name: z$2.lazy(() => SortOrderSchema).optional(),
  description: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  model: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  serialNumber: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  purchaseDate: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  lastMaintenance: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  nextMaintenance: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  status: z$2.lazy(() => SortOrderSchema).optional(),
  location: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional(),
  _count: z$2.lazy(() => EquipmentCountOrderByAggregateInputSchema).optional(),
  _avg: z$2.lazy(() => EquipmentAvgOrderByAggregateInputSchema).optional(),
  _max: z$2.lazy(() => EquipmentMaxOrderByAggregateInputSchema).optional(),
  _min: z$2.lazy(() => EquipmentMinOrderByAggregateInputSchema).optional(),
  _sum: z$2.lazy(() => EquipmentSumOrderByAggregateInputSchema).optional()
}).strict();
var EquipmentScalarWhereWithAggregatesInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => EquipmentScalarWhereWithAggregatesInputSchema), z$2.lazy(() => EquipmentScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: z$2.lazy(() => EquipmentScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => EquipmentScalarWhereWithAggregatesInputSchema), z$2.lazy(() => EquipmentScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  name: z$2.union([z$2.lazy(() => StringWithAggregatesFilterSchema), z$2.string()]).optional(),
  description: z$2.union([z$2.lazy(() => StringNullableWithAggregatesFilterSchema), z$2.string()]).optional().nullable(),
  model: z$2.union([z$2.lazy(() => StringNullableWithAggregatesFilterSchema), z$2.string()]).optional().nullable(),
  serialNumber: z$2.union([z$2.lazy(() => StringNullableWithAggregatesFilterSchema), z$2.string()]).optional().nullable(),
  purchaseDate: z$2.union([z$2.lazy(() => DateTimeNullableWithAggregatesFilterSchema), z$2.coerce.date()]).optional().nullable(),
  lastMaintenance: z$2.union([z$2.lazy(() => DateTimeNullableWithAggregatesFilterSchema), z$2.coerce.date()]).optional().nullable(),
  nextMaintenance: z$2.union([z$2.lazy(() => DateTimeNullableWithAggregatesFilterSchema), z$2.coerce.date()]).optional().nullable(),
  status: z$2.union([z$2.lazy(() => EnumEquipmentStatusWithAggregatesFilterSchema), z$2.lazy(() => EquipmentStatusSchema)]).optional(),
  location: z$2.union([z$2.lazy(() => StringNullableWithAggregatesFilterSchema), z$2.string()]).optional().nullable(),
  restaurantId: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional()
}).strict();
var RecipeEquipmentWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => RecipeEquipmentWhereInputSchema), z$2.lazy(() => RecipeEquipmentWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => RecipeEquipmentWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => RecipeEquipmentWhereInputSchema), z$2.lazy(() => RecipeEquipmentWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  recipeId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  equipmentId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  notes: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  recipe: z$2.union([z$2.lazy(() => RecipeRelationFilterSchema), z$2.lazy(() => RecipeWhereInputSchema)]).optional(),
  equipment: z$2.union([z$2.lazy(() => EquipmentRelationFilterSchema), z$2.lazy(() => EquipmentWhereInputSchema)]).optional()
}).strict();
var RecipeEquipmentOrderByWithRelationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  recipeId: z$2.lazy(() => SortOrderSchema).optional(),
  equipmentId: z$2.lazy(() => SortOrderSchema).optional(),
  notes: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  recipe: z$2.lazy(() => RecipeOrderByWithRelationInputSchema).optional(),
  equipment: z$2.lazy(() => EquipmentOrderByWithRelationInputSchema).optional()
}).strict();
var RecipeEquipmentWhereUniqueInputSchema = z$2.union([
  z$2.object({
    id: z$2.number().int(),
    recipeId_equipmentId: z$2.lazy(() => RecipeEquipmentRecipeIdEquipmentIdCompoundUniqueInputSchema)
  }),
  z$2.object({
    id: z$2.number().int()
  }),
  z$2.object({
    recipeId_equipmentId: z$2.lazy(() => RecipeEquipmentRecipeIdEquipmentIdCompoundUniqueInputSchema)
  })
]).and(z$2.object({
  id: z$2.number().int().optional(),
  recipeId_equipmentId: z$2.lazy(() => RecipeEquipmentRecipeIdEquipmentIdCompoundUniqueInputSchema).optional(),
  AND: z$2.union([z$2.lazy(() => RecipeEquipmentWhereInputSchema), z$2.lazy(() => RecipeEquipmentWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => RecipeEquipmentWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => RecipeEquipmentWhereInputSchema), z$2.lazy(() => RecipeEquipmentWhereInputSchema).array()]).optional(),
  recipeId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number().int()]).optional(),
  equipmentId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number().int()]).optional(),
  notes: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  recipe: z$2.union([z$2.lazy(() => RecipeRelationFilterSchema), z$2.lazy(() => RecipeWhereInputSchema)]).optional(),
  equipment: z$2.union([z$2.lazy(() => EquipmentRelationFilterSchema), z$2.lazy(() => EquipmentWhereInputSchema)]).optional()
}).strict());
var RecipeEquipmentOrderByWithAggregationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  recipeId: z$2.lazy(() => SortOrderSchema).optional(),
  equipmentId: z$2.lazy(() => SortOrderSchema).optional(),
  notes: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  _count: z$2.lazy(() => RecipeEquipmentCountOrderByAggregateInputSchema).optional(),
  _avg: z$2.lazy(() => RecipeEquipmentAvgOrderByAggregateInputSchema).optional(),
  _max: z$2.lazy(() => RecipeEquipmentMaxOrderByAggregateInputSchema).optional(),
  _min: z$2.lazy(() => RecipeEquipmentMinOrderByAggregateInputSchema).optional(),
  _sum: z$2.lazy(() => RecipeEquipmentSumOrderByAggregateInputSchema).optional()
}).strict();
var RecipeEquipmentScalarWhereWithAggregatesInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => RecipeEquipmentScalarWhereWithAggregatesInputSchema), z$2.lazy(() => RecipeEquipmentScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: z$2.lazy(() => RecipeEquipmentScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => RecipeEquipmentScalarWhereWithAggregatesInputSchema), z$2.lazy(() => RecipeEquipmentScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  recipeId: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  equipmentId: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  notes: z$2.union([z$2.lazy(() => StringNullableWithAggregatesFilterSchema), z$2.string()]).optional().nullable()
}).strict();
var MaintenanceLogWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => MaintenanceLogWhereInputSchema), z$2.lazy(() => MaintenanceLogWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => MaintenanceLogWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => MaintenanceLogWhereInputSchema), z$2.lazy(() => MaintenanceLogWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  equipmentId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  date: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  type: z$2.union([z$2.lazy(() => EnumMaintenanceTypeFilterSchema), z$2.lazy(() => MaintenanceTypeSchema)]).optional(),
  description: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  cost: z$2.union([z$2.lazy(() => FloatNullableFilterSchema), z$2.number()]).optional().nullable(),
  performedBy: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  notes: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  equipment: z$2.union([z$2.lazy(() => EquipmentRelationFilterSchema), z$2.lazy(() => EquipmentWhereInputSchema)]).optional()
}).strict();
var MaintenanceLogOrderByWithRelationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  equipmentId: z$2.lazy(() => SortOrderSchema).optional(),
  date: z$2.lazy(() => SortOrderSchema).optional(),
  type: z$2.lazy(() => SortOrderSchema).optional(),
  description: z$2.lazy(() => SortOrderSchema).optional(),
  cost: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  performedBy: z$2.lazy(() => SortOrderSchema).optional(),
  notes: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional(),
  equipment: z$2.lazy(() => EquipmentOrderByWithRelationInputSchema).optional()
}).strict();
var MaintenanceLogWhereUniqueInputSchema = z$2.object({
  id: z$2.number().int()
}).and(z$2.object({
  id: z$2.number().int().optional(),
  AND: z$2.union([z$2.lazy(() => MaintenanceLogWhereInputSchema), z$2.lazy(() => MaintenanceLogWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => MaintenanceLogWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => MaintenanceLogWhereInputSchema), z$2.lazy(() => MaintenanceLogWhereInputSchema).array()]).optional(),
  equipmentId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number().int()]).optional(),
  date: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  type: z$2.union([z$2.lazy(() => EnumMaintenanceTypeFilterSchema), z$2.lazy(() => MaintenanceTypeSchema)]).optional(),
  description: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  cost: z$2.union([z$2.lazy(() => FloatNullableFilterSchema), z$2.number()]).optional().nullable(),
  performedBy: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  notes: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  equipment: z$2.union([z$2.lazy(() => EquipmentRelationFilterSchema), z$2.lazy(() => EquipmentWhereInputSchema)]).optional()
}).strict());
var MaintenanceLogOrderByWithAggregationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  equipmentId: z$2.lazy(() => SortOrderSchema).optional(),
  date: z$2.lazy(() => SortOrderSchema).optional(),
  type: z$2.lazy(() => SortOrderSchema).optional(),
  description: z$2.lazy(() => SortOrderSchema).optional(),
  cost: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  performedBy: z$2.lazy(() => SortOrderSchema).optional(),
  notes: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional(),
  _count: z$2.lazy(() => MaintenanceLogCountOrderByAggregateInputSchema).optional(),
  _avg: z$2.lazy(() => MaintenanceLogAvgOrderByAggregateInputSchema).optional(),
  _max: z$2.lazy(() => MaintenanceLogMaxOrderByAggregateInputSchema).optional(),
  _min: z$2.lazy(() => MaintenanceLogMinOrderByAggregateInputSchema).optional(),
  _sum: z$2.lazy(() => MaintenanceLogSumOrderByAggregateInputSchema).optional()
}).strict();
var MaintenanceLogScalarWhereWithAggregatesInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => MaintenanceLogScalarWhereWithAggregatesInputSchema), z$2.lazy(() => MaintenanceLogScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: z$2.lazy(() => MaintenanceLogScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => MaintenanceLogScalarWhereWithAggregatesInputSchema), z$2.lazy(() => MaintenanceLogScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  equipmentId: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  date: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional(),
  type: z$2.union([z$2.lazy(() => EnumMaintenanceTypeWithAggregatesFilterSchema), z$2.lazy(() => MaintenanceTypeSchema)]).optional(),
  description: z$2.union([z$2.lazy(() => StringWithAggregatesFilterSchema), z$2.string()]).optional(),
  cost: z$2.union([z$2.lazy(() => FloatNullableWithAggregatesFilterSchema), z$2.number()]).optional().nullable(),
  performedBy: z$2.union([z$2.lazy(() => StringWithAggregatesFilterSchema), z$2.string()]).optional(),
  notes: z$2.union([z$2.lazy(() => StringNullableWithAggregatesFilterSchema), z$2.string()]).optional().nullable(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional()
}).strict();
var QualityChecklistWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => QualityChecklistWhereInputSchema), z$2.lazy(() => QualityChecklistWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => QualityChecklistWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => QualityChecklistWhereInputSchema), z$2.lazy(() => QualityChecklistWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  name: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  description: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  restaurantId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  frequency: z$2.union([z$2.lazy(() => EnumChecklistFrequencyFilterSchema), z$2.lazy(() => ChecklistFrequencySchema)]).optional(),
  isActive: z$2.union([z$2.lazy(() => BoolFilterSchema), z$2.boolean()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  restaurant: z$2.union([z$2.lazy(() => RestaurantRelationFilterSchema), z$2.lazy(() => RestaurantWhereInputSchema)]).optional(),
  items: z$2.lazy(() => ChecklistItemListRelationFilterSchema).optional(),
  completions: z$2.lazy(() => ChecklistCompleteListRelationFilterSchema).optional()
}).strict();
var QualityChecklistOrderByWithRelationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  name: z$2.lazy(() => SortOrderSchema).optional(),
  description: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional(),
  frequency: z$2.lazy(() => SortOrderSchema).optional(),
  isActive: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional(),
  restaurant: z$2.lazy(() => RestaurantOrderByWithRelationInputSchema).optional(),
  items: z$2.lazy(() => ChecklistItemOrderByRelationAggregateInputSchema).optional(),
  completions: z$2.lazy(() => ChecklistCompleteOrderByRelationAggregateInputSchema).optional()
}).strict();
var QualityChecklistWhereUniqueInputSchema = z$2.object({
  id: z$2.number().int()
}).and(z$2.object({
  id: z$2.number().int().optional(),
  AND: z$2.union([z$2.lazy(() => QualityChecklistWhereInputSchema), z$2.lazy(() => QualityChecklistWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => QualityChecklistWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => QualityChecklistWhereInputSchema), z$2.lazy(() => QualityChecklistWhereInputSchema).array()]).optional(),
  name: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  description: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  restaurantId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number().int()]).optional(),
  frequency: z$2.union([z$2.lazy(() => EnumChecklistFrequencyFilterSchema), z$2.lazy(() => ChecklistFrequencySchema)]).optional(),
  isActive: z$2.union([z$2.lazy(() => BoolFilterSchema), z$2.boolean()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  restaurant: z$2.union([z$2.lazy(() => RestaurantRelationFilterSchema), z$2.lazy(() => RestaurantWhereInputSchema)]).optional(),
  items: z$2.lazy(() => ChecklistItemListRelationFilterSchema).optional(),
  completions: z$2.lazy(() => ChecklistCompleteListRelationFilterSchema).optional()
}).strict());
var QualityChecklistOrderByWithAggregationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  name: z$2.lazy(() => SortOrderSchema).optional(),
  description: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional(),
  frequency: z$2.lazy(() => SortOrderSchema).optional(),
  isActive: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional(),
  _count: z$2.lazy(() => QualityChecklistCountOrderByAggregateInputSchema).optional(),
  _avg: z$2.lazy(() => QualityChecklistAvgOrderByAggregateInputSchema).optional(),
  _max: z$2.lazy(() => QualityChecklistMaxOrderByAggregateInputSchema).optional(),
  _min: z$2.lazy(() => QualityChecklistMinOrderByAggregateInputSchema).optional(),
  _sum: z$2.lazy(() => QualityChecklistSumOrderByAggregateInputSchema).optional()
}).strict();
var QualityChecklistScalarWhereWithAggregatesInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => QualityChecklistScalarWhereWithAggregatesInputSchema), z$2.lazy(() => QualityChecklistScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: z$2.lazy(() => QualityChecklistScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => QualityChecklistScalarWhereWithAggregatesInputSchema), z$2.lazy(() => QualityChecklistScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  name: z$2.union([z$2.lazy(() => StringWithAggregatesFilterSchema), z$2.string()]).optional(),
  description: z$2.union([z$2.lazy(() => StringNullableWithAggregatesFilterSchema), z$2.string()]).optional().nullable(),
  restaurantId: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  frequency: z$2.union([z$2.lazy(() => EnumChecklistFrequencyWithAggregatesFilterSchema), z$2.lazy(() => ChecklistFrequencySchema)]).optional(),
  isActive: z$2.union([z$2.lazy(() => BoolWithAggregatesFilterSchema), z$2.boolean()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional()
}).strict();
var ChecklistItemWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => ChecklistItemWhereInputSchema), z$2.lazy(() => ChecklistItemWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => ChecklistItemWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => ChecklistItemWhereInputSchema), z$2.lazy(() => ChecklistItemWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  checklistId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  description: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  order: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  type: z$2.union([z$2.lazy(() => EnumChecklistItemTypeFilterSchema), z$2.lazy(() => ChecklistItemTypeSchema)]).optional(),
  requiredPhotos: z$2.union([z$2.lazy(() => BoolFilterSchema), z$2.boolean()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  checklist: z$2.union([z$2.lazy(() => QualityChecklistRelationFilterSchema), z$2.lazy(() => QualityChecklistWhereInputSchema)]).optional(),
  completions: z$2.lazy(() => ChecklistItemCompleteListRelationFilterSchema).optional()
}).strict();
var ChecklistItemOrderByWithRelationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  checklistId: z$2.lazy(() => SortOrderSchema).optional(),
  description: z$2.lazy(() => SortOrderSchema).optional(),
  order: z$2.lazy(() => SortOrderSchema).optional(),
  type: z$2.lazy(() => SortOrderSchema).optional(),
  requiredPhotos: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional(),
  checklist: z$2.lazy(() => QualityChecklistOrderByWithRelationInputSchema).optional(),
  completions: z$2.lazy(() => ChecklistItemCompleteOrderByRelationAggregateInputSchema).optional()
}).strict();
var ChecklistItemWhereUniqueInputSchema = z$2.object({
  id: z$2.number().int()
}).and(z$2.object({
  id: z$2.number().int().optional(),
  AND: z$2.union([z$2.lazy(() => ChecklistItemWhereInputSchema), z$2.lazy(() => ChecklistItemWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => ChecklistItemWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => ChecklistItemWhereInputSchema), z$2.lazy(() => ChecklistItemWhereInputSchema).array()]).optional(),
  checklistId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number().int()]).optional(),
  description: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  order: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number().int()]).optional(),
  type: z$2.union([z$2.lazy(() => EnumChecklistItemTypeFilterSchema), z$2.lazy(() => ChecklistItemTypeSchema)]).optional(),
  requiredPhotos: z$2.union([z$2.lazy(() => BoolFilterSchema), z$2.boolean()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  checklist: z$2.union([z$2.lazy(() => QualityChecklistRelationFilterSchema), z$2.lazy(() => QualityChecklistWhereInputSchema)]).optional(),
  completions: z$2.lazy(() => ChecklistItemCompleteListRelationFilterSchema).optional()
}).strict());
var ChecklistItemOrderByWithAggregationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  checklistId: z$2.lazy(() => SortOrderSchema).optional(),
  description: z$2.lazy(() => SortOrderSchema).optional(),
  order: z$2.lazy(() => SortOrderSchema).optional(),
  type: z$2.lazy(() => SortOrderSchema).optional(),
  requiredPhotos: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional(),
  _count: z$2.lazy(() => ChecklistItemCountOrderByAggregateInputSchema).optional(),
  _avg: z$2.lazy(() => ChecklistItemAvgOrderByAggregateInputSchema).optional(),
  _max: z$2.lazy(() => ChecklistItemMaxOrderByAggregateInputSchema).optional(),
  _min: z$2.lazy(() => ChecklistItemMinOrderByAggregateInputSchema).optional(),
  _sum: z$2.lazy(() => ChecklistItemSumOrderByAggregateInputSchema).optional()
}).strict();
var ChecklistItemScalarWhereWithAggregatesInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => ChecklistItemScalarWhereWithAggregatesInputSchema), z$2.lazy(() => ChecklistItemScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: z$2.lazy(() => ChecklistItemScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => ChecklistItemScalarWhereWithAggregatesInputSchema), z$2.lazy(() => ChecklistItemScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  checklistId: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  description: z$2.union([z$2.lazy(() => StringWithAggregatesFilterSchema), z$2.string()]).optional(),
  order: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  type: z$2.union([z$2.lazy(() => EnumChecklistItemTypeWithAggregatesFilterSchema), z$2.lazy(() => ChecklistItemTypeSchema)]).optional(),
  requiredPhotos: z$2.union([z$2.lazy(() => BoolWithAggregatesFilterSchema), z$2.boolean()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional()
}).strict();
var ChecklistCompleteWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => ChecklistCompleteWhereInputSchema), z$2.lazy(() => ChecklistCompleteWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => ChecklistCompleteWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => ChecklistCompleteWhereInputSchema), z$2.lazy(() => ChecklistCompleteWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  checklistId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  completedById: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  date: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  notes: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  checklist: z$2.union([z$2.lazy(() => QualityChecklistRelationFilterSchema), z$2.lazy(() => QualityChecklistWhereInputSchema)]).optional(),
  completedBy: z$2.union([z$2.lazy(() => UserRelationFilterSchema), z$2.lazy(() => UserWhereInputSchema)]).optional(),
  items: z$2.lazy(() => ChecklistItemCompleteListRelationFilterSchema).optional()
}).strict();
var ChecklistCompleteOrderByWithRelationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  checklistId: z$2.lazy(() => SortOrderSchema).optional(),
  completedById: z$2.lazy(() => SortOrderSchema).optional(),
  date: z$2.lazy(() => SortOrderSchema).optional(),
  notes: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional(),
  checklist: z$2.lazy(() => QualityChecklistOrderByWithRelationInputSchema).optional(),
  completedBy: z$2.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  items: z$2.lazy(() => ChecklistItemCompleteOrderByRelationAggregateInputSchema).optional()
}).strict();
var ChecklistCompleteWhereUniqueInputSchema = z$2.object({
  id: z$2.number().int()
}).and(z$2.object({
  id: z$2.number().int().optional(),
  AND: z$2.union([z$2.lazy(() => ChecklistCompleteWhereInputSchema), z$2.lazy(() => ChecklistCompleteWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => ChecklistCompleteWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => ChecklistCompleteWhereInputSchema), z$2.lazy(() => ChecklistCompleteWhereInputSchema).array()]).optional(),
  checklistId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number().int()]).optional(),
  completedById: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number().int()]).optional(),
  date: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  notes: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  checklist: z$2.union([z$2.lazy(() => QualityChecklistRelationFilterSchema), z$2.lazy(() => QualityChecklistWhereInputSchema)]).optional(),
  completedBy: z$2.union([z$2.lazy(() => UserRelationFilterSchema), z$2.lazy(() => UserWhereInputSchema)]).optional(),
  items: z$2.lazy(() => ChecklistItemCompleteListRelationFilterSchema).optional()
}).strict());
var ChecklistCompleteOrderByWithAggregationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  checklistId: z$2.lazy(() => SortOrderSchema).optional(),
  completedById: z$2.lazy(() => SortOrderSchema).optional(),
  date: z$2.lazy(() => SortOrderSchema).optional(),
  notes: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional(),
  _count: z$2.lazy(() => ChecklistCompleteCountOrderByAggregateInputSchema).optional(),
  _avg: z$2.lazy(() => ChecklistCompleteAvgOrderByAggregateInputSchema).optional(),
  _max: z$2.lazy(() => ChecklistCompleteMaxOrderByAggregateInputSchema).optional(),
  _min: z$2.lazy(() => ChecklistCompleteMinOrderByAggregateInputSchema).optional(),
  _sum: z$2.lazy(() => ChecklistCompleteSumOrderByAggregateInputSchema).optional()
}).strict();
var ChecklistCompleteScalarWhereWithAggregatesInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => ChecklistCompleteScalarWhereWithAggregatesInputSchema), z$2.lazy(() => ChecklistCompleteScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: z$2.lazy(() => ChecklistCompleteScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => ChecklistCompleteScalarWhereWithAggregatesInputSchema), z$2.lazy(() => ChecklistCompleteScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  checklistId: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  completedById: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  date: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional(),
  notes: z$2.union([z$2.lazy(() => StringNullableWithAggregatesFilterSchema), z$2.string()]).optional().nullable(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional()
}).strict();
var ChecklistItemCompleteWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => ChecklistItemCompleteWhereInputSchema), z$2.lazy(() => ChecklistItemCompleteWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => ChecklistItemCompleteWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => ChecklistItemCompleteWhereInputSchema), z$2.lazy(() => ChecklistItemCompleteWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  checklistCompleteId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  checklistItemId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  status: z$2.union([z$2.lazy(() => EnumChecklistStatusFilterSchema), z$2.lazy(() => ChecklistStatusSchema)]).optional(),
  notes: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  photoUrls: z$2.lazy(() => StringNullableListFilterSchema).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  checklistComplete: z$2.union([z$2.lazy(() => ChecklistCompleteRelationFilterSchema), z$2.lazy(() => ChecklistCompleteWhereInputSchema)]).optional(),
  checklistItem: z$2.union([z$2.lazy(() => ChecklistItemRelationFilterSchema), z$2.lazy(() => ChecklistItemWhereInputSchema)]).optional()
}).strict();
var ChecklistItemCompleteOrderByWithRelationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  checklistCompleteId: z$2.lazy(() => SortOrderSchema).optional(),
  checklistItemId: z$2.lazy(() => SortOrderSchema).optional(),
  status: z$2.lazy(() => SortOrderSchema).optional(),
  notes: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  photoUrls: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteOrderByWithRelationInputSchema).optional(),
  checklistItem: z$2.lazy(() => ChecklistItemOrderByWithRelationInputSchema).optional()
}).strict();
var ChecklistItemCompleteWhereUniqueInputSchema = z$2.object({
  id: z$2.number().int()
}).and(z$2.object({
  id: z$2.number().int().optional(),
  AND: z$2.union([z$2.lazy(() => ChecklistItemCompleteWhereInputSchema), z$2.lazy(() => ChecklistItemCompleteWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => ChecklistItemCompleteWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => ChecklistItemCompleteWhereInputSchema), z$2.lazy(() => ChecklistItemCompleteWhereInputSchema).array()]).optional(),
  checklistCompleteId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number().int()]).optional(),
  checklistItemId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number().int()]).optional(),
  status: z$2.union([z$2.lazy(() => EnumChecklistStatusFilterSchema), z$2.lazy(() => ChecklistStatusSchema)]).optional(),
  notes: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  photoUrls: z$2.lazy(() => StringNullableListFilterSchema).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  checklistComplete: z$2.union([z$2.lazy(() => ChecklistCompleteRelationFilterSchema), z$2.lazy(() => ChecklistCompleteWhereInputSchema)]).optional(),
  checklistItem: z$2.union([z$2.lazy(() => ChecklistItemRelationFilterSchema), z$2.lazy(() => ChecklistItemWhereInputSchema)]).optional()
}).strict());
var ChecklistItemCompleteOrderByWithAggregationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  checklistCompleteId: z$2.lazy(() => SortOrderSchema).optional(),
  checklistItemId: z$2.lazy(() => SortOrderSchema).optional(),
  status: z$2.lazy(() => SortOrderSchema).optional(),
  notes: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  photoUrls: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional(),
  _count: z$2.lazy(() => ChecklistItemCompleteCountOrderByAggregateInputSchema).optional(),
  _avg: z$2.lazy(() => ChecklistItemCompleteAvgOrderByAggregateInputSchema).optional(),
  _max: z$2.lazy(() => ChecklistItemCompleteMaxOrderByAggregateInputSchema).optional(),
  _min: z$2.lazy(() => ChecklistItemCompleteMinOrderByAggregateInputSchema).optional(),
  _sum: z$2.lazy(() => ChecklistItemCompleteSumOrderByAggregateInputSchema).optional()
}).strict();
var ChecklistItemCompleteScalarWhereWithAggregatesInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => ChecklistItemCompleteScalarWhereWithAggregatesInputSchema), z$2.lazy(() => ChecklistItemCompleteScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: z$2.lazy(() => ChecklistItemCompleteScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => ChecklistItemCompleteScalarWhereWithAggregatesInputSchema), z$2.lazy(() => ChecklistItemCompleteScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  checklistCompleteId: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  checklistItemId: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  status: z$2.union([z$2.lazy(() => EnumChecklistStatusWithAggregatesFilterSchema), z$2.lazy(() => ChecklistStatusSchema)]).optional(),
  notes: z$2.union([z$2.lazy(() => StringNullableWithAggregatesFilterSchema), z$2.string()]).optional().nullable(),
  photoUrls: z$2.lazy(() => StringNullableListFilterSchema).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional()
}).strict();
var SupplierPriceHistoryWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => SupplierPriceHistoryWhereInputSchema), z$2.lazy(() => SupplierPriceHistoryWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => SupplierPriceHistoryWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => SupplierPriceHistoryWhereInputSchema), z$2.lazy(() => SupplierPriceHistoryWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  vendorId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  ingredientId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  price: z$2.union([z$2.lazy(() => FloatFilterSchema), z$2.number()]).optional(),
  unit: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  startDate: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  endDate: z$2.union([z$2.lazy(() => DateTimeNullableFilterSchema), z$2.coerce.date()]).optional().nullable(),
  notes: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  vendor: z$2.union([z$2.lazy(() => VendorRelationFilterSchema), z$2.lazy(() => VendorWhereInputSchema)]).optional(),
  ingredient: z$2.union([z$2.lazy(() => IngredientRelationFilterSchema), z$2.lazy(() => IngredientWhereInputSchema)]).optional()
}).strict();
var SupplierPriceHistoryOrderByWithRelationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  vendorId: z$2.lazy(() => SortOrderSchema).optional(),
  ingredientId: z$2.lazy(() => SortOrderSchema).optional(),
  price: z$2.lazy(() => SortOrderSchema).optional(),
  unit: z$2.lazy(() => SortOrderSchema).optional(),
  startDate: z$2.lazy(() => SortOrderSchema).optional(),
  endDate: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  notes: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional(),
  vendor: z$2.lazy(() => VendorOrderByWithRelationInputSchema).optional(),
  ingredient: z$2.lazy(() => IngredientOrderByWithRelationInputSchema).optional()
}).strict();
var SupplierPriceHistoryWhereUniqueInputSchema = z$2.object({
  id: z$2.number().int()
}).and(z$2.object({
  id: z$2.number().int().optional(),
  AND: z$2.union([z$2.lazy(() => SupplierPriceHistoryWhereInputSchema), z$2.lazy(() => SupplierPriceHistoryWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => SupplierPriceHistoryWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => SupplierPriceHistoryWhereInputSchema), z$2.lazy(() => SupplierPriceHistoryWhereInputSchema).array()]).optional(),
  vendorId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number().int()]).optional(),
  ingredientId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number().int()]).optional(),
  price: z$2.union([z$2.lazy(() => FloatFilterSchema), z$2.number()]).optional(),
  unit: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  startDate: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  endDate: z$2.union([z$2.lazy(() => DateTimeNullableFilterSchema), z$2.coerce.date()]).optional().nullable(),
  notes: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  vendor: z$2.union([z$2.lazy(() => VendorRelationFilterSchema), z$2.lazy(() => VendorWhereInputSchema)]).optional(),
  ingredient: z$2.union([z$2.lazy(() => IngredientRelationFilterSchema), z$2.lazy(() => IngredientWhereInputSchema)]).optional()
}).strict());
var SupplierPriceHistoryOrderByWithAggregationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  vendorId: z$2.lazy(() => SortOrderSchema).optional(),
  ingredientId: z$2.lazy(() => SortOrderSchema).optional(),
  price: z$2.lazy(() => SortOrderSchema).optional(),
  unit: z$2.lazy(() => SortOrderSchema).optional(),
  startDate: z$2.lazy(() => SortOrderSchema).optional(),
  endDate: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  notes: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional(),
  _count: z$2.lazy(() => SupplierPriceHistoryCountOrderByAggregateInputSchema).optional(),
  _avg: z$2.lazy(() => SupplierPriceHistoryAvgOrderByAggregateInputSchema).optional(),
  _max: z$2.lazy(() => SupplierPriceHistoryMaxOrderByAggregateInputSchema).optional(),
  _min: z$2.lazy(() => SupplierPriceHistoryMinOrderByAggregateInputSchema).optional(),
  _sum: z$2.lazy(() => SupplierPriceHistorySumOrderByAggregateInputSchema).optional()
}).strict();
var SupplierPriceHistoryScalarWhereWithAggregatesInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => SupplierPriceHistoryScalarWhereWithAggregatesInputSchema), z$2.lazy(() => SupplierPriceHistoryScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: z$2.lazy(() => SupplierPriceHistoryScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => SupplierPriceHistoryScalarWhereWithAggregatesInputSchema), z$2.lazy(() => SupplierPriceHistoryScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  vendorId: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  ingredientId: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  price: z$2.union([z$2.lazy(() => FloatWithAggregatesFilterSchema), z$2.number()]).optional(),
  unit: z$2.union([z$2.lazy(() => StringWithAggregatesFilterSchema), z$2.string()]).optional(),
  startDate: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional(),
  endDate: z$2.union([z$2.lazy(() => DateTimeNullableWithAggregatesFilterSchema), z$2.coerce.date()]).optional().nullable(),
  notes: z$2.union([z$2.lazy(() => StringNullableWithAggregatesFilterSchema), z$2.string()]).optional().nullable(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional()
}).strict();
var CustomerFeedbackWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => CustomerFeedbackWhereInputSchema), z$2.lazy(() => CustomerFeedbackWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => CustomerFeedbackWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => CustomerFeedbackWhereInputSchema), z$2.lazy(() => CustomerFeedbackWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  restaurantId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  menuItemId: z$2.union([z$2.lazy(() => IntNullableFilterSchema), z$2.number()]).optional().nullable(),
  rating: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  comment: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  source: z$2.union([z$2.lazy(() => EnumFeedbackSourceFilterSchema), z$2.lazy(() => FeedbackSourceSchema)]).optional(),
  tags: z$2.lazy(() => StringNullableListFilterSchema).optional(),
  status: z$2.union([z$2.lazy(() => EnumFeedbackStatusFilterSchema), z$2.lazy(() => FeedbackStatusSchema)]).optional(),
  responseText: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  respondedAt: z$2.union([z$2.lazy(() => DateTimeNullableFilterSchema), z$2.coerce.date()]).optional().nullable(),
  respondedById: z$2.union([z$2.lazy(() => IntNullableFilterSchema), z$2.number()]).optional().nullable(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  restaurant: z$2.union([z$2.lazy(() => RestaurantRelationFilterSchema), z$2.lazy(() => RestaurantWhereInputSchema)]).optional(),
  menuItem: z$2.union([z$2.lazy(() => MenuItemNullableRelationFilterSchema), z$2.lazy(() => MenuItemWhereInputSchema)]).optional().nullable(),
  respondedBy: z$2.union([z$2.lazy(() => UserNullableRelationFilterSchema), z$2.lazy(() => UserWhereInputSchema)]).optional().nullable()
}).strict();
var CustomerFeedbackOrderByWithRelationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional(),
  menuItemId: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  rating: z$2.lazy(() => SortOrderSchema).optional(),
  comment: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  source: z$2.lazy(() => SortOrderSchema).optional(),
  tags: z$2.lazy(() => SortOrderSchema).optional(),
  status: z$2.lazy(() => SortOrderSchema).optional(),
  responseText: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  respondedAt: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  respondedById: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional(),
  restaurant: z$2.lazy(() => RestaurantOrderByWithRelationInputSchema).optional(),
  menuItem: z$2.lazy(() => MenuItemOrderByWithRelationInputSchema).optional(),
  respondedBy: z$2.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();
var CustomerFeedbackWhereUniqueInputSchema = z$2.object({
  id: z$2.number().int()
}).and(z$2.object({
  id: z$2.number().int().optional(),
  AND: z$2.union([z$2.lazy(() => CustomerFeedbackWhereInputSchema), z$2.lazy(() => CustomerFeedbackWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => CustomerFeedbackWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => CustomerFeedbackWhereInputSchema), z$2.lazy(() => CustomerFeedbackWhereInputSchema).array()]).optional(),
  restaurantId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number().int()]).optional(),
  menuItemId: z$2.union([z$2.lazy(() => IntNullableFilterSchema), z$2.number().int()]).optional().nullable(),
  rating: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number().int()]).optional(),
  comment: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  source: z$2.union([z$2.lazy(() => EnumFeedbackSourceFilterSchema), z$2.lazy(() => FeedbackSourceSchema)]).optional(),
  tags: z$2.lazy(() => StringNullableListFilterSchema).optional(),
  status: z$2.union([z$2.lazy(() => EnumFeedbackStatusFilterSchema), z$2.lazy(() => FeedbackStatusSchema)]).optional(),
  responseText: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  respondedAt: z$2.union([z$2.lazy(() => DateTimeNullableFilterSchema), z$2.coerce.date()]).optional().nullable(),
  respondedById: z$2.union([z$2.lazy(() => IntNullableFilterSchema), z$2.number().int()]).optional().nullable(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  restaurant: z$2.union([z$2.lazy(() => RestaurantRelationFilterSchema), z$2.lazy(() => RestaurantWhereInputSchema)]).optional(),
  menuItem: z$2.union([z$2.lazy(() => MenuItemNullableRelationFilterSchema), z$2.lazy(() => MenuItemWhereInputSchema)]).optional().nullable(),
  respondedBy: z$2.union([z$2.lazy(() => UserNullableRelationFilterSchema), z$2.lazy(() => UserWhereInputSchema)]).optional().nullable()
}).strict());
var CustomerFeedbackOrderByWithAggregationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional(),
  menuItemId: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  rating: z$2.lazy(() => SortOrderSchema).optional(),
  comment: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  source: z$2.lazy(() => SortOrderSchema).optional(),
  tags: z$2.lazy(() => SortOrderSchema).optional(),
  status: z$2.lazy(() => SortOrderSchema).optional(),
  responseText: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  respondedAt: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  respondedById: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional(),
  _count: z$2.lazy(() => CustomerFeedbackCountOrderByAggregateInputSchema).optional(),
  _avg: z$2.lazy(() => CustomerFeedbackAvgOrderByAggregateInputSchema).optional(),
  _max: z$2.lazy(() => CustomerFeedbackMaxOrderByAggregateInputSchema).optional(),
  _min: z$2.lazy(() => CustomerFeedbackMinOrderByAggregateInputSchema).optional(),
  _sum: z$2.lazy(() => CustomerFeedbackSumOrderByAggregateInputSchema).optional()
}).strict();
var CustomerFeedbackScalarWhereWithAggregatesInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => CustomerFeedbackScalarWhereWithAggregatesInputSchema), z$2.lazy(() => CustomerFeedbackScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: z$2.lazy(() => CustomerFeedbackScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => CustomerFeedbackScalarWhereWithAggregatesInputSchema), z$2.lazy(() => CustomerFeedbackScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  restaurantId: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  menuItemId: z$2.union([z$2.lazy(() => IntNullableWithAggregatesFilterSchema), z$2.number()]).optional().nullable(),
  rating: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  comment: z$2.union([z$2.lazy(() => StringNullableWithAggregatesFilterSchema), z$2.string()]).optional().nullable(),
  source: z$2.union([z$2.lazy(() => EnumFeedbackSourceWithAggregatesFilterSchema), z$2.lazy(() => FeedbackSourceSchema)]).optional(),
  tags: z$2.lazy(() => StringNullableListFilterSchema).optional(),
  status: z$2.union([z$2.lazy(() => EnumFeedbackStatusWithAggregatesFilterSchema), z$2.lazy(() => FeedbackStatusSchema)]).optional(),
  responseText: z$2.union([z$2.lazy(() => StringNullableWithAggregatesFilterSchema), z$2.string()]).optional().nullable(),
  respondedAt: z$2.union([z$2.lazy(() => DateTimeNullableWithAggregatesFilterSchema), z$2.coerce.date()]).optional().nullable(),
  respondedById: z$2.union([z$2.lazy(() => IntNullableWithAggregatesFilterSchema), z$2.number()]).optional().nullable(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional()
}).strict();
var DietaryRestrictionWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => DietaryRestrictionWhereInputSchema), z$2.lazy(() => DietaryRestrictionWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => DietaryRestrictionWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => DietaryRestrictionWhereInputSchema), z$2.lazy(() => DietaryRestrictionWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  name: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  description: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  icon: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  menuItems: z$2.lazy(() => MenuItemListRelationFilterSchema).optional(),
  recipes: z$2.lazy(() => RecipeListRelationFilterSchema).optional(),
  ingredients: z$2.lazy(() => IngredientListRelationFilterSchema).optional()
}).strict();
var DietaryRestrictionOrderByWithRelationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  name: z$2.lazy(() => SortOrderSchema).optional(),
  description: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  icon: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional(),
  menuItems: z$2.lazy(() => MenuItemOrderByRelationAggregateInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeOrderByRelationAggregateInputSchema).optional(),
  ingredients: z$2.lazy(() => IngredientOrderByRelationAggregateInputSchema).optional()
}).strict();
var DietaryRestrictionWhereUniqueInputSchema = z$2.union([
  z$2.object({
    id: z$2.number().int(),
    name: z$2.string()
  }),
  z$2.object({
    id: z$2.number().int()
  }),
  z$2.object({
    name: z$2.string()
  })
]).and(z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string().optional(),
  AND: z$2.union([z$2.lazy(() => DietaryRestrictionWhereInputSchema), z$2.lazy(() => DietaryRestrictionWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => DietaryRestrictionWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => DietaryRestrictionWhereInputSchema), z$2.lazy(() => DietaryRestrictionWhereInputSchema).array()]).optional(),
  description: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  icon: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  menuItems: z$2.lazy(() => MenuItemListRelationFilterSchema).optional(),
  recipes: z$2.lazy(() => RecipeListRelationFilterSchema).optional(),
  ingredients: z$2.lazy(() => IngredientListRelationFilterSchema).optional()
}).strict());
var DietaryRestrictionOrderByWithAggregationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  name: z$2.lazy(() => SortOrderSchema).optional(),
  description: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  icon: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional(),
  _count: z$2.lazy(() => DietaryRestrictionCountOrderByAggregateInputSchema).optional(),
  _avg: z$2.lazy(() => DietaryRestrictionAvgOrderByAggregateInputSchema).optional(),
  _max: z$2.lazy(() => DietaryRestrictionMaxOrderByAggregateInputSchema).optional(),
  _min: z$2.lazy(() => DietaryRestrictionMinOrderByAggregateInputSchema).optional(),
  _sum: z$2.lazy(() => DietaryRestrictionSumOrderByAggregateInputSchema).optional()
}).strict();
var DietaryRestrictionScalarWhereWithAggregatesInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => DietaryRestrictionScalarWhereWithAggregatesInputSchema), z$2.lazy(() => DietaryRestrictionScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: z$2.lazy(() => DietaryRestrictionScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => DietaryRestrictionScalarWhereWithAggregatesInputSchema), z$2.lazy(() => DietaryRestrictionScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  name: z$2.union([z$2.lazy(() => StringWithAggregatesFilterSchema), z$2.string()]).optional(),
  description: z$2.union([z$2.lazy(() => StringNullableWithAggregatesFilterSchema), z$2.string()]).optional().nullable(),
  icon: z$2.union([z$2.lazy(() => StringNullableWithAggregatesFilterSchema), z$2.string()]).optional().nullable(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional()
}).strict();
var RecipeTagWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => RecipeTagWhereInputSchema), z$2.lazy(() => RecipeTagWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => RecipeTagWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => RecipeTagWhereInputSchema), z$2.lazy(() => RecipeTagWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  name: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  description: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  recipes: z$2.lazy(() => RecipeListRelationFilterSchema).optional()
}).strict();
var RecipeTagOrderByWithRelationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  name: z$2.lazy(() => SortOrderSchema).optional(),
  description: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional(),
  recipes: z$2.lazy(() => RecipeOrderByRelationAggregateInputSchema).optional()
}).strict();
var RecipeTagWhereUniqueInputSchema = z$2.union([
  z$2.object({
    id: z$2.number().int(),
    name: z$2.string()
  }),
  z$2.object({
    id: z$2.number().int()
  }),
  z$2.object({
    name: z$2.string()
  })
]).and(z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string().optional(),
  AND: z$2.union([z$2.lazy(() => RecipeTagWhereInputSchema), z$2.lazy(() => RecipeTagWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => RecipeTagWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => RecipeTagWhereInputSchema), z$2.lazy(() => RecipeTagWhereInputSchema).array()]).optional(),
  description: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  recipes: z$2.lazy(() => RecipeListRelationFilterSchema).optional()
}).strict());
var RecipeTagOrderByWithAggregationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  name: z$2.lazy(() => SortOrderSchema).optional(),
  description: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional(),
  _count: z$2.lazy(() => RecipeTagCountOrderByAggregateInputSchema).optional(),
  _avg: z$2.lazy(() => RecipeTagAvgOrderByAggregateInputSchema).optional(),
  _max: z$2.lazy(() => RecipeTagMaxOrderByAggregateInputSchema).optional(),
  _min: z$2.lazy(() => RecipeTagMinOrderByAggregateInputSchema).optional(),
  _sum: z$2.lazy(() => RecipeTagSumOrderByAggregateInputSchema).optional()
}).strict();
var RecipeTagScalarWhereWithAggregatesInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => RecipeTagScalarWhereWithAggregatesInputSchema), z$2.lazy(() => RecipeTagScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: z$2.lazy(() => RecipeTagScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => RecipeTagScalarWhereWithAggregatesInputSchema), z$2.lazy(() => RecipeTagScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  name: z$2.union([z$2.lazy(() => StringWithAggregatesFilterSchema), z$2.string()]).optional(),
  description: z$2.union([z$2.lazy(() => StringNullableWithAggregatesFilterSchema), z$2.string()]).optional().nullable(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional()
}).strict();
var LeftoverItemWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => LeftoverItemWhereInputSchema), z$2.lazy(() => LeftoverItemWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => LeftoverItemWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => LeftoverItemWhereInputSchema), z$2.lazy(() => LeftoverItemWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  restaurantId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  date: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  menuItemId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  quantity: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  reason: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  recordedById: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  restaurant: z$2.union([z$2.lazy(() => RestaurantRelationFilterSchema), z$2.lazy(() => RestaurantWhereInputSchema)]).optional(),
  menuItem: z$2.union([z$2.lazy(() => MenuItemRelationFilterSchema), z$2.lazy(() => MenuItemWhereInputSchema)]).optional(),
  recordedBy: z$2.union([z$2.lazy(() => UserRelationFilterSchema), z$2.lazy(() => UserWhereInputSchema)]).optional()
}).strict();
var LeftoverItemOrderByWithRelationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional(),
  date: z$2.lazy(() => SortOrderSchema).optional(),
  menuItemId: z$2.lazy(() => SortOrderSchema).optional(),
  quantity: z$2.lazy(() => SortOrderSchema).optional(),
  reason: z$2.lazy(() => SortOrderSchema).optional(),
  recordedById: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional(),
  restaurant: z$2.lazy(() => RestaurantOrderByWithRelationInputSchema).optional(),
  menuItem: z$2.lazy(() => MenuItemOrderByWithRelationInputSchema).optional(),
  recordedBy: z$2.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();
var LeftoverItemWhereUniqueInputSchema = z$2.object({
  id: z$2.number().int()
}).and(z$2.object({
  id: z$2.number().int().optional(),
  AND: z$2.union([z$2.lazy(() => LeftoverItemWhereInputSchema), z$2.lazy(() => LeftoverItemWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => LeftoverItemWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => LeftoverItemWhereInputSchema), z$2.lazy(() => LeftoverItemWhereInputSchema).array()]).optional(),
  restaurantId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number().int()]).optional(),
  date: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  menuItemId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number().int()]).optional(),
  quantity: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number().int()]).optional(),
  reason: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  recordedById: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number().int()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  restaurant: z$2.union([z$2.lazy(() => RestaurantRelationFilterSchema), z$2.lazy(() => RestaurantWhereInputSchema)]).optional(),
  menuItem: z$2.union([z$2.lazy(() => MenuItemRelationFilterSchema), z$2.lazy(() => MenuItemWhereInputSchema)]).optional(),
  recordedBy: z$2.union([z$2.lazy(() => UserRelationFilterSchema), z$2.lazy(() => UserWhereInputSchema)]).optional()
}).strict());
var LeftoverItemOrderByWithAggregationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional(),
  date: z$2.lazy(() => SortOrderSchema).optional(),
  menuItemId: z$2.lazy(() => SortOrderSchema).optional(),
  quantity: z$2.lazy(() => SortOrderSchema).optional(),
  reason: z$2.lazy(() => SortOrderSchema).optional(),
  recordedById: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional(),
  _count: z$2.lazy(() => LeftoverItemCountOrderByAggregateInputSchema).optional(),
  _avg: z$2.lazy(() => LeftoverItemAvgOrderByAggregateInputSchema).optional(),
  _max: z$2.lazy(() => LeftoverItemMaxOrderByAggregateInputSchema).optional(),
  _min: z$2.lazy(() => LeftoverItemMinOrderByAggregateInputSchema).optional(),
  _sum: z$2.lazy(() => LeftoverItemSumOrderByAggregateInputSchema).optional()
}).strict();
var LeftoverItemScalarWhereWithAggregatesInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => LeftoverItemScalarWhereWithAggregatesInputSchema), z$2.lazy(() => LeftoverItemScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: z$2.lazy(() => LeftoverItemScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => LeftoverItemScalarWhereWithAggregatesInputSchema), z$2.lazy(() => LeftoverItemScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  restaurantId: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  date: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional(),
  menuItemId: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  quantity: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  reason: z$2.union([z$2.lazy(() => StringWithAggregatesFilterSchema), z$2.string()]).optional(),
  recordedById: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional()
}).strict();
var WasteRecordWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => WasteRecordWhereInputSchema), z$2.lazy(() => WasteRecordWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => WasteRecordWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => WasteRecordWhereInputSchema), z$2.lazy(() => WasteRecordWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  restaurantId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  date: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  ingredientId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  quantity: z$2.union([z$2.lazy(() => FloatFilterSchema), z$2.number()]).optional(),
  unit: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  reason: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  recordedById: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  restaurant: z$2.union([z$2.lazy(() => RestaurantRelationFilterSchema), z$2.lazy(() => RestaurantWhereInputSchema)]).optional(),
  ingrediente: z$2.union([z$2.lazy(() => IngredientRelationFilterSchema), z$2.lazy(() => IngredientWhereInputSchema)]).optional(),
  recordedBy: z$2.union([z$2.lazy(() => UserRelationFilterSchema), z$2.lazy(() => UserWhereInputSchema)]).optional()
}).strict();
var WasteRecordOrderByWithRelationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional(),
  date: z$2.lazy(() => SortOrderSchema).optional(),
  ingredientId: z$2.lazy(() => SortOrderSchema).optional(),
  quantity: z$2.lazy(() => SortOrderSchema).optional(),
  unit: z$2.lazy(() => SortOrderSchema).optional(),
  reason: z$2.lazy(() => SortOrderSchema).optional(),
  recordedById: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional(),
  restaurant: z$2.lazy(() => RestaurantOrderByWithRelationInputSchema).optional(),
  ingrediente: z$2.lazy(() => IngredientOrderByWithRelationInputSchema).optional(),
  recordedBy: z$2.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();
var WasteRecordWhereUniqueInputSchema = z$2.object({
  id: z$2.number().int()
}).and(z$2.object({
  id: z$2.number().int().optional(),
  AND: z$2.union([z$2.lazy(() => WasteRecordWhereInputSchema), z$2.lazy(() => WasteRecordWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => WasteRecordWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => WasteRecordWhereInputSchema), z$2.lazy(() => WasteRecordWhereInputSchema).array()]).optional(),
  restaurantId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number().int()]).optional(),
  date: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  ingredientId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number().int()]).optional(),
  quantity: z$2.union([z$2.lazy(() => FloatFilterSchema), z$2.number()]).optional(),
  unit: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  reason: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  recordedById: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number().int()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  restaurant: z$2.union([z$2.lazy(() => RestaurantRelationFilterSchema), z$2.lazy(() => RestaurantWhereInputSchema)]).optional(),
  ingrediente: z$2.union([z$2.lazy(() => IngredientRelationFilterSchema), z$2.lazy(() => IngredientWhereInputSchema)]).optional(),
  recordedBy: z$2.union([z$2.lazy(() => UserRelationFilterSchema), z$2.lazy(() => UserWhereInputSchema)]).optional()
}).strict());
var WasteRecordOrderByWithAggregationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional(),
  date: z$2.lazy(() => SortOrderSchema).optional(),
  ingredientId: z$2.lazy(() => SortOrderSchema).optional(),
  quantity: z$2.lazy(() => SortOrderSchema).optional(),
  unit: z$2.lazy(() => SortOrderSchema).optional(),
  reason: z$2.lazy(() => SortOrderSchema).optional(),
  recordedById: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional(),
  _count: z$2.lazy(() => WasteRecordCountOrderByAggregateInputSchema).optional(),
  _avg: z$2.lazy(() => WasteRecordAvgOrderByAggregateInputSchema).optional(),
  _max: z$2.lazy(() => WasteRecordMaxOrderByAggregateInputSchema).optional(),
  _min: z$2.lazy(() => WasteRecordMinOrderByAggregateInputSchema).optional(),
  _sum: z$2.lazy(() => WasteRecordSumOrderByAggregateInputSchema).optional()
}).strict();
var WasteRecordScalarWhereWithAggregatesInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => WasteRecordScalarWhereWithAggregatesInputSchema), z$2.lazy(() => WasteRecordScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: z$2.lazy(() => WasteRecordScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => WasteRecordScalarWhereWithAggregatesInputSchema), z$2.lazy(() => WasteRecordScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  restaurantId: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  date: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional(),
  ingredientId: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  quantity: z$2.union([z$2.lazy(() => FloatWithAggregatesFilterSchema), z$2.number()]).optional(),
  unit: z$2.union([z$2.lazy(() => StringWithAggregatesFilterSchema), z$2.string()]).optional(),
  reason: z$2.union([z$2.lazy(() => StringWithAggregatesFilterSchema), z$2.string()]).optional(),
  recordedById: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional()
}).strict();
var ProductionPlanWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => ProductionPlanWhereInputSchema), z$2.lazy(() => ProductionPlanWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => ProductionPlanWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => ProductionPlanWhereInputSchema), z$2.lazy(() => ProductionPlanWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  restaurantId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  date: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  createdById: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  restaurant: z$2.union([z$2.lazy(() => RestaurantRelationFilterSchema), z$2.lazy(() => RestaurantWhereInputSchema)]).optional(),
  createdBy: z$2.union([z$2.lazy(() => UserRelationFilterSchema), z$2.lazy(() => UserWhereInputSchema)]).optional(),
  items: z$2.lazy(() => ProductionPlanItemListRelationFilterSchema).optional()
}).strict();
var ProductionPlanOrderByWithRelationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional(),
  date: z$2.lazy(() => SortOrderSchema).optional(),
  createdById: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional(),
  restaurant: z$2.lazy(() => RestaurantOrderByWithRelationInputSchema).optional(),
  createdBy: z$2.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  items: z$2.lazy(() => ProductionPlanItemOrderByRelationAggregateInputSchema).optional()
}).strict();
var ProductionPlanWhereUniqueInputSchema = z$2.object({
  id: z$2.number().int()
}).and(z$2.object({
  id: z$2.number().int().optional(),
  AND: z$2.union([z$2.lazy(() => ProductionPlanWhereInputSchema), z$2.lazy(() => ProductionPlanWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => ProductionPlanWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => ProductionPlanWhereInputSchema), z$2.lazy(() => ProductionPlanWhereInputSchema).array()]).optional(),
  restaurantId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number().int()]).optional(),
  date: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  createdById: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number().int()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  restaurant: z$2.union([z$2.lazy(() => RestaurantRelationFilterSchema), z$2.lazy(() => RestaurantWhereInputSchema)]).optional(),
  createdBy: z$2.union([z$2.lazy(() => UserRelationFilterSchema), z$2.lazy(() => UserWhereInputSchema)]).optional(),
  items: z$2.lazy(() => ProductionPlanItemListRelationFilterSchema).optional()
}).strict());
var ProductionPlanOrderByWithAggregationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional(),
  date: z$2.lazy(() => SortOrderSchema).optional(),
  createdById: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional(),
  _count: z$2.lazy(() => ProductionPlanCountOrderByAggregateInputSchema).optional(),
  _avg: z$2.lazy(() => ProductionPlanAvgOrderByAggregateInputSchema).optional(),
  _max: z$2.lazy(() => ProductionPlanMaxOrderByAggregateInputSchema).optional(),
  _min: z$2.lazy(() => ProductionPlanMinOrderByAggregateInputSchema).optional(),
  _sum: z$2.lazy(() => ProductionPlanSumOrderByAggregateInputSchema).optional()
}).strict();
var ProductionPlanScalarWhereWithAggregatesInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => ProductionPlanScalarWhereWithAggregatesInputSchema), z$2.lazy(() => ProductionPlanScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: z$2.lazy(() => ProductionPlanScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => ProductionPlanScalarWhereWithAggregatesInputSchema), z$2.lazy(() => ProductionPlanScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  restaurantId: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  date: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional(),
  createdById: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional()
}).strict();
var ProductionPlanItemWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => ProductionPlanItemWhereInputSchema), z$2.lazy(() => ProductionPlanItemWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => ProductionPlanItemWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => ProductionPlanItemWhereInputSchema), z$2.lazy(() => ProductionPlanItemWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  productionPlanId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  recipeId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  quantity: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  unit: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  assignedToId: z$2.union([z$2.lazy(() => IntNullableFilterSchema), z$2.number()]).optional().nullable(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  productionPlan: z$2.union([z$2.lazy(() => ProductionPlanRelationFilterSchema), z$2.lazy(() => ProductionPlanWhereInputSchema)]).optional(),
  recipe: z$2.union([z$2.lazy(() => RecipeRelationFilterSchema), z$2.lazy(() => RecipeWhereInputSchema)]).optional(),
  assignedTo: z$2.union([z$2.lazy(() => UserNullableRelationFilterSchema), z$2.lazy(() => UserWhereInputSchema)]).optional().nullable()
}).strict();
var ProductionPlanItemOrderByWithRelationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  productionPlanId: z$2.lazy(() => SortOrderSchema).optional(),
  recipeId: z$2.lazy(() => SortOrderSchema).optional(),
  quantity: z$2.lazy(() => SortOrderSchema).optional(),
  unit: z$2.lazy(() => SortOrderSchema).optional(),
  assignedToId: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanOrderByWithRelationInputSchema).optional(),
  recipe: z$2.lazy(() => RecipeOrderByWithRelationInputSchema).optional(),
  assignedTo: z$2.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();
var ProductionPlanItemWhereUniqueInputSchema = z$2.object({
  id: z$2.number().int()
}).and(z$2.object({
  id: z$2.number().int().optional(),
  AND: z$2.union([z$2.lazy(() => ProductionPlanItemWhereInputSchema), z$2.lazy(() => ProductionPlanItemWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => ProductionPlanItemWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => ProductionPlanItemWhereInputSchema), z$2.lazy(() => ProductionPlanItemWhereInputSchema).array()]).optional(),
  productionPlanId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number().int()]).optional(),
  recipeId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number().int()]).optional(),
  quantity: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number().int()]).optional(),
  unit: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  assignedToId: z$2.union([z$2.lazy(() => IntNullableFilterSchema), z$2.number().int()]).optional().nullable(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  productionPlan: z$2.union([z$2.lazy(() => ProductionPlanRelationFilterSchema), z$2.lazy(() => ProductionPlanWhereInputSchema)]).optional(),
  recipe: z$2.union([z$2.lazy(() => RecipeRelationFilterSchema), z$2.lazy(() => RecipeWhereInputSchema)]).optional(),
  assignedTo: z$2.union([z$2.lazy(() => UserNullableRelationFilterSchema), z$2.lazy(() => UserWhereInputSchema)]).optional().nullable()
}).strict());
var ProductionPlanItemOrderByWithAggregationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  productionPlanId: z$2.lazy(() => SortOrderSchema).optional(),
  recipeId: z$2.lazy(() => SortOrderSchema).optional(),
  quantity: z$2.lazy(() => SortOrderSchema).optional(),
  unit: z$2.lazy(() => SortOrderSchema).optional(),
  assignedToId: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional(),
  _count: z$2.lazy(() => ProductionPlanItemCountOrderByAggregateInputSchema).optional(),
  _avg: z$2.lazy(() => ProductionPlanItemAvgOrderByAggregateInputSchema).optional(),
  _max: z$2.lazy(() => ProductionPlanItemMaxOrderByAggregateInputSchema).optional(),
  _min: z$2.lazy(() => ProductionPlanItemMinOrderByAggregateInputSchema).optional(),
  _sum: z$2.lazy(() => ProductionPlanItemSumOrderByAggregateInputSchema).optional()
}).strict();
var ProductionPlanItemScalarWhereWithAggregatesInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => ProductionPlanItemScalarWhereWithAggregatesInputSchema), z$2.lazy(() => ProductionPlanItemScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: z$2.lazy(() => ProductionPlanItemScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => ProductionPlanItemScalarWhereWithAggregatesInputSchema), z$2.lazy(() => ProductionPlanItemScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  productionPlanId: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  recipeId: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  quantity: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  unit: z$2.union([z$2.lazy(() => StringWithAggregatesFilterSchema), z$2.string()]).optional(),
  assignedToId: z$2.union([z$2.lazy(() => IntNullableWithAggregatesFilterSchema), z$2.number()]).optional().nullable(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional()
}).strict();
var ShiftTaskWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => ShiftTaskWhereInputSchema), z$2.lazy(() => ShiftTaskWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => ShiftTaskWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => ShiftTaskWhereInputSchema), z$2.lazy(() => ShiftTaskWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  shiftId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  taskType: z$2.union([z$2.lazy(() => EnumTaskTypeFilterSchema), z$2.lazy(() => TaskTypeSchema)]).optional(),
  startTime: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  endTime: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  duration: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  notes: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  shift: z$2.union([z$2.lazy(() => ShiftRelationFilterSchema), z$2.lazy(() => ShiftWhereInputSchema)]).optional()
}).strict();
var ShiftTaskOrderByWithRelationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  shiftId: z$2.lazy(() => SortOrderSchema).optional(),
  taskType: z$2.lazy(() => SortOrderSchema).optional(),
  startTime: z$2.lazy(() => SortOrderSchema).optional(),
  endTime: z$2.lazy(() => SortOrderSchema).optional(),
  duration: z$2.lazy(() => SortOrderSchema).optional(),
  notes: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional(),
  shift: z$2.lazy(() => ShiftOrderByWithRelationInputSchema).optional()
}).strict();
var ShiftTaskWhereUniqueInputSchema = z$2.object({
  id: z$2.number().int()
}).and(z$2.object({
  id: z$2.number().int().optional(),
  AND: z$2.union([z$2.lazy(() => ShiftTaskWhereInputSchema), z$2.lazy(() => ShiftTaskWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => ShiftTaskWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => ShiftTaskWhereInputSchema), z$2.lazy(() => ShiftTaskWhereInputSchema).array()]).optional(),
  shiftId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number().int()]).optional(),
  taskType: z$2.union([z$2.lazy(() => EnumTaskTypeFilterSchema), z$2.lazy(() => TaskTypeSchema)]).optional(),
  startTime: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  endTime: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  duration: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number().int()]).optional(),
  notes: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  shift: z$2.union([z$2.lazy(() => ShiftRelationFilterSchema), z$2.lazy(() => ShiftWhereInputSchema)]).optional()
}).strict());
var ShiftTaskOrderByWithAggregationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  shiftId: z$2.lazy(() => SortOrderSchema).optional(),
  taskType: z$2.lazy(() => SortOrderSchema).optional(),
  startTime: z$2.lazy(() => SortOrderSchema).optional(),
  endTime: z$2.lazy(() => SortOrderSchema).optional(),
  duration: z$2.lazy(() => SortOrderSchema).optional(),
  notes: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional(),
  _count: z$2.lazy(() => ShiftTaskCountOrderByAggregateInputSchema).optional(),
  _avg: z$2.lazy(() => ShiftTaskAvgOrderByAggregateInputSchema).optional(),
  _max: z$2.lazy(() => ShiftTaskMaxOrderByAggregateInputSchema).optional(),
  _min: z$2.lazy(() => ShiftTaskMinOrderByAggregateInputSchema).optional(),
  _sum: z$2.lazy(() => ShiftTaskSumOrderByAggregateInputSchema).optional()
}).strict();
var ShiftTaskScalarWhereWithAggregatesInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => ShiftTaskScalarWhereWithAggregatesInputSchema), z$2.lazy(() => ShiftTaskScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: z$2.lazy(() => ShiftTaskScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => ShiftTaskScalarWhereWithAggregatesInputSchema), z$2.lazy(() => ShiftTaskScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  shiftId: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  taskType: z$2.union([z$2.lazy(() => EnumTaskTypeWithAggregatesFilterSchema), z$2.lazy(() => TaskTypeSchema)]).optional(),
  startTime: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional(),
  endTime: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional(),
  duration: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  notes: z$2.union([z$2.lazy(() => StringNullableWithAggregatesFilterSchema), z$2.string()]).optional().nullable(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional()
}).strict();
var AvailabilityWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => AvailabilityWhereInputSchema), z$2.lazy(() => AvailabilityWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => AvailabilityWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => AvailabilityWhereInputSchema), z$2.lazy(() => AvailabilityWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  userId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  dayOfWeek: z$2.union([z$2.lazy(() => EnumDayOfWeekFilterSchema), z$2.lazy(() => DayOfWeekSchema)]).optional(),
  startTime: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  endTime: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  user: z$2.union([z$2.lazy(() => UserRelationFilterSchema), z$2.lazy(() => UserWhereInputSchema)]).optional()
}).strict();
var AvailabilityOrderByWithRelationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  userId: z$2.lazy(() => SortOrderSchema).optional(),
  dayOfWeek: z$2.lazy(() => SortOrderSchema).optional(),
  startTime: z$2.lazy(() => SortOrderSchema).optional(),
  endTime: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional(),
  user: z$2.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();
var AvailabilityWhereUniqueInputSchema = z$2.object({
  id: z$2.number().int()
}).and(z$2.object({
  id: z$2.number().int().optional(),
  AND: z$2.union([z$2.lazy(() => AvailabilityWhereInputSchema), z$2.lazy(() => AvailabilityWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => AvailabilityWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => AvailabilityWhereInputSchema), z$2.lazy(() => AvailabilityWhereInputSchema).array()]).optional(),
  userId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number().int()]).optional(),
  dayOfWeek: z$2.union([z$2.lazy(() => EnumDayOfWeekFilterSchema), z$2.lazy(() => DayOfWeekSchema)]).optional(),
  startTime: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  endTime: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  user: z$2.union([z$2.lazy(() => UserRelationFilterSchema), z$2.lazy(() => UserWhereInputSchema)]).optional()
}).strict());
var AvailabilityOrderByWithAggregationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  userId: z$2.lazy(() => SortOrderSchema).optional(),
  dayOfWeek: z$2.lazy(() => SortOrderSchema).optional(),
  startTime: z$2.lazy(() => SortOrderSchema).optional(),
  endTime: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional(),
  _count: z$2.lazy(() => AvailabilityCountOrderByAggregateInputSchema).optional(),
  _avg: z$2.lazy(() => AvailabilityAvgOrderByAggregateInputSchema).optional(),
  _max: z$2.lazy(() => AvailabilityMaxOrderByAggregateInputSchema).optional(),
  _min: z$2.lazy(() => AvailabilityMinOrderByAggregateInputSchema).optional(),
  _sum: z$2.lazy(() => AvailabilitySumOrderByAggregateInputSchema).optional()
}).strict();
var AvailabilityScalarWhereWithAggregatesInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => AvailabilityScalarWhereWithAggregatesInputSchema), z$2.lazy(() => AvailabilityScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: z$2.lazy(() => AvailabilityScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => AvailabilityScalarWhereWithAggregatesInputSchema), z$2.lazy(() => AvailabilityScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  userId: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  dayOfWeek: z$2.union([z$2.lazy(() => EnumDayOfWeekWithAggregatesFilterSchema), z$2.lazy(() => DayOfWeekSchema)]).optional(),
  startTime: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional(),
  endTime: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional()
}).strict();
var SchedulingConstraintWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => SchedulingConstraintWhereInputSchema), z$2.lazy(() => SchedulingConstraintWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => SchedulingConstraintWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => SchedulingConstraintWhereInputSchema), z$2.lazy(() => SchedulingConstraintWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  userId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  date: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  constraintsType: z$2.union([z$2.lazy(() => EnumConstraintTypeFilterSchema), z$2.lazy(() => ConstraintTypeSchema)]).optional(),
  startTime: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  endTime: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  notes: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  user: z$2.union([z$2.lazy(() => UserRelationFilterSchema), z$2.lazy(() => UserWhereInputSchema)]).optional()
}).strict();
var SchedulingConstraintOrderByWithRelationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  userId: z$2.lazy(() => SortOrderSchema).optional(),
  date: z$2.lazy(() => SortOrderSchema).optional(),
  constraintsType: z$2.lazy(() => SortOrderSchema).optional(),
  startTime: z$2.lazy(() => SortOrderSchema).optional(),
  endTime: z$2.lazy(() => SortOrderSchema).optional(),
  notes: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional(),
  user: z$2.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();
var SchedulingConstraintWhereUniqueInputSchema = z$2.object({
  id: z$2.number().int()
}).and(z$2.object({
  id: z$2.number().int().optional(),
  AND: z$2.union([z$2.lazy(() => SchedulingConstraintWhereInputSchema), z$2.lazy(() => SchedulingConstraintWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => SchedulingConstraintWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => SchedulingConstraintWhereInputSchema), z$2.lazy(() => SchedulingConstraintWhereInputSchema).array()]).optional(),
  userId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number().int()]).optional(),
  date: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  constraintsType: z$2.union([z$2.lazy(() => EnumConstraintTypeFilterSchema), z$2.lazy(() => ConstraintTypeSchema)]).optional(),
  startTime: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  endTime: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  notes: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  user: z$2.union([z$2.lazy(() => UserRelationFilterSchema), z$2.lazy(() => UserWhereInputSchema)]).optional()
}).strict());
var SchedulingConstraintOrderByWithAggregationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  userId: z$2.lazy(() => SortOrderSchema).optional(),
  date: z$2.lazy(() => SortOrderSchema).optional(),
  constraintsType: z$2.lazy(() => SortOrderSchema).optional(),
  startTime: z$2.lazy(() => SortOrderSchema).optional(),
  endTime: z$2.lazy(() => SortOrderSchema).optional(),
  notes: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional(),
  _count: z$2.lazy(() => SchedulingConstraintCountOrderByAggregateInputSchema).optional(),
  _avg: z$2.lazy(() => SchedulingConstraintAvgOrderByAggregateInputSchema).optional(),
  _max: z$2.lazy(() => SchedulingConstraintMaxOrderByAggregateInputSchema).optional(),
  _min: z$2.lazy(() => SchedulingConstraintMinOrderByAggregateInputSchema).optional(),
  _sum: z$2.lazy(() => SchedulingConstraintSumOrderByAggregateInputSchema).optional()
}).strict();
var SchedulingConstraintScalarWhereWithAggregatesInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => SchedulingConstraintScalarWhereWithAggregatesInputSchema), z$2.lazy(() => SchedulingConstraintScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: z$2.lazy(() => SchedulingConstraintScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => SchedulingConstraintScalarWhereWithAggregatesInputSchema), z$2.lazy(() => SchedulingConstraintScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  userId: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  date: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional(),
  constraintsType: z$2.union([z$2.lazy(() => EnumConstraintTypeWithAggregatesFilterSchema), z$2.lazy(() => ConstraintTypeSchema)]).optional(),
  startTime: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional(),
  endTime: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional(),
  notes: z$2.union([z$2.lazy(() => StringNullableWithAggregatesFilterSchema), z$2.string()]).optional().nullable(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional()
}).strict();
var InventoryWithdrawalWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => InventoryWithdrawalWhereInputSchema), z$2.lazy(() => InventoryWithdrawalWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => InventoryWithdrawalWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => InventoryWithdrawalWhereInputSchema), z$2.lazy(() => InventoryWithdrawalWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  inventoryItemId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  dateTime: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  quantity: z$2.union([z$2.lazy(() => FloatFilterSchema), z$2.number()]).optional(),
  unit: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  recipeId: z$2.union([z$2.lazy(() => IntNullableFilterSchema), z$2.number()]).optional().nullable(),
  createdById: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  inventoryItem: z$2.union([z$2.lazy(() => InventoryItemRelationFilterSchema), z$2.lazy(() => InventoryItemWhereInputSchema)]).optional(),
  recipe: z$2.union([z$2.lazy(() => RecipeNullableRelationFilterSchema), z$2.lazy(() => RecipeWhereInputSchema)]).optional().nullable(),
  createdBy: z$2.union([z$2.lazy(() => UserRelationFilterSchema), z$2.lazy(() => UserWhereInputSchema)]).optional()
}).strict();
var InventoryWithdrawalOrderByWithRelationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  inventoryItemId: z$2.lazy(() => SortOrderSchema).optional(),
  dateTime: z$2.lazy(() => SortOrderSchema).optional(),
  quantity: z$2.lazy(() => SortOrderSchema).optional(),
  unit: z$2.lazy(() => SortOrderSchema).optional(),
  recipeId: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  createdById: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional(),
  inventoryItem: z$2.lazy(() => InventoryItemOrderByWithRelationInputSchema).optional(),
  recipe: z$2.lazy(() => RecipeOrderByWithRelationInputSchema).optional(),
  createdBy: z$2.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();
var InventoryWithdrawalWhereUniqueInputSchema = z$2.object({
  id: z$2.number().int()
}).and(z$2.object({
  id: z$2.number().int().optional(),
  AND: z$2.union([z$2.lazy(() => InventoryWithdrawalWhereInputSchema), z$2.lazy(() => InventoryWithdrawalWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => InventoryWithdrawalWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => InventoryWithdrawalWhereInputSchema), z$2.lazy(() => InventoryWithdrawalWhereInputSchema).array()]).optional(),
  inventoryItemId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number().int()]).optional(),
  dateTime: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  quantity: z$2.union([z$2.lazy(() => FloatFilterSchema), z$2.number()]).optional(),
  unit: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  recipeId: z$2.union([z$2.lazy(() => IntNullableFilterSchema), z$2.number().int()]).optional().nullable(),
  createdById: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number().int()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  inventoryItem: z$2.union([z$2.lazy(() => InventoryItemRelationFilterSchema), z$2.lazy(() => InventoryItemWhereInputSchema)]).optional(),
  recipe: z$2.union([z$2.lazy(() => RecipeNullableRelationFilterSchema), z$2.lazy(() => RecipeWhereInputSchema)]).optional().nullable(),
  createdBy: z$2.union([z$2.lazy(() => UserRelationFilterSchema), z$2.lazy(() => UserWhereInputSchema)]).optional()
}).strict());
var InventoryWithdrawalOrderByWithAggregationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  inventoryItemId: z$2.lazy(() => SortOrderSchema).optional(),
  dateTime: z$2.lazy(() => SortOrderSchema).optional(),
  quantity: z$2.lazy(() => SortOrderSchema).optional(),
  unit: z$2.lazy(() => SortOrderSchema).optional(),
  recipeId: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  createdById: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional(),
  _count: z$2.lazy(() => InventoryWithdrawalCountOrderByAggregateInputSchema).optional(),
  _avg: z$2.lazy(() => InventoryWithdrawalAvgOrderByAggregateInputSchema).optional(),
  _max: z$2.lazy(() => InventoryWithdrawalMaxOrderByAggregateInputSchema).optional(),
  _min: z$2.lazy(() => InventoryWithdrawalMinOrderByAggregateInputSchema).optional(),
  _sum: z$2.lazy(() => InventoryWithdrawalSumOrderByAggregateInputSchema).optional()
}).strict();
var InventoryWithdrawalScalarWhereWithAggregatesInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => InventoryWithdrawalScalarWhereWithAggregatesInputSchema), z$2.lazy(() => InventoryWithdrawalScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: z$2.lazy(() => InventoryWithdrawalScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => InventoryWithdrawalScalarWhereWithAggregatesInputSchema), z$2.lazy(() => InventoryWithdrawalScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  inventoryItemId: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  dateTime: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional(),
  quantity: z$2.union([z$2.lazy(() => FloatWithAggregatesFilterSchema), z$2.number()]).optional(),
  unit: z$2.union([z$2.lazy(() => StringWithAggregatesFilterSchema), z$2.string()]).optional(),
  recipeId: z$2.union([z$2.lazy(() => IntNullableWithAggregatesFilterSchema), z$2.number()]).optional().nullable(),
  createdById: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional()
}).strict();
var AllergenWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => AllergenWhereInputSchema), z$2.lazy(() => AllergenWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => AllergenWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => AllergenWhereInputSchema), z$2.lazy(() => AllergenWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  name: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  description: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  ingredients: z$2.lazy(() => IngredientAllergenListRelationFilterSchema).optional()
}).strict();
var AllergenOrderByWithRelationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  name: z$2.lazy(() => SortOrderSchema).optional(),
  description: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  ingredients: z$2.lazy(() => IngredientAllergenOrderByRelationAggregateInputSchema).optional()
}).strict();
var AllergenWhereUniqueInputSchema = z$2.union([
  z$2.object({
    id: z$2.number().int(),
    name: z$2.string()
  }),
  z$2.object({
    id: z$2.number().int()
  }),
  z$2.object({
    name: z$2.string()
  })
]).and(z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string().optional(),
  AND: z$2.union([z$2.lazy(() => AllergenWhereInputSchema), z$2.lazy(() => AllergenWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => AllergenWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => AllergenWhereInputSchema), z$2.lazy(() => AllergenWhereInputSchema).array()]).optional(),
  description: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  ingredients: z$2.lazy(() => IngredientAllergenListRelationFilterSchema).optional()
}).strict());
var AllergenOrderByWithAggregationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  name: z$2.lazy(() => SortOrderSchema).optional(),
  description: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  _count: z$2.lazy(() => AllergenCountOrderByAggregateInputSchema).optional(),
  _avg: z$2.lazy(() => AllergenAvgOrderByAggregateInputSchema).optional(),
  _max: z$2.lazy(() => AllergenMaxOrderByAggregateInputSchema).optional(),
  _min: z$2.lazy(() => AllergenMinOrderByAggregateInputSchema).optional(),
  _sum: z$2.lazy(() => AllergenSumOrderByAggregateInputSchema).optional()
}).strict();
var AllergenScalarWhereWithAggregatesInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => AllergenScalarWhereWithAggregatesInputSchema), z$2.lazy(() => AllergenScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: z$2.lazy(() => AllergenScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => AllergenScalarWhereWithAggregatesInputSchema), z$2.lazy(() => AllergenScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  name: z$2.union([z$2.lazy(() => StringWithAggregatesFilterSchema), z$2.string()]).optional(),
  description: z$2.union([z$2.lazy(() => StringNullableWithAggregatesFilterSchema), z$2.string()]).optional().nullable()
}).strict();
var IngredientAllergenWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => IngredientAllergenWhereInputSchema), z$2.lazy(() => IngredientAllergenWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => IngredientAllergenWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => IngredientAllergenWhereInputSchema), z$2.lazy(() => IngredientAllergenWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  ingredientId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  allergenId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  ingredient: z$2.union([z$2.lazy(() => IngredientRelationFilterSchema), z$2.lazy(() => IngredientWhereInputSchema)]).optional(),
  allergen: z$2.union([z$2.lazy(() => AllergenRelationFilterSchema), z$2.lazy(() => AllergenWhereInputSchema)]).optional()
}).strict();
var IngredientAllergenOrderByWithRelationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  ingredientId: z$2.lazy(() => SortOrderSchema).optional(),
  allergenId: z$2.lazy(() => SortOrderSchema).optional(),
  ingredient: z$2.lazy(() => IngredientOrderByWithRelationInputSchema).optional(),
  allergen: z$2.lazy(() => AllergenOrderByWithRelationInputSchema).optional()
}).strict();
var IngredientAllergenWhereUniqueInputSchema = z$2.object({
  id: z$2.number().int()
}).and(z$2.object({
  id: z$2.number().int().optional(),
  AND: z$2.union([z$2.lazy(() => IngredientAllergenWhereInputSchema), z$2.lazy(() => IngredientAllergenWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => IngredientAllergenWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => IngredientAllergenWhereInputSchema), z$2.lazy(() => IngredientAllergenWhereInputSchema).array()]).optional(),
  ingredientId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number().int()]).optional(),
  allergenId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number().int()]).optional(),
  ingredient: z$2.union([z$2.lazy(() => IngredientRelationFilterSchema), z$2.lazy(() => IngredientWhereInputSchema)]).optional(),
  allergen: z$2.union([z$2.lazy(() => AllergenRelationFilterSchema), z$2.lazy(() => AllergenWhereInputSchema)]).optional()
}).strict());
var IngredientAllergenOrderByWithAggregationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  ingredientId: z$2.lazy(() => SortOrderSchema).optional(),
  allergenId: z$2.lazy(() => SortOrderSchema).optional(),
  _count: z$2.lazy(() => IngredientAllergenCountOrderByAggregateInputSchema).optional(),
  _avg: z$2.lazy(() => IngredientAllergenAvgOrderByAggregateInputSchema).optional(),
  _max: z$2.lazy(() => IngredientAllergenMaxOrderByAggregateInputSchema).optional(),
  _min: z$2.lazy(() => IngredientAllergenMinOrderByAggregateInputSchema).optional(),
  _sum: z$2.lazy(() => IngredientAllergenSumOrderByAggregateInputSchema).optional()
}).strict();
var IngredientAllergenScalarWhereWithAggregatesInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => IngredientAllergenScalarWhereWithAggregatesInputSchema), z$2.lazy(() => IngredientAllergenScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: z$2.lazy(() => IngredientAllergenScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => IngredientAllergenScalarWhereWithAggregatesInputSchema), z$2.lazy(() => IngredientAllergenScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  ingredientId: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  allergenId: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional()
}).strict();
var NutritionalRecommendationWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => NutritionalRecommendationWhereInputSchema), z$2.lazy(() => NutritionalRecommendationWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => NutritionalRecommendationWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => NutritionalRecommendationWhereInputSchema), z$2.lazy(() => NutritionalRecommendationWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  menuItemId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  recommendation: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  menuItem: z$2.union([z$2.lazy(() => MenuItemRelationFilterSchema), z$2.lazy(() => MenuItemWhereInputSchema)]).optional()
}).strict();
var NutritionalRecommendationOrderByWithRelationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  menuItemId: z$2.lazy(() => SortOrderSchema).optional(),
  recommendation: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional(),
  menuItem: z$2.lazy(() => MenuItemOrderByWithRelationInputSchema).optional()
}).strict();
var NutritionalRecommendationWhereUniqueInputSchema = z$2.object({
  id: z$2.number().int()
}).and(z$2.object({
  id: z$2.number().int().optional(),
  AND: z$2.union([z$2.lazy(() => NutritionalRecommendationWhereInputSchema), z$2.lazy(() => NutritionalRecommendationWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => NutritionalRecommendationWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => NutritionalRecommendationWhereInputSchema), z$2.lazy(() => NutritionalRecommendationWhereInputSchema).array()]).optional(),
  menuItemId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number().int()]).optional(),
  recommendation: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  menuItem: z$2.union([z$2.lazy(() => MenuItemRelationFilterSchema), z$2.lazy(() => MenuItemWhereInputSchema)]).optional()
}).strict());
var NutritionalRecommendationOrderByWithAggregationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  menuItemId: z$2.lazy(() => SortOrderSchema).optional(),
  recommendation: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional(),
  _count: z$2.lazy(() => NutritionalRecommendationCountOrderByAggregateInputSchema).optional(),
  _avg: z$2.lazy(() => NutritionalRecommendationAvgOrderByAggregateInputSchema).optional(),
  _max: z$2.lazy(() => NutritionalRecommendationMaxOrderByAggregateInputSchema).optional(),
  _min: z$2.lazy(() => NutritionalRecommendationMinOrderByAggregateInputSchema).optional(),
  _sum: z$2.lazy(() => NutritionalRecommendationSumOrderByAggregateInputSchema).optional()
}).strict();
var NutritionalRecommendationScalarWhereWithAggregatesInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => NutritionalRecommendationScalarWhereWithAggregatesInputSchema), z$2.lazy(() => NutritionalRecommendationScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: z$2.lazy(() => NutritionalRecommendationScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => NutritionalRecommendationScalarWhereWithAggregatesInputSchema), z$2.lazy(() => NutritionalRecommendationScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  menuItemId: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  recommendation: z$2.union([z$2.lazy(() => StringWithAggregatesFilterSchema), z$2.string()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional()
}).strict();
var EarlyAccessWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => EarlyAccessWhereInputSchema), z$2.lazy(() => EarlyAccessWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => EarlyAccessWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => EarlyAccessWhereInputSchema), z$2.lazy(() => EarlyAccessWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  email: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  isEmailSent: z$2.union([z$2.lazy(() => BoolFilterSchema), z$2.boolean()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional()
}).strict();
var EarlyAccessOrderByWithRelationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  email: z$2.lazy(() => SortOrderSchema).optional(),
  isEmailSent: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var EarlyAccessWhereUniqueInputSchema = z$2.union([
  z$2.object({
    id: z$2.number().int(),
    email: z$2.string()
  }),
  z$2.object({
    id: z$2.number().int()
  }),
  z$2.object({
    email: z$2.string()
  })
]).and(z$2.object({
  id: z$2.number().int().optional(),
  email: z$2.string().optional(),
  AND: z$2.union([z$2.lazy(() => EarlyAccessWhereInputSchema), z$2.lazy(() => EarlyAccessWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => EarlyAccessWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => EarlyAccessWhereInputSchema), z$2.lazy(() => EarlyAccessWhereInputSchema).array()]).optional(),
  isEmailSent: z$2.union([z$2.lazy(() => BoolFilterSchema), z$2.boolean()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional()
}).strict());
var EarlyAccessOrderByWithAggregationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  email: z$2.lazy(() => SortOrderSchema).optional(),
  isEmailSent: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional(),
  _count: z$2.lazy(() => EarlyAccessCountOrderByAggregateInputSchema).optional(),
  _avg: z$2.lazy(() => EarlyAccessAvgOrderByAggregateInputSchema).optional(),
  _max: z$2.lazy(() => EarlyAccessMaxOrderByAggregateInputSchema).optional(),
  _min: z$2.lazy(() => EarlyAccessMinOrderByAggregateInputSchema).optional(),
  _sum: z$2.lazy(() => EarlyAccessSumOrderByAggregateInputSchema).optional()
}).strict();
var EarlyAccessScalarWhereWithAggregatesInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => EarlyAccessScalarWhereWithAggregatesInputSchema), z$2.lazy(() => EarlyAccessScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: z$2.lazy(() => EarlyAccessScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => EarlyAccessScalarWhereWithAggregatesInputSchema), z$2.lazy(() => EarlyAccessScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  email: z$2.union([z$2.lazy(() => StringWithAggregatesFilterSchema), z$2.string()]).optional(),
  isEmailSent: z$2.union([z$2.lazy(() => BoolWithAggregatesFilterSchema), z$2.boolean()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional()
}).strict();
var OrganizationWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => OrganizationWhereInputSchema), z$2.lazy(() => OrganizationWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => OrganizationWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => OrganizationWhereInputSchema), z$2.lazy(() => OrganizationWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  name: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  imageUrl: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  restaurants: z$2.lazy(() => RestaurantListRelationFilterSchema).optional(),
  users: z$2.lazy(() => UserListRelationFilterSchema).optional()
}).strict();
var OrganizationOrderByWithRelationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  name: z$2.lazy(() => SortOrderSchema).optional(),
  imageUrl: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional(),
  restaurants: z$2.lazy(() => RestaurantOrderByRelationAggregateInputSchema).optional(),
  users: z$2.lazy(() => UserOrderByRelationAggregateInputSchema).optional()
}).strict();
var OrganizationWhereUniqueInputSchema = z$2.union([
  z$2.object({
    id: z$2.number().int(),
    name: z$2.string()
  }),
  z$2.object({
    id: z$2.number().int()
  }),
  z$2.object({
    name: z$2.string()
  })
]).and(z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string().optional(),
  AND: z$2.union([z$2.lazy(() => OrganizationWhereInputSchema), z$2.lazy(() => OrganizationWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => OrganizationWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => OrganizationWhereInputSchema), z$2.lazy(() => OrganizationWhereInputSchema).array()]).optional(),
  imageUrl: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  restaurants: z$2.lazy(() => RestaurantListRelationFilterSchema).optional(),
  users: z$2.lazy(() => UserListRelationFilterSchema).optional()
}).strict());
var OrganizationOrderByWithAggregationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  name: z$2.lazy(() => SortOrderSchema).optional(),
  imageUrl: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional(),
  _count: z$2.lazy(() => OrganizationCountOrderByAggregateInputSchema).optional(),
  _avg: z$2.lazy(() => OrganizationAvgOrderByAggregateInputSchema).optional(),
  _max: z$2.lazy(() => OrganizationMaxOrderByAggregateInputSchema).optional(),
  _min: z$2.lazy(() => OrganizationMinOrderByAggregateInputSchema).optional(),
  _sum: z$2.lazy(() => OrganizationSumOrderByAggregateInputSchema).optional()
}).strict();
var OrganizationScalarWhereWithAggregatesInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => OrganizationScalarWhereWithAggregatesInputSchema), z$2.lazy(() => OrganizationScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: z$2.lazy(() => OrganizationScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => OrganizationScalarWhereWithAggregatesInputSchema), z$2.lazy(() => OrganizationScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  name: z$2.union([z$2.lazy(() => StringWithAggregatesFilterSchema), z$2.string()]).optional(),
  imageUrl: z$2.union([z$2.lazy(() => StringNullableWithAggregatesFilterSchema), z$2.string()]).optional().nullable(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional()
}).strict();
var RestaurantWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => RestaurantWhereInputSchema), z$2.lazy(() => RestaurantWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => RestaurantWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => RestaurantWhereInputSchema), z$2.lazy(() => RestaurantWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  name: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  imageUrl: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  address: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  city: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  zipCode: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  state: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  owner: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  organizationId: z$2.union([z$2.lazy(() => IntNullableFilterSchema), z$2.number()]).optional().nullable(),
  foodCost: z$2.union([z$2.lazy(() => FloatNullableFilterSchema), z$2.number()]).optional().nullable(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  isDeleted: z$2.union([z$2.lazy(() => BoolFilterSchema), z$2.boolean()]).optional(),
  deleted: z$2.union([z$2.lazy(() => DateTimeNullableFilterSchema), z$2.coerce.date()]).optional().nullable(),
  organization: z$2.union([z$2.lazy(() => OrganizationNullableRelationFilterSchema), z$2.lazy(() => OrganizationWhereInputSchema)]).optional().nullable(),
  users: z$2.lazy(() => UserListRelationFilterSchema).optional(),
  cookbooks: z$2.lazy(() => CookBookListRelationFilterSchema).optional(),
  inventory: z$2.union([z$2.lazy(() => InventoryNullableRelationFilterSchema), z$2.lazy(() => InventoryWhereInputSchema)]).optional().nullable(),
  orders: z$2.lazy(() => OrderListRelationFilterSchema).optional(),
  recipes: z$2.lazy(() => RecipeListRelationFilterSchema).optional(),
  menus: z$2.lazy(() => MenuListRelationFilterSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsListRelationFilterSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemListRelationFilterSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordListRelationFilterSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanListRelationFilterSchema).optional(),
  equipment: z$2.lazy(() => EquipmentListRelationFilterSchema).optional(),
  qualityChecklist: z$2.lazy(() => QualityChecklistListRelationFilterSchema).optional(),
  qustomerFeedback: z$2.lazy(() => CustomerFeedbackListRelationFilterSchema).optional()
}).strict();
var RestaurantOrderByWithRelationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  name: z$2.lazy(() => SortOrderSchema).optional(),
  imageUrl: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  address: z$2.lazy(() => SortOrderSchema).optional(),
  city: z$2.lazy(() => SortOrderSchema).optional(),
  zipCode: z$2.lazy(() => SortOrderSchema).optional(),
  state: z$2.lazy(() => SortOrderSchema).optional(),
  owner: z$2.lazy(() => SortOrderSchema).optional(),
  organizationId: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  foodCost: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional(),
  isDeleted: z$2.lazy(() => SortOrderSchema).optional(),
  deleted: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  organization: z$2.lazy(() => OrganizationOrderByWithRelationInputSchema).optional(),
  users: z$2.lazy(() => UserOrderByRelationAggregateInputSchema).optional(),
  cookbooks: z$2.lazy(() => CookBookOrderByRelationAggregateInputSchema).optional(),
  inventory: z$2.lazy(() => InventoryOrderByWithRelationInputSchema).optional(),
  orders: z$2.lazy(() => OrderOrderByRelationAggregateInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeOrderByRelationAggregateInputSchema).optional(),
  menus: z$2.lazy(() => MenuOrderByRelationAggregateInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsOrderByRelationAggregateInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemOrderByRelationAggregateInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordOrderByRelationAggregateInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanOrderByRelationAggregateInputSchema).optional(),
  equipment: z$2.lazy(() => EquipmentOrderByRelationAggregateInputSchema).optional(),
  qualityChecklist: z$2.lazy(() => QualityChecklistOrderByRelationAggregateInputSchema).optional(),
  qustomerFeedback: z$2.lazy(() => CustomerFeedbackOrderByRelationAggregateInputSchema).optional()
}).strict();
var RestaurantWhereUniqueInputSchema = z$2.object({
  id: z$2.number().int()
}).and(z$2.object({
  id: z$2.number().int().optional(),
  AND: z$2.union([z$2.lazy(() => RestaurantWhereInputSchema), z$2.lazy(() => RestaurantWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => RestaurantWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => RestaurantWhereInputSchema), z$2.lazy(() => RestaurantWhereInputSchema).array()]).optional(),
  name: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  imageUrl: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  address: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  city: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  zipCode: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  state: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  owner: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  organizationId: z$2.union([z$2.lazy(() => IntNullableFilterSchema), z$2.number().int()]).optional().nullable(),
  foodCost: z$2.union([z$2.lazy(() => FloatNullableFilterSchema), z$2.number()]).optional().nullable(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  isDeleted: z$2.union([z$2.lazy(() => BoolFilterSchema), z$2.boolean()]).optional(),
  deleted: z$2.union([z$2.lazy(() => DateTimeNullableFilterSchema), z$2.coerce.date()]).optional().nullable(),
  organization: z$2.union([z$2.lazy(() => OrganizationNullableRelationFilterSchema), z$2.lazy(() => OrganizationWhereInputSchema)]).optional().nullable(),
  users: z$2.lazy(() => UserListRelationFilterSchema).optional(),
  cookbooks: z$2.lazy(() => CookBookListRelationFilterSchema).optional(),
  inventory: z$2.union([z$2.lazy(() => InventoryNullableRelationFilterSchema), z$2.lazy(() => InventoryWhereInputSchema)]).optional().nullable(),
  orders: z$2.lazy(() => OrderListRelationFilterSchema).optional(),
  recipes: z$2.lazy(() => RecipeListRelationFilterSchema).optional(),
  menus: z$2.lazy(() => MenuListRelationFilterSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsListRelationFilterSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemListRelationFilterSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordListRelationFilterSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanListRelationFilterSchema).optional(),
  equipment: z$2.lazy(() => EquipmentListRelationFilterSchema).optional(),
  qualityChecklist: z$2.lazy(() => QualityChecklistListRelationFilterSchema).optional(),
  qustomerFeedback: z$2.lazy(() => CustomerFeedbackListRelationFilterSchema).optional()
}).strict());
var RestaurantOrderByWithAggregationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  name: z$2.lazy(() => SortOrderSchema).optional(),
  imageUrl: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  address: z$2.lazy(() => SortOrderSchema).optional(),
  city: z$2.lazy(() => SortOrderSchema).optional(),
  zipCode: z$2.lazy(() => SortOrderSchema).optional(),
  state: z$2.lazy(() => SortOrderSchema).optional(),
  owner: z$2.lazy(() => SortOrderSchema).optional(),
  organizationId: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  foodCost: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional(),
  isDeleted: z$2.lazy(() => SortOrderSchema).optional(),
  deleted: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  _count: z$2.lazy(() => RestaurantCountOrderByAggregateInputSchema).optional(),
  _avg: z$2.lazy(() => RestaurantAvgOrderByAggregateInputSchema).optional(),
  _max: z$2.lazy(() => RestaurantMaxOrderByAggregateInputSchema).optional(),
  _min: z$2.lazy(() => RestaurantMinOrderByAggregateInputSchema).optional(),
  _sum: z$2.lazy(() => RestaurantSumOrderByAggregateInputSchema).optional()
}).strict();
var RestaurantScalarWhereWithAggregatesInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => RestaurantScalarWhereWithAggregatesInputSchema), z$2.lazy(() => RestaurantScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: z$2.lazy(() => RestaurantScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => RestaurantScalarWhereWithAggregatesInputSchema), z$2.lazy(() => RestaurantScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  name: z$2.union([z$2.lazy(() => StringWithAggregatesFilterSchema), z$2.string()]).optional(),
  imageUrl: z$2.union([z$2.lazy(() => StringNullableWithAggregatesFilterSchema), z$2.string()]).optional().nullable(),
  address: z$2.union([z$2.lazy(() => StringWithAggregatesFilterSchema), z$2.string()]).optional(),
  city: z$2.union([z$2.lazy(() => StringWithAggregatesFilterSchema), z$2.string()]).optional(),
  zipCode: z$2.union([z$2.lazy(() => StringWithAggregatesFilterSchema), z$2.string()]).optional(),
  state: z$2.union([z$2.lazy(() => StringWithAggregatesFilterSchema), z$2.string()]).optional(),
  owner: z$2.union([z$2.lazy(() => StringWithAggregatesFilterSchema), z$2.string()]).optional(),
  organizationId: z$2.union([z$2.lazy(() => IntNullableWithAggregatesFilterSchema), z$2.number()]).optional().nullable(),
  foodCost: z$2.union([z$2.lazy(() => FloatNullableWithAggregatesFilterSchema), z$2.number()]).optional().nullable(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional(),
  isDeleted: z$2.union([z$2.lazy(() => BoolWithAggregatesFilterSchema), z$2.boolean()]).optional(),
  deleted: z$2.union([z$2.lazy(() => DateTimeNullableWithAggregatesFilterSchema), z$2.coerce.date()]).optional().nullable()
}).strict();
var UserWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => UserWhereInputSchema), z$2.lazy(() => UserWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => UserWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => UserWhereInputSchema), z$2.lazy(() => UserWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  email: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  sub: z$2.union([z$2.lazy(() => IntNullableFilterSchema), z$2.number()]).optional().nullable(),
  passwordHash: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  firstName: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  lastName: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  profileImage: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  verified: z$2.union([z$2.lazy(() => BoolFilterSchema), z$2.boolean()]).optional(),
  role: z$2.union([z$2.lazy(() => EnumUserRoleFilterSchema), z$2.lazy(() => UserRoleSchema)]).optional(),
  organizationId: z$2.union([z$2.lazy(() => IntNullableFilterSchema), z$2.number()]).optional().nullable(),
  restaurantId: z$2.union([z$2.lazy(() => IntNullableFilterSchema), z$2.number()]).optional().nullable(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  organization: z$2.union([z$2.lazy(() => OrganizationNullableRelationFilterSchema), z$2.lazy(() => OrganizationWhereInputSchema)]).optional().nullable(),
  restaurant: z$2.union([z$2.lazy(() => RestaurantNullableRelationFilterSchema), z$2.lazy(() => RestaurantWhereInputSchema)]).optional().nullable(),
  shifts: z$2.lazy(() => ShiftListRelationFilterSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemListRelationFilterSchema).optional(),
  inventoryUpdates: z$2.lazy(() => InventoryItemListRelationFilterSchema).optional(),
  sessions: z$2.lazy(() => SessionListRelationFilterSchema).optional(),
  passwordResets: z$2.lazy(() => PasswordResetListRelationFilterSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemListRelationFilterSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordListRelationFilterSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanListRelationFilterSchema).optional(),
  productionPlanItem: z$2.lazy(() => ProductionPlanItemListRelationFilterSchema).optional(),
  availability: z$2.lazy(() => AvailabilityListRelationFilterSchema).optional(),
  schedulingConstraint: z$2.lazy(() => SchedulingConstraintListRelationFilterSchema).optional(),
  inventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalListRelationFilterSchema).optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteListRelationFilterSchema).optional(),
  customerFeedback: z$2.lazy(() => CustomerFeedbackListRelationFilterSchema).optional(),
  recipeVersionsCreated: z$2.lazy(() => RecipeVersionListRelationFilterSchema).optional(),
  recipeVersionsApproved: z$2.lazy(() => RecipeVersionListRelationFilterSchema).optional()
}).strict();
var UserOrderByWithRelationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  email: z$2.lazy(() => SortOrderSchema).optional(),
  sub: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  passwordHash: z$2.lazy(() => SortOrderSchema).optional(),
  firstName: z$2.lazy(() => SortOrderSchema).optional(),
  lastName: z$2.lazy(() => SortOrderSchema).optional(),
  profileImage: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  verified: z$2.lazy(() => SortOrderSchema).optional(),
  role: z$2.lazy(() => SortOrderSchema).optional(),
  organizationId: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  restaurantId: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional(),
  organization: z$2.lazy(() => OrganizationOrderByWithRelationInputSchema).optional(),
  restaurant: z$2.lazy(() => RestaurantOrderByWithRelationInputSchema).optional(),
  shifts: z$2.lazy(() => ShiftOrderByRelationAggregateInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemOrderByRelationAggregateInputSchema).optional(),
  inventoryUpdates: z$2.lazy(() => InventoryItemOrderByRelationAggregateInputSchema).optional(),
  sessions: z$2.lazy(() => SessionOrderByRelationAggregateInputSchema).optional(),
  passwordResets: z$2.lazy(() => PasswordResetOrderByRelationAggregateInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemOrderByRelationAggregateInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordOrderByRelationAggregateInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanOrderByRelationAggregateInputSchema).optional(),
  productionPlanItem: z$2.lazy(() => ProductionPlanItemOrderByRelationAggregateInputSchema).optional(),
  availability: z$2.lazy(() => AvailabilityOrderByRelationAggregateInputSchema).optional(),
  schedulingConstraint: z$2.lazy(() => SchedulingConstraintOrderByRelationAggregateInputSchema).optional(),
  inventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalOrderByRelationAggregateInputSchema).optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteOrderByRelationAggregateInputSchema).optional(),
  customerFeedback: z$2.lazy(() => CustomerFeedbackOrderByRelationAggregateInputSchema).optional(),
  recipeVersionsCreated: z$2.lazy(() => RecipeVersionOrderByRelationAggregateInputSchema).optional(),
  recipeVersionsApproved: z$2.lazy(() => RecipeVersionOrderByRelationAggregateInputSchema).optional()
}).strict();
var UserWhereUniqueInputSchema = z$2.union([
  z$2.object({
    id: z$2.number().int(),
    email: z$2.string(),
    sub: z$2.number().int()
  }),
  z$2.object({
    id: z$2.number().int(),
    email: z$2.string()
  }),
  z$2.object({
    id: z$2.number().int(),
    sub: z$2.number().int()
  }),
  z$2.object({
    id: z$2.number().int()
  }),
  z$2.object({
    email: z$2.string(),
    sub: z$2.number().int()
  }),
  z$2.object({
    email: z$2.string()
  }),
  z$2.object({
    sub: z$2.number().int()
  })
]).and(z$2.object({
  id: z$2.number().int().optional(),
  email: z$2.string().optional(),
  sub: z$2.number().int().optional(),
  AND: z$2.union([z$2.lazy(() => UserWhereInputSchema), z$2.lazy(() => UserWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => UserWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => UserWhereInputSchema), z$2.lazy(() => UserWhereInputSchema).array()]).optional(),
  passwordHash: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  firstName: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  lastName: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  profileImage: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  verified: z$2.union([z$2.lazy(() => BoolFilterSchema), z$2.boolean()]).optional(),
  role: z$2.union([z$2.lazy(() => EnumUserRoleFilterSchema), z$2.lazy(() => UserRoleSchema)]).optional(),
  organizationId: z$2.union([z$2.lazy(() => IntNullableFilterSchema), z$2.number().int()]).optional().nullable(),
  restaurantId: z$2.union([z$2.lazy(() => IntNullableFilterSchema), z$2.number().int()]).optional().nullable(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  organization: z$2.union([z$2.lazy(() => OrganizationNullableRelationFilterSchema), z$2.lazy(() => OrganizationWhereInputSchema)]).optional().nullable(),
  restaurant: z$2.union([z$2.lazy(() => RestaurantNullableRelationFilterSchema), z$2.lazy(() => RestaurantWhereInputSchema)]).optional().nullable(),
  shifts: z$2.lazy(() => ShiftListRelationFilterSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemListRelationFilterSchema).optional(),
  inventoryUpdates: z$2.lazy(() => InventoryItemListRelationFilterSchema).optional(),
  sessions: z$2.lazy(() => SessionListRelationFilterSchema).optional(),
  passwordResets: z$2.lazy(() => PasswordResetListRelationFilterSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemListRelationFilterSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordListRelationFilterSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanListRelationFilterSchema).optional(),
  productionPlanItem: z$2.lazy(() => ProductionPlanItemListRelationFilterSchema).optional(),
  availability: z$2.lazy(() => AvailabilityListRelationFilterSchema).optional(),
  schedulingConstraint: z$2.lazy(() => SchedulingConstraintListRelationFilterSchema).optional(),
  inventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalListRelationFilterSchema).optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteListRelationFilterSchema).optional(),
  customerFeedback: z$2.lazy(() => CustomerFeedbackListRelationFilterSchema).optional(),
  recipeVersionsCreated: z$2.lazy(() => RecipeVersionListRelationFilterSchema).optional(),
  recipeVersionsApproved: z$2.lazy(() => RecipeVersionListRelationFilterSchema).optional()
}).strict());
var UserOrderByWithAggregationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  email: z$2.lazy(() => SortOrderSchema).optional(),
  sub: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  passwordHash: z$2.lazy(() => SortOrderSchema).optional(),
  firstName: z$2.lazy(() => SortOrderSchema).optional(),
  lastName: z$2.lazy(() => SortOrderSchema).optional(),
  profileImage: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  verified: z$2.lazy(() => SortOrderSchema).optional(),
  role: z$2.lazy(() => SortOrderSchema).optional(),
  organizationId: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  restaurantId: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional(),
  _count: z$2.lazy(() => UserCountOrderByAggregateInputSchema).optional(),
  _avg: z$2.lazy(() => UserAvgOrderByAggregateInputSchema).optional(),
  _max: z$2.lazy(() => UserMaxOrderByAggregateInputSchema).optional(),
  _min: z$2.lazy(() => UserMinOrderByAggregateInputSchema).optional(),
  _sum: z$2.lazy(() => UserSumOrderByAggregateInputSchema).optional()
}).strict();
var UserScalarWhereWithAggregatesInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => UserScalarWhereWithAggregatesInputSchema), z$2.lazy(() => UserScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: z$2.lazy(() => UserScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => UserScalarWhereWithAggregatesInputSchema), z$2.lazy(() => UserScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  email: z$2.union([z$2.lazy(() => StringWithAggregatesFilterSchema), z$2.string()]).optional(),
  sub: z$2.union([z$2.lazy(() => IntNullableWithAggregatesFilterSchema), z$2.number()]).optional().nullable(),
  passwordHash: z$2.union([z$2.lazy(() => StringWithAggregatesFilterSchema), z$2.string()]).optional(),
  firstName: z$2.union([z$2.lazy(() => StringWithAggregatesFilterSchema), z$2.string()]).optional(),
  lastName: z$2.union([z$2.lazy(() => StringWithAggregatesFilterSchema), z$2.string()]).optional(),
  profileImage: z$2.union([z$2.lazy(() => StringNullableWithAggregatesFilterSchema), z$2.string()]).optional().nullable(),
  verified: z$2.union([z$2.lazy(() => BoolWithAggregatesFilterSchema), z$2.boolean()]).optional(),
  role: z$2.union([z$2.lazy(() => EnumUserRoleWithAggregatesFilterSchema), z$2.lazy(() => UserRoleSchema)]).optional(),
  organizationId: z$2.union([z$2.lazy(() => IntNullableWithAggregatesFilterSchema), z$2.number()]).optional().nullable(),
  restaurantId: z$2.union([z$2.lazy(() => IntNullableWithAggregatesFilterSchema), z$2.number()]).optional().nullable(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional()
}).strict();
var SessionWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => SessionWhereInputSchema), z$2.lazy(() => SessionWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => SessionWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => SessionWhereInputSchema), z$2.lazy(() => SessionWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  userId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  code: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  token: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  expiresAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  user: z$2.union([z$2.lazy(() => UserRelationFilterSchema), z$2.lazy(() => UserWhereInputSchema)]).optional()
}).strict();
var SessionOrderByWithRelationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  userId: z$2.lazy(() => SortOrderSchema).optional(),
  code: z$2.lazy(() => SortOrderSchema).optional(),
  token: z$2.lazy(() => SortOrderSchema).optional(),
  expiresAt: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  user: z$2.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();
var SessionWhereUniqueInputSchema = z$2.union([
  z$2.object({
    id: z$2.string(),
    code: z$2.string(),
    token: z$2.string()
  }),
  z$2.object({
    id: z$2.string(),
    code: z$2.string()
  }),
  z$2.object({
    id: z$2.string(),
    token: z$2.string()
  }),
  z$2.object({
    id: z$2.string()
  }),
  z$2.object({
    code: z$2.string(),
    token: z$2.string()
  }),
  z$2.object({
    code: z$2.string()
  }),
  z$2.object({
    token: z$2.string()
  })
]).and(z$2.object({
  id: z$2.string().optional(),
  code: z$2.string().optional(),
  token: z$2.string().optional(),
  AND: z$2.union([z$2.lazy(() => SessionWhereInputSchema), z$2.lazy(() => SessionWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => SessionWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => SessionWhereInputSchema), z$2.lazy(() => SessionWhereInputSchema).array()]).optional(),
  userId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number().int()]).optional(),
  expiresAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  user: z$2.union([z$2.lazy(() => UserRelationFilterSchema), z$2.lazy(() => UserWhereInputSchema)]).optional()
}).strict());
var SessionOrderByWithAggregationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  userId: z$2.lazy(() => SortOrderSchema).optional(),
  code: z$2.lazy(() => SortOrderSchema).optional(),
  token: z$2.lazy(() => SortOrderSchema).optional(),
  expiresAt: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  _count: z$2.lazy(() => SessionCountOrderByAggregateInputSchema).optional(),
  _avg: z$2.lazy(() => SessionAvgOrderByAggregateInputSchema).optional(),
  _max: z$2.lazy(() => SessionMaxOrderByAggregateInputSchema).optional(),
  _min: z$2.lazy(() => SessionMinOrderByAggregateInputSchema).optional(),
  _sum: z$2.lazy(() => SessionSumOrderByAggregateInputSchema).optional()
}).strict();
var SessionScalarWhereWithAggregatesInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => SessionScalarWhereWithAggregatesInputSchema), z$2.lazy(() => SessionScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: z$2.lazy(() => SessionScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => SessionScalarWhereWithAggregatesInputSchema), z$2.lazy(() => SessionScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => StringWithAggregatesFilterSchema), z$2.string()]).optional(),
  userId: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  code: z$2.union([z$2.lazy(() => StringWithAggregatesFilterSchema), z$2.string()]).optional(),
  token: z$2.union([z$2.lazy(() => StringWithAggregatesFilterSchema), z$2.string()]).optional(),
  expiresAt: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional()
}).strict();
var CookBookWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => CookBookWhereInputSchema), z$2.lazy(() => CookBookWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => CookBookWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => CookBookWhereInputSchema), z$2.lazy(() => CookBookWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  name: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  imageUrl: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  category: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  restaurantId: z$2.union([z$2.lazy(() => IntNullableFilterSchema), z$2.number()]).optional().nullable(),
  recipes: z$2.lazy(() => RecipeListRelationFilterSchema).optional(),
  restaurant: z$2.union([z$2.lazy(() => RestaurantNullableRelationFilterSchema), z$2.lazy(() => RestaurantWhereInputSchema)]).optional().nullable()
}).strict();
var CookBookOrderByWithRelationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  name: z$2.lazy(() => SortOrderSchema).optional(),
  imageUrl: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  category: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  recipes: z$2.lazy(() => RecipeOrderByRelationAggregateInputSchema).optional(),
  restaurant: z$2.lazy(() => RestaurantOrderByWithRelationInputSchema).optional()
}).strict();
var CookBookWhereUniqueInputSchema = z$2.object({
  id: z$2.number().int()
}).and(z$2.object({
  id: z$2.number().int().optional(),
  AND: z$2.union([z$2.lazy(() => CookBookWhereInputSchema), z$2.lazy(() => CookBookWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => CookBookWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => CookBookWhereInputSchema), z$2.lazy(() => CookBookWhereInputSchema).array()]).optional(),
  name: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  imageUrl: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  category: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  restaurantId: z$2.union([z$2.lazy(() => IntNullableFilterSchema), z$2.number().int()]).optional().nullable(),
  recipes: z$2.lazy(() => RecipeListRelationFilterSchema).optional(),
  restaurant: z$2.union([z$2.lazy(() => RestaurantNullableRelationFilterSchema), z$2.lazy(() => RestaurantWhereInputSchema)]).optional().nullable()
}).strict());
var CookBookOrderByWithAggregationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  name: z$2.lazy(() => SortOrderSchema).optional(),
  imageUrl: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  category: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  _count: z$2.lazy(() => CookBookCountOrderByAggregateInputSchema).optional(),
  _avg: z$2.lazy(() => CookBookAvgOrderByAggregateInputSchema).optional(),
  _max: z$2.lazy(() => CookBookMaxOrderByAggregateInputSchema).optional(),
  _min: z$2.lazy(() => CookBookMinOrderByAggregateInputSchema).optional(),
  _sum: z$2.lazy(() => CookBookSumOrderByAggregateInputSchema).optional()
}).strict();
var CookBookScalarWhereWithAggregatesInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => CookBookScalarWhereWithAggregatesInputSchema), z$2.lazy(() => CookBookScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: z$2.lazy(() => CookBookScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => CookBookScalarWhereWithAggregatesInputSchema), z$2.lazy(() => CookBookScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  name: z$2.union([z$2.lazy(() => StringWithAggregatesFilterSchema), z$2.string()]).optional(),
  imageUrl: z$2.union([z$2.lazy(() => StringNullableWithAggregatesFilterSchema), z$2.string()]).optional().nullable(),
  category: z$2.union([z$2.lazy(() => StringWithAggregatesFilterSchema), z$2.string()]).optional(),
  restaurantId: z$2.union([z$2.lazy(() => IntNullableWithAggregatesFilterSchema), z$2.number()]).optional().nullable()
}).strict();
var RecipeWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => RecipeWhereInputSchema), z$2.lazy(() => RecipeWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => RecipeWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => RecipeWhereInputSchema), z$2.lazy(() => RecipeWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  name: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  imageUrl: z$2.lazy(() => StringNullableListFilterSchema).optional(),
  description: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  servings: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  cookTime: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  prepTime: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  frequency: z$2.union([z$2.lazy(() => IntNullableFilterSchema), z$2.number()]).optional().nullable(),
  restaurantId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  cookBookId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  foodCost: z$2.union([z$2.lazy(() => FloatNullableFilterSchema), z$2.number()]).optional().nullable(),
  isDeleted: z$2.union([z$2.lazy(() => BoolFilterSchema), z$2.boolean()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  restaurant: z$2.union([z$2.lazy(() => RestaurantRelationFilterSchema), z$2.lazy(() => RestaurantWhereInputSchema)]).optional(),
  cookBook: z$2.union([z$2.lazy(() => CookBookRelationFilterSchema), z$2.lazy(() => CookBookWhereInputSchema)]).optional(),
  ingredients: z$2.lazy(() => RecipeIngredientListRelationFilterSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionListRelationFilterSchema).optional(),
  menuItems: z$2.lazy(() => MenuItemListRelationFilterSchema).optional(),
  foodCostHistory: z$2.lazy(() => FoodCostHistoryListRelationFilterSchema).optional(),
  prepHistory: z$2.lazy(() => PrepHistoryListRelationFilterSchema).optional(),
  prepBoards: z$2.lazy(() => PrepBoardListRelationFilterSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemListRelationFilterSchema).optional(),
  MenuItemRecipe: z$2.lazy(() => MenuItemRecipeListRelationFilterSchema).optional(),
  ProductionPlanItem: z$2.lazy(() => ProductionPlanItemListRelationFilterSchema).optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalListRelationFilterSchema).optional(),
  tags: z$2.lazy(() => RecipeTagListRelationFilterSchema).optional(),
  versions: z$2.lazy(() => RecipeVersionListRelationFilterSchema).optional(),
  equipment: z$2.lazy(() => RecipeEquipmentListRelationFilterSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionListRelationFilterSchema).optional()
}).strict();
var RecipeOrderByWithRelationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  name: z$2.lazy(() => SortOrderSchema).optional(),
  imageUrl: z$2.lazy(() => SortOrderSchema).optional(),
  description: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  servings: z$2.lazy(() => SortOrderSchema).optional(),
  cookTime: z$2.lazy(() => SortOrderSchema).optional(),
  prepTime: z$2.lazy(() => SortOrderSchema).optional(),
  frequency: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional(),
  cookBookId: z$2.lazy(() => SortOrderSchema).optional(),
  foodCost: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  isDeleted: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional(),
  restaurant: z$2.lazy(() => RestaurantOrderByWithRelationInputSchema).optional(),
  cookBook: z$2.lazy(() => CookBookOrderByWithRelationInputSchema).optional(),
  ingredients: z$2.lazy(() => RecipeIngredientOrderByRelationAggregateInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionOrderByRelationAggregateInputSchema).optional(),
  menuItems: z$2.lazy(() => MenuItemOrderByRelationAggregateInputSchema).optional(),
  foodCostHistory: z$2.lazy(() => FoodCostHistoryOrderByRelationAggregateInputSchema).optional(),
  prepHistory: z$2.lazy(() => PrepHistoryOrderByRelationAggregateInputSchema).optional(),
  prepBoards: z$2.lazy(() => PrepBoardOrderByRelationAggregateInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemOrderByRelationAggregateInputSchema).optional(),
  MenuItemRecipe: z$2.lazy(() => MenuItemRecipeOrderByRelationAggregateInputSchema).optional(),
  ProductionPlanItem: z$2.lazy(() => ProductionPlanItemOrderByRelationAggregateInputSchema).optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalOrderByRelationAggregateInputSchema).optional(),
  tags: z$2.lazy(() => RecipeTagOrderByRelationAggregateInputSchema).optional(),
  versions: z$2.lazy(() => RecipeVersionOrderByRelationAggregateInputSchema).optional(),
  equipment: z$2.lazy(() => RecipeEquipmentOrderByRelationAggregateInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionOrderByRelationAggregateInputSchema).optional()
}).strict();
var RecipeWhereUniqueInputSchema = z$2.object({
  id: z$2.number().int()
}).and(z$2.object({
  id: z$2.number().int().optional(),
  AND: z$2.union([z$2.lazy(() => RecipeWhereInputSchema), z$2.lazy(() => RecipeWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => RecipeWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => RecipeWhereInputSchema), z$2.lazy(() => RecipeWhereInputSchema).array()]).optional(),
  name: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  imageUrl: z$2.lazy(() => StringNullableListFilterSchema).optional(),
  description: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  servings: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number().int()]).optional(),
  cookTime: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number().int()]).optional(),
  prepTime: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number().int()]).optional(),
  frequency: z$2.union([z$2.lazy(() => IntNullableFilterSchema), z$2.number().int()]).optional().nullable(),
  restaurantId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number().int()]).optional(),
  cookBookId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number().int()]).optional(),
  foodCost: z$2.union([z$2.lazy(() => FloatNullableFilterSchema), z$2.number()]).optional().nullable(),
  isDeleted: z$2.union([z$2.lazy(() => BoolFilterSchema), z$2.boolean()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  restaurant: z$2.union([z$2.lazy(() => RestaurantRelationFilterSchema), z$2.lazy(() => RestaurantWhereInputSchema)]).optional(),
  cookBook: z$2.union([z$2.lazy(() => CookBookRelationFilterSchema), z$2.lazy(() => CookBookWhereInputSchema)]).optional(),
  ingredients: z$2.lazy(() => RecipeIngredientListRelationFilterSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionListRelationFilterSchema).optional(),
  menuItems: z$2.lazy(() => MenuItemListRelationFilterSchema).optional(),
  foodCostHistory: z$2.lazy(() => FoodCostHistoryListRelationFilterSchema).optional(),
  prepHistory: z$2.lazy(() => PrepHistoryListRelationFilterSchema).optional(),
  prepBoards: z$2.lazy(() => PrepBoardListRelationFilterSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemListRelationFilterSchema).optional(),
  MenuItemRecipe: z$2.lazy(() => MenuItemRecipeListRelationFilterSchema).optional(),
  ProductionPlanItem: z$2.lazy(() => ProductionPlanItemListRelationFilterSchema).optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalListRelationFilterSchema).optional(),
  tags: z$2.lazy(() => RecipeTagListRelationFilterSchema).optional(),
  versions: z$2.lazy(() => RecipeVersionListRelationFilterSchema).optional(),
  equipment: z$2.lazy(() => RecipeEquipmentListRelationFilterSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionListRelationFilterSchema).optional()
}).strict());
var RecipeOrderByWithAggregationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  name: z$2.lazy(() => SortOrderSchema).optional(),
  imageUrl: z$2.lazy(() => SortOrderSchema).optional(),
  description: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  servings: z$2.lazy(() => SortOrderSchema).optional(),
  cookTime: z$2.lazy(() => SortOrderSchema).optional(),
  prepTime: z$2.lazy(() => SortOrderSchema).optional(),
  frequency: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional(),
  cookBookId: z$2.lazy(() => SortOrderSchema).optional(),
  foodCost: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  isDeleted: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional(),
  _count: z$2.lazy(() => RecipeCountOrderByAggregateInputSchema).optional(),
  _avg: z$2.lazy(() => RecipeAvgOrderByAggregateInputSchema).optional(),
  _max: z$2.lazy(() => RecipeMaxOrderByAggregateInputSchema).optional(),
  _min: z$2.lazy(() => RecipeMinOrderByAggregateInputSchema).optional(),
  _sum: z$2.lazy(() => RecipeSumOrderByAggregateInputSchema).optional()
}).strict();
var RecipeScalarWhereWithAggregatesInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => RecipeScalarWhereWithAggregatesInputSchema), z$2.lazy(() => RecipeScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: z$2.lazy(() => RecipeScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => RecipeScalarWhereWithAggregatesInputSchema), z$2.lazy(() => RecipeScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  name: z$2.union([z$2.lazy(() => StringWithAggregatesFilterSchema), z$2.string()]).optional(),
  imageUrl: z$2.lazy(() => StringNullableListFilterSchema).optional(),
  description: z$2.union([z$2.lazy(() => StringNullableWithAggregatesFilterSchema), z$2.string()]).optional().nullable(),
  servings: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  cookTime: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  prepTime: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  frequency: z$2.union([z$2.lazy(() => IntNullableWithAggregatesFilterSchema), z$2.number()]).optional().nullable(),
  restaurantId: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  cookBookId: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  foodCost: z$2.union([z$2.lazy(() => FloatNullableWithAggregatesFilterSchema), z$2.number()]).optional().nullable(),
  isDeleted: z$2.union([z$2.lazy(() => BoolWithAggregatesFilterSchema), z$2.boolean()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional()
}).strict();
var IngredientWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => IngredientWhereInputSchema), z$2.lazy(() => IngredientWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => IngredientWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => IngredientWhereInputSchema), z$2.lazy(() => IngredientWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  name: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  category: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  price: z$2.union([z$2.lazy(() => FloatFilterSchema), z$2.number()]).optional(),
  dietaryRestrictionId: z$2.union([z$2.lazy(() => IntNullableFilterSchema), z$2.number()]).optional().nullable(),
  recipeIngredients: z$2.lazy(() => RecipeIngredientListRelationFilterSchema).optional(),
  inventoryItems: z$2.lazy(() => InventoryItemListRelationFilterSchema).optional(),
  orderItems: z$2.lazy(() => OrderItemListRelationFilterSchema).optional(),
  vendors: z$2.lazy(() => VendorListRelationFilterSchema).optional(),
  WasteRecord: z$2.lazy(() => WasteRecordListRelationFilterSchema).optional(),
  IngredientAllergen: z$2.lazy(() => IngredientAllergenListRelationFilterSchema).optional(),
  SupplierPriceHistory: z$2.lazy(() => SupplierPriceHistoryListRelationFilterSchema).optional(),
  DietaryRestriction: z$2.union([z$2.lazy(() => DietaryRestrictionNullableRelationFilterSchema), z$2.lazy(() => DietaryRestrictionWhereInputSchema)]).optional().nullable()
}).strict();
var IngredientOrderByWithRelationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  name: z$2.lazy(() => SortOrderSchema).optional(),
  category: z$2.lazy(() => SortOrderSchema).optional(),
  price: z$2.lazy(() => SortOrderSchema).optional(),
  dietaryRestrictionId: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  recipeIngredients: z$2.lazy(() => RecipeIngredientOrderByRelationAggregateInputSchema).optional(),
  inventoryItems: z$2.lazy(() => InventoryItemOrderByRelationAggregateInputSchema).optional(),
  orderItems: z$2.lazy(() => OrderItemOrderByRelationAggregateInputSchema).optional(),
  vendors: z$2.lazy(() => VendorOrderByRelationAggregateInputSchema).optional(),
  WasteRecord: z$2.lazy(() => WasteRecordOrderByRelationAggregateInputSchema).optional(),
  IngredientAllergen: z$2.lazy(() => IngredientAllergenOrderByRelationAggregateInputSchema).optional(),
  SupplierPriceHistory: z$2.lazy(() => SupplierPriceHistoryOrderByRelationAggregateInputSchema).optional(),
  DietaryRestriction: z$2.lazy(() => DietaryRestrictionOrderByWithRelationInputSchema).optional()
}).strict();
var IngredientWhereUniqueInputSchema = z$2.union([
  z$2.object({
    id: z$2.number().int(),
    name: z$2.string()
  }),
  z$2.object({
    id: z$2.number().int()
  }),
  z$2.object({
    name: z$2.string()
  })
]).and(z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string().optional(),
  AND: z$2.union([z$2.lazy(() => IngredientWhereInputSchema), z$2.lazy(() => IngredientWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => IngredientWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => IngredientWhereInputSchema), z$2.lazy(() => IngredientWhereInputSchema).array()]).optional(),
  category: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  price: z$2.union([z$2.lazy(() => FloatFilterSchema), z$2.number()]).optional(),
  dietaryRestrictionId: z$2.union([z$2.lazy(() => IntNullableFilterSchema), z$2.number().int()]).optional().nullable(),
  recipeIngredients: z$2.lazy(() => RecipeIngredientListRelationFilterSchema).optional(),
  inventoryItems: z$2.lazy(() => InventoryItemListRelationFilterSchema).optional(),
  orderItems: z$2.lazy(() => OrderItemListRelationFilterSchema).optional(),
  vendors: z$2.lazy(() => VendorListRelationFilterSchema).optional(),
  WasteRecord: z$2.lazy(() => WasteRecordListRelationFilterSchema).optional(),
  IngredientAllergen: z$2.lazy(() => IngredientAllergenListRelationFilterSchema).optional(),
  SupplierPriceHistory: z$2.lazy(() => SupplierPriceHistoryListRelationFilterSchema).optional(),
  DietaryRestriction: z$2.union([z$2.lazy(() => DietaryRestrictionNullableRelationFilterSchema), z$2.lazy(() => DietaryRestrictionWhereInputSchema)]).optional().nullable()
}).strict());
var IngredientOrderByWithAggregationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  name: z$2.lazy(() => SortOrderSchema).optional(),
  category: z$2.lazy(() => SortOrderSchema).optional(),
  price: z$2.lazy(() => SortOrderSchema).optional(),
  dietaryRestrictionId: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  _count: z$2.lazy(() => IngredientCountOrderByAggregateInputSchema).optional(),
  _avg: z$2.lazy(() => IngredientAvgOrderByAggregateInputSchema).optional(),
  _max: z$2.lazy(() => IngredientMaxOrderByAggregateInputSchema).optional(),
  _min: z$2.lazy(() => IngredientMinOrderByAggregateInputSchema).optional(),
  _sum: z$2.lazy(() => IngredientSumOrderByAggregateInputSchema).optional()
}).strict();
var IngredientScalarWhereWithAggregatesInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => IngredientScalarWhereWithAggregatesInputSchema), z$2.lazy(() => IngredientScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: z$2.lazy(() => IngredientScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => IngredientScalarWhereWithAggregatesInputSchema), z$2.lazy(() => IngredientScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  name: z$2.union([z$2.lazy(() => StringWithAggregatesFilterSchema), z$2.string()]).optional(),
  category: z$2.union([z$2.lazy(() => StringWithAggregatesFilterSchema), z$2.string()]).optional(),
  price: z$2.union([z$2.lazy(() => FloatWithAggregatesFilterSchema), z$2.number()]).optional(),
  dietaryRestrictionId: z$2.union([z$2.lazy(() => IntNullableWithAggregatesFilterSchema), z$2.number()]).optional().nullable()
}).strict();
var RecipeIngredientWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => RecipeIngredientWhereInputSchema), z$2.lazy(() => RecipeIngredientWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => RecipeIngredientWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => RecipeIngredientWhereInputSchema), z$2.lazy(() => RecipeIngredientWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  recipeId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  ingredientId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  quantity: z$2.union([z$2.lazy(() => FloatFilterSchema), z$2.number()]).optional(),
  unit: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  joinAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  recipeVersionId: z$2.union([z$2.lazy(() => IntNullableFilterSchema), z$2.number()]).optional().nullable(),
  recipe: z$2.union([z$2.lazy(() => RecipeRelationFilterSchema), z$2.lazy(() => RecipeWhereInputSchema)]).optional(),
  ingredient: z$2.union([z$2.lazy(() => IngredientRelationFilterSchema), z$2.lazy(() => IngredientWhereInputSchema)]).optional(),
  RecipeVersion: z$2.union([z$2.lazy(() => RecipeVersionNullableRelationFilterSchema), z$2.lazy(() => RecipeVersionWhereInputSchema)]).optional().nullable()
}).strict();
var RecipeIngredientOrderByWithRelationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  recipeId: z$2.lazy(() => SortOrderSchema).optional(),
  ingredientId: z$2.lazy(() => SortOrderSchema).optional(),
  quantity: z$2.lazy(() => SortOrderSchema).optional(),
  unit: z$2.lazy(() => SortOrderSchema).optional(),
  joinAt: z$2.lazy(() => SortOrderSchema).optional(),
  recipeVersionId: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  recipe: z$2.lazy(() => RecipeOrderByWithRelationInputSchema).optional(),
  ingredient: z$2.lazy(() => IngredientOrderByWithRelationInputSchema).optional(),
  RecipeVersion: z$2.lazy(() => RecipeVersionOrderByWithRelationInputSchema).optional()
}).strict();
var RecipeIngredientWhereUniqueInputSchema = z$2.union([
  z$2.object({
    id: z$2.number().int(),
    recipeId_ingredientId: z$2.lazy(() => RecipeIngredientRecipeIdIngredientIdCompoundUniqueInputSchema)
  }),
  z$2.object({
    id: z$2.number().int()
  }),
  z$2.object({
    recipeId_ingredientId: z$2.lazy(() => RecipeIngredientRecipeIdIngredientIdCompoundUniqueInputSchema)
  })
]).and(z$2.object({
  id: z$2.number().int().optional(),
  recipeId_ingredientId: z$2.lazy(() => RecipeIngredientRecipeIdIngredientIdCompoundUniqueInputSchema).optional(),
  AND: z$2.union([z$2.lazy(() => RecipeIngredientWhereInputSchema), z$2.lazy(() => RecipeIngredientWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => RecipeIngredientWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => RecipeIngredientWhereInputSchema), z$2.lazy(() => RecipeIngredientWhereInputSchema).array()]).optional(),
  recipeId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number().int()]).optional(),
  ingredientId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number().int()]).optional(),
  quantity: z$2.union([z$2.lazy(() => FloatFilterSchema), z$2.number()]).optional(),
  unit: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  joinAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  recipeVersionId: z$2.union([z$2.lazy(() => IntNullableFilterSchema), z$2.number().int()]).optional().nullable(),
  recipe: z$2.union([z$2.lazy(() => RecipeRelationFilterSchema), z$2.lazy(() => RecipeWhereInputSchema)]).optional(),
  ingredient: z$2.union([z$2.lazy(() => IngredientRelationFilterSchema), z$2.lazy(() => IngredientWhereInputSchema)]).optional(),
  RecipeVersion: z$2.union([z$2.lazy(() => RecipeVersionNullableRelationFilterSchema), z$2.lazy(() => RecipeVersionWhereInputSchema)]).optional().nullable()
}).strict());
var RecipeIngredientOrderByWithAggregationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  recipeId: z$2.lazy(() => SortOrderSchema).optional(),
  ingredientId: z$2.lazy(() => SortOrderSchema).optional(),
  quantity: z$2.lazy(() => SortOrderSchema).optional(),
  unit: z$2.lazy(() => SortOrderSchema).optional(),
  joinAt: z$2.lazy(() => SortOrderSchema).optional(),
  recipeVersionId: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  _count: z$2.lazy(() => RecipeIngredientCountOrderByAggregateInputSchema).optional(),
  _avg: z$2.lazy(() => RecipeIngredientAvgOrderByAggregateInputSchema).optional(),
  _max: z$2.lazy(() => RecipeIngredientMaxOrderByAggregateInputSchema).optional(),
  _min: z$2.lazy(() => RecipeIngredientMinOrderByAggregateInputSchema).optional(),
  _sum: z$2.lazy(() => RecipeIngredientSumOrderByAggregateInputSchema).optional()
}).strict();
var RecipeIngredientScalarWhereWithAggregatesInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => RecipeIngredientScalarWhereWithAggregatesInputSchema), z$2.lazy(() => RecipeIngredientScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: z$2.lazy(() => RecipeIngredientScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => RecipeIngredientScalarWhereWithAggregatesInputSchema), z$2.lazy(() => RecipeIngredientScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  recipeId: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  ingredientId: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  quantity: z$2.union([z$2.lazy(() => FloatWithAggregatesFilterSchema), z$2.number()]).optional(),
  unit: z$2.union([z$2.lazy(() => StringWithAggregatesFilterSchema), z$2.string()]).optional(),
  joinAt: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional(),
  recipeVersionId: z$2.union([z$2.lazy(() => IntNullableWithAggregatesFilterSchema), z$2.number()]).optional().nullable()
}).strict();
var RecipeInstructionWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => RecipeInstructionWhereInputSchema), z$2.lazy(() => RecipeInstructionWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => RecipeInstructionWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => RecipeInstructionWhereInputSchema), z$2.lazy(() => RecipeInstructionWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  recipeId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  stepNumber: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  instruction: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  imageUrl: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  recipeVersionId: z$2.union([z$2.lazy(() => IntNullableFilterSchema), z$2.number()]).optional().nullable(),
  recipe: z$2.union([z$2.lazy(() => RecipeRelationFilterSchema), z$2.lazy(() => RecipeWhereInputSchema)]).optional(),
  RecipeVersion: z$2.union([z$2.lazy(() => RecipeVersionNullableRelationFilterSchema), z$2.lazy(() => RecipeVersionWhereInputSchema)]).optional().nullable()
}).strict();
var RecipeInstructionOrderByWithRelationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  recipeId: z$2.lazy(() => SortOrderSchema).optional(),
  stepNumber: z$2.lazy(() => SortOrderSchema).optional(),
  instruction: z$2.lazy(() => SortOrderSchema).optional(),
  imageUrl: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  recipeVersionId: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  recipe: z$2.lazy(() => RecipeOrderByWithRelationInputSchema).optional(),
  RecipeVersion: z$2.lazy(() => RecipeVersionOrderByWithRelationInputSchema).optional()
}).strict();
var RecipeInstructionWhereUniqueInputSchema = z$2.union([
  z$2.object({
    id: z$2.number().int(),
    recipeId_stepNumber: z$2.lazy(() => RecipeInstructionRecipeIdStepNumberCompoundUniqueInputSchema)
  }),
  z$2.object({
    id: z$2.number().int()
  }),
  z$2.object({
    recipeId_stepNumber: z$2.lazy(() => RecipeInstructionRecipeIdStepNumberCompoundUniqueInputSchema)
  })
]).and(z$2.object({
  id: z$2.number().int().optional(),
  recipeId_stepNumber: z$2.lazy(() => RecipeInstructionRecipeIdStepNumberCompoundUniqueInputSchema).optional(),
  AND: z$2.union([z$2.lazy(() => RecipeInstructionWhereInputSchema), z$2.lazy(() => RecipeInstructionWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => RecipeInstructionWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => RecipeInstructionWhereInputSchema), z$2.lazy(() => RecipeInstructionWhereInputSchema).array()]).optional(),
  recipeId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number().int()]).optional(),
  stepNumber: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number().int()]).optional(),
  instruction: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  imageUrl: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  recipeVersionId: z$2.union([z$2.lazy(() => IntNullableFilterSchema), z$2.number().int()]).optional().nullable(),
  recipe: z$2.union([z$2.lazy(() => RecipeRelationFilterSchema), z$2.lazy(() => RecipeWhereInputSchema)]).optional(),
  RecipeVersion: z$2.union([z$2.lazy(() => RecipeVersionNullableRelationFilterSchema), z$2.lazy(() => RecipeVersionWhereInputSchema)]).optional().nullable()
}).strict());
var RecipeInstructionOrderByWithAggregationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  recipeId: z$2.lazy(() => SortOrderSchema).optional(),
  stepNumber: z$2.lazy(() => SortOrderSchema).optional(),
  instruction: z$2.lazy(() => SortOrderSchema).optional(),
  imageUrl: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  recipeVersionId: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  _count: z$2.lazy(() => RecipeInstructionCountOrderByAggregateInputSchema).optional(),
  _avg: z$2.lazy(() => RecipeInstructionAvgOrderByAggregateInputSchema).optional(),
  _max: z$2.lazy(() => RecipeInstructionMaxOrderByAggregateInputSchema).optional(),
  _min: z$2.lazy(() => RecipeInstructionMinOrderByAggregateInputSchema).optional(),
  _sum: z$2.lazy(() => RecipeInstructionSumOrderByAggregateInputSchema).optional()
}).strict();
var RecipeInstructionScalarWhereWithAggregatesInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => RecipeInstructionScalarWhereWithAggregatesInputSchema), z$2.lazy(() => RecipeInstructionScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: z$2.lazy(() => RecipeInstructionScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => RecipeInstructionScalarWhereWithAggregatesInputSchema), z$2.lazy(() => RecipeInstructionScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  recipeId: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  stepNumber: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  instruction: z$2.union([z$2.lazy(() => StringWithAggregatesFilterSchema), z$2.string()]).optional(),
  imageUrl: z$2.union([z$2.lazy(() => StringNullableWithAggregatesFilterSchema), z$2.string()]).optional().nullable(),
  recipeVersionId: z$2.union([z$2.lazy(() => IntNullableWithAggregatesFilterSchema), z$2.number()]).optional().nullable()
}).strict();
var InventoryWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => InventoryWhereInputSchema), z$2.lazy(() => InventoryWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => InventoryWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => InventoryWhereInputSchema), z$2.lazy(() => InventoryWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  restaurantId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  restaurant: z$2.union([z$2.lazy(() => RestaurantRelationFilterSchema), z$2.lazy(() => RestaurantWhereInputSchema)]).optional(),
  items: z$2.lazy(() => InventoryItemListRelationFilterSchema).optional()
}).strict();
var InventoryOrderByWithRelationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional(),
  restaurant: z$2.lazy(() => RestaurantOrderByWithRelationInputSchema).optional(),
  items: z$2.lazy(() => InventoryItemOrderByRelationAggregateInputSchema).optional()
}).strict();
var InventoryWhereUniqueInputSchema = z$2.union([
  z$2.object({
    id: z$2.number().int(),
    restaurantId: z$2.number().int()
  }),
  z$2.object({
    id: z$2.number().int()
  }),
  z$2.object({
    restaurantId: z$2.number().int()
  })
]).and(z$2.object({
  id: z$2.number().int().optional(),
  restaurantId: z$2.number().int().optional(),
  AND: z$2.union([z$2.lazy(() => InventoryWhereInputSchema), z$2.lazy(() => InventoryWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => InventoryWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => InventoryWhereInputSchema), z$2.lazy(() => InventoryWhereInputSchema).array()]).optional(),
  restaurant: z$2.union([z$2.lazy(() => RestaurantRelationFilterSchema), z$2.lazy(() => RestaurantWhereInputSchema)]).optional(),
  items: z$2.lazy(() => InventoryItemListRelationFilterSchema).optional()
}).strict());
var InventoryOrderByWithAggregationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional(),
  _count: z$2.lazy(() => InventoryCountOrderByAggregateInputSchema).optional(),
  _avg: z$2.lazy(() => InventoryAvgOrderByAggregateInputSchema).optional(),
  _max: z$2.lazy(() => InventoryMaxOrderByAggregateInputSchema).optional(),
  _min: z$2.lazy(() => InventoryMinOrderByAggregateInputSchema).optional(),
  _sum: z$2.lazy(() => InventorySumOrderByAggregateInputSchema).optional()
}).strict();
var InventoryScalarWhereWithAggregatesInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => InventoryScalarWhereWithAggregatesInputSchema), z$2.lazy(() => InventoryScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: z$2.lazy(() => InventoryScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => InventoryScalarWhereWithAggregatesInputSchema), z$2.lazy(() => InventoryScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  restaurantId: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional()
}).strict();
var InventoryItemWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => InventoryItemWhereInputSchema), z$2.lazy(() => InventoryItemWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => InventoryItemWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => InventoryItemWhereInputSchema), z$2.lazy(() => InventoryItemWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  inventoryId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  ingredientId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  quantity: z$2.union([z$2.lazy(() => FloatFilterSchema), z$2.number()]).optional(),
  unit: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  minQuantity: z$2.union([z$2.lazy(() => FloatFilterSchema), z$2.number()]).optional(),
  restockThreshold: z$2.union([z$2.lazy(() => FloatFilterSchema), z$2.number()]).optional(),
  lastUpdatedById: z$2.union([z$2.lazy(() => IntNullableFilterSchema), z$2.number()]).optional().nullable(),
  lastUpdated: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  inventory: z$2.union([z$2.lazy(() => InventoryRelationFilterSchema), z$2.lazy(() => InventoryWhereInputSchema)]).optional(),
  ingredient: z$2.union([z$2.lazy(() => IngredientRelationFilterSchema), z$2.lazy(() => IngredientWhereInputSchema)]).optional(),
  lastUpdatedBy: z$2.union([z$2.lazy(() => UserNullableRelationFilterSchema), z$2.lazy(() => UserWhereInputSchema)]).optional().nullable(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalListRelationFilterSchema).optional()
}).strict();
var InventoryItemOrderByWithRelationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  inventoryId: z$2.lazy(() => SortOrderSchema).optional(),
  ingredientId: z$2.lazy(() => SortOrderSchema).optional(),
  quantity: z$2.lazy(() => SortOrderSchema).optional(),
  unit: z$2.lazy(() => SortOrderSchema).optional(),
  minQuantity: z$2.lazy(() => SortOrderSchema).optional(),
  restockThreshold: z$2.lazy(() => SortOrderSchema).optional(),
  lastUpdatedById: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  lastUpdated: z$2.lazy(() => SortOrderSchema).optional(),
  inventory: z$2.lazy(() => InventoryOrderByWithRelationInputSchema).optional(),
  ingredient: z$2.lazy(() => IngredientOrderByWithRelationInputSchema).optional(),
  lastUpdatedBy: z$2.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalOrderByRelationAggregateInputSchema).optional()
}).strict();
var InventoryItemWhereUniqueInputSchema = z$2.object({
  id: z$2.number().int()
}).and(z$2.object({
  id: z$2.number().int().optional(),
  AND: z$2.union([z$2.lazy(() => InventoryItemWhereInputSchema), z$2.lazy(() => InventoryItemWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => InventoryItemWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => InventoryItemWhereInputSchema), z$2.lazy(() => InventoryItemWhereInputSchema).array()]).optional(),
  inventoryId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number().int()]).optional(),
  ingredientId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number().int()]).optional(),
  quantity: z$2.union([z$2.lazy(() => FloatFilterSchema), z$2.number()]).optional(),
  unit: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  minQuantity: z$2.union([z$2.lazy(() => FloatFilterSchema), z$2.number()]).optional(),
  restockThreshold: z$2.union([z$2.lazy(() => FloatFilterSchema), z$2.number()]).optional(),
  lastUpdatedById: z$2.union([z$2.lazy(() => IntNullableFilterSchema), z$2.number().int()]).optional().nullable(),
  lastUpdated: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  inventory: z$2.union([z$2.lazy(() => InventoryRelationFilterSchema), z$2.lazy(() => InventoryWhereInputSchema)]).optional(),
  ingredient: z$2.union([z$2.lazy(() => IngredientRelationFilterSchema), z$2.lazy(() => IngredientWhereInputSchema)]).optional(),
  lastUpdatedBy: z$2.union([z$2.lazy(() => UserNullableRelationFilterSchema), z$2.lazy(() => UserWhereInputSchema)]).optional().nullable(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalListRelationFilterSchema).optional()
}).strict());
var InventoryItemOrderByWithAggregationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  inventoryId: z$2.lazy(() => SortOrderSchema).optional(),
  ingredientId: z$2.lazy(() => SortOrderSchema).optional(),
  quantity: z$2.lazy(() => SortOrderSchema).optional(),
  unit: z$2.lazy(() => SortOrderSchema).optional(),
  minQuantity: z$2.lazy(() => SortOrderSchema).optional(),
  restockThreshold: z$2.lazy(() => SortOrderSchema).optional(),
  lastUpdatedById: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  lastUpdated: z$2.lazy(() => SortOrderSchema).optional(),
  _count: z$2.lazy(() => InventoryItemCountOrderByAggregateInputSchema).optional(),
  _avg: z$2.lazy(() => InventoryItemAvgOrderByAggregateInputSchema).optional(),
  _max: z$2.lazy(() => InventoryItemMaxOrderByAggregateInputSchema).optional(),
  _min: z$2.lazy(() => InventoryItemMinOrderByAggregateInputSchema).optional(),
  _sum: z$2.lazy(() => InventoryItemSumOrderByAggregateInputSchema).optional()
}).strict();
var InventoryItemScalarWhereWithAggregatesInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => InventoryItemScalarWhereWithAggregatesInputSchema), z$2.lazy(() => InventoryItemScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: z$2.lazy(() => InventoryItemScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => InventoryItemScalarWhereWithAggregatesInputSchema), z$2.lazy(() => InventoryItemScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  inventoryId: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  ingredientId: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  quantity: z$2.union([z$2.lazy(() => FloatWithAggregatesFilterSchema), z$2.number()]).optional(),
  unit: z$2.union([z$2.lazy(() => StringWithAggregatesFilterSchema), z$2.string()]).optional(),
  minQuantity: z$2.union([z$2.lazy(() => FloatWithAggregatesFilterSchema), z$2.number()]).optional(),
  restockThreshold: z$2.union([z$2.lazy(() => FloatWithAggregatesFilterSchema), z$2.number()]).optional(),
  lastUpdatedById: z$2.union([z$2.lazy(() => IntNullableWithAggregatesFilterSchema), z$2.number()]).optional().nullable(),
  lastUpdated: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional()
}).strict();
var OrderWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => OrderWhereInputSchema), z$2.lazy(() => OrderWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => OrderWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => OrderWhereInputSchema), z$2.lazy(() => OrderWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  restaurantId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  vendorId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  status: z$2.union([z$2.lazy(() => EnumOrderStatusFilterSchema), z$2.lazy(() => OrderStatusSchema)]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  restaurant: z$2.union([z$2.lazy(() => RestaurantRelationFilterSchema), z$2.lazy(() => RestaurantWhereInputSchema)]).optional(),
  vendor: z$2.union([z$2.lazy(() => VendorRelationFilterSchema), z$2.lazy(() => VendorWhereInputSchema)]).optional(),
  items: z$2.lazy(() => OrderItemListRelationFilterSchema).optional()
}).strict();
var OrderOrderByWithRelationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional(),
  vendorId: z$2.lazy(() => SortOrderSchema).optional(),
  status: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional(),
  restaurant: z$2.lazy(() => RestaurantOrderByWithRelationInputSchema).optional(),
  vendor: z$2.lazy(() => VendorOrderByWithRelationInputSchema).optional(),
  items: z$2.lazy(() => OrderItemOrderByRelationAggregateInputSchema).optional()
}).strict();
var OrderWhereUniqueInputSchema = z$2.object({
  id: z$2.number().int()
}).and(z$2.object({
  id: z$2.number().int().optional(),
  AND: z$2.union([z$2.lazy(() => OrderWhereInputSchema), z$2.lazy(() => OrderWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => OrderWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => OrderWhereInputSchema), z$2.lazy(() => OrderWhereInputSchema).array()]).optional(),
  restaurantId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number().int()]).optional(),
  vendorId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number().int()]).optional(),
  status: z$2.union([z$2.lazy(() => EnumOrderStatusFilterSchema), z$2.lazy(() => OrderStatusSchema)]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  restaurant: z$2.union([z$2.lazy(() => RestaurantRelationFilterSchema), z$2.lazy(() => RestaurantWhereInputSchema)]).optional(),
  vendor: z$2.union([z$2.lazy(() => VendorRelationFilterSchema), z$2.lazy(() => VendorWhereInputSchema)]).optional(),
  items: z$2.lazy(() => OrderItemListRelationFilterSchema).optional()
}).strict());
var OrderOrderByWithAggregationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional(),
  vendorId: z$2.lazy(() => SortOrderSchema).optional(),
  status: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional(),
  _count: z$2.lazy(() => OrderCountOrderByAggregateInputSchema).optional(),
  _avg: z$2.lazy(() => OrderAvgOrderByAggregateInputSchema).optional(),
  _max: z$2.lazy(() => OrderMaxOrderByAggregateInputSchema).optional(),
  _min: z$2.lazy(() => OrderMinOrderByAggregateInputSchema).optional(),
  _sum: z$2.lazy(() => OrderSumOrderByAggregateInputSchema).optional()
}).strict();
var OrderScalarWhereWithAggregatesInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => OrderScalarWhereWithAggregatesInputSchema), z$2.lazy(() => OrderScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: z$2.lazy(() => OrderScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => OrderScalarWhereWithAggregatesInputSchema), z$2.lazy(() => OrderScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  restaurantId: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  vendorId: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  status: z$2.union([z$2.lazy(() => EnumOrderStatusWithAggregatesFilterSchema), z$2.lazy(() => OrderStatusSchema)]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional()
}).strict();
var OrderItemWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => OrderItemWhereInputSchema), z$2.lazy(() => OrderItemWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => OrderItemWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => OrderItemWhereInputSchema), z$2.lazy(() => OrderItemWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  orderId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  ingredientId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  quantity: z$2.union([z$2.lazy(() => FloatFilterSchema), z$2.number()]).optional(),
  unit: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  price: z$2.union([z$2.lazy(() => FloatFilterSchema), z$2.number()]).optional(),
  order: z$2.union([z$2.lazy(() => OrderRelationFilterSchema), z$2.lazy(() => OrderWhereInputSchema)]).optional(),
  ingredient: z$2.union([z$2.lazy(() => IngredientRelationFilterSchema), z$2.lazy(() => IngredientWhereInputSchema)]).optional()
}).strict();
var OrderItemOrderByWithRelationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  orderId: z$2.lazy(() => SortOrderSchema).optional(),
  ingredientId: z$2.lazy(() => SortOrderSchema).optional(),
  quantity: z$2.lazy(() => SortOrderSchema).optional(),
  unit: z$2.lazy(() => SortOrderSchema).optional(),
  price: z$2.lazy(() => SortOrderSchema).optional(),
  order: z$2.lazy(() => OrderOrderByWithRelationInputSchema).optional(),
  ingredient: z$2.lazy(() => IngredientOrderByWithRelationInputSchema).optional()
}).strict();
var OrderItemWhereUniqueInputSchema = z$2.object({
  id: z$2.number().int()
}).and(z$2.object({
  id: z$2.number().int().optional(),
  AND: z$2.union([z$2.lazy(() => OrderItemWhereInputSchema), z$2.lazy(() => OrderItemWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => OrderItemWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => OrderItemWhereInputSchema), z$2.lazy(() => OrderItemWhereInputSchema).array()]).optional(),
  orderId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number().int()]).optional(),
  ingredientId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number().int()]).optional(),
  quantity: z$2.union([z$2.lazy(() => FloatFilterSchema), z$2.number()]).optional(),
  unit: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  price: z$2.union([z$2.lazy(() => FloatFilterSchema), z$2.number()]).optional(),
  order: z$2.union([z$2.lazy(() => OrderRelationFilterSchema), z$2.lazy(() => OrderWhereInputSchema)]).optional(),
  ingredient: z$2.union([z$2.lazy(() => IngredientRelationFilterSchema), z$2.lazy(() => IngredientWhereInputSchema)]).optional()
}).strict());
var OrderItemOrderByWithAggregationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  orderId: z$2.lazy(() => SortOrderSchema).optional(),
  ingredientId: z$2.lazy(() => SortOrderSchema).optional(),
  quantity: z$2.lazy(() => SortOrderSchema).optional(),
  unit: z$2.lazy(() => SortOrderSchema).optional(),
  price: z$2.lazy(() => SortOrderSchema).optional(),
  _count: z$2.lazy(() => OrderItemCountOrderByAggregateInputSchema).optional(),
  _avg: z$2.lazy(() => OrderItemAvgOrderByAggregateInputSchema).optional(),
  _max: z$2.lazy(() => OrderItemMaxOrderByAggregateInputSchema).optional(),
  _min: z$2.lazy(() => OrderItemMinOrderByAggregateInputSchema).optional(),
  _sum: z$2.lazy(() => OrderItemSumOrderByAggregateInputSchema).optional()
}).strict();
var OrderItemScalarWhereWithAggregatesInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => OrderItemScalarWhereWithAggregatesInputSchema), z$2.lazy(() => OrderItemScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: z$2.lazy(() => OrderItemScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => OrderItemScalarWhereWithAggregatesInputSchema), z$2.lazy(() => OrderItemScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  orderId: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  ingredientId: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  quantity: z$2.union([z$2.lazy(() => FloatWithAggregatesFilterSchema), z$2.number()]).optional(),
  unit: z$2.union([z$2.lazy(() => StringWithAggregatesFilterSchema), z$2.string()]).optional(),
  price: z$2.union([z$2.lazy(() => FloatWithAggregatesFilterSchema), z$2.number()]).optional()
}).strict();
var VendorWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => VendorWhereInputSchema), z$2.lazy(() => VendorWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => VendorWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => VendorWhereInputSchema), z$2.lazy(() => VendorWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  name: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  contact: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  email: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  phone: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  orders: z$2.lazy(() => OrderListRelationFilterSchema).optional(),
  ingredients: z$2.lazy(() => IngredientListRelationFilterSchema).optional(),
  supplierPriceHistory: z$2.lazy(() => SupplierPriceHistoryListRelationFilterSchema).optional()
}).strict();
var VendorOrderByWithRelationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  name: z$2.lazy(() => SortOrderSchema).optional(),
  contact: z$2.lazy(() => SortOrderSchema).optional(),
  email: z$2.lazy(() => SortOrderSchema).optional(),
  phone: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional(),
  orders: z$2.lazy(() => OrderOrderByRelationAggregateInputSchema).optional(),
  ingredients: z$2.lazy(() => IngredientOrderByRelationAggregateInputSchema).optional(),
  supplierPriceHistory: z$2.lazy(() => SupplierPriceHistoryOrderByRelationAggregateInputSchema).optional()
}).strict();
var VendorWhereUniqueInputSchema = z$2.union([
  z$2.object({
    id: z$2.number().int(),
    name: z$2.string(),
    email: z$2.string()
  }),
  z$2.object({
    id: z$2.number().int(),
    name: z$2.string()
  }),
  z$2.object({
    id: z$2.number().int(),
    email: z$2.string()
  }),
  z$2.object({
    id: z$2.number().int()
  }),
  z$2.object({
    name: z$2.string(),
    email: z$2.string()
  }),
  z$2.object({
    name: z$2.string()
  }),
  z$2.object({
    email: z$2.string()
  })
]).and(z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string().optional(),
  email: z$2.string().optional(),
  AND: z$2.union([z$2.lazy(() => VendorWhereInputSchema), z$2.lazy(() => VendorWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => VendorWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => VendorWhereInputSchema), z$2.lazy(() => VendorWhereInputSchema).array()]).optional(),
  contact: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  phone: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  orders: z$2.lazy(() => OrderListRelationFilterSchema).optional(),
  ingredients: z$2.lazy(() => IngredientListRelationFilterSchema).optional(),
  supplierPriceHistory: z$2.lazy(() => SupplierPriceHistoryListRelationFilterSchema).optional()
}).strict());
var VendorOrderByWithAggregationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  name: z$2.lazy(() => SortOrderSchema).optional(),
  contact: z$2.lazy(() => SortOrderSchema).optional(),
  email: z$2.lazy(() => SortOrderSchema).optional(),
  phone: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional(),
  _count: z$2.lazy(() => VendorCountOrderByAggregateInputSchema).optional(),
  _avg: z$2.lazy(() => VendorAvgOrderByAggregateInputSchema).optional(),
  _max: z$2.lazy(() => VendorMaxOrderByAggregateInputSchema).optional(),
  _min: z$2.lazy(() => VendorMinOrderByAggregateInputSchema).optional(),
  _sum: z$2.lazy(() => VendorSumOrderByAggregateInputSchema).optional()
}).strict();
var VendorScalarWhereWithAggregatesInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => VendorScalarWhereWithAggregatesInputSchema), z$2.lazy(() => VendorScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: z$2.lazy(() => VendorScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => VendorScalarWhereWithAggregatesInputSchema), z$2.lazy(() => VendorScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  name: z$2.union([z$2.lazy(() => StringWithAggregatesFilterSchema), z$2.string()]).optional(),
  contact: z$2.union([z$2.lazy(() => StringWithAggregatesFilterSchema), z$2.string()]).optional(),
  email: z$2.union([z$2.lazy(() => StringWithAggregatesFilterSchema), z$2.string()]).optional(),
  phone: z$2.union([z$2.lazy(() => StringWithAggregatesFilterSchema), z$2.string()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional()
}).strict();
var ShiftWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => ShiftWhereInputSchema), z$2.lazy(() => ShiftWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => ShiftWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => ShiftWhereInputSchema), z$2.lazy(() => ShiftWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  userId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  startTime: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  endTime: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  status: z$2.union([z$2.lazy(() => EnumShiftStatusFilterSchema), z$2.lazy(() => ShiftStatusSchema)]).optional(),
  user: z$2.union([z$2.lazy(() => UserRelationFilterSchema), z$2.lazy(() => UserWhereInputSchema)]).optional(),
  ShiftTask: z$2.lazy(() => ShiftTaskListRelationFilterSchema).optional()
}).strict();
var ShiftOrderByWithRelationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  userId: z$2.lazy(() => SortOrderSchema).optional(),
  startTime: z$2.lazy(() => SortOrderSchema).optional(),
  endTime: z$2.lazy(() => SortOrderSchema).optional(),
  status: z$2.lazy(() => SortOrderSchema).optional(),
  user: z$2.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  ShiftTask: z$2.lazy(() => ShiftTaskOrderByRelationAggregateInputSchema).optional()
}).strict();
var ShiftWhereUniqueInputSchema = z$2.object({
  id: z$2.number().int()
}).and(z$2.object({
  id: z$2.number().int().optional(),
  AND: z$2.union([z$2.lazy(() => ShiftWhereInputSchema), z$2.lazy(() => ShiftWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => ShiftWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => ShiftWhereInputSchema), z$2.lazy(() => ShiftWhereInputSchema).array()]).optional(),
  userId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number().int()]).optional(),
  startTime: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  endTime: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  status: z$2.union([z$2.lazy(() => EnumShiftStatusFilterSchema), z$2.lazy(() => ShiftStatusSchema)]).optional(),
  user: z$2.union([z$2.lazy(() => UserRelationFilterSchema), z$2.lazy(() => UserWhereInputSchema)]).optional(),
  ShiftTask: z$2.lazy(() => ShiftTaskListRelationFilterSchema).optional()
}).strict());
var ShiftOrderByWithAggregationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  userId: z$2.lazy(() => SortOrderSchema).optional(),
  startTime: z$2.lazy(() => SortOrderSchema).optional(),
  endTime: z$2.lazy(() => SortOrderSchema).optional(),
  status: z$2.lazy(() => SortOrderSchema).optional(),
  _count: z$2.lazy(() => ShiftCountOrderByAggregateInputSchema).optional(),
  _avg: z$2.lazy(() => ShiftAvgOrderByAggregateInputSchema).optional(),
  _max: z$2.lazy(() => ShiftMaxOrderByAggregateInputSchema).optional(),
  _min: z$2.lazy(() => ShiftMinOrderByAggregateInputSchema).optional(),
  _sum: z$2.lazy(() => ShiftSumOrderByAggregateInputSchema).optional()
}).strict();
var ShiftScalarWhereWithAggregatesInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => ShiftScalarWhereWithAggregatesInputSchema), z$2.lazy(() => ShiftScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: z$2.lazy(() => ShiftScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => ShiftScalarWhereWithAggregatesInputSchema), z$2.lazy(() => ShiftScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  userId: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  startTime: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional(),
  endTime: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional(),
  status: z$2.union([z$2.lazy(() => EnumShiftStatusWithAggregatesFilterSchema), z$2.lazy(() => ShiftStatusSchema)]).optional()
}).strict();
var PrepBoardWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => PrepBoardWhereInputSchema), z$2.lazy(() => PrepBoardWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => PrepBoardWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => PrepBoardWhereInputSchema), z$2.lazy(() => PrepBoardWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  name: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  status: z$2.union([z$2.lazy(() => EnumPrepStatusFilterSchema), z$2.lazy(() => PrepStatusSchema)]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  recipes: z$2.lazy(() => RecipeListRelationFilterSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemListRelationFilterSchema).optional()
}).strict();
var PrepBoardOrderByWithRelationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  name: z$2.lazy(() => SortOrderSchema).optional(),
  status: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional(),
  recipes: z$2.lazy(() => RecipeOrderByRelationAggregateInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemOrderByRelationAggregateInputSchema).optional()
}).strict();
var PrepBoardWhereUniqueInputSchema = z$2.object({
  id: z$2.number().int()
}).and(z$2.object({
  id: z$2.number().int().optional(),
  AND: z$2.union([z$2.lazy(() => PrepBoardWhereInputSchema), z$2.lazy(() => PrepBoardWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => PrepBoardWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => PrepBoardWhereInputSchema), z$2.lazy(() => PrepBoardWhereInputSchema).array()]).optional(),
  name: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  status: z$2.union([z$2.lazy(() => EnumPrepStatusFilterSchema), z$2.lazy(() => PrepStatusSchema)]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  recipes: z$2.lazy(() => RecipeListRelationFilterSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemListRelationFilterSchema).optional()
}).strict());
var PrepBoardOrderByWithAggregationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  name: z$2.lazy(() => SortOrderSchema).optional(),
  status: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional(),
  _count: z$2.lazy(() => PrepBoardCountOrderByAggregateInputSchema).optional(),
  _avg: z$2.lazy(() => PrepBoardAvgOrderByAggregateInputSchema).optional(),
  _max: z$2.lazy(() => PrepBoardMaxOrderByAggregateInputSchema).optional(),
  _min: z$2.lazy(() => PrepBoardMinOrderByAggregateInputSchema).optional(),
  _sum: z$2.lazy(() => PrepBoardSumOrderByAggregateInputSchema).optional()
}).strict();
var PrepBoardScalarWhereWithAggregatesInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => PrepBoardScalarWhereWithAggregatesInputSchema), z$2.lazy(() => PrepBoardScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: z$2.lazy(() => PrepBoardScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => PrepBoardScalarWhereWithAggregatesInputSchema), z$2.lazy(() => PrepBoardScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  name: z$2.union([z$2.lazy(() => StringWithAggregatesFilterSchema), z$2.string()]).optional(),
  status: z$2.union([z$2.lazy(() => EnumPrepStatusWithAggregatesFilterSchema), z$2.lazy(() => PrepStatusSchema)]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional()
}).strict();
var PrepItemWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => PrepItemWhereInputSchema), z$2.lazy(() => PrepItemWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => PrepItemWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => PrepItemWhereInputSchema), z$2.lazy(() => PrepItemWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  prepBoardId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  recipeId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  quantity: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  status: z$2.union([z$2.lazy(() => EnumPrepStatusFilterSchema), z$2.lazy(() => PrepStatusSchema)]).optional(),
  assignedToId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  prepBoard: z$2.union([z$2.lazy(() => PrepBoardRelationFilterSchema), z$2.lazy(() => PrepBoardWhereInputSchema)]).optional(),
  recipe: z$2.union([z$2.lazy(() => RecipeRelationFilterSchema), z$2.lazy(() => RecipeWhereInputSchema)]).optional(),
  assignedTo: z$2.union([z$2.lazy(() => UserRelationFilterSchema), z$2.lazy(() => UserWhereInputSchema)]).optional()
}).strict();
var PrepItemOrderByWithRelationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  prepBoardId: z$2.lazy(() => SortOrderSchema).optional(),
  recipeId: z$2.lazy(() => SortOrderSchema).optional(),
  quantity: z$2.lazy(() => SortOrderSchema).optional(),
  status: z$2.lazy(() => SortOrderSchema).optional(),
  assignedToId: z$2.lazy(() => SortOrderSchema).optional(),
  prepBoard: z$2.lazy(() => PrepBoardOrderByWithRelationInputSchema).optional(),
  recipe: z$2.lazy(() => RecipeOrderByWithRelationInputSchema).optional(),
  assignedTo: z$2.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();
var PrepItemWhereUniqueInputSchema = z$2.object({
  id: z$2.number().int()
}).and(z$2.object({
  id: z$2.number().int().optional(),
  AND: z$2.union([z$2.lazy(() => PrepItemWhereInputSchema), z$2.lazy(() => PrepItemWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => PrepItemWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => PrepItemWhereInputSchema), z$2.lazy(() => PrepItemWhereInputSchema).array()]).optional(),
  prepBoardId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number().int()]).optional(),
  recipeId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number().int()]).optional(),
  quantity: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number().int()]).optional(),
  status: z$2.union([z$2.lazy(() => EnumPrepStatusFilterSchema), z$2.lazy(() => PrepStatusSchema)]).optional(),
  assignedToId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number().int()]).optional(),
  prepBoard: z$2.union([z$2.lazy(() => PrepBoardRelationFilterSchema), z$2.lazy(() => PrepBoardWhereInputSchema)]).optional(),
  recipe: z$2.union([z$2.lazy(() => RecipeRelationFilterSchema), z$2.lazy(() => RecipeWhereInputSchema)]).optional(),
  assignedTo: z$2.union([z$2.lazy(() => UserRelationFilterSchema), z$2.lazy(() => UserWhereInputSchema)]).optional()
}).strict());
var PrepItemOrderByWithAggregationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  prepBoardId: z$2.lazy(() => SortOrderSchema).optional(),
  recipeId: z$2.lazy(() => SortOrderSchema).optional(),
  quantity: z$2.lazy(() => SortOrderSchema).optional(),
  status: z$2.lazy(() => SortOrderSchema).optional(),
  assignedToId: z$2.lazy(() => SortOrderSchema).optional(),
  _count: z$2.lazy(() => PrepItemCountOrderByAggregateInputSchema).optional(),
  _avg: z$2.lazy(() => PrepItemAvgOrderByAggregateInputSchema).optional(),
  _max: z$2.lazy(() => PrepItemMaxOrderByAggregateInputSchema).optional(),
  _min: z$2.lazy(() => PrepItemMinOrderByAggregateInputSchema).optional(),
  _sum: z$2.lazy(() => PrepItemSumOrderByAggregateInputSchema).optional()
}).strict();
var PrepItemScalarWhereWithAggregatesInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => PrepItemScalarWhereWithAggregatesInputSchema), z$2.lazy(() => PrepItemScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: z$2.lazy(() => PrepItemScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => PrepItemScalarWhereWithAggregatesInputSchema), z$2.lazy(() => PrepItemScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  prepBoardId: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  recipeId: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  quantity: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  status: z$2.union([z$2.lazy(() => EnumPrepStatusWithAggregatesFilterSchema), z$2.lazy(() => PrepStatusSchema)]).optional(),
  assignedToId: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional()
}).strict();
var PasswordResetWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => PasswordResetWhereInputSchema), z$2.lazy(() => PasswordResetWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => PasswordResetWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => PasswordResetWhereInputSchema), z$2.lazy(() => PasswordResetWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  token: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  userId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  expiresAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  user: z$2.union([z$2.lazy(() => UserRelationFilterSchema), z$2.lazy(() => UserWhereInputSchema)]).optional()
}).strict();
var PasswordResetOrderByWithRelationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  token: z$2.lazy(() => SortOrderSchema).optional(),
  userId: z$2.lazy(() => SortOrderSchema).optional(),
  expiresAt: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional(),
  user: z$2.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();
var PasswordResetWhereUniqueInputSchema = z$2.union([
  z$2.object({
    id: z$2.number().int(),
    token: z$2.string()
  }),
  z$2.object({
    id: z$2.number().int()
  }),
  z$2.object({
    token: z$2.string()
  })
]).and(z$2.object({
  id: z$2.number().int().optional(),
  token: z$2.string().optional(),
  AND: z$2.union([z$2.lazy(() => PasswordResetWhereInputSchema), z$2.lazy(() => PasswordResetWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => PasswordResetWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => PasswordResetWhereInputSchema), z$2.lazy(() => PasswordResetWhereInputSchema).array()]).optional(),
  userId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number().int()]).optional(),
  expiresAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  user: z$2.union([z$2.lazy(() => UserRelationFilterSchema), z$2.lazy(() => UserWhereInputSchema)]).optional()
}).strict());
var PasswordResetOrderByWithAggregationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  token: z$2.lazy(() => SortOrderSchema).optional(),
  userId: z$2.lazy(() => SortOrderSchema).optional(),
  expiresAt: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional(),
  _count: z$2.lazy(() => PasswordResetCountOrderByAggregateInputSchema).optional(),
  _avg: z$2.lazy(() => PasswordResetAvgOrderByAggregateInputSchema).optional(),
  _max: z$2.lazy(() => PasswordResetMaxOrderByAggregateInputSchema).optional(),
  _min: z$2.lazy(() => PasswordResetMinOrderByAggregateInputSchema).optional(),
  _sum: z$2.lazy(() => PasswordResetSumOrderByAggregateInputSchema).optional()
}).strict();
var PasswordResetScalarWhereWithAggregatesInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => PasswordResetScalarWhereWithAggregatesInputSchema), z$2.lazy(() => PasswordResetScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: z$2.lazy(() => PasswordResetScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => PasswordResetScalarWhereWithAggregatesInputSchema), z$2.lazy(() => PasswordResetScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  token: z$2.union([z$2.lazy(() => StringWithAggregatesFilterSchema), z$2.string()]).optional(),
  userId: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  expiresAt: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional()
}).strict();
var MenuWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => MenuWhereInputSchema), z$2.lazy(() => MenuWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => MenuWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => MenuWhereInputSchema), z$2.lazy(() => MenuWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  name: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  restaurantId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  restaurant: z$2.union([z$2.lazy(() => RestaurantRelationFilterSchema), z$2.lazy(() => RestaurantWhereInputSchema)]).optional(),
  menuItems: z$2.lazy(() => MenuItemListRelationFilterSchema).optional(),
  MenuCategory: z$2.lazy(() => MenuCategoryListRelationFilterSchema).optional()
}).strict();
var MenuOrderByWithRelationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  name: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional(),
  restaurant: z$2.lazy(() => RestaurantOrderByWithRelationInputSchema).optional(),
  menuItems: z$2.lazy(() => MenuItemOrderByRelationAggregateInputSchema).optional(),
  MenuCategory: z$2.lazy(() => MenuCategoryOrderByRelationAggregateInputSchema).optional()
}).strict();
var MenuWhereUniqueInputSchema = z$2.object({
  id: z$2.number().int()
}).and(z$2.object({
  id: z$2.number().int().optional(),
  AND: z$2.union([z$2.lazy(() => MenuWhereInputSchema), z$2.lazy(() => MenuWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => MenuWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => MenuWhereInputSchema), z$2.lazy(() => MenuWhereInputSchema).array()]).optional(),
  name: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  restaurantId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number().int()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  restaurant: z$2.union([z$2.lazy(() => RestaurantRelationFilterSchema), z$2.lazy(() => RestaurantWhereInputSchema)]).optional(),
  menuItems: z$2.lazy(() => MenuItemListRelationFilterSchema).optional(),
  MenuCategory: z$2.lazy(() => MenuCategoryListRelationFilterSchema).optional()
}).strict());
var MenuOrderByWithAggregationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  name: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional(),
  _count: z$2.lazy(() => MenuCountOrderByAggregateInputSchema).optional(),
  _avg: z$2.lazy(() => MenuAvgOrderByAggregateInputSchema).optional(),
  _max: z$2.lazy(() => MenuMaxOrderByAggregateInputSchema).optional(),
  _min: z$2.lazy(() => MenuMinOrderByAggregateInputSchema).optional(),
  _sum: z$2.lazy(() => MenuSumOrderByAggregateInputSchema).optional()
}).strict();
var MenuScalarWhereWithAggregatesInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => MenuScalarWhereWithAggregatesInputSchema), z$2.lazy(() => MenuScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: z$2.lazy(() => MenuScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => MenuScalarWhereWithAggregatesInputSchema), z$2.lazy(() => MenuScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  name: z$2.union([z$2.lazy(() => StringWithAggregatesFilterSchema), z$2.string()]).optional(),
  restaurantId: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional()
}).strict();
var MenuItemRecipeWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => MenuItemRecipeWhereInputSchema), z$2.lazy(() => MenuItemRecipeWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => MenuItemRecipeWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => MenuItemRecipeWhereInputSchema), z$2.lazy(() => MenuItemRecipeWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  menuItemId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  recipeId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  joinAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  menuItem: z$2.union([z$2.lazy(() => MenuItemRelationFilterSchema), z$2.lazy(() => MenuItemWhereInputSchema)]).optional(),
  recipe: z$2.union([z$2.lazy(() => RecipeRelationFilterSchema), z$2.lazy(() => RecipeWhereInputSchema)]).optional()
}).strict();
var MenuItemRecipeOrderByWithRelationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  menuItemId: z$2.lazy(() => SortOrderSchema).optional(),
  recipeId: z$2.lazy(() => SortOrderSchema).optional(),
  joinAt: z$2.lazy(() => SortOrderSchema).optional(),
  menuItem: z$2.lazy(() => MenuItemOrderByWithRelationInputSchema).optional(),
  recipe: z$2.lazy(() => RecipeOrderByWithRelationInputSchema).optional()
}).strict();
var MenuItemRecipeWhereUniqueInputSchema = z$2.union([
  z$2.object({
    id: z$2.number().int(),
    menuItemId_recipeId: z$2.lazy(() => MenuItemRecipeMenuItemIdRecipeIdCompoundUniqueInputSchema)
  }),
  z$2.object({
    id: z$2.number().int()
  }),
  z$2.object({
    menuItemId_recipeId: z$2.lazy(() => MenuItemRecipeMenuItemIdRecipeIdCompoundUniqueInputSchema)
  })
]).and(z$2.object({
  id: z$2.number().int().optional(),
  menuItemId_recipeId: z$2.lazy(() => MenuItemRecipeMenuItemIdRecipeIdCompoundUniqueInputSchema).optional(),
  AND: z$2.union([z$2.lazy(() => MenuItemRecipeWhereInputSchema), z$2.lazy(() => MenuItemRecipeWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => MenuItemRecipeWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => MenuItemRecipeWhereInputSchema), z$2.lazy(() => MenuItemRecipeWhereInputSchema).array()]).optional(),
  menuItemId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number().int()]).optional(),
  recipeId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number().int()]).optional(),
  joinAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  menuItem: z$2.union([z$2.lazy(() => MenuItemRelationFilterSchema), z$2.lazy(() => MenuItemWhereInputSchema)]).optional(),
  recipe: z$2.union([z$2.lazy(() => RecipeRelationFilterSchema), z$2.lazy(() => RecipeWhereInputSchema)]).optional()
}).strict());
var MenuItemRecipeOrderByWithAggregationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  menuItemId: z$2.lazy(() => SortOrderSchema).optional(),
  recipeId: z$2.lazy(() => SortOrderSchema).optional(),
  joinAt: z$2.lazy(() => SortOrderSchema).optional(),
  _count: z$2.lazy(() => MenuItemRecipeCountOrderByAggregateInputSchema).optional(),
  _avg: z$2.lazy(() => MenuItemRecipeAvgOrderByAggregateInputSchema).optional(),
  _max: z$2.lazy(() => MenuItemRecipeMaxOrderByAggregateInputSchema).optional(),
  _min: z$2.lazy(() => MenuItemRecipeMinOrderByAggregateInputSchema).optional(),
  _sum: z$2.lazy(() => MenuItemRecipeSumOrderByAggregateInputSchema).optional()
}).strict();
var MenuItemRecipeScalarWhereWithAggregatesInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => MenuItemRecipeScalarWhereWithAggregatesInputSchema), z$2.lazy(() => MenuItemRecipeScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: z$2.lazy(() => MenuItemRecipeScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => MenuItemRecipeScalarWhereWithAggregatesInputSchema), z$2.lazy(() => MenuItemRecipeScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  menuItemId: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  recipeId: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  joinAt: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional()
}).strict();
var MenuItemWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => MenuItemWhereInputSchema), z$2.lazy(() => MenuItemWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => MenuItemWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => MenuItemWhereInputSchema), z$2.lazy(() => MenuItemWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  name: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  description: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  price: z$2.union([z$2.lazy(() => FloatFilterSchema), z$2.number()]).optional(),
  foodCost: z$2.union([z$2.lazy(() => FloatFilterSchema), z$2.number()]).optional(),
  recipeIds: z$2.lazy(() => IntNullableListFilterSchema).optional(),
  recipeServingsAmount: z$2.lazy(() => FloatNullableListFilterSchema).optional(),
  recipeServingsCost: z$2.lazy(() => FloatNullableListFilterSchema).optional(),
  allergens: z$2.lazy(() => StringNullableListFilterSchema).optional(),
  nutritionalInfoId: z$2.union([z$2.lazy(() => IntNullableFilterSchema), z$2.number()]).optional().nullable(),
  menuId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  categoryId: z$2.union([z$2.lazy(() => IntNullableFilterSchema), z$2.number()]).optional().nullable(),
  nutritionalInfo: z$2.union([z$2.lazy(() => NutritionalInfoNullableRelationFilterSchema), z$2.lazy(() => NutritionalInfoWhereInputSchema)]).optional().nullable(),
  menu: z$2.union([z$2.lazy(() => MenuRelationFilterSchema), z$2.lazy(() => MenuWhereInputSchema)]).optional(),
  recipes: z$2.lazy(() => RecipeListRelationFilterSchema).optional(),
  menuItemRecipe: z$2.lazy(() => MenuItemRecipeListRelationFilterSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsListRelationFilterSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemListRelationFilterSchema).optional(),
  nutritionalRecommendation: z$2.lazy(() => NutritionalRecommendationListRelationFilterSchema).optional(),
  category: z$2.union([z$2.lazy(() => MenuCategoryNullableRelationFilterSchema), z$2.lazy(() => MenuCategoryWhereInputSchema)]).optional().nullable(),
  feedback: z$2.lazy(() => CustomerFeedbackListRelationFilterSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionListRelationFilterSchema).optional()
}).strict();
var MenuItemOrderByWithRelationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  name: z$2.lazy(() => SortOrderSchema).optional(),
  description: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  price: z$2.lazy(() => SortOrderSchema).optional(),
  foodCost: z$2.lazy(() => SortOrderSchema).optional(),
  recipeIds: z$2.lazy(() => SortOrderSchema).optional(),
  recipeServingsAmount: z$2.lazy(() => SortOrderSchema).optional(),
  recipeServingsCost: z$2.lazy(() => SortOrderSchema).optional(),
  allergens: z$2.lazy(() => SortOrderSchema).optional(),
  nutritionalInfoId: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  menuId: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional(),
  categoryId: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  nutritionalInfo: z$2.lazy(() => NutritionalInfoOrderByWithRelationInputSchema).optional(),
  menu: z$2.lazy(() => MenuOrderByWithRelationInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeOrderByRelationAggregateInputSchema).optional(),
  menuItemRecipe: z$2.lazy(() => MenuItemRecipeOrderByRelationAggregateInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsOrderByRelationAggregateInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemOrderByRelationAggregateInputSchema).optional(),
  nutritionalRecommendation: z$2.lazy(() => NutritionalRecommendationOrderByRelationAggregateInputSchema).optional(),
  category: z$2.lazy(() => MenuCategoryOrderByWithRelationInputSchema).optional(),
  feedback: z$2.lazy(() => CustomerFeedbackOrderByRelationAggregateInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionOrderByRelationAggregateInputSchema).optional()
}).strict();
var MenuItemWhereUniqueInputSchema = z$2.union([
  z$2.object({
    id: z$2.number().int(),
    nutritionalInfoId: z$2.number().int()
  }),
  z$2.object({
    id: z$2.number().int()
  }),
  z$2.object({
    nutritionalInfoId: z$2.number().int()
  })
]).and(z$2.object({
  id: z$2.number().int().optional(),
  nutritionalInfoId: z$2.number().int().optional(),
  AND: z$2.union([z$2.lazy(() => MenuItemWhereInputSchema), z$2.lazy(() => MenuItemWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => MenuItemWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => MenuItemWhereInputSchema), z$2.lazy(() => MenuItemWhereInputSchema).array()]).optional(),
  name: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  description: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  price: z$2.union([z$2.lazy(() => FloatFilterSchema), z$2.number()]).optional(),
  foodCost: z$2.union([z$2.lazy(() => FloatFilterSchema), z$2.number()]).optional(),
  recipeIds: z$2.lazy(() => IntNullableListFilterSchema).optional(),
  recipeServingsAmount: z$2.lazy(() => FloatNullableListFilterSchema).optional(),
  recipeServingsCost: z$2.lazy(() => FloatNullableListFilterSchema).optional(),
  allergens: z$2.lazy(() => StringNullableListFilterSchema).optional(),
  menuId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number().int()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  categoryId: z$2.union([z$2.lazy(() => IntNullableFilterSchema), z$2.number().int()]).optional().nullable(),
  nutritionalInfo: z$2.union([z$2.lazy(() => NutritionalInfoNullableRelationFilterSchema), z$2.lazy(() => NutritionalInfoWhereInputSchema)]).optional().nullable(),
  menu: z$2.union([z$2.lazy(() => MenuRelationFilterSchema), z$2.lazy(() => MenuWhereInputSchema)]).optional(),
  recipes: z$2.lazy(() => RecipeListRelationFilterSchema).optional(),
  menuItemRecipe: z$2.lazy(() => MenuItemRecipeListRelationFilterSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsListRelationFilterSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemListRelationFilterSchema).optional(),
  nutritionalRecommendation: z$2.lazy(() => NutritionalRecommendationListRelationFilterSchema).optional(),
  category: z$2.union([z$2.lazy(() => MenuCategoryNullableRelationFilterSchema), z$2.lazy(() => MenuCategoryWhereInputSchema)]).optional().nullable(),
  feedback: z$2.lazy(() => CustomerFeedbackListRelationFilterSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionListRelationFilterSchema).optional()
}).strict());
var MenuItemOrderByWithAggregationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  name: z$2.lazy(() => SortOrderSchema).optional(),
  description: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  price: z$2.lazy(() => SortOrderSchema).optional(),
  foodCost: z$2.lazy(() => SortOrderSchema).optional(),
  recipeIds: z$2.lazy(() => SortOrderSchema).optional(),
  recipeServingsAmount: z$2.lazy(() => SortOrderSchema).optional(),
  recipeServingsCost: z$2.lazy(() => SortOrderSchema).optional(),
  allergens: z$2.lazy(() => SortOrderSchema).optional(),
  nutritionalInfoId: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  menuId: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional(),
  categoryId: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  _count: z$2.lazy(() => MenuItemCountOrderByAggregateInputSchema).optional(),
  _avg: z$2.lazy(() => MenuItemAvgOrderByAggregateInputSchema).optional(),
  _max: z$2.lazy(() => MenuItemMaxOrderByAggregateInputSchema).optional(),
  _min: z$2.lazy(() => MenuItemMinOrderByAggregateInputSchema).optional(),
  _sum: z$2.lazy(() => MenuItemSumOrderByAggregateInputSchema).optional()
}).strict();
var MenuItemScalarWhereWithAggregatesInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => MenuItemScalarWhereWithAggregatesInputSchema), z$2.lazy(() => MenuItemScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: z$2.lazy(() => MenuItemScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => MenuItemScalarWhereWithAggregatesInputSchema), z$2.lazy(() => MenuItemScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  name: z$2.union([z$2.lazy(() => StringWithAggregatesFilterSchema), z$2.string()]).optional(),
  description: z$2.union([z$2.lazy(() => StringNullableWithAggregatesFilterSchema), z$2.string()]).optional().nullable(),
  price: z$2.union([z$2.lazy(() => FloatWithAggregatesFilterSchema), z$2.number()]).optional(),
  foodCost: z$2.union([z$2.lazy(() => FloatWithAggregatesFilterSchema), z$2.number()]).optional(),
  recipeIds: z$2.lazy(() => IntNullableListFilterSchema).optional(),
  recipeServingsAmount: z$2.lazy(() => FloatNullableListFilterSchema).optional(),
  recipeServingsCost: z$2.lazy(() => FloatNullableListFilterSchema).optional(),
  allergens: z$2.lazy(() => StringNullableListFilterSchema).optional(),
  nutritionalInfoId: z$2.union([z$2.lazy(() => IntNullableWithAggregatesFilterSchema), z$2.number()]).optional().nullable(),
  menuId: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional(),
  categoryId: z$2.union([z$2.lazy(() => IntNullableWithAggregatesFilterSchema), z$2.number()]).optional().nullable()
}).strict();
var NutritionalInfoWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => NutritionalInfoWhereInputSchema), z$2.lazy(() => NutritionalInfoWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => NutritionalInfoWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => NutritionalInfoWhereInputSchema), z$2.lazy(() => NutritionalInfoWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  menuItemId: z$2.union([z$2.lazy(() => IntNullableFilterSchema), z$2.number()]).optional().nullable(),
  calories: z$2.union([z$2.lazy(() => FloatFilterSchema), z$2.number()]).optional(),
  fat: z$2.union([z$2.lazy(() => FloatFilterSchema), z$2.number()]).optional(),
  saturatedFat: z$2.union([z$2.lazy(() => FloatFilterSchema), z$2.number()]).optional(),
  transFat: z$2.union([z$2.lazy(() => FloatFilterSchema), z$2.number()]).optional(),
  cholesterol: z$2.union([z$2.lazy(() => FloatFilterSchema), z$2.number()]).optional(),
  sodium: z$2.union([z$2.lazy(() => FloatFilterSchema), z$2.number()]).optional(),
  carbohydrates: z$2.union([z$2.lazy(() => FloatFilterSchema), z$2.number()]).optional(),
  fiber: z$2.union([z$2.lazy(() => FloatFilterSchema), z$2.number()]).optional(),
  sugar: z$2.union([z$2.lazy(() => FloatFilterSchema), z$2.number()]).optional(),
  protein: z$2.union([z$2.lazy(() => FloatFilterSchema), z$2.number()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  menuItem: z$2.union([z$2.lazy(() => MenuItemNullableRelationFilterSchema), z$2.lazy(() => MenuItemWhereInputSchema)]).optional().nullable()
}).strict();
var NutritionalInfoOrderByWithRelationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  menuItemId: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  calories: z$2.lazy(() => SortOrderSchema).optional(),
  fat: z$2.lazy(() => SortOrderSchema).optional(),
  saturatedFat: z$2.lazy(() => SortOrderSchema).optional(),
  transFat: z$2.lazy(() => SortOrderSchema).optional(),
  cholesterol: z$2.lazy(() => SortOrderSchema).optional(),
  sodium: z$2.lazy(() => SortOrderSchema).optional(),
  carbohydrates: z$2.lazy(() => SortOrderSchema).optional(),
  fiber: z$2.lazy(() => SortOrderSchema).optional(),
  sugar: z$2.lazy(() => SortOrderSchema).optional(),
  protein: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional(),
  menuItem: z$2.lazy(() => MenuItemOrderByWithRelationInputSchema).optional()
}).strict();
var NutritionalInfoWhereUniqueInputSchema = z$2.union([
  z$2.object({
    id: z$2.number().int(),
    menuItemId: z$2.number().int()
  }),
  z$2.object({
    id: z$2.number().int()
  }),
  z$2.object({
    menuItemId: z$2.number().int()
  })
]).and(z$2.object({
  id: z$2.number().int().optional(),
  menuItemId: z$2.number().int().optional(),
  AND: z$2.union([z$2.lazy(() => NutritionalInfoWhereInputSchema), z$2.lazy(() => NutritionalInfoWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => NutritionalInfoWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => NutritionalInfoWhereInputSchema), z$2.lazy(() => NutritionalInfoWhereInputSchema).array()]).optional(),
  calories: z$2.union([z$2.lazy(() => FloatFilterSchema), z$2.number()]).optional(),
  fat: z$2.union([z$2.lazy(() => FloatFilterSchema), z$2.number()]).optional(),
  saturatedFat: z$2.union([z$2.lazy(() => FloatFilterSchema), z$2.number()]).optional(),
  transFat: z$2.union([z$2.lazy(() => FloatFilterSchema), z$2.number()]).optional(),
  cholesterol: z$2.union([z$2.lazy(() => FloatFilterSchema), z$2.number()]).optional(),
  sodium: z$2.union([z$2.lazy(() => FloatFilterSchema), z$2.number()]).optional(),
  carbohydrates: z$2.union([z$2.lazy(() => FloatFilterSchema), z$2.number()]).optional(),
  fiber: z$2.union([z$2.lazy(() => FloatFilterSchema), z$2.number()]).optional(),
  sugar: z$2.union([z$2.lazy(() => FloatFilterSchema), z$2.number()]).optional(),
  protein: z$2.union([z$2.lazy(() => FloatFilterSchema), z$2.number()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  menuItem: z$2.union([z$2.lazy(() => MenuItemNullableRelationFilterSchema), z$2.lazy(() => MenuItemWhereInputSchema)]).optional().nullable()
}).strict());
var NutritionalInfoOrderByWithAggregationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  menuItemId: z$2.union([z$2.lazy(() => SortOrderSchema), z$2.lazy(() => SortOrderInputSchema)]).optional(),
  calories: z$2.lazy(() => SortOrderSchema).optional(),
  fat: z$2.lazy(() => SortOrderSchema).optional(),
  saturatedFat: z$2.lazy(() => SortOrderSchema).optional(),
  transFat: z$2.lazy(() => SortOrderSchema).optional(),
  cholesterol: z$2.lazy(() => SortOrderSchema).optional(),
  sodium: z$2.lazy(() => SortOrderSchema).optional(),
  carbohydrates: z$2.lazy(() => SortOrderSchema).optional(),
  fiber: z$2.lazy(() => SortOrderSchema).optional(),
  sugar: z$2.lazy(() => SortOrderSchema).optional(),
  protein: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional(),
  _count: z$2.lazy(() => NutritionalInfoCountOrderByAggregateInputSchema).optional(),
  _avg: z$2.lazy(() => NutritionalInfoAvgOrderByAggregateInputSchema).optional(),
  _max: z$2.lazy(() => NutritionalInfoMaxOrderByAggregateInputSchema).optional(),
  _min: z$2.lazy(() => NutritionalInfoMinOrderByAggregateInputSchema).optional(),
  _sum: z$2.lazy(() => NutritionalInfoSumOrderByAggregateInputSchema).optional()
}).strict();
var NutritionalInfoScalarWhereWithAggregatesInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => NutritionalInfoScalarWhereWithAggregatesInputSchema), z$2.lazy(() => NutritionalInfoScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: z$2.lazy(() => NutritionalInfoScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => NutritionalInfoScalarWhereWithAggregatesInputSchema), z$2.lazy(() => NutritionalInfoScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  menuItemId: z$2.union([z$2.lazy(() => IntNullableWithAggregatesFilterSchema), z$2.number()]).optional().nullable(),
  calories: z$2.union([z$2.lazy(() => FloatWithAggregatesFilterSchema), z$2.number()]).optional(),
  fat: z$2.union([z$2.lazy(() => FloatWithAggregatesFilterSchema), z$2.number()]).optional(),
  saturatedFat: z$2.union([z$2.lazy(() => FloatWithAggregatesFilterSchema), z$2.number()]).optional(),
  transFat: z$2.union([z$2.lazy(() => FloatWithAggregatesFilterSchema), z$2.number()]).optional(),
  cholesterol: z$2.union([z$2.lazy(() => FloatWithAggregatesFilterSchema), z$2.number()]).optional(),
  sodium: z$2.union([z$2.lazy(() => FloatWithAggregatesFilterSchema), z$2.number()]).optional(),
  carbohydrates: z$2.union([z$2.lazy(() => FloatWithAggregatesFilterSchema), z$2.number()]).optional(),
  fiber: z$2.union([z$2.lazy(() => FloatWithAggregatesFilterSchema), z$2.number()]).optional(),
  sugar: z$2.union([z$2.lazy(() => FloatWithAggregatesFilterSchema), z$2.number()]).optional(),
  protein: z$2.union([z$2.lazy(() => FloatWithAggregatesFilterSchema), z$2.number()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional()
}).strict();
var FoodCostHistoryWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => FoodCostHistoryWhereInputSchema), z$2.lazy(() => FoodCostHistoryWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => FoodCostHistoryWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => FoodCostHistoryWhereInputSchema), z$2.lazy(() => FoodCostHistoryWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  recipeId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  cost: z$2.union([z$2.lazy(() => FloatFilterSchema), z$2.number()]).optional(),
  date: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  recipe: z$2.union([z$2.lazy(() => RecipeRelationFilterSchema), z$2.lazy(() => RecipeWhereInputSchema)]).optional()
}).strict();
var FoodCostHistoryOrderByWithRelationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  recipeId: z$2.lazy(() => SortOrderSchema).optional(),
  cost: z$2.lazy(() => SortOrderSchema).optional(),
  date: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional(),
  recipe: z$2.lazy(() => RecipeOrderByWithRelationInputSchema).optional()
}).strict();
var FoodCostHistoryWhereUniqueInputSchema = z$2.object({
  id: z$2.number().int()
}).and(z$2.object({
  id: z$2.number().int().optional(),
  AND: z$2.union([z$2.lazy(() => FoodCostHistoryWhereInputSchema), z$2.lazy(() => FoodCostHistoryWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => FoodCostHistoryWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => FoodCostHistoryWhereInputSchema), z$2.lazy(() => FoodCostHistoryWhereInputSchema).array()]).optional(),
  recipeId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number().int()]).optional(),
  cost: z$2.union([z$2.lazy(() => FloatFilterSchema), z$2.number()]).optional(),
  date: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  recipe: z$2.union([z$2.lazy(() => RecipeRelationFilterSchema), z$2.lazy(() => RecipeWhereInputSchema)]).optional()
}).strict());
var FoodCostHistoryOrderByWithAggregationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  recipeId: z$2.lazy(() => SortOrderSchema).optional(),
  cost: z$2.lazy(() => SortOrderSchema).optional(),
  date: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional(),
  _count: z$2.lazy(() => FoodCostHistoryCountOrderByAggregateInputSchema).optional(),
  _avg: z$2.lazy(() => FoodCostHistoryAvgOrderByAggregateInputSchema).optional(),
  _max: z$2.lazy(() => FoodCostHistoryMaxOrderByAggregateInputSchema).optional(),
  _min: z$2.lazy(() => FoodCostHistoryMinOrderByAggregateInputSchema).optional(),
  _sum: z$2.lazy(() => FoodCostHistorySumOrderByAggregateInputSchema).optional()
}).strict();
var FoodCostHistoryScalarWhereWithAggregatesInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => FoodCostHistoryScalarWhereWithAggregatesInputSchema), z$2.lazy(() => FoodCostHistoryScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: z$2.lazy(() => FoodCostHistoryScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => FoodCostHistoryScalarWhereWithAggregatesInputSchema), z$2.lazy(() => FoodCostHistoryScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  recipeId: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  cost: z$2.union([z$2.lazy(() => FloatWithAggregatesFilterSchema), z$2.number()]).optional(),
  date: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional()
}).strict();
var PrepHistoryWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => PrepHistoryWhereInputSchema), z$2.lazy(() => PrepHistoryWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => PrepHistoryWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => PrepHistoryWhereInputSchema), z$2.lazy(() => PrepHistoryWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  recipeId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  quantity: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  date: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  recipe: z$2.union([z$2.lazy(() => RecipeRelationFilterSchema), z$2.lazy(() => RecipeWhereInputSchema)]).optional()
}).strict();
var PrepHistoryOrderByWithRelationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  recipeId: z$2.lazy(() => SortOrderSchema).optional(),
  quantity: z$2.lazy(() => SortOrderSchema).optional(),
  date: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional(),
  recipe: z$2.lazy(() => RecipeOrderByWithRelationInputSchema).optional()
}).strict();
var PrepHistoryWhereUniqueInputSchema = z$2.object({
  id: z$2.number().int()
}).and(z$2.object({
  id: z$2.number().int().optional(),
  AND: z$2.union([z$2.lazy(() => PrepHistoryWhereInputSchema), z$2.lazy(() => PrepHistoryWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => PrepHistoryWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => PrepHistoryWhereInputSchema), z$2.lazy(() => PrepHistoryWhereInputSchema).array()]).optional(),
  recipeId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number().int()]).optional(),
  quantity: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number().int()]).optional(),
  date: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  recipe: z$2.union([z$2.lazy(() => RecipeRelationFilterSchema), z$2.lazy(() => RecipeWhereInputSchema)]).optional()
}).strict());
var PrepHistoryOrderByWithAggregationInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  recipeId: z$2.lazy(() => SortOrderSchema).optional(),
  quantity: z$2.lazy(() => SortOrderSchema).optional(),
  date: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional(),
  _count: z$2.lazy(() => PrepHistoryCountOrderByAggregateInputSchema).optional(),
  _avg: z$2.lazy(() => PrepHistoryAvgOrderByAggregateInputSchema).optional(),
  _max: z$2.lazy(() => PrepHistoryMaxOrderByAggregateInputSchema).optional(),
  _min: z$2.lazy(() => PrepHistoryMinOrderByAggregateInputSchema).optional(),
  _sum: z$2.lazy(() => PrepHistorySumOrderByAggregateInputSchema).optional()
}).strict();
var PrepHistoryScalarWhereWithAggregatesInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => PrepHistoryScalarWhereWithAggregatesInputSchema), z$2.lazy(() => PrepHistoryScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: z$2.lazy(() => PrepHistoryScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => PrepHistoryScalarWhereWithAggregatesInputSchema), z$2.lazy(() => PrepHistoryScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  recipeId: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  quantity: z$2.union([z$2.lazy(() => IntWithAggregatesFilterSchema), z$2.number()]).optional(),
  date: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeWithAggregatesFilterSchema), z$2.coerce.date()]).optional()
}).strict();
var SalesTransactionsCreateInputSchema = z$2.object({
  posTransactionID: z$2.string().optional().nullable(),
  price: z$2.number(),
  total: z$2.number(),
  transactionDate: z$2.coerce.date(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  restaurant: z$2.lazy(() => RestaurantCreateNestedOneWithoutSalesTransactionsInputSchema),
  menuItem: z$2.lazy(() => MenuItemCreateNestedOneWithoutSalesTransactionsInputSchema)
}).strict();
var SalesTransactionsUncheckedCreateInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  posTransactionID: z$2.string().optional().nullable(),
  restaurantId: z$2.number().int(),
  menuItemId: z$2.number().int(),
  price: z$2.number(),
  total: z$2.number(),
  transactionDate: z$2.coerce.date(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var SalesTransactionsUpdateInputSchema = z$2.object({
  posTransactionID: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  total: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  transactionDate: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: z$2.lazy(() => RestaurantUpdateOneRequiredWithoutSalesTransactionsNestedInputSchema).optional(),
  menuItem: z$2.lazy(() => MenuItemUpdateOneRequiredWithoutSalesTransactionsNestedInputSchema).optional()
}).strict();
var SalesTransactionsUncheckedUpdateInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  posTransactionID: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  menuItemId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  total: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  transactionDate: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var SalesTransactionsCreateManyInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  posTransactionID: z$2.string().optional().nullable(),
  restaurantId: z$2.number().int(),
  menuItemId: z$2.number().int(),
  price: z$2.number(),
  total: z$2.number(),
  transactionDate: z$2.coerce.date(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var SalesTransactionsUpdateManyMutationInputSchema = z$2.object({
  posTransactionID: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  total: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  transactionDate: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var SalesTransactionsUncheckedUpdateManyInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  posTransactionID: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  menuItemId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  total: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  transactionDate: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var MenuCategoryCreateInputSchema = z$2.object({
  name: z$2.string(),
  description: z$2.string().optional().nullable(),
  displayOrder: z$2.number().int(),
  isActive: z$2.boolean().optional(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  menu: z$2.lazy(() => MenuCreateNestedOneWithoutMenuCategoryInputSchema),
  menuItems: z$2.lazy(() => MenuItemCreateNestedManyWithoutCategoryInputSchema).optional()
}).strict();
var MenuCategoryUncheckedCreateInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  description: z$2.string().optional().nullable(),
  displayOrder: z$2.number().int(),
  menuId: z$2.number().int(),
  isActive: z$2.boolean().optional(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  menuItems: z$2.lazy(() => MenuItemUncheckedCreateNestedManyWithoutCategoryInputSchema).optional()
}).strict();
var MenuCategoryUpdateInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  displayOrder: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  isActive: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  menu: z$2.lazy(() => MenuUpdateOneRequiredWithoutMenuCategoryNestedInputSchema).optional(),
  menuItems: z$2.lazy(() => MenuItemUpdateManyWithoutCategoryNestedInputSchema).optional()
}).strict();
var MenuCategoryUncheckedUpdateInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  displayOrder: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  menuId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  isActive: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  menuItems: z$2.lazy(() => MenuItemUncheckedUpdateManyWithoutCategoryNestedInputSchema).optional()
}).strict();
var MenuCategoryCreateManyInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  description: z$2.string().optional().nullable(),
  displayOrder: z$2.number().int(),
  menuId: z$2.number().int(),
  isActive: z$2.boolean().optional(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var MenuCategoryUpdateManyMutationInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  displayOrder: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  isActive: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var MenuCategoryUncheckedUpdateManyInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  displayOrder: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  menuId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  isActive: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var RecipeVersionCreateInputSchema = z$2.object({
  versionNumber: z$2.number().int(),
  description: z$2.string().optional().nullable(),
  changes: z$2.string().optional().nullable(),
  isActive: z$2.boolean().optional(),
  approvedAt: z$2.coerce.date().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  recipe: z$2.lazy(() => RecipeCreateNestedOneWithoutVersionsInputSchema),
  ingredients: z$2.lazy(() => RecipeIngredientCreateNestedManyWithoutRecipeVersionInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionCreateNestedManyWithoutRecipeVersionInputSchema).optional(),
  createdBy: z$2.lazy(() => UserCreateNestedOneWithoutRecipeVersionsCreatedInputSchema),
  approvedBy: z$2.lazy(() => UserCreateNestedOneWithoutRecipeVersionsApprovedInputSchema).optional()
}).strict();
var RecipeVersionUncheckedCreateInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  recipeId: z$2.number().int(),
  versionNumber: z$2.number().int(),
  description: z$2.string().optional().nullable(),
  changes: z$2.string().optional().nullable(),
  isActive: z$2.boolean().optional(),
  createdById: z$2.number().int(),
  approvedById: z$2.number().int().optional().nullable(),
  approvedAt: z$2.coerce.date().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  ingredients: z$2.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutRecipeVersionInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionUncheckedCreateNestedManyWithoutRecipeVersionInputSchema).optional()
}).strict();
var RecipeVersionUpdateInputSchema = z$2.object({
  versionNumber: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  changes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isActive: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  approvedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  recipe: z$2.lazy(() => RecipeUpdateOneRequiredWithoutVersionsNestedInputSchema).optional(),
  ingredients: z$2.lazy(() => RecipeIngredientUpdateManyWithoutRecipeVersionNestedInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionUpdateManyWithoutRecipeVersionNestedInputSchema).optional(),
  createdBy: z$2.lazy(() => UserUpdateOneRequiredWithoutRecipeVersionsCreatedNestedInputSchema).optional(),
  approvedBy: z$2.lazy(() => UserUpdateOneWithoutRecipeVersionsApprovedNestedInputSchema).optional()
}).strict();
var RecipeVersionUncheckedUpdateInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  versionNumber: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  changes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isActive: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdById: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  approvedById: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  approvedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  ingredients: z$2.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutRecipeVersionNestedInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionUncheckedUpdateManyWithoutRecipeVersionNestedInputSchema).optional()
}).strict();
var RecipeVersionCreateManyInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  recipeId: z$2.number().int(),
  versionNumber: z$2.number().int(),
  description: z$2.string().optional().nullable(),
  changes: z$2.string().optional().nullable(),
  isActive: z$2.boolean().optional(),
  createdById: z$2.number().int(),
  approvedById: z$2.number().int().optional().nullable(),
  approvedAt: z$2.coerce.date().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var RecipeVersionUpdateManyMutationInputSchema = z$2.object({
  versionNumber: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  changes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isActive: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  approvedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var RecipeVersionUncheckedUpdateManyInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  versionNumber: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  changes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isActive: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdById: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  approvedById: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  approvedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var EquipmentCreateInputSchema = z$2.object({
  name: z$2.string(),
  description: z$2.string().optional().nullable(),
  model: z$2.string().optional().nullable(),
  serialNumber: z$2.string().optional().nullable(),
  purchaseDate: z$2.coerce.date().optional().nullable(),
  lastMaintenance: z$2.coerce.date().optional().nullable(),
  nextMaintenance: z$2.coerce.date().optional().nullable(),
  status: z$2.lazy(() => EquipmentStatusSchema).optional(),
  location: z$2.string().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  restaurant: z$2.lazy(() => RestaurantCreateNestedOneWithoutEquipmentInputSchema),
  recipes: z$2.lazy(() => RecipeEquipmentCreateNestedManyWithoutEquipmentInputSchema).optional(),
  maintenanceLogs: z$2.lazy(() => MaintenanceLogCreateNestedManyWithoutEquipmentInputSchema).optional()
}).strict();
var EquipmentUncheckedCreateInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  description: z$2.string().optional().nullable(),
  model: z$2.string().optional().nullable(),
  serialNumber: z$2.string().optional().nullable(),
  purchaseDate: z$2.coerce.date().optional().nullable(),
  lastMaintenance: z$2.coerce.date().optional().nullable(),
  nextMaintenance: z$2.coerce.date().optional().nullable(),
  status: z$2.lazy(() => EquipmentStatusSchema).optional(),
  location: z$2.string().optional().nullable(),
  restaurantId: z$2.number().int(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  recipes: z$2.lazy(() => RecipeEquipmentUncheckedCreateNestedManyWithoutEquipmentInputSchema).optional(),
  maintenanceLogs: z$2.lazy(() => MaintenanceLogUncheckedCreateNestedManyWithoutEquipmentInputSchema).optional()
}).strict();
var EquipmentUpdateInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  model: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  serialNumber: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  purchaseDate: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  lastMaintenance: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  nextMaintenance: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  status: z$2.union([z$2.lazy(() => EquipmentStatusSchema), z$2.lazy(() => EnumEquipmentStatusFieldUpdateOperationsInputSchema)]).optional(),
  location: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: z$2.lazy(() => RestaurantUpdateOneRequiredWithoutEquipmentNestedInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeEquipmentUpdateManyWithoutEquipmentNestedInputSchema).optional(),
  maintenanceLogs: z$2.lazy(() => MaintenanceLogUpdateManyWithoutEquipmentNestedInputSchema).optional()
}).strict();
var EquipmentUncheckedUpdateInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  model: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  serialNumber: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  purchaseDate: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  lastMaintenance: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  nextMaintenance: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  status: z$2.union([z$2.lazy(() => EquipmentStatusSchema), z$2.lazy(() => EnumEquipmentStatusFieldUpdateOperationsInputSchema)]).optional(),
  location: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  recipes: z$2.lazy(() => RecipeEquipmentUncheckedUpdateManyWithoutEquipmentNestedInputSchema).optional(),
  maintenanceLogs: z$2.lazy(() => MaintenanceLogUncheckedUpdateManyWithoutEquipmentNestedInputSchema).optional()
}).strict();
var EquipmentCreateManyInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  description: z$2.string().optional().nullable(),
  model: z$2.string().optional().nullable(),
  serialNumber: z$2.string().optional().nullable(),
  purchaseDate: z$2.coerce.date().optional().nullable(),
  lastMaintenance: z$2.coerce.date().optional().nullable(),
  nextMaintenance: z$2.coerce.date().optional().nullable(),
  status: z$2.lazy(() => EquipmentStatusSchema).optional(),
  location: z$2.string().optional().nullable(),
  restaurantId: z$2.number().int(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var EquipmentUpdateManyMutationInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  model: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  serialNumber: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  purchaseDate: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  lastMaintenance: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  nextMaintenance: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  status: z$2.union([z$2.lazy(() => EquipmentStatusSchema), z$2.lazy(() => EnumEquipmentStatusFieldUpdateOperationsInputSchema)]).optional(),
  location: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var EquipmentUncheckedUpdateManyInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  model: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  serialNumber: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  purchaseDate: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  lastMaintenance: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  nextMaintenance: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  status: z$2.union([z$2.lazy(() => EquipmentStatusSchema), z$2.lazy(() => EnumEquipmentStatusFieldUpdateOperationsInputSchema)]).optional(),
  location: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var RecipeEquipmentCreateInputSchema = z$2.object({
  notes: z$2.string().optional().nullable(),
  recipe: z$2.lazy(() => RecipeCreateNestedOneWithoutEquipmentInputSchema),
  equipment: z$2.lazy(() => EquipmentCreateNestedOneWithoutRecipesInputSchema)
}).strict();
var RecipeEquipmentUncheckedCreateInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  recipeId: z$2.number().int(),
  equipmentId: z$2.number().int(),
  notes: z$2.string().optional().nullable()
}).strict();
var RecipeEquipmentUpdateInputSchema = z$2.object({
  notes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  recipe: z$2.lazy(() => RecipeUpdateOneRequiredWithoutEquipmentNestedInputSchema).optional(),
  equipment: z$2.lazy(() => EquipmentUpdateOneRequiredWithoutRecipesNestedInputSchema).optional()
}).strict();
var RecipeEquipmentUncheckedUpdateInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  equipmentId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  notes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable()
}).strict();
var RecipeEquipmentCreateManyInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  recipeId: z$2.number().int(),
  equipmentId: z$2.number().int(),
  notes: z$2.string().optional().nullable()
}).strict();
var RecipeEquipmentUpdateManyMutationInputSchema = z$2.object({
  notes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable()
}).strict();
var RecipeEquipmentUncheckedUpdateManyInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  equipmentId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  notes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable()
}).strict();
var MaintenanceLogCreateInputSchema = z$2.object({
  date: z$2.coerce.date(),
  type: z$2.lazy(() => MaintenanceTypeSchema),
  description: z$2.string(),
  cost: z$2.number().optional().nullable(),
  performedBy: z$2.string(),
  notes: z$2.string().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  equipment: z$2.lazy(() => EquipmentCreateNestedOneWithoutMaintenanceLogsInputSchema)
}).strict();
var MaintenanceLogUncheckedCreateInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  equipmentId: z$2.number().int(),
  date: z$2.coerce.date(),
  type: z$2.lazy(() => MaintenanceTypeSchema),
  description: z$2.string(),
  cost: z$2.number().optional().nullable(),
  performedBy: z$2.string(),
  notes: z$2.string().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var MaintenanceLogUpdateInputSchema = z$2.object({
  date: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  type: z$2.union([z$2.lazy(() => MaintenanceTypeSchema), z$2.lazy(() => EnumMaintenanceTypeFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  cost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  performedBy: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  notes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  equipment: z$2.lazy(() => EquipmentUpdateOneRequiredWithoutMaintenanceLogsNestedInputSchema).optional()
}).strict();
var MaintenanceLogUncheckedUpdateInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  equipmentId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  type: z$2.union([z$2.lazy(() => MaintenanceTypeSchema), z$2.lazy(() => EnumMaintenanceTypeFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  cost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  performedBy: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  notes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var MaintenanceLogCreateManyInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  equipmentId: z$2.number().int(),
  date: z$2.coerce.date(),
  type: z$2.lazy(() => MaintenanceTypeSchema),
  description: z$2.string(),
  cost: z$2.number().optional().nullable(),
  performedBy: z$2.string(),
  notes: z$2.string().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var MaintenanceLogUpdateManyMutationInputSchema = z$2.object({
  date: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  type: z$2.union([z$2.lazy(() => MaintenanceTypeSchema), z$2.lazy(() => EnumMaintenanceTypeFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  cost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  performedBy: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  notes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var MaintenanceLogUncheckedUpdateManyInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  equipmentId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  type: z$2.union([z$2.lazy(() => MaintenanceTypeSchema), z$2.lazy(() => EnumMaintenanceTypeFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  cost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  performedBy: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  notes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var QualityChecklistCreateInputSchema = z$2.object({
  name: z$2.string(),
  description: z$2.string().optional().nullable(),
  frequency: z$2.lazy(() => ChecklistFrequencySchema).optional(),
  isActive: z$2.boolean().optional(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  restaurant: z$2.lazy(() => RestaurantCreateNestedOneWithoutQualityChecklistInputSchema),
  items: z$2.lazy(() => ChecklistItemCreateNestedManyWithoutChecklistInputSchema).optional(),
  completions: z$2.lazy(() => ChecklistCompleteCreateNestedManyWithoutChecklistInputSchema).optional()
}).strict();
var QualityChecklistUncheckedCreateInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  description: z$2.string().optional().nullable(),
  restaurantId: z$2.number().int(),
  frequency: z$2.lazy(() => ChecklistFrequencySchema).optional(),
  isActive: z$2.boolean().optional(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  items: z$2.lazy(() => ChecklistItemUncheckedCreateNestedManyWithoutChecklistInputSchema).optional(),
  completions: z$2.lazy(() => ChecklistCompleteUncheckedCreateNestedManyWithoutChecklistInputSchema).optional()
}).strict();
var QualityChecklistUpdateInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  frequency: z$2.union([z$2.lazy(() => ChecklistFrequencySchema), z$2.lazy(() => EnumChecklistFrequencyFieldUpdateOperationsInputSchema)]).optional(),
  isActive: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: z$2.lazy(() => RestaurantUpdateOneRequiredWithoutQualityChecklistNestedInputSchema).optional(),
  items: z$2.lazy(() => ChecklistItemUpdateManyWithoutChecklistNestedInputSchema).optional(),
  completions: z$2.lazy(() => ChecklistCompleteUpdateManyWithoutChecklistNestedInputSchema).optional()
}).strict();
var QualityChecklistUncheckedUpdateInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: z$2.union([z$2.lazy(() => ChecklistFrequencySchema), z$2.lazy(() => EnumChecklistFrequencyFieldUpdateOperationsInputSchema)]).optional(),
  isActive: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  items: z$2.lazy(() => ChecklistItemUncheckedUpdateManyWithoutChecklistNestedInputSchema).optional(),
  completions: z$2.lazy(() => ChecklistCompleteUncheckedUpdateManyWithoutChecklistNestedInputSchema).optional()
}).strict();
var QualityChecklistCreateManyInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  description: z$2.string().optional().nullable(),
  restaurantId: z$2.number().int(),
  frequency: z$2.lazy(() => ChecklistFrequencySchema).optional(),
  isActive: z$2.boolean().optional(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var QualityChecklistUpdateManyMutationInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  frequency: z$2.union([z$2.lazy(() => ChecklistFrequencySchema), z$2.lazy(() => EnumChecklistFrequencyFieldUpdateOperationsInputSchema)]).optional(),
  isActive: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var QualityChecklistUncheckedUpdateManyInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: z$2.union([z$2.lazy(() => ChecklistFrequencySchema), z$2.lazy(() => EnumChecklistFrequencyFieldUpdateOperationsInputSchema)]).optional(),
  isActive: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var ChecklistItemCreateInputSchema = z$2.object({
  description: z$2.string(),
  order: z$2.number().int(),
  type: z$2.lazy(() => ChecklistItemTypeSchema),
  requiredPhotos: z$2.boolean().optional(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  checklist: z$2.lazy(() => QualityChecklistCreateNestedOneWithoutItemsInputSchema),
  completions: z$2.lazy(() => ChecklistItemCompleteCreateNestedManyWithoutChecklistItemInputSchema).optional()
}).strict();
var ChecklistItemUncheckedCreateInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  checklistId: z$2.number().int(),
  description: z$2.string(),
  order: z$2.number().int(),
  type: z$2.lazy(() => ChecklistItemTypeSchema),
  requiredPhotos: z$2.boolean().optional(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  completions: z$2.lazy(() => ChecklistItemCompleteUncheckedCreateNestedManyWithoutChecklistItemInputSchema).optional()
}).strict();
var ChecklistItemUpdateInputSchema = z$2.object({
  description: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  order: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  type: z$2.union([z$2.lazy(() => ChecklistItemTypeSchema), z$2.lazy(() => EnumChecklistItemTypeFieldUpdateOperationsInputSchema)]).optional(),
  requiredPhotos: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  checklist: z$2.lazy(() => QualityChecklistUpdateOneRequiredWithoutItemsNestedInputSchema).optional(),
  completions: z$2.lazy(() => ChecklistItemCompleteUpdateManyWithoutChecklistItemNestedInputSchema).optional()
}).strict();
var ChecklistItemUncheckedUpdateInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  checklistId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  order: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  type: z$2.union([z$2.lazy(() => ChecklistItemTypeSchema), z$2.lazy(() => EnumChecklistItemTypeFieldUpdateOperationsInputSchema)]).optional(),
  requiredPhotos: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  completions: z$2.lazy(() => ChecklistItemCompleteUncheckedUpdateManyWithoutChecklistItemNestedInputSchema).optional()
}).strict();
var ChecklistItemCreateManyInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  checklistId: z$2.number().int(),
  description: z$2.string(),
  order: z$2.number().int(),
  type: z$2.lazy(() => ChecklistItemTypeSchema),
  requiredPhotos: z$2.boolean().optional(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var ChecklistItemUpdateManyMutationInputSchema = z$2.object({
  description: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  order: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  type: z$2.union([z$2.lazy(() => ChecklistItemTypeSchema), z$2.lazy(() => EnumChecklistItemTypeFieldUpdateOperationsInputSchema)]).optional(),
  requiredPhotos: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var ChecklistItemUncheckedUpdateManyInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  checklistId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  order: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  type: z$2.union([z$2.lazy(() => ChecklistItemTypeSchema), z$2.lazy(() => EnumChecklistItemTypeFieldUpdateOperationsInputSchema)]).optional(),
  requiredPhotos: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var ChecklistCompleteCreateInputSchema = z$2.object({
  date: z$2.coerce.date(),
  notes: z$2.string().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  checklist: z$2.lazy(() => QualityChecklistCreateNestedOneWithoutCompletionsInputSchema),
  completedBy: z$2.lazy(() => UserCreateNestedOneWithoutChecklistCompleteInputSchema),
  items: z$2.lazy(() => ChecklistItemCompleteCreateNestedManyWithoutChecklistCompleteInputSchema).optional()
}).strict();
var ChecklistCompleteUncheckedCreateInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  checklistId: z$2.number().int(),
  completedById: z$2.number().int(),
  date: z$2.coerce.date(),
  notes: z$2.string().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  items: z$2.lazy(() => ChecklistItemCompleteUncheckedCreateNestedManyWithoutChecklistCompleteInputSchema).optional()
}).strict();
var ChecklistCompleteUpdateInputSchema = z$2.object({
  date: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  notes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  checklist: z$2.lazy(() => QualityChecklistUpdateOneRequiredWithoutCompletionsNestedInputSchema).optional(),
  completedBy: z$2.lazy(() => UserUpdateOneRequiredWithoutChecklistCompleteNestedInputSchema).optional(),
  items: z$2.lazy(() => ChecklistItemCompleteUpdateManyWithoutChecklistCompleteNestedInputSchema).optional()
}).strict();
var ChecklistCompleteUncheckedUpdateInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  checklistId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  completedById: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  notes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  items: z$2.lazy(() => ChecklistItemCompleteUncheckedUpdateManyWithoutChecklistCompleteNestedInputSchema).optional()
}).strict();
var ChecklistCompleteCreateManyInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  checklistId: z$2.number().int(),
  completedById: z$2.number().int(),
  date: z$2.coerce.date(),
  notes: z$2.string().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var ChecklistCompleteUpdateManyMutationInputSchema = z$2.object({
  date: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  notes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var ChecklistCompleteUncheckedUpdateManyInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  checklistId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  completedById: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  notes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var ChecklistItemCompleteCreateInputSchema = z$2.object({
  status: z$2.lazy(() => ChecklistStatusSchema),
  notes: z$2.string().optional().nullable(),
  photoUrls: z$2.union([z$2.lazy(() => ChecklistItemCompleteCreatephotoUrlsInputSchema), z$2.string().array()]).optional(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteCreateNestedOneWithoutItemsInputSchema),
  checklistItem: z$2.lazy(() => ChecklistItemCreateNestedOneWithoutCompletionsInputSchema)
}).strict();
var ChecklistItemCompleteUncheckedCreateInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  checklistCompleteId: z$2.number().int(),
  checklistItemId: z$2.number().int(),
  status: z$2.lazy(() => ChecklistStatusSchema),
  notes: z$2.string().optional().nullable(),
  photoUrls: z$2.union([z$2.lazy(() => ChecklistItemCompleteCreatephotoUrlsInputSchema), z$2.string().array()]).optional(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var ChecklistItemCompleteUpdateInputSchema = z$2.object({
  status: z$2.union([z$2.lazy(() => ChecklistStatusSchema), z$2.lazy(() => EnumChecklistStatusFieldUpdateOperationsInputSchema)]).optional(),
  notes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  photoUrls: z$2.union([z$2.lazy(() => ChecklistItemCompleteUpdatephotoUrlsInputSchema), z$2.string().array()]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteUpdateOneRequiredWithoutItemsNestedInputSchema).optional(),
  checklistItem: z$2.lazy(() => ChecklistItemUpdateOneRequiredWithoutCompletionsNestedInputSchema).optional()
}).strict();
var ChecklistItemCompleteUncheckedUpdateInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  checklistCompleteId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  checklistItemId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  status: z$2.union([z$2.lazy(() => ChecklistStatusSchema), z$2.lazy(() => EnumChecklistStatusFieldUpdateOperationsInputSchema)]).optional(),
  notes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  photoUrls: z$2.union([z$2.lazy(() => ChecklistItemCompleteUpdatephotoUrlsInputSchema), z$2.string().array()]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var ChecklistItemCompleteCreateManyInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  checklistCompleteId: z$2.number().int(),
  checklistItemId: z$2.number().int(),
  status: z$2.lazy(() => ChecklistStatusSchema),
  notes: z$2.string().optional().nullable(),
  photoUrls: z$2.union([z$2.lazy(() => ChecklistItemCompleteCreatephotoUrlsInputSchema), z$2.string().array()]).optional(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var ChecklistItemCompleteUpdateManyMutationInputSchema = z$2.object({
  status: z$2.union([z$2.lazy(() => ChecklistStatusSchema), z$2.lazy(() => EnumChecklistStatusFieldUpdateOperationsInputSchema)]).optional(),
  notes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  photoUrls: z$2.union([z$2.lazy(() => ChecklistItemCompleteUpdatephotoUrlsInputSchema), z$2.string().array()]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var ChecklistItemCompleteUncheckedUpdateManyInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  checklistCompleteId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  checklistItemId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  status: z$2.union([z$2.lazy(() => ChecklistStatusSchema), z$2.lazy(() => EnumChecklistStatusFieldUpdateOperationsInputSchema)]).optional(),
  notes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  photoUrls: z$2.union([z$2.lazy(() => ChecklistItemCompleteUpdatephotoUrlsInputSchema), z$2.string().array()]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var SupplierPriceHistoryCreateInputSchema = z$2.object({
  price: z$2.number(),
  unit: z$2.string(),
  startDate: z$2.coerce.date(),
  endDate: z$2.coerce.date().optional().nullable(),
  notes: z$2.string().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  vendor: z$2.lazy(() => VendorCreateNestedOneWithoutSupplierPriceHistoryInputSchema),
  ingredient: z$2.lazy(() => IngredientCreateNestedOneWithoutSupplierPriceHistoryInputSchema)
}).strict();
var SupplierPriceHistoryUncheckedCreateInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  vendorId: z$2.number().int(),
  ingredientId: z$2.number().int(),
  price: z$2.number(),
  unit: z$2.string(),
  startDate: z$2.coerce.date(),
  endDate: z$2.coerce.date().optional().nullable(),
  notes: z$2.string().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var SupplierPriceHistoryUpdateInputSchema = z$2.object({
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  startDate: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endDate: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  notes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  vendor: z$2.lazy(() => VendorUpdateOneRequiredWithoutSupplierPriceHistoryNestedInputSchema).optional(),
  ingredient: z$2.lazy(() => IngredientUpdateOneRequiredWithoutSupplierPriceHistoryNestedInputSchema).optional()
}).strict();
var SupplierPriceHistoryUncheckedUpdateInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  vendorId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  ingredientId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  startDate: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endDate: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  notes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var SupplierPriceHistoryCreateManyInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  vendorId: z$2.number().int(),
  ingredientId: z$2.number().int(),
  price: z$2.number(),
  unit: z$2.string(),
  startDate: z$2.coerce.date(),
  endDate: z$2.coerce.date().optional().nullable(),
  notes: z$2.string().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var SupplierPriceHistoryUpdateManyMutationInputSchema = z$2.object({
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  startDate: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endDate: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  notes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var SupplierPriceHistoryUncheckedUpdateManyInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  vendorId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  ingredientId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  startDate: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endDate: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  notes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var CustomerFeedbackCreateInputSchema = z$2.object({
  rating: z$2.number().int(),
  comment: z$2.string().optional().nullable(),
  source: z$2.lazy(() => FeedbackSourceSchema),
  tags: z$2.union([z$2.lazy(() => CustomerFeedbackCreatetagsInputSchema), z$2.string().array()]).optional(),
  status: z$2.lazy(() => FeedbackStatusSchema).optional(),
  responseText: z$2.string().optional().nullable(),
  respondedAt: z$2.coerce.date().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  restaurant: z$2.lazy(() => RestaurantCreateNestedOneWithoutQustomerFeedbackInputSchema),
  menuItem: z$2.lazy(() => MenuItemCreateNestedOneWithoutFeedbackInputSchema).optional(),
  respondedBy: z$2.lazy(() => UserCreateNestedOneWithoutCustomerFeedbackInputSchema).optional()
}).strict();
var CustomerFeedbackUncheckedCreateInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  restaurantId: z$2.number().int(),
  menuItemId: z$2.number().int().optional().nullable(),
  rating: z$2.number().int(),
  comment: z$2.string().optional().nullable(),
  source: z$2.lazy(() => FeedbackSourceSchema),
  tags: z$2.union([z$2.lazy(() => CustomerFeedbackCreatetagsInputSchema), z$2.string().array()]).optional(),
  status: z$2.lazy(() => FeedbackStatusSchema).optional(),
  responseText: z$2.string().optional().nullable(),
  respondedAt: z$2.coerce.date().optional().nullable(),
  respondedById: z$2.number().int().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var CustomerFeedbackUpdateInputSchema = z$2.object({
  rating: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  comment: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  source: z$2.union([z$2.lazy(() => FeedbackSourceSchema), z$2.lazy(() => EnumFeedbackSourceFieldUpdateOperationsInputSchema)]).optional(),
  tags: z$2.union([z$2.lazy(() => CustomerFeedbackUpdatetagsInputSchema), z$2.string().array()]).optional(),
  status: z$2.union([z$2.lazy(() => FeedbackStatusSchema), z$2.lazy(() => EnumFeedbackStatusFieldUpdateOperationsInputSchema)]).optional(),
  responseText: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  respondedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: z$2.lazy(() => RestaurantUpdateOneRequiredWithoutQustomerFeedbackNestedInputSchema).optional(),
  menuItem: z$2.lazy(() => MenuItemUpdateOneWithoutFeedbackNestedInputSchema).optional(),
  respondedBy: z$2.lazy(() => UserUpdateOneWithoutCustomerFeedbackNestedInputSchema).optional()
}).strict();
var CustomerFeedbackUncheckedUpdateInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  menuItemId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  rating: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  comment: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  source: z$2.union([z$2.lazy(() => FeedbackSourceSchema), z$2.lazy(() => EnumFeedbackSourceFieldUpdateOperationsInputSchema)]).optional(),
  tags: z$2.union([z$2.lazy(() => CustomerFeedbackUpdatetagsInputSchema), z$2.string().array()]).optional(),
  status: z$2.union([z$2.lazy(() => FeedbackStatusSchema), z$2.lazy(() => EnumFeedbackStatusFieldUpdateOperationsInputSchema)]).optional(),
  responseText: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  respondedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  respondedById: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var CustomerFeedbackCreateManyInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  restaurantId: z$2.number().int(),
  menuItemId: z$2.number().int().optional().nullable(),
  rating: z$2.number().int(),
  comment: z$2.string().optional().nullable(),
  source: z$2.lazy(() => FeedbackSourceSchema),
  tags: z$2.union([z$2.lazy(() => CustomerFeedbackCreatetagsInputSchema), z$2.string().array()]).optional(),
  status: z$2.lazy(() => FeedbackStatusSchema).optional(),
  responseText: z$2.string().optional().nullable(),
  respondedAt: z$2.coerce.date().optional().nullable(),
  respondedById: z$2.number().int().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var CustomerFeedbackUpdateManyMutationInputSchema = z$2.object({
  rating: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  comment: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  source: z$2.union([z$2.lazy(() => FeedbackSourceSchema), z$2.lazy(() => EnumFeedbackSourceFieldUpdateOperationsInputSchema)]).optional(),
  tags: z$2.union([z$2.lazy(() => CustomerFeedbackUpdatetagsInputSchema), z$2.string().array()]).optional(),
  status: z$2.union([z$2.lazy(() => FeedbackStatusSchema), z$2.lazy(() => EnumFeedbackStatusFieldUpdateOperationsInputSchema)]).optional(),
  responseText: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  respondedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var CustomerFeedbackUncheckedUpdateManyInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  menuItemId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  rating: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  comment: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  source: z$2.union([z$2.lazy(() => FeedbackSourceSchema), z$2.lazy(() => EnumFeedbackSourceFieldUpdateOperationsInputSchema)]).optional(),
  tags: z$2.union([z$2.lazy(() => CustomerFeedbackUpdatetagsInputSchema), z$2.string().array()]).optional(),
  status: z$2.union([z$2.lazy(() => FeedbackStatusSchema), z$2.lazy(() => EnumFeedbackStatusFieldUpdateOperationsInputSchema)]).optional(),
  responseText: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  respondedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  respondedById: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var DietaryRestrictionCreateInputSchema = z$2.object({
  name: z$2.string(),
  description: z$2.string().optional().nullable(),
  icon: z$2.string().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  menuItems: z$2.lazy(() => MenuItemCreateNestedManyWithoutDietaryRestrictionsInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeCreateNestedManyWithoutDietaryRestrictionsInputSchema).optional(),
  ingredients: z$2.lazy(() => IngredientCreateNestedManyWithoutDietaryRestrictionInputSchema).optional()
}).strict();
var DietaryRestrictionUncheckedCreateInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  description: z$2.string().optional().nullable(),
  icon: z$2.string().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  menuItems: z$2.lazy(() => MenuItemUncheckedCreateNestedManyWithoutDietaryRestrictionsInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeUncheckedCreateNestedManyWithoutDietaryRestrictionsInputSchema).optional(),
  ingredients: z$2.lazy(() => IngredientUncheckedCreateNestedManyWithoutDietaryRestrictionInputSchema).optional()
}).strict();
var DietaryRestrictionUpdateInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  icon: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  menuItems: z$2.lazy(() => MenuItemUpdateManyWithoutDietaryRestrictionsNestedInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeUpdateManyWithoutDietaryRestrictionsNestedInputSchema).optional(),
  ingredients: z$2.lazy(() => IngredientUpdateManyWithoutDietaryRestrictionNestedInputSchema).optional()
}).strict();
var DietaryRestrictionUncheckedUpdateInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  icon: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  menuItems: z$2.lazy(() => MenuItemUncheckedUpdateManyWithoutDietaryRestrictionsNestedInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeUncheckedUpdateManyWithoutDietaryRestrictionsNestedInputSchema).optional(),
  ingredients: z$2.lazy(() => IngredientUncheckedUpdateManyWithoutDietaryRestrictionNestedInputSchema).optional()
}).strict();
var DietaryRestrictionCreateManyInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  description: z$2.string().optional().nullable(),
  icon: z$2.string().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var DietaryRestrictionUpdateManyMutationInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  icon: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var DietaryRestrictionUncheckedUpdateManyInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  icon: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var RecipeTagCreateInputSchema = z$2.object({
  name: z$2.string(),
  description: z$2.string().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  recipes: z$2.lazy(() => RecipeCreateNestedManyWithoutTagsInputSchema).optional()
}).strict();
var RecipeTagUncheckedCreateInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  description: z$2.string().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  recipes: z$2.lazy(() => RecipeUncheckedCreateNestedManyWithoutTagsInputSchema).optional()
}).strict();
var RecipeTagUpdateInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  recipes: z$2.lazy(() => RecipeUpdateManyWithoutTagsNestedInputSchema).optional()
}).strict();
var RecipeTagUncheckedUpdateInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  recipes: z$2.lazy(() => RecipeUncheckedUpdateManyWithoutTagsNestedInputSchema).optional()
}).strict();
var RecipeTagCreateManyInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  description: z$2.string().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var RecipeTagUpdateManyMutationInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var RecipeTagUncheckedUpdateManyInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var LeftoverItemCreateInputSchema = z$2.object({
  date: z$2.coerce.date(),
  quantity: z$2.number().int(),
  reason: z$2.string(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  restaurant: z$2.lazy(() => RestaurantCreateNestedOneWithoutLeftoverItemInputSchema),
  menuItem: z$2.lazy(() => MenuItemCreateNestedOneWithoutLeftoverItemInputSchema),
  recordedBy: z$2.lazy(() => UserCreateNestedOneWithoutLeftoverItemInputSchema)
}).strict();
var LeftoverItemUncheckedCreateInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  restaurantId: z$2.number().int(),
  date: z$2.coerce.date(),
  menuItemId: z$2.number().int(),
  quantity: z$2.number().int(),
  reason: z$2.string(),
  recordedById: z$2.number().int(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var LeftoverItemUpdateInputSchema = z$2.object({
  date: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  reason: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: z$2.lazy(() => RestaurantUpdateOneRequiredWithoutLeftoverItemNestedInputSchema).optional(),
  menuItem: z$2.lazy(() => MenuItemUpdateOneRequiredWithoutLeftoverItemNestedInputSchema).optional(),
  recordedBy: z$2.lazy(() => UserUpdateOneRequiredWithoutLeftoverItemNestedInputSchema).optional()
}).strict();
var LeftoverItemUncheckedUpdateInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  menuItemId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  reason: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  recordedById: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var LeftoverItemCreateManyInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  restaurantId: z$2.number().int(),
  date: z$2.coerce.date(),
  menuItemId: z$2.number().int(),
  quantity: z$2.number().int(),
  reason: z$2.string(),
  recordedById: z$2.number().int(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var LeftoverItemUpdateManyMutationInputSchema = z$2.object({
  date: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  reason: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var LeftoverItemUncheckedUpdateManyInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  menuItemId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  reason: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  recordedById: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var WasteRecordCreateInputSchema = z$2.object({
  date: z$2.coerce.date(),
  quantity: z$2.number(),
  unit: z$2.string(),
  reason: z$2.string(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  restaurant: z$2.lazy(() => RestaurantCreateNestedOneWithoutWasteRecordInputSchema),
  ingrediente: z$2.lazy(() => IngredientCreateNestedOneWithoutWasteRecordInputSchema),
  recordedBy: z$2.lazy(() => UserCreateNestedOneWithoutWasteRecordInputSchema)
}).strict();
var WasteRecordUncheckedCreateInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  restaurantId: z$2.number().int(),
  date: z$2.coerce.date(),
  ingredientId: z$2.number().int(),
  quantity: z$2.number(),
  unit: z$2.string(),
  reason: z$2.string(),
  recordedById: z$2.number().int(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var WasteRecordUpdateInputSchema = z$2.object({
  date: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  reason: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: z$2.lazy(() => RestaurantUpdateOneRequiredWithoutWasteRecordNestedInputSchema).optional(),
  ingrediente: z$2.lazy(() => IngredientUpdateOneRequiredWithoutWasteRecordNestedInputSchema).optional(),
  recordedBy: z$2.lazy(() => UserUpdateOneRequiredWithoutWasteRecordNestedInputSchema).optional()
}).strict();
var WasteRecordUncheckedUpdateInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  ingredientId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  reason: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  recordedById: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var WasteRecordCreateManyInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  restaurantId: z$2.number().int(),
  date: z$2.coerce.date(),
  ingredientId: z$2.number().int(),
  quantity: z$2.number(),
  unit: z$2.string(),
  reason: z$2.string(),
  recordedById: z$2.number().int(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var WasteRecordUpdateManyMutationInputSchema = z$2.object({
  date: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  reason: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var WasteRecordUncheckedUpdateManyInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  ingredientId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  reason: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  recordedById: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var ProductionPlanCreateInputSchema = z$2.object({
  date: z$2.coerce.date(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  restaurant: z$2.lazy(() => RestaurantCreateNestedOneWithoutProductionPlanInputSchema),
  createdBy: z$2.lazy(() => UserCreateNestedOneWithoutProductionPlanInputSchema),
  items: z$2.lazy(() => ProductionPlanItemCreateNestedManyWithoutProductionPlanInputSchema).optional()
}).strict();
var ProductionPlanUncheckedCreateInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  restaurantId: z$2.number().int(),
  date: z$2.coerce.date(),
  createdById: z$2.number().int(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  items: z$2.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutProductionPlanInputSchema).optional()
}).strict();
var ProductionPlanUpdateInputSchema = z$2.object({
  date: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: z$2.lazy(() => RestaurantUpdateOneRequiredWithoutProductionPlanNestedInputSchema).optional(),
  createdBy: z$2.lazy(() => UserUpdateOneRequiredWithoutProductionPlanNestedInputSchema).optional(),
  items: z$2.lazy(() => ProductionPlanItemUpdateManyWithoutProductionPlanNestedInputSchema).optional()
}).strict();
var ProductionPlanUncheckedUpdateInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdById: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  items: z$2.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutProductionPlanNestedInputSchema).optional()
}).strict();
var ProductionPlanCreateManyInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  restaurantId: z$2.number().int(),
  date: z$2.coerce.date(),
  createdById: z$2.number().int(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var ProductionPlanUpdateManyMutationInputSchema = z$2.object({
  date: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var ProductionPlanUncheckedUpdateManyInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdById: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var ProductionPlanItemCreateInputSchema = z$2.object({
  quantity: z$2.number().int(),
  unit: z$2.string(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  productionPlan: z$2.lazy(() => ProductionPlanCreateNestedOneWithoutItemsInputSchema),
  recipe: z$2.lazy(() => RecipeCreateNestedOneWithoutProductionPlanItemInputSchema),
  assignedTo: z$2.lazy(() => UserCreateNestedOneWithoutProductionPlanItemInputSchema).optional()
}).strict();
var ProductionPlanItemUncheckedCreateInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  productionPlanId: z$2.number().int(),
  recipeId: z$2.number().int(),
  quantity: z$2.number().int(),
  unit: z$2.string(),
  assignedToId: z$2.number().int().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var ProductionPlanItemUpdateInputSchema = z$2.object({
  quantity: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUpdateOneRequiredWithoutItemsNestedInputSchema).optional(),
  recipe: z$2.lazy(() => RecipeUpdateOneRequiredWithoutProductionPlanItemNestedInputSchema).optional(),
  assignedTo: z$2.lazy(() => UserUpdateOneWithoutProductionPlanItemNestedInputSchema).optional()
}).strict();
var ProductionPlanItemUncheckedUpdateInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  productionPlanId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  assignedToId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var ProductionPlanItemCreateManyInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  productionPlanId: z$2.number().int(),
  recipeId: z$2.number().int(),
  quantity: z$2.number().int(),
  unit: z$2.string(),
  assignedToId: z$2.number().int().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var ProductionPlanItemUpdateManyMutationInputSchema = z$2.object({
  quantity: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var ProductionPlanItemUncheckedUpdateManyInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  productionPlanId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  assignedToId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var ShiftTaskCreateInputSchema = z$2.object({
  taskType: z$2.lazy(() => TaskTypeSchema),
  startTime: z$2.coerce.date(),
  endTime: z$2.coerce.date(),
  duration: z$2.number().int(),
  notes: z$2.string().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  shift: z$2.lazy(() => ShiftCreateNestedOneWithoutShiftTaskInputSchema)
}).strict();
var ShiftTaskUncheckedCreateInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  shiftId: z$2.number().int(),
  taskType: z$2.lazy(() => TaskTypeSchema),
  startTime: z$2.coerce.date(),
  endTime: z$2.coerce.date(),
  duration: z$2.number().int(),
  notes: z$2.string().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var ShiftTaskUpdateInputSchema = z$2.object({
  taskType: z$2.union([z$2.lazy(() => TaskTypeSchema), z$2.lazy(() => EnumTaskTypeFieldUpdateOperationsInputSchema)]).optional(),
  startTime: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endTime: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  duration: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  notes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  shift: z$2.lazy(() => ShiftUpdateOneRequiredWithoutShiftTaskNestedInputSchema).optional()
}).strict();
var ShiftTaskUncheckedUpdateInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  shiftId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  taskType: z$2.union([z$2.lazy(() => TaskTypeSchema), z$2.lazy(() => EnumTaskTypeFieldUpdateOperationsInputSchema)]).optional(),
  startTime: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endTime: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  duration: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  notes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var ShiftTaskCreateManyInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  shiftId: z$2.number().int(),
  taskType: z$2.lazy(() => TaskTypeSchema),
  startTime: z$2.coerce.date(),
  endTime: z$2.coerce.date(),
  duration: z$2.number().int(),
  notes: z$2.string().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var ShiftTaskUpdateManyMutationInputSchema = z$2.object({
  taskType: z$2.union([z$2.lazy(() => TaskTypeSchema), z$2.lazy(() => EnumTaskTypeFieldUpdateOperationsInputSchema)]).optional(),
  startTime: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endTime: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  duration: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  notes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var ShiftTaskUncheckedUpdateManyInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  shiftId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  taskType: z$2.union([z$2.lazy(() => TaskTypeSchema), z$2.lazy(() => EnumTaskTypeFieldUpdateOperationsInputSchema)]).optional(),
  startTime: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endTime: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  duration: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  notes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var AvailabilityCreateInputSchema = z$2.object({
  dayOfWeek: z$2.lazy(() => DayOfWeekSchema),
  startTime: z$2.coerce.date(),
  endTime: z$2.coerce.date(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  user: z$2.lazy(() => UserCreateNestedOneWithoutAvailabilityInputSchema)
}).strict();
var AvailabilityUncheckedCreateInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  userId: z$2.number().int(),
  dayOfWeek: z$2.lazy(() => DayOfWeekSchema),
  startTime: z$2.coerce.date(),
  endTime: z$2.coerce.date(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var AvailabilityUpdateInputSchema = z$2.object({
  dayOfWeek: z$2.union([z$2.lazy(() => DayOfWeekSchema), z$2.lazy(() => EnumDayOfWeekFieldUpdateOperationsInputSchema)]).optional(),
  startTime: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endTime: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  user: z$2.lazy(() => UserUpdateOneRequiredWithoutAvailabilityNestedInputSchema).optional()
}).strict();
var AvailabilityUncheckedUpdateInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  userId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  dayOfWeek: z$2.union([z$2.lazy(() => DayOfWeekSchema), z$2.lazy(() => EnumDayOfWeekFieldUpdateOperationsInputSchema)]).optional(),
  startTime: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endTime: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var AvailabilityCreateManyInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  userId: z$2.number().int(),
  dayOfWeek: z$2.lazy(() => DayOfWeekSchema),
  startTime: z$2.coerce.date(),
  endTime: z$2.coerce.date(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var AvailabilityUpdateManyMutationInputSchema = z$2.object({
  dayOfWeek: z$2.union([z$2.lazy(() => DayOfWeekSchema), z$2.lazy(() => EnumDayOfWeekFieldUpdateOperationsInputSchema)]).optional(),
  startTime: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endTime: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var AvailabilityUncheckedUpdateManyInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  userId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  dayOfWeek: z$2.union([z$2.lazy(() => DayOfWeekSchema), z$2.lazy(() => EnumDayOfWeekFieldUpdateOperationsInputSchema)]).optional(),
  startTime: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endTime: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var SchedulingConstraintCreateInputSchema = z$2.object({
  date: z$2.coerce.date(),
  constraintsType: z$2.lazy(() => ConstraintTypeSchema),
  startTime: z$2.coerce.date(),
  endTime: z$2.coerce.date(),
  notes: z$2.string().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  user: z$2.lazy(() => UserCreateNestedOneWithoutSchedulingConstraintInputSchema)
}).strict();
var SchedulingConstraintUncheckedCreateInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  userId: z$2.number().int(),
  date: z$2.coerce.date(),
  constraintsType: z$2.lazy(() => ConstraintTypeSchema),
  startTime: z$2.coerce.date(),
  endTime: z$2.coerce.date(),
  notes: z$2.string().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var SchedulingConstraintUpdateInputSchema = z$2.object({
  date: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  constraintsType: z$2.union([z$2.lazy(() => ConstraintTypeSchema), z$2.lazy(() => EnumConstraintTypeFieldUpdateOperationsInputSchema)]).optional(),
  startTime: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endTime: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  notes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  user: z$2.lazy(() => UserUpdateOneRequiredWithoutSchedulingConstraintNestedInputSchema).optional()
}).strict();
var SchedulingConstraintUncheckedUpdateInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  userId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  constraintsType: z$2.union([z$2.lazy(() => ConstraintTypeSchema), z$2.lazy(() => EnumConstraintTypeFieldUpdateOperationsInputSchema)]).optional(),
  startTime: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endTime: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  notes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var SchedulingConstraintCreateManyInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  userId: z$2.number().int(),
  date: z$2.coerce.date(),
  constraintsType: z$2.lazy(() => ConstraintTypeSchema),
  startTime: z$2.coerce.date(),
  endTime: z$2.coerce.date(),
  notes: z$2.string().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var SchedulingConstraintUpdateManyMutationInputSchema = z$2.object({
  date: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  constraintsType: z$2.union([z$2.lazy(() => ConstraintTypeSchema), z$2.lazy(() => EnumConstraintTypeFieldUpdateOperationsInputSchema)]).optional(),
  startTime: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endTime: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  notes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var SchedulingConstraintUncheckedUpdateManyInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  userId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  constraintsType: z$2.union([z$2.lazy(() => ConstraintTypeSchema), z$2.lazy(() => EnumConstraintTypeFieldUpdateOperationsInputSchema)]).optional(),
  startTime: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endTime: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  notes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var InventoryWithdrawalCreateInputSchema = z$2.object({
  dateTime: z$2.coerce.date(),
  quantity: z$2.number(),
  unit: z$2.string(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  inventoryItem: z$2.lazy(() => InventoryItemCreateNestedOneWithoutInventoryWithdrawalInputSchema),
  recipe: z$2.lazy(() => RecipeCreateNestedOneWithoutInventoryWithdrawalInputSchema).optional(),
  createdBy: z$2.lazy(() => UserCreateNestedOneWithoutInventoryWithdrawalInputSchema)
}).strict();
var InventoryWithdrawalUncheckedCreateInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  inventoryItemId: z$2.number().int(),
  dateTime: z$2.coerce.date(),
  quantity: z$2.number(),
  unit: z$2.string(),
  recipeId: z$2.number().int().optional().nullable(),
  createdById: z$2.number().int(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var InventoryWithdrawalUpdateInputSchema = z$2.object({
  dateTime: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  inventoryItem: z$2.lazy(() => InventoryItemUpdateOneRequiredWithoutInventoryWithdrawalNestedInputSchema).optional(),
  recipe: z$2.lazy(() => RecipeUpdateOneWithoutInventoryWithdrawalNestedInputSchema).optional(),
  createdBy: z$2.lazy(() => UserUpdateOneRequiredWithoutInventoryWithdrawalNestedInputSchema).optional()
}).strict();
var InventoryWithdrawalUncheckedUpdateInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  inventoryItemId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  dateTime: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdById: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var InventoryWithdrawalCreateManyInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  inventoryItemId: z$2.number().int(),
  dateTime: z$2.coerce.date(),
  quantity: z$2.number(),
  unit: z$2.string(),
  recipeId: z$2.number().int().optional().nullable(),
  createdById: z$2.number().int(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var InventoryWithdrawalUpdateManyMutationInputSchema = z$2.object({
  dateTime: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var InventoryWithdrawalUncheckedUpdateManyInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  inventoryItemId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  dateTime: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdById: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var AllergenCreateInputSchema = z$2.object({
  name: z$2.string(),
  description: z$2.string().optional().nullable(),
  ingredients: z$2.lazy(() => IngredientAllergenCreateNestedManyWithoutAllergenInputSchema).optional()
}).strict();
var AllergenUncheckedCreateInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  description: z$2.string().optional().nullable(),
  ingredients: z$2.lazy(() => IngredientAllergenUncheckedCreateNestedManyWithoutAllergenInputSchema).optional()
}).strict();
var AllergenUpdateInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  ingredients: z$2.lazy(() => IngredientAllergenUpdateManyWithoutAllergenNestedInputSchema).optional()
}).strict();
var AllergenUncheckedUpdateInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  ingredients: z$2.lazy(() => IngredientAllergenUncheckedUpdateManyWithoutAllergenNestedInputSchema).optional()
}).strict();
var AllergenCreateManyInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  description: z$2.string().optional().nullable()
}).strict();
var AllergenUpdateManyMutationInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable()
}).strict();
var AllergenUncheckedUpdateManyInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable()
}).strict();
var IngredientAllergenCreateInputSchema = z$2.object({
  ingredient: z$2.lazy(() => IngredientCreateNestedOneWithoutIngredientAllergenInputSchema),
  allergen: z$2.lazy(() => AllergenCreateNestedOneWithoutIngredientsInputSchema)
}).strict();
var IngredientAllergenUncheckedCreateInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  ingredientId: z$2.number().int(),
  allergenId: z$2.number().int()
}).strict();
var IngredientAllergenUpdateInputSchema = z$2.object({
  ingredient: z$2.lazy(() => IngredientUpdateOneRequiredWithoutIngredientAllergenNestedInputSchema).optional(),
  allergen: z$2.lazy(() => AllergenUpdateOneRequiredWithoutIngredientsNestedInputSchema).optional()
}).strict();
var IngredientAllergenUncheckedUpdateInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  ingredientId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  allergenId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var IngredientAllergenCreateManyInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  ingredientId: z$2.number().int(),
  allergenId: z$2.number().int()
}).strict();
var IngredientAllergenUpdateManyMutationInputSchema = z$2.object({}).strict();
var IngredientAllergenUncheckedUpdateManyInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  ingredientId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  allergenId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var NutritionalRecommendationCreateInputSchema = z$2.object({
  recommendation: z$2.string(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  menuItem: z$2.lazy(() => MenuItemCreateNestedOneWithoutNutritionalRecommendationInputSchema)
}).strict();
var NutritionalRecommendationUncheckedCreateInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  menuItemId: z$2.number().int(),
  recommendation: z$2.string(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var NutritionalRecommendationUpdateInputSchema = z$2.object({
  recommendation: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  menuItem: z$2.lazy(() => MenuItemUpdateOneRequiredWithoutNutritionalRecommendationNestedInputSchema).optional()
}).strict();
var NutritionalRecommendationUncheckedUpdateInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  menuItemId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recommendation: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var NutritionalRecommendationCreateManyInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  menuItemId: z$2.number().int(),
  recommendation: z$2.string(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var NutritionalRecommendationUpdateManyMutationInputSchema = z$2.object({
  recommendation: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var NutritionalRecommendationUncheckedUpdateManyInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  menuItemId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recommendation: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var EarlyAccessCreateInputSchema = z$2.object({
  email: z$2.string(),
  isEmailSent: z$2.boolean(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var EarlyAccessUncheckedCreateInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  email: z$2.string(),
  isEmailSent: z$2.boolean(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var EarlyAccessUpdateInputSchema = z$2.object({
  email: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  isEmailSent: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var EarlyAccessUncheckedUpdateInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  email: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  isEmailSent: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var EarlyAccessCreateManyInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  email: z$2.string(),
  isEmailSent: z$2.boolean(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var EarlyAccessUpdateManyMutationInputSchema = z$2.object({
  email: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  isEmailSent: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var EarlyAccessUncheckedUpdateManyInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  email: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  isEmailSent: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var OrganizationCreateInputSchema = z$2.object({
  name: z$2.string(),
  imageUrl: z$2.string().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  restaurants: z$2.lazy(() => RestaurantCreateNestedManyWithoutOrganizationInputSchema).optional(),
  users: z$2.lazy(() => UserCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();
var OrganizationUncheckedCreateInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  imageUrl: z$2.string().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  restaurants: z$2.lazy(() => RestaurantUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  users: z$2.lazy(() => UserUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();
var OrganizationUpdateInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurants: z$2.lazy(() => RestaurantUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  users: z$2.lazy(() => UserUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();
var OrganizationUncheckedUpdateInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurants: z$2.lazy(() => RestaurantUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  users: z$2.lazy(() => UserUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();
var OrganizationCreateManyInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  imageUrl: z$2.string().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var OrganizationUpdateManyMutationInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var OrganizationUncheckedUpdateManyInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var RestaurantCreateInputSchema = z$2.object({
  name: z$2.string(),
  imageUrl: z$2.string().optional().nullable(),
  address: z$2.string(),
  city: z$2.string(),
  zipCode: z$2.string(),
  state: z$2.string(),
  owner: z$2.string(),
  foodCost: z$2.number().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  isDeleted: z$2.boolean().optional(),
  deleted: z$2.coerce.date().optional().nullable(),
  organization: z$2.lazy(() => OrganizationCreateNestedOneWithoutRestaurantsInputSchema).optional(),
  users: z$2.lazy(() => UserCreateNestedManyWithoutRestaurantInputSchema).optional(),
  cookbooks: z$2.lazy(() => CookBookCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: z$2.lazy(() => InventoryCreateNestedOneWithoutRestaurantInputSchema).optional(),
  orders: z$2.lazy(() => OrderCreateNestedManyWithoutRestaurantInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: z$2.lazy(() => MenuCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipment: z$2.lazy(() => EquipmentCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklist: z$2.lazy(() => QualityChecklistCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qustomerFeedback: z$2.lazy(() => CustomerFeedbackCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();
var RestaurantUncheckedCreateInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  imageUrl: z$2.string().optional().nullable(),
  address: z$2.string(),
  city: z$2.string(),
  zipCode: z$2.string(),
  state: z$2.string(),
  owner: z$2.string(),
  organizationId: z$2.number().int().optional().nullable(),
  foodCost: z$2.number().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  isDeleted: z$2.boolean().optional(),
  deleted: z$2.coerce.date().optional().nullable(),
  users: z$2.lazy(() => UserUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  cookbooks: z$2.lazy(() => CookBookUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: z$2.lazy(() => InventoryUncheckedCreateNestedOneWithoutRestaurantInputSchema).optional(),
  orders: z$2.lazy(() => OrderUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: z$2.lazy(() => MenuUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipment: z$2.lazy(() => EquipmentUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklist: z$2.lazy(() => QualityChecklistUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qustomerFeedback: z$2.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();
var RestaurantUpdateInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  address: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  city: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  zipCode: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  state: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  owner: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  isDeleted: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  deleted: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  organization: z$2.lazy(() => OrganizationUpdateOneWithoutRestaurantsNestedInputSchema).optional(),
  users: z$2.lazy(() => UserUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  cookbooks: z$2.lazy(() => CookBookUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: z$2.lazy(() => InventoryUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  orders: z$2.lazy(() => OrderUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: z$2.lazy(() => MenuUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipment: z$2.lazy(() => EquipmentUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklist: z$2.lazy(() => QualityChecklistUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qustomerFeedback: z$2.lazy(() => CustomerFeedbackUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();
var RestaurantUncheckedUpdateInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  address: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  city: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  zipCode: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  state: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  owner: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  organizationId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  isDeleted: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  deleted: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  users: z$2.lazy(() => UserUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  cookbooks: z$2.lazy(() => CookBookUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: z$2.lazy(() => InventoryUncheckedUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  orders: z$2.lazy(() => OrderUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: z$2.lazy(() => MenuUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipment: z$2.lazy(() => EquipmentUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklist: z$2.lazy(() => QualityChecklistUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qustomerFeedback: z$2.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();
var RestaurantCreateManyInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  imageUrl: z$2.string().optional().nullable(),
  address: z$2.string(),
  city: z$2.string(),
  zipCode: z$2.string(),
  state: z$2.string(),
  owner: z$2.string(),
  organizationId: z$2.number().int().optional().nullable(),
  foodCost: z$2.number().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  isDeleted: z$2.boolean().optional(),
  deleted: z$2.coerce.date().optional().nullable()
}).strict();
var RestaurantUpdateManyMutationInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  address: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  city: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  zipCode: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  state: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  owner: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  isDeleted: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  deleted: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable()
}).strict();
var RestaurantUncheckedUpdateManyInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  address: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  city: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  zipCode: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  state: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  owner: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  organizationId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  isDeleted: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  deleted: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable()
}).strict();
var UserCreateInputSchema = z$2.object({
  email: z$2.string(),
  sub: z$2.number().int().optional().nullable(),
  passwordHash: z$2.string(),
  firstName: z$2.string(),
  lastName: z$2.string(),
  profileImage: z$2.string().optional().nullable(),
  verified: z$2.boolean().optional(),
  role: z$2.lazy(() => UserRoleSchema),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  organization: z$2.lazy(() => OrganizationCreateNestedOneWithoutUsersInputSchema).optional(),
  restaurant: z$2.lazy(() => RestaurantCreateNestedOneWithoutUsersInputSchema).optional(),
  shifts: z$2.lazy(() => ShiftCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: z$2.lazy(() => InventoryItemCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: z$2.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: z$2.lazy(() => PasswordResetCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItem: z$2.lazy(() => ProductionPlanItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: z$2.lazy(() => AvailabilityCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraint: z$2.lazy(() => SchedulingConstraintCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedback: z$2.lazy(() => CustomerFeedbackCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: z$2.lazy(() => RecipeVersionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: z$2.lazy(() => RecipeVersionCreateNestedManyWithoutApprovedByInputSchema).optional()
}).strict();
var UserUncheckedCreateInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  email: z$2.string(),
  sub: z$2.number().int().optional().nullable(),
  passwordHash: z$2.string(),
  firstName: z$2.string(),
  lastName: z$2.string(),
  profileImage: z$2.string().optional().nullable(),
  verified: z$2.boolean().optional(),
  role: z$2.lazy(() => UserRoleSchema),
  organizationId: z$2.number().int().optional().nullable(),
  restaurantId: z$2.number().int().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  shifts: z$2.lazy(() => ShiftUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: z$2.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: z$2.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: z$2.lazy(() => PasswordResetUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItem: z$2.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: z$2.lazy(() => AvailabilityUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraint: z$2.lazy(() => SchedulingConstraintUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteUncheckedCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedback: z$2.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: z$2.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: z$2.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutApprovedByInputSchema).optional()
}).strict();
var UserUpdateInputSchema = z$2.object({
  email: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: z$2.union([z$2.lazy(() => UserRoleSchema), z$2.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  organization: z$2.lazy(() => OrganizationUpdateOneWithoutUsersNestedInputSchema).optional(),
  restaurant: z$2.lazy(() => RestaurantUpdateOneWithoutUsersNestedInputSchema).optional(),
  shifts: z$2.lazy(() => ShiftUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: z$2.lazy(() => InventoryItemUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: z$2.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: z$2.lazy(() => PasswordResetUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItem: z$2.lazy(() => ProductionPlanItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: z$2.lazy(() => AvailabilityUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraint: z$2.lazy(() => SchedulingConstraintUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedback: z$2.lazy(() => CustomerFeedbackUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: z$2.lazy(() => RecipeVersionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: z$2.lazy(() => RecipeVersionUpdateManyWithoutApprovedByNestedInputSchema).optional()
}).strict();
var UserUncheckedUpdateInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  email: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: z$2.union([z$2.lazy(() => UserRoleSchema), z$2.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  organizationId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  shifts: z$2.lazy(() => ShiftUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: z$2.lazy(() => InventoryItemUncheckedUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: z$2.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: z$2.lazy(() => PasswordResetUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItem: z$2.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: z$2.lazy(() => AvailabilityUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraint: z$2.lazy(() => SchedulingConstraintUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteUncheckedUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedback: z$2.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: z$2.lazy(() => RecipeVersionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: z$2.lazy(() => RecipeVersionUncheckedUpdateManyWithoutApprovedByNestedInputSchema).optional()
}).strict();
var UserCreateManyInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  email: z$2.string(),
  sub: z$2.number().int().optional().nullable(),
  passwordHash: z$2.string(),
  firstName: z$2.string(),
  lastName: z$2.string(),
  profileImage: z$2.string().optional().nullable(),
  verified: z$2.boolean().optional(),
  role: z$2.lazy(() => UserRoleSchema),
  organizationId: z$2.number().int().optional().nullable(),
  restaurantId: z$2.number().int().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var UserUpdateManyMutationInputSchema = z$2.object({
  email: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: z$2.union([z$2.lazy(() => UserRoleSchema), z$2.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var UserUncheckedUpdateManyInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  email: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: z$2.union([z$2.lazy(() => UserRoleSchema), z$2.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  organizationId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var SessionCreateInputSchema = z$2.object({
  id: z$2.string().optional(),
  code: z$2.string(),
  token: z$2.string(),
  expiresAt: z$2.coerce.date(),
  createdAt: z$2.coerce.date().optional(),
  user: z$2.lazy(() => UserCreateNestedOneWithoutSessionsInputSchema)
}).strict();
var SessionUncheckedCreateInputSchema = z$2.object({
  id: z$2.string().optional(),
  userId: z$2.number().int(),
  code: z$2.string(),
  token: z$2.string(),
  expiresAt: z$2.coerce.date(),
  createdAt: z$2.coerce.date().optional()
}).strict();
var SessionUpdateInputSchema = z$2.object({
  id: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  code: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  token: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  expiresAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  user: z$2.lazy(() => UserUpdateOneRequiredWithoutSessionsNestedInputSchema).optional()
}).strict();
var SessionUncheckedUpdateInputSchema = z$2.object({
  id: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  userId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  code: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  token: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  expiresAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var SessionCreateManyInputSchema = z$2.object({
  id: z$2.string().optional(),
  userId: z$2.number().int(),
  code: z$2.string(),
  token: z$2.string(),
  expiresAt: z$2.coerce.date(),
  createdAt: z$2.coerce.date().optional()
}).strict();
var SessionUpdateManyMutationInputSchema = z$2.object({
  id: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  code: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  token: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  expiresAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var SessionUncheckedUpdateManyInputSchema = z$2.object({
  id: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  userId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  code: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  token: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  expiresAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var CookBookCreateInputSchema = z$2.object({
  name: z$2.string(),
  imageUrl: z$2.string().optional().nullable(),
  category: z$2.string(),
  recipes: z$2.lazy(() => RecipeCreateNestedManyWithoutCookBookInputSchema).optional(),
  restaurant: z$2.lazy(() => RestaurantCreateNestedOneWithoutCookbooksInputSchema).optional()
}).strict();
var CookBookUncheckedCreateInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  imageUrl: z$2.string().optional().nullable(),
  category: z$2.string(),
  restaurantId: z$2.number().int().optional().nullable(),
  recipes: z$2.lazy(() => RecipeUncheckedCreateNestedManyWithoutCookBookInputSchema).optional()
}).strict();
var CookBookUpdateInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  category: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  recipes: z$2.lazy(() => RecipeUpdateManyWithoutCookBookNestedInputSchema).optional(),
  restaurant: z$2.lazy(() => RestaurantUpdateOneWithoutCookbooksNestedInputSchema).optional()
}).strict();
var CookBookUncheckedUpdateInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  category: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  recipes: z$2.lazy(() => RecipeUncheckedUpdateManyWithoutCookBookNestedInputSchema).optional()
}).strict();
var CookBookCreateManyInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  imageUrl: z$2.string().optional().nullable(),
  category: z$2.string(),
  restaurantId: z$2.number().int().optional().nullable()
}).strict();
var CookBookUpdateManyMutationInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  category: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var CookBookUncheckedUpdateManyInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  category: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable()
}).strict();
var RecipeCreateInputSchema = z$2.object({
  name: z$2.string(),
  imageUrl: z$2.union([z$2.lazy(() => RecipeCreateimageUrlInputSchema), z$2.string().array()]).optional(),
  description: z$2.string().optional().nullable(),
  servings: z$2.number().int(),
  cookTime: z$2.number().int(),
  prepTime: z$2.number().int(),
  frequency: z$2.number().int().optional().nullable(),
  foodCost: z$2.number().optional().nullable(),
  isDeleted: z$2.boolean().optional(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  restaurant: z$2.lazy(() => RestaurantCreateNestedOneWithoutRecipesInputSchema),
  cookBook: z$2.lazy(() => CookBookCreateNestedOneWithoutRecipesInputSchema),
  ingredients: z$2.lazy(() => RecipeIngredientCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z$2.lazy(() => MenuItemCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: z$2.lazy(() => FoodCostHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: z$2.lazy(() => PrepHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z$2.lazy(() => PrepBoardCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  MenuItemRecipe: z$2.lazy(() => MenuItemRecipeCreateNestedManyWithoutRecipeInputSchema).optional(),
  ProductionPlanItem: z$2.lazy(() => ProductionPlanItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z$2.lazy(() => RecipeTagCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: z$2.lazy(() => RecipeVersionCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipment: z$2.lazy(() => RecipeEquipmentCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionCreateNestedManyWithoutRecipesInputSchema).optional()
}).strict();
var RecipeUncheckedCreateInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  imageUrl: z$2.union([z$2.lazy(() => RecipeCreateimageUrlInputSchema), z$2.string().array()]).optional(),
  description: z$2.string().optional().nullable(),
  servings: z$2.number().int(),
  cookTime: z$2.number().int(),
  prepTime: z$2.number().int(),
  frequency: z$2.number().int().optional().nullable(),
  restaurantId: z$2.number().int(),
  cookBookId: z$2.number().int(),
  foodCost: z$2.number().optional().nullable(),
  isDeleted: z$2.boolean().optional(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  ingredients: z$2.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z$2.lazy(() => MenuItemUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: z$2.lazy(() => FoodCostHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: z$2.lazy(() => PrepHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z$2.lazy(() => PrepBoardUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  MenuItemRecipe: z$2.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  ProductionPlanItem: z$2.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z$2.lazy(() => RecipeTagUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: z$2.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipment: z$2.lazy(() => RecipeEquipmentUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutRecipesInputSchema).optional()
}).strict();
var RecipeUpdateInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.lazy(() => RecipeUpdateimageUrlInputSchema), z$2.string().array()]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: z$2.lazy(() => RestaurantUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  cookBook: z$2.lazy(() => CookBookUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  ingredients: z$2.lazy(() => RecipeIngredientUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z$2.lazy(() => MenuItemUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: z$2.lazy(() => FoodCostHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: z$2.lazy(() => PrepHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z$2.lazy(() => PrepBoardUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  MenuItemRecipe: z$2.lazy(() => MenuItemRecipeUpdateManyWithoutRecipeNestedInputSchema).optional(),
  ProductionPlanItem: z$2.lazy(() => ProductionPlanItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z$2.lazy(() => RecipeTagUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: z$2.lazy(() => RecipeVersionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipment: z$2.lazy(() => RecipeEquipmentUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionUpdateManyWithoutRecipesNestedInputSchema).optional()
}).strict();
var RecipeUncheckedUpdateInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.lazy(() => RecipeUpdateimageUrlInputSchema), z$2.string().array()]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookBookId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  ingredients: z$2.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z$2.lazy(() => MenuItemUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: z$2.lazy(() => FoodCostHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: z$2.lazy(() => PrepHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z$2.lazy(() => PrepBoardUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  MenuItemRecipe: z$2.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  ProductionPlanItem: z$2.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z$2.lazy(() => RecipeTagUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: z$2.lazy(() => RecipeVersionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipment: z$2.lazy(() => RecipeEquipmentUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional()
}).strict();
var RecipeCreateManyInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  imageUrl: z$2.union([z$2.lazy(() => RecipeCreateimageUrlInputSchema), z$2.string().array()]).optional(),
  description: z$2.string().optional().nullable(),
  servings: z$2.number().int(),
  cookTime: z$2.number().int(),
  prepTime: z$2.number().int(),
  frequency: z$2.number().int().optional().nullable(),
  restaurantId: z$2.number().int(),
  cookBookId: z$2.number().int(),
  foodCost: z$2.number().optional().nullable(),
  isDeleted: z$2.boolean().optional(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var RecipeUpdateManyMutationInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.lazy(() => RecipeUpdateimageUrlInputSchema), z$2.string().array()]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var RecipeUncheckedUpdateManyInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.lazy(() => RecipeUpdateimageUrlInputSchema), z$2.string().array()]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookBookId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var IngredientCreateInputSchema = z$2.object({
  name: z$2.string(),
  category: z$2.string(),
  price: z$2.number(),
  recipeIngredients: z$2.lazy(() => RecipeIngredientCreateNestedManyWithoutIngredientInputSchema).optional(),
  inventoryItems: z$2.lazy(() => InventoryItemCreateNestedManyWithoutIngredientInputSchema).optional(),
  orderItems: z$2.lazy(() => OrderItemCreateNestedManyWithoutIngredientInputSchema).optional(),
  vendors: z$2.lazy(() => VendorCreateNestedManyWithoutIngredientsInputSchema).optional(),
  WasteRecord: z$2.lazy(() => WasteRecordCreateNestedManyWithoutIngredienteInputSchema).optional(),
  IngredientAllergen: z$2.lazy(() => IngredientAllergenCreateNestedManyWithoutIngredientInputSchema).optional(),
  SupplierPriceHistory: z$2.lazy(() => SupplierPriceHistoryCreateNestedManyWithoutIngredientInputSchema).optional(),
  DietaryRestriction: z$2.lazy(() => DietaryRestrictionCreateNestedOneWithoutIngredientsInputSchema).optional()
}).strict();
var IngredientUncheckedCreateInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  category: z$2.string(),
  price: z$2.number(),
  dietaryRestrictionId: z$2.number().int().optional().nullable(),
  recipeIngredients: z$2.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  inventoryItems: z$2.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  orderItems: z$2.lazy(() => OrderItemUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  vendors: z$2.lazy(() => VendorUncheckedCreateNestedManyWithoutIngredientsInputSchema).optional(),
  WasteRecord: z$2.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutIngredienteInputSchema).optional(),
  IngredientAllergen: z$2.lazy(() => IngredientAllergenUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  SupplierPriceHistory: z$2.lazy(() => SupplierPriceHistoryUncheckedCreateNestedManyWithoutIngredientInputSchema).optional()
}).strict();
var IngredientUpdateInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  category: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipeIngredients: z$2.lazy(() => RecipeIngredientUpdateManyWithoutIngredientNestedInputSchema).optional(),
  inventoryItems: z$2.lazy(() => InventoryItemUpdateManyWithoutIngredientNestedInputSchema).optional(),
  orderItems: z$2.lazy(() => OrderItemUpdateManyWithoutIngredientNestedInputSchema).optional(),
  vendors: z$2.lazy(() => VendorUpdateManyWithoutIngredientsNestedInputSchema).optional(),
  WasteRecord: z$2.lazy(() => WasteRecordUpdateManyWithoutIngredienteNestedInputSchema).optional(),
  IngredientAllergen: z$2.lazy(() => IngredientAllergenUpdateManyWithoutIngredientNestedInputSchema).optional(),
  SupplierPriceHistory: z$2.lazy(() => SupplierPriceHistoryUpdateManyWithoutIngredientNestedInputSchema).optional(),
  DietaryRestriction: z$2.lazy(() => DietaryRestrictionUpdateOneWithoutIngredientsNestedInputSchema).optional()
}).strict();
var IngredientUncheckedUpdateInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  category: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  dietaryRestrictionId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  recipeIngredients: z$2.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  inventoryItems: z$2.lazy(() => InventoryItemUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  orderItems: z$2.lazy(() => OrderItemUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  vendors: z$2.lazy(() => VendorUncheckedUpdateManyWithoutIngredientsNestedInputSchema).optional(),
  WasteRecord: z$2.lazy(() => WasteRecordUncheckedUpdateManyWithoutIngredienteNestedInputSchema).optional(),
  IngredientAllergen: z$2.lazy(() => IngredientAllergenUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  SupplierPriceHistory: z$2.lazy(() => SupplierPriceHistoryUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional()
}).strict();
var IngredientCreateManyInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  category: z$2.string(),
  price: z$2.number(),
  dietaryRestrictionId: z$2.number().int().optional().nullable()
}).strict();
var IngredientUpdateManyMutationInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  category: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var IngredientUncheckedUpdateManyInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  category: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  dietaryRestrictionId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable()
}).strict();
var RecipeIngredientCreateInputSchema = z$2.object({
  quantity: z$2.number(),
  unit: z$2.string(),
  joinAt: z$2.coerce.date().optional(),
  recipe: z$2.lazy(() => RecipeCreateNestedOneWithoutIngredientsInputSchema),
  ingredient: z$2.lazy(() => IngredientCreateNestedOneWithoutRecipeIngredientsInputSchema),
  RecipeVersion: z$2.lazy(() => RecipeVersionCreateNestedOneWithoutIngredientsInputSchema).optional()
}).strict();
var RecipeIngredientUncheckedCreateInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  recipeId: z$2.number().int(),
  ingredientId: z$2.number().int(),
  quantity: z$2.number(),
  unit: z$2.string(),
  joinAt: z$2.coerce.date().optional(),
  recipeVersionId: z$2.number().int().optional().nullable()
}).strict();
var RecipeIngredientUpdateInputSchema = z$2.object({
  quantity: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  joinAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  recipe: z$2.lazy(() => RecipeUpdateOneRequiredWithoutIngredientsNestedInputSchema).optional(),
  ingredient: z$2.lazy(() => IngredientUpdateOneRequiredWithoutRecipeIngredientsNestedInputSchema).optional(),
  RecipeVersion: z$2.lazy(() => RecipeVersionUpdateOneWithoutIngredientsNestedInputSchema).optional()
}).strict();
var RecipeIngredientUncheckedUpdateInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  ingredientId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  joinAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  recipeVersionId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable()
}).strict();
var RecipeIngredientCreateManyInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  recipeId: z$2.number().int(),
  ingredientId: z$2.number().int(),
  quantity: z$2.number(),
  unit: z$2.string(),
  joinAt: z$2.coerce.date().optional(),
  recipeVersionId: z$2.number().int().optional().nullable()
}).strict();
var RecipeIngredientUpdateManyMutationInputSchema = z$2.object({
  quantity: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  joinAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var RecipeIngredientUncheckedUpdateManyInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  ingredientId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  joinAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  recipeVersionId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable()
}).strict();
var RecipeInstructionCreateInputSchema = z$2.object({
  stepNumber: z$2.number().int(),
  instruction: z$2.string(),
  imageUrl: z$2.string().optional().nullable(),
  recipe: z$2.lazy(() => RecipeCreateNestedOneWithoutInstructionsInputSchema),
  RecipeVersion: z$2.lazy(() => RecipeVersionCreateNestedOneWithoutInstructionsInputSchema).optional()
}).strict();
var RecipeInstructionUncheckedCreateInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  recipeId: z$2.number().int(),
  stepNumber: z$2.number().int(),
  instruction: z$2.string(),
  imageUrl: z$2.string().optional().nullable(),
  recipeVersionId: z$2.number().int().optional().nullable()
}).strict();
var RecipeInstructionUpdateInputSchema = z$2.object({
  stepNumber: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  instruction: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  recipe: z$2.lazy(() => RecipeUpdateOneRequiredWithoutInstructionsNestedInputSchema).optional(),
  RecipeVersion: z$2.lazy(() => RecipeVersionUpdateOneWithoutInstructionsNestedInputSchema).optional()
}).strict();
var RecipeInstructionUncheckedUpdateInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  stepNumber: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  instruction: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  recipeVersionId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable()
}).strict();
var RecipeInstructionCreateManyInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  recipeId: z$2.number().int(),
  stepNumber: z$2.number().int(),
  instruction: z$2.string(),
  imageUrl: z$2.string().optional().nullable(),
  recipeVersionId: z$2.number().int().optional().nullable()
}).strict();
var RecipeInstructionUpdateManyMutationInputSchema = z$2.object({
  stepNumber: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  instruction: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable()
}).strict();
var RecipeInstructionUncheckedUpdateManyInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  stepNumber: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  instruction: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  recipeVersionId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable()
}).strict();
var InventoryCreateInputSchema = z$2.object({
  restaurant: z$2.lazy(() => RestaurantCreateNestedOneWithoutInventoryInputSchema),
  items: z$2.lazy(() => InventoryItemCreateNestedManyWithoutInventoryInputSchema).optional()
}).strict();
var InventoryUncheckedCreateInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  restaurantId: z$2.number().int(),
  items: z$2.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutInventoryInputSchema).optional()
}).strict();
var InventoryUpdateInputSchema = z$2.object({
  restaurant: z$2.lazy(() => RestaurantUpdateOneRequiredWithoutInventoryNestedInputSchema).optional(),
  items: z$2.lazy(() => InventoryItemUpdateManyWithoutInventoryNestedInputSchema).optional()
}).strict();
var InventoryUncheckedUpdateInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  items: z$2.lazy(() => InventoryItemUncheckedUpdateManyWithoutInventoryNestedInputSchema).optional()
}).strict();
var InventoryCreateManyInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  restaurantId: z$2.number().int()
}).strict();
var InventoryUpdateManyMutationInputSchema = z$2.object({}).strict();
var InventoryUncheckedUpdateManyInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var InventoryItemCreateInputSchema = z$2.object({
  quantity: z$2.number(),
  unit: z$2.string(),
  minQuantity: z$2.number(),
  restockThreshold: z$2.number(),
  lastUpdated: z$2.coerce.date().optional(),
  inventory: z$2.lazy(() => InventoryCreateNestedOneWithoutItemsInputSchema),
  ingredient: z$2.lazy(() => IngredientCreateNestedOneWithoutInventoryItemsInputSchema),
  lastUpdatedBy: z$2.lazy(() => UserCreateNestedOneWithoutInventoryUpdatesInputSchema).optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalCreateNestedManyWithoutInventoryItemInputSchema).optional()
}).strict();
var InventoryItemUncheckedCreateInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  inventoryId: z$2.number().int(),
  ingredientId: z$2.number().int(),
  quantity: z$2.number(),
  unit: z$2.string(),
  minQuantity: z$2.number(),
  restockThreshold: z$2.number(),
  lastUpdatedById: z$2.number().int().optional().nullable(),
  lastUpdated: z$2.coerce.date().optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutInventoryItemInputSchema).optional()
}).strict();
var InventoryItemUpdateInputSchema = z$2.object({
  quantity: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  minQuantity: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  restockThreshold: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  lastUpdated: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  inventory: z$2.lazy(() => InventoryUpdateOneRequiredWithoutItemsNestedInputSchema).optional(),
  ingredient: z$2.lazy(() => IngredientUpdateOneRequiredWithoutInventoryItemsNestedInputSchema).optional(),
  lastUpdatedBy: z$2.lazy(() => UserUpdateOneWithoutInventoryUpdatesNestedInputSchema).optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUpdateManyWithoutInventoryItemNestedInputSchema).optional()
}).strict();
var InventoryItemUncheckedUpdateInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  inventoryId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  ingredientId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  minQuantity: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  restockThreshold: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  lastUpdatedById: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  lastUpdated: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutInventoryItemNestedInputSchema).optional()
}).strict();
var InventoryItemCreateManyInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  inventoryId: z$2.number().int(),
  ingredientId: z$2.number().int(),
  quantity: z$2.number(),
  unit: z$2.string(),
  minQuantity: z$2.number(),
  restockThreshold: z$2.number(),
  lastUpdatedById: z$2.number().int().optional().nullable(),
  lastUpdated: z$2.coerce.date().optional()
}).strict();
var InventoryItemUpdateManyMutationInputSchema = z$2.object({
  quantity: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  minQuantity: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  restockThreshold: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  lastUpdated: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var InventoryItemUncheckedUpdateManyInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  inventoryId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  ingredientId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  minQuantity: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  restockThreshold: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  lastUpdatedById: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  lastUpdated: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var OrderCreateInputSchema = z$2.object({
  status: z$2.lazy(() => OrderStatusSchema),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  restaurant: z$2.lazy(() => RestaurantCreateNestedOneWithoutOrdersInputSchema),
  vendor: z$2.lazy(() => VendorCreateNestedOneWithoutOrdersInputSchema),
  items: z$2.lazy(() => OrderItemCreateNestedManyWithoutOrderInputSchema).optional()
}).strict();
var OrderUncheckedCreateInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  restaurantId: z$2.number().int(),
  vendorId: z$2.number().int(),
  status: z$2.lazy(() => OrderStatusSchema),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  items: z$2.lazy(() => OrderItemUncheckedCreateNestedManyWithoutOrderInputSchema).optional()
}).strict();
var OrderUpdateInputSchema = z$2.object({
  status: z$2.union([z$2.lazy(() => OrderStatusSchema), z$2.lazy(() => EnumOrderStatusFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: z$2.lazy(() => RestaurantUpdateOneRequiredWithoutOrdersNestedInputSchema).optional(),
  vendor: z$2.lazy(() => VendorUpdateOneRequiredWithoutOrdersNestedInputSchema).optional(),
  items: z$2.lazy(() => OrderItemUpdateManyWithoutOrderNestedInputSchema).optional()
}).strict();
var OrderUncheckedUpdateInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  vendorId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  status: z$2.union([z$2.lazy(() => OrderStatusSchema), z$2.lazy(() => EnumOrderStatusFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  items: z$2.lazy(() => OrderItemUncheckedUpdateManyWithoutOrderNestedInputSchema).optional()
}).strict();
var OrderCreateManyInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  restaurantId: z$2.number().int(),
  vendorId: z$2.number().int(),
  status: z$2.lazy(() => OrderStatusSchema),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var OrderUpdateManyMutationInputSchema = z$2.object({
  status: z$2.union([z$2.lazy(() => OrderStatusSchema), z$2.lazy(() => EnumOrderStatusFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var OrderUncheckedUpdateManyInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  vendorId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  status: z$2.union([z$2.lazy(() => OrderStatusSchema), z$2.lazy(() => EnumOrderStatusFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var OrderItemCreateInputSchema = z$2.object({
  quantity: z$2.number(),
  unit: z$2.string(),
  price: z$2.number(),
  order: z$2.lazy(() => OrderCreateNestedOneWithoutItemsInputSchema),
  ingredient: z$2.lazy(() => IngredientCreateNestedOneWithoutOrderItemsInputSchema)
}).strict();
var OrderItemUncheckedCreateInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  orderId: z$2.number().int(),
  ingredientId: z$2.number().int(),
  quantity: z$2.number(),
  unit: z$2.string(),
  price: z$2.number()
}).strict();
var OrderItemUpdateInputSchema = z$2.object({
  quantity: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  order: z$2.lazy(() => OrderUpdateOneRequiredWithoutItemsNestedInputSchema).optional(),
  ingredient: z$2.lazy(() => IngredientUpdateOneRequiredWithoutOrderItemsNestedInputSchema).optional()
}).strict();
var OrderItemUncheckedUpdateInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  orderId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  ingredientId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var OrderItemCreateManyInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  orderId: z$2.number().int(),
  ingredientId: z$2.number().int(),
  quantity: z$2.number(),
  unit: z$2.string(),
  price: z$2.number()
}).strict();
var OrderItemUpdateManyMutationInputSchema = z$2.object({
  quantity: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var OrderItemUncheckedUpdateManyInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  orderId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  ingredientId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var VendorCreateInputSchema = z$2.object({
  name: z$2.string(),
  contact: z$2.string(),
  email: z$2.string(),
  phone: z$2.string(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  orders: z$2.lazy(() => OrderCreateNestedManyWithoutVendorInputSchema).optional(),
  ingredients: z$2.lazy(() => IngredientCreateNestedManyWithoutVendorsInputSchema).optional(),
  supplierPriceHistory: z$2.lazy(() => SupplierPriceHistoryCreateNestedManyWithoutVendorInputSchema).optional()
}).strict();
var VendorUncheckedCreateInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  contact: z$2.string(),
  email: z$2.string(),
  phone: z$2.string(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  orders: z$2.lazy(() => OrderUncheckedCreateNestedManyWithoutVendorInputSchema).optional(),
  ingredients: z$2.lazy(() => IngredientUncheckedCreateNestedManyWithoutVendorsInputSchema).optional(),
  supplierPriceHistory: z$2.lazy(() => SupplierPriceHistoryUncheckedCreateNestedManyWithoutVendorInputSchema).optional()
}).strict();
var VendorUpdateInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  contact: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  email: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  phone: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  orders: z$2.lazy(() => OrderUpdateManyWithoutVendorNestedInputSchema).optional(),
  ingredients: z$2.lazy(() => IngredientUpdateManyWithoutVendorsNestedInputSchema).optional(),
  supplierPriceHistory: z$2.lazy(() => SupplierPriceHistoryUpdateManyWithoutVendorNestedInputSchema).optional()
}).strict();
var VendorUncheckedUpdateInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  contact: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  email: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  phone: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  orders: z$2.lazy(() => OrderUncheckedUpdateManyWithoutVendorNestedInputSchema).optional(),
  ingredients: z$2.lazy(() => IngredientUncheckedUpdateManyWithoutVendorsNestedInputSchema).optional(),
  supplierPriceHistory: z$2.lazy(() => SupplierPriceHistoryUncheckedUpdateManyWithoutVendorNestedInputSchema).optional()
}).strict();
var VendorCreateManyInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  contact: z$2.string(),
  email: z$2.string(),
  phone: z$2.string(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var VendorUpdateManyMutationInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  contact: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  email: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  phone: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var VendorUncheckedUpdateManyInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  contact: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  email: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  phone: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var ShiftCreateInputSchema = z$2.object({
  startTime: z$2.coerce.date(),
  endTime: z$2.coerce.date(),
  status: z$2.lazy(() => ShiftStatusSchema),
  user: z$2.lazy(() => UserCreateNestedOneWithoutShiftsInputSchema),
  ShiftTask: z$2.lazy(() => ShiftTaskCreateNestedManyWithoutShiftInputSchema).optional()
}).strict();
var ShiftUncheckedCreateInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  userId: z$2.number().int(),
  startTime: z$2.coerce.date(),
  endTime: z$2.coerce.date(),
  status: z$2.lazy(() => ShiftStatusSchema),
  ShiftTask: z$2.lazy(() => ShiftTaskUncheckedCreateNestedManyWithoutShiftInputSchema).optional()
}).strict();
var ShiftUpdateInputSchema = z$2.object({
  startTime: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endTime: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  status: z$2.union([z$2.lazy(() => ShiftStatusSchema), z$2.lazy(() => EnumShiftStatusFieldUpdateOperationsInputSchema)]).optional(),
  user: z$2.lazy(() => UserUpdateOneRequiredWithoutShiftsNestedInputSchema).optional(),
  ShiftTask: z$2.lazy(() => ShiftTaskUpdateManyWithoutShiftNestedInputSchema).optional()
}).strict();
var ShiftUncheckedUpdateInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  userId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  startTime: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endTime: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  status: z$2.union([z$2.lazy(() => ShiftStatusSchema), z$2.lazy(() => EnumShiftStatusFieldUpdateOperationsInputSchema)]).optional(),
  ShiftTask: z$2.lazy(() => ShiftTaskUncheckedUpdateManyWithoutShiftNestedInputSchema).optional()
}).strict();
var ShiftCreateManyInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  userId: z$2.number().int(),
  startTime: z$2.coerce.date(),
  endTime: z$2.coerce.date(),
  status: z$2.lazy(() => ShiftStatusSchema)
}).strict();
var ShiftUpdateManyMutationInputSchema = z$2.object({
  startTime: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endTime: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  status: z$2.union([z$2.lazy(() => ShiftStatusSchema), z$2.lazy(() => EnumShiftStatusFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var ShiftUncheckedUpdateManyInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  userId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  startTime: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endTime: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  status: z$2.union([z$2.lazy(() => ShiftStatusSchema), z$2.lazy(() => EnumShiftStatusFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var PrepBoardCreateInputSchema = z$2.object({
  name: z$2.string(),
  status: z$2.lazy(() => PrepStatusSchema),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  recipes: z$2.lazy(() => RecipeCreateNestedManyWithoutPrepBoardsInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemCreateNestedManyWithoutPrepBoardInputSchema).optional()
}).strict();
var PrepBoardUncheckedCreateInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  status: z$2.lazy(() => PrepStatusSchema),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  recipes: z$2.lazy(() => RecipeUncheckedCreateNestedManyWithoutPrepBoardsInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUncheckedCreateNestedManyWithoutPrepBoardInputSchema).optional()
}).strict();
var PrepBoardUpdateInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  status: z$2.union([z$2.lazy(() => PrepStatusSchema), z$2.lazy(() => EnumPrepStatusFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  recipes: z$2.lazy(() => RecipeUpdateManyWithoutPrepBoardsNestedInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUpdateManyWithoutPrepBoardNestedInputSchema).optional()
}).strict();
var PrepBoardUncheckedUpdateInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  status: z$2.union([z$2.lazy(() => PrepStatusSchema), z$2.lazy(() => EnumPrepStatusFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  recipes: z$2.lazy(() => RecipeUncheckedUpdateManyWithoutPrepBoardsNestedInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUncheckedUpdateManyWithoutPrepBoardNestedInputSchema).optional()
}).strict();
var PrepBoardCreateManyInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  status: z$2.lazy(() => PrepStatusSchema),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var PrepBoardUpdateManyMutationInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  status: z$2.union([z$2.lazy(() => PrepStatusSchema), z$2.lazy(() => EnumPrepStatusFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var PrepBoardUncheckedUpdateManyInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  status: z$2.union([z$2.lazy(() => PrepStatusSchema), z$2.lazy(() => EnumPrepStatusFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var PrepItemCreateInputSchema = z$2.object({
  quantity: z$2.number().int(),
  status: z$2.lazy(() => PrepStatusSchema),
  prepBoard: z$2.lazy(() => PrepBoardCreateNestedOneWithoutPrepItemsInputSchema),
  recipe: z$2.lazy(() => RecipeCreateNestedOneWithoutPrepItemsInputSchema),
  assignedTo: z$2.lazy(() => UserCreateNestedOneWithoutPrepItemsInputSchema)
}).strict();
var PrepItemUncheckedCreateInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  prepBoardId: z$2.number().int(),
  recipeId: z$2.number().int(),
  quantity: z$2.number().int(),
  status: z$2.lazy(() => PrepStatusSchema),
  assignedToId: z$2.number().int()
}).strict();
var PrepItemUpdateInputSchema = z$2.object({
  quantity: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  status: z$2.union([z$2.lazy(() => PrepStatusSchema), z$2.lazy(() => EnumPrepStatusFieldUpdateOperationsInputSchema)]).optional(),
  prepBoard: z$2.lazy(() => PrepBoardUpdateOneRequiredWithoutPrepItemsNestedInputSchema).optional(),
  recipe: z$2.lazy(() => RecipeUpdateOneRequiredWithoutPrepItemsNestedInputSchema).optional(),
  assignedTo: z$2.lazy(() => UserUpdateOneRequiredWithoutPrepItemsNestedInputSchema).optional()
}).strict();
var PrepItemUncheckedUpdateInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepBoardId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  status: z$2.union([z$2.lazy(() => PrepStatusSchema), z$2.lazy(() => EnumPrepStatusFieldUpdateOperationsInputSchema)]).optional(),
  assignedToId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var PrepItemCreateManyInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  prepBoardId: z$2.number().int(),
  recipeId: z$2.number().int(),
  quantity: z$2.number().int(),
  status: z$2.lazy(() => PrepStatusSchema),
  assignedToId: z$2.number().int()
}).strict();
var PrepItemUpdateManyMutationInputSchema = z$2.object({
  quantity: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  status: z$2.union([z$2.lazy(() => PrepStatusSchema), z$2.lazy(() => EnumPrepStatusFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var PrepItemUncheckedUpdateManyInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepBoardId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  status: z$2.union([z$2.lazy(() => PrepStatusSchema), z$2.lazy(() => EnumPrepStatusFieldUpdateOperationsInputSchema)]).optional(),
  assignedToId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var PasswordResetCreateInputSchema = z$2.object({
  token: z$2.string(),
  expiresAt: z$2.coerce.date(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  user: z$2.lazy(() => UserCreateNestedOneWithoutPasswordResetsInputSchema)
}).strict();
var PasswordResetUncheckedCreateInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  token: z$2.string(),
  userId: z$2.number().int(),
  expiresAt: z$2.coerce.date(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var PasswordResetUpdateInputSchema = z$2.object({
  token: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  expiresAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  user: z$2.lazy(() => UserUpdateOneRequiredWithoutPasswordResetsNestedInputSchema).optional()
}).strict();
var PasswordResetUncheckedUpdateInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  token: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  userId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  expiresAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var PasswordResetCreateManyInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  token: z$2.string(),
  userId: z$2.number().int(),
  expiresAt: z$2.coerce.date(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var PasswordResetUpdateManyMutationInputSchema = z$2.object({
  token: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  expiresAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var PasswordResetUncheckedUpdateManyInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  token: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  userId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  expiresAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var MenuCreateInputSchema = z$2.object({
  name: z$2.string(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  restaurant: z$2.lazy(() => RestaurantCreateNestedOneWithoutMenusInputSchema),
  menuItems: z$2.lazy(() => MenuItemCreateNestedManyWithoutMenuInputSchema).optional(),
  MenuCategory: z$2.lazy(() => MenuCategoryCreateNestedManyWithoutMenuInputSchema).optional()
}).strict();
var MenuUncheckedCreateInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  restaurantId: z$2.number().int(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  menuItems: z$2.lazy(() => MenuItemUncheckedCreateNestedManyWithoutMenuInputSchema).optional(),
  MenuCategory: z$2.lazy(() => MenuCategoryUncheckedCreateNestedManyWithoutMenuInputSchema).optional()
}).strict();
var MenuUpdateInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: z$2.lazy(() => RestaurantUpdateOneRequiredWithoutMenusNestedInputSchema).optional(),
  menuItems: z$2.lazy(() => MenuItemUpdateManyWithoutMenuNestedInputSchema).optional(),
  MenuCategory: z$2.lazy(() => MenuCategoryUpdateManyWithoutMenuNestedInputSchema).optional()
}).strict();
var MenuUncheckedUpdateInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  menuItems: z$2.lazy(() => MenuItemUncheckedUpdateManyWithoutMenuNestedInputSchema).optional(),
  MenuCategory: z$2.lazy(() => MenuCategoryUncheckedUpdateManyWithoutMenuNestedInputSchema).optional()
}).strict();
var MenuCreateManyInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  restaurantId: z$2.number().int(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var MenuUpdateManyMutationInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var MenuUncheckedUpdateManyInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var MenuItemRecipeCreateInputSchema = z$2.object({
  joinAt: z$2.coerce.date().optional(),
  menuItem: z$2.lazy(() => MenuItemCreateNestedOneWithoutMenuItemRecipeInputSchema),
  recipe: z$2.lazy(() => RecipeCreateNestedOneWithoutMenuItemRecipeInputSchema)
}).strict();
var MenuItemRecipeUncheckedCreateInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  menuItemId: z$2.number().int(),
  recipeId: z$2.number().int(),
  joinAt: z$2.coerce.date().optional()
}).strict();
var MenuItemRecipeUpdateInputSchema = z$2.object({
  joinAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  menuItem: z$2.lazy(() => MenuItemUpdateOneRequiredWithoutMenuItemRecipeNestedInputSchema).optional(),
  recipe: z$2.lazy(() => RecipeUpdateOneRequiredWithoutMenuItemRecipeNestedInputSchema).optional()
}).strict();
var MenuItemRecipeUncheckedUpdateInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  menuItemId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  joinAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var MenuItemRecipeCreateManyInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  menuItemId: z$2.number().int(),
  recipeId: z$2.number().int(),
  joinAt: z$2.coerce.date().optional()
}).strict();
var MenuItemRecipeUpdateManyMutationInputSchema = z$2.object({
  joinAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var MenuItemRecipeUncheckedUpdateManyInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  menuItemId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  joinAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var MenuItemCreateInputSchema = z$2.object({
  name: z$2.string(),
  description: z$2.string().optional().nullable(),
  price: z$2.number(),
  foodCost: z$2.number(),
  recipeIds: z$2.union([z$2.lazy(() => MenuItemCreaterecipeIdsInputSchema), z$2.number().int().array()]).optional(),
  recipeServingsAmount: z$2.union([z$2.lazy(() => MenuItemCreaterecipeServingsAmountInputSchema), z$2.number().array()]).optional(),
  recipeServingsCost: z$2.union([z$2.lazy(() => MenuItemCreaterecipeServingsCostInputSchema), z$2.number().array()]).optional(),
  allergens: z$2.union([z$2.lazy(() => MenuItemCreateallergensInputSchema), z$2.string().array()]).optional(),
  nutritionalInfoId: z$2.number().int().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  nutritionalInfo: z$2.lazy(() => NutritionalInfoCreateNestedOneWithoutMenuItemInputSchema).optional(),
  menu: z$2.lazy(() => MenuCreateNestedOneWithoutMenuItemsInputSchema),
  recipes: z$2.lazy(() => RecipeCreateNestedManyWithoutMenuItemsInputSchema).optional(),
  menuItemRecipe: z$2.lazy(() => MenuItemRecipeCreateNestedManyWithoutMenuItemInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsCreateNestedManyWithoutMenuItemInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemCreateNestedManyWithoutMenuItemInputSchema).optional(),
  nutritionalRecommendation: z$2.lazy(() => NutritionalRecommendationCreateNestedManyWithoutMenuItemInputSchema).optional(),
  category: z$2.lazy(() => MenuCategoryCreateNestedOneWithoutMenuItemsInputSchema).optional(),
  feedback: z$2.lazy(() => CustomerFeedbackCreateNestedManyWithoutMenuItemInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionCreateNestedManyWithoutMenuItemsInputSchema).optional()
}).strict();
var MenuItemUncheckedCreateInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  description: z$2.string().optional().nullable(),
  price: z$2.number(),
  foodCost: z$2.number(),
  recipeIds: z$2.union([z$2.lazy(() => MenuItemCreaterecipeIdsInputSchema), z$2.number().int().array()]).optional(),
  recipeServingsAmount: z$2.union([z$2.lazy(() => MenuItemCreaterecipeServingsAmountInputSchema), z$2.number().array()]).optional(),
  recipeServingsCost: z$2.union([z$2.lazy(() => MenuItemCreaterecipeServingsCostInputSchema), z$2.number().array()]).optional(),
  allergens: z$2.union([z$2.lazy(() => MenuItemCreateallergensInputSchema), z$2.string().array()]).optional(),
  nutritionalInfoId: z$2.number().int().optional().nullable(),
  menuId: z$2.number().int(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  categoryId: z$2.number().int().optional().nullable(),
  nutritionalInfo: z$2.lazy(() => NutritionalInfoUncheckedCreateNestedOneWithoutMenuItemInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeUncheckedCreateNestedManyWithoutMenuItemsInputSchema).optional(),
  menuItemRecipe: z$2.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  nutritionalRecommendation: z$2.lazy(() => NutritionalRecommendationUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  feedback: z$2.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutMenuItemsInputSchema).optional()
}).strict();
var MenuItemUpdateInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipeIds: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeIdsInputSchema), z$2.number().int().array()]).optional(),
  recipeServingsAmount: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema), z$2.number().array()]).optional(),
  recipeServingsCost: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema), z$2.number().array()]).optional(),
  allergens: z$2.union([z$2.lazy(() => MenuItemUpdateallergensInputSchema), z$2.string().array()]).optional(),
  nutritionalInfoId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  nutritionalInfo: z$2.lazy(() => NutritionalInfoUpdateOneWithoutMenuItemNestedInputSchema).optional(),
  menu: z$2.lazy(() => MenuUpdateOneRequiredWithoutMenuItemsNestedInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeUpdateManyWithoutMenuItemsNestedInputSchema).optional(),
  menuItemRecipe: z$2.lazy(() => MenuItemRecipeUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  nutritionalRecommendation: z$2.lazy(() => NutritionalRecommendationUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  category: z$2.lazy(() => MenuCategoryUpdateOneWithoutMenuItemsNestedInputSchema).optional(),
  feedback: z$2.lazy(() => CustomerFeedbackUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionUpdateManyWithoutMenuItemsNestedInputSchema).optional()
}).strict();
var MenuItemUncheckedUpdateInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipeIds: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeIdsInputSchema), z$2.number().int().array()]).optional(),
  recipeServingsAmount: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema), z$2.number().array()]).optional(),
  recipeServingsCost: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema), z$2.number().array()]).optional(),
  allergens: z$2.union([z$2.lazy(() => MenuItemUpdateallergensInputSchema), z$2.string().array()]).optional(),
  nutritionalInfoId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  menuId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  categoryId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  nutritionalInfo: z$2.lazy(() => NutritionalInfoUncheckedUpdateOneWithoutMenuItemNestedInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeUncheckedUpdateManyWithoutMenuItemsNestedInputSchema).optional(),
  menuItemRecipe: z$2.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  nutritionalRecommendation: z$2.lazy(() => NutritionalRecommendationUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  feedback: z$2.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutMenuItemsNestedInputSchema).optional()
}).strict();
var MenuItemCreateManyInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  description: z$2.string().optional().nullable(),
  price: z$2.number(),
  foodCost: z$2.number(),
  recipeIds: z$2.union([z$2.lazy(() => MenuItemCreaterecipeIdsInputSchema), z$2.number().int().array()]).optional(),
  recipeServingsAmount: z$2.union([z$2.lazy(() => MenuItemCreaterecipeServingsAmountInputSchema), z$2.number().array()]).optional(),
  recipeServingsCost: z$2.union([z$2.lazy(() => MenuItemCreaterecipeServingsCostInputSchema), z$2.number().array()]).optional(),
  allergens: z$2.union([z$2.lazy(() => MenuItemCreateallergensInputSchema), z$2.string().array()]).optional(),
  nutritionalInfoId: z$2.number().int().optional().nullable(),
  menuId: z$2.number().int(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  categoryId: z$2.number().int().optional().nullable()
}).strict();
var MenuItemUpdateManyMutationInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipeIds: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeIdsInputSchema), z$2.number().int().array()]).optional(),
  recipeServingsAmount: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema), z$2.number().array()]).optional(),
  recipeServingsCost: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema), z$2.number().array()]).optional(),
  allergens: z$2.union([z$2.lazy(() => MenuItemUpdateallergensInputSchema), z$2.string().array()]).optional(),
  nutritionalInfoId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var MenuItemUncheckedUpdateManyInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipeIds: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeIdsInputSchema), z$2.number().int().array()]).optional(),
  recipeServingsAmount: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema), z$2.number().array()]).optional(),
  recipeServingsCost: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema), z$2.number().array()]).optional(),
  allergens: z$2.union([z$2.lazy(() => MenuItemUpdateallergensInputSchema), z$2.string().array()]).optional(),
  nutritionalInfoId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  menuId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  categoryId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable()
}).strict();
var NutritionalInfoCreateInputSchema = z$2.object({
  calories: z$2.number(),
  fat: z$2.number(),
  saturatedFat: z$2.number(),
  transFat: z$2.number(),
  cholesterol: z$2.number(),
  sodium: z$2.number(),
  carbohydrates: z$2.number(),
  fiber: z$2.number(),
  sugar: z$2.number(),
  protein: z$2.number(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  menuItem: z$2.lazy(() => MenuItemCreateNestedOneWithoutNutritionalInfoInputSchema).optional()
}).strict();
var NutritionalInfoUncheckedCreateInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  menuItemId: z$2.number().int().optional().nullable(),
  calories: z$2.number(),
  fat: z$2.number(),
  saturatedFat: z$2.number(),
  transFat: z$2.number(),
  cholesterol: z$2.number(),
  sodium: z$2.number(),
  carbohydrates: z$2.number(),
  fiber: z$2.number(),
  sugar: z$2.number(),
  protein: z$2.number(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var NutritionalInfoUpdateInputSchema = z$2.object({
  calories: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  fat: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  saturatedFat: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  transFat: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  cholesterol: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  sodium: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  carbohydrates: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  fiber: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  sugar: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  protein: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  menuItem: z$2.lazy(() => MenuItemUpdateOneWithoutNutritionalInfoNestedInputSchema).optional()
}).strict();
var NutritionalInfoUncheckedUpdateInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  menuItemId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  calories: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  fat: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  saturatedFat: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  transFat: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  cholesterol: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  sodium: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  carbohydrates: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  fiber: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  sugar: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  protein: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var NutritionalInfoCreateManyInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  menuItemId: z$2.number().int().optional().nullable(),
  calories: z$2.number(),
  fat: z$2.number(),
  saturatedFat: z$2.number(),
  transFat: z$2.number(),
  cholesterol: z$2.number(),
  sodium: z$2.number(),
  carbohydrates: z$2.number(),
  fiber: z$2.number(),
  sugar: z$2.number(),
  protein: z$2.number(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var NutritionalInfoUpdateManyMutationInputSchema = z$2.object({
  calories: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  fat: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  saturatedFat: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  transFat: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  cholesterol: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  sodium: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  carbohydrates: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  fiber: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  sugar: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  protein: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var NutritionalInfoUncheckedUpdateManyInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  menuItemId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  calories: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  fat: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  saturatedFat: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  transFat: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  cholesterol: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  sodium: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  carbohydrates: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  fiber: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  sugar: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  protein: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var FoodCostHistoryCreateInputSchema = z$2.object({
  cost: z$2.number(),
  date: z$2.coerce.date(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  recipe: z$2.lazy(() => RecipeCreateNestedOneWithoutFoodCostHistoryInputSchema)
}).strict();
var FoodCostHistoryUncheckedCreateInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  recipeId: z$2.number().int(),
  cost: z$2.number(),
  date: z$2.coerce.date(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var FoodCostHistoryUpdateInputSchema = z$2.object({
  cost: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  date: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  recipe: z$2.lazy(() => RecipeUpdateOneRequiredWithoutFoodCostHistoryNestedInputSchema).optional()
}).strict();
var FoodCostHistoryUncheckedUpdateInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cost: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  date: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var FoodCostHistoryCreateManyInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  recipeId: z$2.number().int(),
  cost: z$2.number(),
  date: z$2.coerce.date(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var FoodCostHistoryUpdateManyMutationInputSchema = z$2.object({
  cost: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  date: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var FoodCostHistoryUncheckedUpdateManyInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cost: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  date: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var PrepHistoryCreateInputSchema = z$2.object({
  quantity: z$2.number().int(),
  date: z$2.coerce.date(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  recipe: z$2.lazy(() => RecipeCreateNestedOneWithoutPrepHistoryInputSchema)
}).strict();
var PrepHistoryUncheckedCreateInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  recipeId: z$2.number().int(),
  quantity: z$2.number().int(),
  date: z$2.coerce.date(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var PrepHistoryUpdateInputSchema = z$2.object({
  quantity: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  recipe: z$2.lazy(() => RecipeUpdateOneRequiredWithoutPrepHistoryNestedInputSchema).optional()
}).strict();
var PrepHistoryUncheckedUpdateInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var PrepHistoryCreateManyInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  recipeId: z$2.number().int(),
  quantity: z$2.number().int(),
  date: z$2.coerce.date(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var PrepHistoryUpdateManyMutationInputSchema = z$2.object({
  quantity: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var PrepHistoryUncheckedUpdateManyInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var IntFilterSchema = z$2.object({
  equals: z$2.number().optional(),
  in: z$2.number().array().optional(),
  notIn: z$2.number().array().optional(),
  lt: z$2.number().optional(),
  lte: z$2.number().optional(),
  gt: z$2.number().optional(),
  gte: z$2.number().optional(),
  not: z$2.union([z$2.number(), z$2.lazy(() => NestedIntFilterSchema)]).optional()
}).strict();
var StringNullableFilterSchema = z$2.object({
  equals: z$2.string().optional().nullable(),
  in: z$2.string().array().optional().nullable(),
  notIn: z$2.string().array().optional().nullable(),
  lt: z$2.string().optional(),
  lte: z$2.string().optional(),
  gt: z$2.string().optional(),
  gte: z$2.string().optional(),
  contains: z$2.string().optional(),
  startsWith: z$2.string().optional(),
  endsWith: z$2.string().optional(),
  mode: z$2.lazy(() => QueryModeSchema).optional(),
  not: z$2.union([z$2.string(), z$2.lazy(() => NestedStringNullableFilterSchema)]).optional().nullable()
}).strict();
var FloatFilterSchema = z$2.object({
  equals: z$2.number().optional(),
  in: z$2.number().array().optional(),
  notIn: z$2.number().array().optional(),
  lt: z$2.number().optional(),
  lte: z$2.number().optional(),
  gt: z$2.number().optional(),
  gte: z$2.number().optional(),
  not: z$2.union([z$2.number(), z$2.lazy(() => NestedFloatFilterSchema)]).optional()
}).strict();
var DateTimeFilterSchema = z$2.object({
  equals: z$2.coerce.date().optional(),
  in: z$2.coerce.date().array().optional(),
  notIn: z$2.coerce.date().array().optional(),
  lt: z$2.coerce.date().optional(),
  lte: z$2.coerce.date().optional(),
  gt: z$2.coerce.date().optional(),
  gte: z$2.coerce.date().optional(),
  not: z$2.union([z$2.coerce.date(), z$2.lazy(() => NestedDateTimeFilterSchema)]).optional()
}).strict();
var RestaurantRelationFilterSchema = z$2.object({
  is: z$2.lazy(() => RestaurantWhereInputSchema).optional(),
  isNot: z$2.lazy(() => RestaurantWhereInputSchema).optional()
}).strict();
var MenuItemRelationFilterSchema = z$2.object({
  is: z$2.lazy(() => MenuItemWhereInputSchema).optional(),
  isNot: z$2.lazy(() => MenuItemWhereInputSchema).optional()
}).strict();
var SortOrderInputSchema = z$2.object({
  sort: z$2.lazy(() => SortOrderSchema),
  nulls: z$2.lazy(() => NullsOrderSchema).optional()
}).strict();
var SalesTransactionsCountOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  posTransactionID: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional(),
  menuItemId: z$2.lazy(() => SortOrderSchema).optional(),
  price: z$2.lazy(() => SortOrderSchema).optional(),
  total: z$2.lazy(() => SortOrderSchema).optional(),
  transactionDate: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var SalesTransactionsAvgOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional(),
  menuItemId: z$2.lazy(() => SortOrderSchema).optional(),
  price: z$2.lazy(() => SortOrderSchema).optional(),
  total: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var SalesTransactionsMaxOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  posTransactionID: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional(),
  menuItemId: z$2.lazy(() => SortOrderSchema).optional(),
  price: z$2.lazy(() => SortOrderSchema).optional(),
  total: z$2.lazy(() => SortOrderSchema).optional(),
  transactionDate: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var SalesTransactionsMinOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  posTransactionID: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional(),
  menuItemId: z$2.lazy(() => SortOrderSchema).optional(),
  price: z$2.lazy(() => SortOrderSchema).optional(),
  total: z$2.lazy(() => SortOrderSchema).optional(),
  transactionDate: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var SalesTransactionsSumOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional(),
  menuItemId: z$2.lazy(() => SortOrderSchema).optional(),
  price: z$2.lazy(() => SortOrderSchema).optional(),
  total: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var IntWithAggregatesFilterSchema = z$2.object({
  equals: z$2.number().optional(),
  in: z$2.number().array().optional(),
  notIn: z$2.number().array().optional(),
  lt: z$2.number().optional(),
  lte: z$2.number().optional(),
  gt: z$2.number().optional(),
  gte: z$2.number().optional(),
  not: z$2.union([z$2.number(), z$2.lazy(() => NestedIntWithAggregatesFilterSchema)]).optional(),
  _count: z$2.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z$2.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z$2.lazy(() => NestedIntFilterSchema).optional(),
  _min: z$2.lazy(() => NestedIntFilterSchema).optional(),
  _max: z$2.lazy(() => NestedIntFilterSchema).optional()
}).strict();
var StringNullableWithAggregatesFilterSchema = z$2.object({
  equals: z$2.string().optional().nullable(),
  in: z$2.string().array().optional().nullable(),
  notIn: z$2.string().array().optional().nullable(),
  lt: z$2.string().optional(),
  lte: z$2.string().optional(),
  gt: z$2.string().optional(),
  gte: z$2.string().optional(),
  contains: z$2.string().optional(),
  startsWith: z$2.string().optional(),
  endsWith: z$2.string().optional(),
  mode: z$2.lazy(() => QueryModeSchema).optional(),
  not: z$2.union([z$2.string(), z$2.lazy(() => NestedStringNullableWithAggregatesFilterSchema)]).optional().nullable(),
  _count: z$2.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z$2.lazy(() => NestedStringNullableFilterSchema).optional(),
  _max: z$2.lazy(() => NestedStringNullableFilterSchema).optional()
}).strict();
var FloatWithAggregatesFilterSchema = z$2.object({
  equals: z$2.number().optional(),
  in: z$2.number().array().optional(),
  notIn: z$2.number().array().optional(),
  lt: z$2.number().optional(),
  lte: z$2.number().optional(),
  gt: z$2.number().optional(),
  gte: z$2.number().optional(),
  not: z$2.union([z$2.number(), z$2.lazy(() => NestedFloatWithAggregatesFilterSchema)]).optional(),
  _count: z$2.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z$2.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z$2.lazy(() => NestedFloatFilterSchema).optional(),
  _min: z$2.lazy(() => NestedFloatFilterSchema).optional(),
  _max: z$2.lazy(() => NestedFloatFilterSchema).optional()
}).strict();
var DateTimeWithAggregatesFilterSchema = z$2.object({
  equals: z$2.coerce.date().optional(),
  in: z$2.coerce.date().array().optional(),
  notIn: z$2.coerce.date().array().optional(),
  lt: z$2.coerce.date().optional(),
  lte: z$2.coerce.date().optional(),
  gt: z$2.coerce.date().optional(),
  gte: z$2.coerce.date().optional(),
  not: z$2.union([z$2.coerce.date(), z$2.lazy(() => NestedDateTimeWithAggregatesFilterSchema)]).optional(),
  _count: z$2.lazy(() => NestedIntFilterSchema).optional(),
  _min: z$2.lazy(() => NestedDateTimeFilterSchema).optional(),
  _max: z$2.lazy(() => NestedDateTimeFilterSchema).optional()
}).strict();
var StringFilterSchema = z$2.object({
  equals: z$2.string().optional(),
  in: z$2.string().array().optional(),
  notIn: z$2.string().array().optional(),
  lt: z$2.string().optional(),
  lte: z$2.string().optional(),
  gt: z$2.string().optional(),
  gte: z$2.string().optional(),
  contains: z$2.string().optional(),
  startsWith: z$2.string().optional(),
  endsWith: z$2.string().optional(),
  mode: z$2.lazy(() => QueryModeSchema).optional(),
  not: z$2.union([z$2.string(), z$2.lazy(() => NestedStringFilterSchema)]).optional()
}).strict();
var BoolFilterSchema = z$2.object({
  equals: z$2.boolean().optional(),
  not: z$2.union([z$2.boolean(), z$2.lazy(() => NestedBoolFilterSchema)]).optional()
}).strict();
var MenuRelationFilterSchema = z$2.object({
  is: z$2.lazy(() => MenuWhereInputSchema).optional(),
  isNot: z$2.lazy(() => MenuWhereInputSchema).optional()
}).strict();
var MenuItemListRelationFilterSchema = z$2.object({
  every: z$2.lazy(() => MenuItemWhereInputSchema).optional(),
  some: z$2.lazy(() => MenuItemWhereInputSchema).optional(),
  none: z$2.lazy(() => MenuItemWhereInputSchema).optional()
}).strict();
var MenuItemOrderByRelationAggregateInputSchema = z$2.object({
  _count: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var MenuCategoryMenuIdNameCompoundUniqueInputSchema = z$2.object({
  menuId: z$2.number(),
  name: z$2.string()
}).strict();
var MenuCategoryCountOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  name: z$2.lazy(() => SortOrderSchema).optional(),
  description: z$2.lazy(() => SortOrderSchema).optional(),
  displayOrder: z$2.lazy(() => SortOrderSchema).optional(),
  menuId: z$2.lazy(() => SortOrderSchema).optional(),
  isActive: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var MenuCategoryAvgOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  displayOrder: z$2.lazy(() => SortOrderSchema).optional(),
  menuId: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var MenuCategoryMaxOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  name: z$2.lazy(() => SortOrderSchema).optional(),
  description: z$2.lazy(() => SortOrderSchema).optional(),
  displayOrder: z$2.lazy(() => SortOrderSchema).optional(),
  menuId: z$2.lazy(() => SortOrderSchema).optional(),
  isActive: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var MenuCategoryMinOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  name: z$2.lazy(() => SortOrderSchema).optional(),
  description: z$2.lazy(() => SortOrderSchema).optional(),
  displayOrder: z$2.lazy(() => SortOrderSchema).optional(),
  menuId: z$2.lazy(() => SortOrderSchema).optional(),
  isActive: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var MenuCategorySumOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  displayOrder: z$2.lazy(() => SortOrderSchema).optional(),
  menuId: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var StringWithAggregatesFilterSchema = z$2.object({
  equals: z$2.string().optional(),
  in: z$2.string().array().optional(),
  notIn: z$2.string().array().optional(),
  lt: z$2.string().optional(),
  lte: z$2.string().optional(),
  gt: z$2.string().optional(),
  gte: z$2.string().optional(),
  contains: z$2.string().optional(),
  startsWith: z$2.string().optional(),
  endsWith: z$2.string().optional(),
  mode: z$2.lazy(() => QueryModeSchema).optional(),
  not: z$2.union([z$2.string(), z$2.lazy(() => NestedStringWithAggregatesFilterSchema)]).optional(),
  _count: z$2.lazy(() => NestedIntFilterSchema).optional(),
  _min: z$2.lazy(() => NestedStringFilterSchema).optional(),
  _max: z$2.lazy(() => NestedStringFilterSchema).optional()
}).strict();
var BoolWithAggregatesFilterSchema = z$2.object({
  equals: z$2.boolean().optional(),
  not: z$2.union([z$2.boolean(), z$2.lazy(() => NestedBoolWithAggregatesFilterSchema)]).optional(),
  _count: z$2.lazy(() => NestedIntFilterSchema).optional(),
  _min: z$2.lazy(() => NestedBoolFilterSchema).optional(),
  _max: z$2.lazy(() => NestedBoolFilterSchema).optional()
}).strict();
var IntNullableFilterSchema = z$2.object({
  equals: z$2.number().optional().nullable(),
  in: z$2.number().array().optional().nullable(),
  notIn: z$2.number().array().optional().nullable(),
  lt: z$2.number().optional(),
  lte: z$2.number().optional(),
  gt: z$2.number().optional(),
  gte: z$2.number().optional(),
  not: z$2.union([z$2.number(), z$2.lazy(() => NestedIntNullableFilterSchema)]).optional().nullable()
}).strict();
var DateTimeNullableFilterSchema = z$2.object({
  equals: z$2.coerce.date().optional().nullable(),
  in: z$2.coerce.date().array().optional().nullable(),
  notIn: z$2.coerce.date().array().optional().nullable(),
  lt: z$2.coerce.date().optional(),
  lte: z$2.coerce.date().optional(),
  gt: z$2.coerce.date().optional(),
  gte: z$2.coerce.date().optional(),
  not: z$2.union([z$2.coerce.date(), z$2.lazy(() => NestedDateTimeNullableFilterSchema)]).optional().nullable()
}).strict();
var RecipeRelationFilterSchema = z$2.object({
  is: z$2.lazy(() => RecipeWhereInputSchema).optional(),
  isNot: z$2.lazy(() => RecipeWhereInputSchema).optional()
}).strict();
var RecipeIngredientListRelationFilterSchema = z$2.object({
  every: z$2.lazy(() => RecipeIngredientWhereInputSchema).optional(),
  some: z$2.lazy(() => RecipeIngredientWhereInputSchema).optional(),
  none: z$2.lazy(() => RecipeIngredientWhereInputSchema).optional()
}).strict();
var RecipeInstructionListRelationFilterSchema = z$2.object({
  every: z$2.lazy(() => RecipeInstructionWhereInputSchema).optional(),
  some: z$2.lazy(() => RecipeInstructionWhereInputSchema).optional(),
  none: z$2.lazy(() => RecipeInstructionWhereInputSchema).optional()
}).strict();
var UserRelationFilterSchema = z$2.object({
  is: z$2.lazy(() => UserWhereInputSchema).optional(),
  isNot: z$2.lazy(() => UserWhereInputSchema).optional()
}).strict();
var UserNullableRelationFilterSchema = z$2.object({
  is: z$2.lazy(() => UserWhereInputSchema).optional().nullable(),
  isNot: z$2.lazy(() => UserWhereInputSchema).optional().nullable()
}).strict();
var RecipeIngredientOrderByRelationAggregateInputSchema = z$2.object({
  _count: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var RecipeInstructionOrderByRelationAggregateInputSchema = z$2.object({
  _count: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var RecipeVersionRecipeIdVersionNumberCompoundUniqueInputSchema = z$2.object({
  recipeId: z$2.number(),
  versionNumber: z$2.number()
}).strict();
var RecipeVersionCountOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  recipeId: z$2.lazy(() => SortOrderSchema).optional(),
  versionNumber: z$2.lazy(() => SortOrderSchema).optional(),
  description: z$2.lazy(() => SortOrderSchema).optional(),
  changes: z$2.lazy(() => SortOrderSchema).optional(),
  isActive: z$2.lazy(() => SortOrderSchema).optional(),
  createdById: z$2.lazy(() => SortOrderSchema).optional(),
  approvedById: z$2.lazy(() => SortOrderSchema).optional(),
  approvedAt: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var RecipeVersionAvgOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  recipeId: z$2.lazy(() => SortOrderSchema).optional(),
  versionNumber: z$2.lazy(() => SortOrderSchema).optional(),
  createdById: z$2.lazy(() => SortOrderSchema).optional(),
  approvedById: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var RecipeVersionMaxOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  recipeId: z$2.lazy(() => SortOrderSchema).optional(),
  versionNumber: z$2.lazy(() => SortOrderSchema).optional(),
  description: z$2.lazy(() => SortOrderSchema).optional(),
  changes: z$2.lazy(() => SortOrderSchema).optional(),
  isActive: z$2.lazy(() => SortOrderSchema).optional(),
  createdById: z$2.lazy(() => SortOrderSchema).optional(),
  approvedById: z$2.lazy(() => SortOrderSchema).optional(),
  approvedAt: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var RecipeVersionMinOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  recipeId: z$2.lazy(() => SortOrderSchema).optional(),
  versionNumber: z$2.lazy(() => SortOrderSchema).optional(),
  description: z$2.lazy(() => SortOrderSchema).optional(),
  changes: z$2.lazy(() => SortOrderSchema).optional(),
  isActive: z$2.lazy(() => SortOrderSchema).optional(),
  createdById: z$2.lazy(() => SortOrderSchema).optional(),
  approvedById: z$2.lazy(() => SortOrderSchema).optional(),
  approvedAt: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var RecipeVersionSumOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  recipeId: z$2.lazy(() => SortOrderSchema).optional(),
  versionNumber: z$2.lazy(() => SortOrderSchema).optional(),
  createdById: z$2.lazy(() => SortOrderSchema).optional(),
  approvedById: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var IntNullableWithAggregatesFilterSchema = z$2.object({
  equals: z$2.number().optional().nullable(),
  in: z$2.number().array().optional().nullable(),
  notIn: z$2.number().array().optional().nullable(),
  lt: z$2.number().optional(),
  lte: z$2.number().optional(),
  gt: z$2.number().optional(),
  gte: z$2.number().optional(),
  not: z$2.union([z$2.number(), z$2.lazy(() => NestedIntNullableWithAggregatesFilterSchema)]).optional().nullable(),
  _count: z$2.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z$2.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z$2.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z$2.lazy(() => NestedIntNullableFilterSchema).optional(),
  _max: z$2.lazy(() => NestedIntNullableFilterSchema).optional()
}).strict();
var DateTimeNullableWithAggregatesFilterSchema = z$2.object({
  equals: z$2.coerce.date().optional().nullable(),
  in: z$2.coerce.date().array().optional().nullable(),
  notIn: z$2.coerce.date().array().optional().nullable(),
  lt: z$2.coerce.date().optional(),
  lte: z$2.coerce.date().optional(),
  gt: z$2.coerce.date().optional(),
  gte: z$2.coerce.date().optional(),
  not: z$2.union([z$2.coerce.date(), z$2.lazy(() => NestedDateTimeNullableWithAggregatesFilterSchema)]).optional().nullable(),
  _count: z$2.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z$2.lazy(() => NestedDateTimeNullableFilterSchema).optional(),
  _max: z$2.lazy(() => NestedDateTimeNullableFilterSchema).optional()
}).strict();
var EnumEquipmentStatusFilterSchema = z$2.object({
  equals: z$2.lazy(() => EquipmentStatusSchema).optional(),
  in: z$2.lazy(() => EquipmentStatusSchema).array().optional(),
  notIn: z$2.lazy(() => EquipmentStatusSchema).array().optional(),
  not: z$2.union([z$2.lazy(() => EquipmentStatusSchema), z$2.lazy(() => NestedEnumEquipmentStatusFilterSchema)]).optional()
}).strict();
var RecipeEquipmentListRelationFilterSchema = z$2.object({
  every: z$2.lazy(() => RecipeEquipmentWhereInputSchema).optional(),
  some: z$2.lazy(() => RecipeEquipmentWhereInputSchema).optional(),
  none: z$2.lazy(() => RecipeEquipmentWhereInputSchema).optional()
}).strict();
var MaintenanceLogListRelationFilterSchema = z$2.object({
  every: z$2.lazy(() => MaintenanceLogWhereInputSchema).optional(),
  some: z$2.lazy(() => MaintenanceLogWhereInputSchema).optional(),
  none: z$2.lazy(() => MaintenanceLogWhereInputSchema).optional()
}).strict();
var RecipeEquipmentOrderByRelationAggregateInputSchema = z$2.object({
  _count: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var MaintenanceLogOrderByRelationAggregateInputSchema = z$2.object({
  _count: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var EquipmentCountOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  name: z$2.lazy(() => SortOrderSchema).optional(),
  description: z$2.lazy(() => SortOrderSchema).optional(),
  model: z$2.lazy(() => SortOrderSchema).optional(),
  serialNumber: z$2.lazy(() => SortOrderSchema).optional(),
  purchaseDate: z$2.lazy(() => SortOrderSchema).optional(),
  lastMaintenance: z$2.lazy(() => SortOrderSchema).optional(),
  nextMaintenance: z$2.lazy(() => SortOrderSchema).optional(),
  status: z$2.lazy(() => SortOrderSchema).optional(),
  location: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var EquipmentAvgOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var EquipmentMaxOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  name: z$2.lazy(() => SortOrderSchema).optional(),
  description: z$2.lazy(() => SortOrderSchema).optional(),
  model: z$2.lazy(() => SortOrderSchema).optional(),
  serialNumber: z$2.lazy(() => SortOrderSchema).optional(),
  purchaseDate: z$2.lazy(() => SortOrderSchema).optional(),
  lastMaintenance: z$2.lazy(() => SortOrderSchema).optional(),
  nextMaintenance: z$2.lazy(() => SortOrderSchema).optional(),
  status: z$2.lazy(() => SortOrderSchema).optional(),
  location: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var EquipmentMinOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  name: z$2.lazy(() => SortOrderSchema).optional(),
  description: z$2.lazy(() => SortOrderSchema).optional(),
  model: z$2.lazy(() => SortOrderSchema).optional(),
  serialNumber: z$2.lazy(() => SortOrderSchema).optional(),
  purchaseDate: z$2.lazy(() => SortOrderSchema).optional(),
  lastMaintenance: z$2.lazy(() => SortOrderSchema).optional(),
  nextMaintenance: z$2.lazy(() => SortOrderSchema).optional(),
  status: z$2.lazy(() => SortOrderSchema).optional(),
  location: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var EquipmentSumOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var EnumEquipmentStatusWithAggregatesFilterSchema = z$2.object({
  equals: z$2.lazy(() => EquipmentStatusSchema).optional(),
  in: z$2.lazy(() => EquipmentStatusSchema).array().optional(),
  notIn: z$2.lazy(() => EquipmentStatusSchema).array().optional(),
  not: z$2.union([z$2.lazy(() => EquipmentStatusSchema), z$2.lazy(() => NestedEnumEquipmentStatusWithAggregatesFilterSchema)]).optional(),
  _count: z$2.lazy(() => NestedIntFilterSchema).optional(),
  _min: z$2.lazy(() => NestedEnumEquipmentStatusFilterSchema).optional(),
  _max: z$2.lazy(() => NestedEnumEquipmentStatusFilterSchema).optional()
}).strict();
var EquipmentRelationFilterSchema = z$2.object({
  is: z$2.lazy(() => EquipmentWhereInputSchema).optional(),
  isNot: z$2.lazy(() => EquipmentWhereInputSchema).optional()
}).strict();
var RecipeEquipmentRecipeIdEquipmentIdCompoundUniqueInputSchema = z$2.object({
  recipeId: z$2.number(),
  equipmentId: z$2.number()
}).strict();
var RecipeEquipmentCountOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  recipeId: z$2.lazy(() => SortOrderSchema).optional(),
  equipmentId: z$2.lazy(() => SortOrderSchema).optional(),
  notes: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var RecipeEquipmentAvgOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  recipeId: z$2.lazy(() => SortOrderSchema).optional(),
  equipmentId: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var RecipeEquipmentMaxOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  recipeId: z$2.lazy(() => SortOrderSchema).optional(),
  equipmentId: z$2.lazy(() => SortOrderSchema).optional(),
  notes: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var RecipeEquipmentMinOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  recipeId: z$2.lazy(() => SortOrderSchema).optional(),
  equipmentId: z$2.lazy(() => SortOrderSchema).optional(),
  notes: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var RecipeEquipmentSumOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  recipeId: z$2.lazy(() => SortOrderSchema).optional(),
  equipmentId: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var EnumMaintenanceTypeFilterSchema = z$2.object({
  equals: z$2.lazy(() => MaintenanceTypeSchema).optional(),
  in: z$2.lazy(() => MaintenanceTypeSchema).array().optional(),
  notIn: z$2.lazy(() => MaintenanceTypeSchema).array().optional(),
  not: z$2.union([z$2.lazy(() => MaintenanceTypeSchema), z$2.lazy(() => NestedEnumMaintenanceTypeFilterSchema)]).optional()
}).strict();
var FloatNullableFilterSchema = z$2.object({
  equals: z$2.number().optional().nullable(),
  in: z$2.number().array().optional().nullable(),
  notIn: z$2.number().array().optional().nullable(),
  lt: z$2.number().optional(),
  lte: z$2.number().optional(),
  gt: z$2.number().optional(),
  gte: z$2.number().optional(),
  not: z$2.union([z$2.number(), z$2.lazy(() => NestedFloatNullableFilterSchema)]).optional().nullable()
}).strict();
var MaintenanceLogCountOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  equipmentId: z$2.lazy(() => SortOrderSchema).optional(),
  date: z$2.lazy(() => SortOrderSchema).optional(),
  type: z$2.lazy(() => SortOrderSchema).optional(),
  description: z$2.lazy(() => SortOrderSchema).optional(),
  cost: z$2.lazy(() => SortOrderSchema).optional(),
  performedBy: z$2.lazy(() => SortOrderSchema).optional(),
  notes: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var MaintenanceLogAvgOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  equipmentId: z$2.lazy(() => SortOrderSchema).optional(),
  cost: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var MaintenanceLogMaxOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  equipmentId: z$2.lazy(() => SortOrderSchema).optional(),
  date: z$2.lazy(() => SortOrderSchema).optional(),
  type: z$2.lazy(() => SortOrderSchema).optional(),
  description: z$2.lazy(() => SortOrderSchema).optional(),
  cost: z$2.lazy(() => SortOrderSchema).optional(),
  performedBy: z$2.lazy(() => SortOrderSchema).optional(),
  notes: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var MaintenanceLogMinOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  equipmentId: z$2.lazy(() => SortOrderSchema).optional(),
  date: z$2.lazy(() => SortOrderSchema).optional(),
  type: z$2.lazy(() => SortOrderSchema).optional(),
  description: z$2.lazy(() => SortOrderSchema).optional(),
  cost: z$2.lazy(() => SortOrderSchema).optional(),
  performedBy: z$2.lazy(() => SortOrderSchema).optional(),
  notes: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var MaintenanceLogSumOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  equipmentId: z$2.lazy(() => SortOrderSchema).optional(),
  cost: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var EnumMaintenanceTypeWithAggregatesFilterSchema = z$2.object({
  equals: z$2.lazy(() => MaintenanceTypeSchema).optional(),
  in: z$2.lazy(() => MaintenanceTypeSchema).array().optional(),
  notIn: z$2.lazy(() => MaintenanceTypeSchema).array().optional(),
  not: z$2.union([z$2.lazy(() => MaintenanceTypeSchema), z$2.lazy(() => NestedEnumMaintenanceTypeWithAggregatesFilterSchema)]).optional(),
  _count: z$2.lazy(() => NestedIntFilterSchema).optional(),
  _min: z$2.lazy(() => NestedEnumMaintenanceTypeFilterSchema).optional(),
  _max: z$2.lazy(() => NestedEnumMaintenanceTypeFilterSchema).optional()
}).strict();
var FloatNullableWithAggregatesFilterSchema = z$2.object({
  equals: z$2.number().optional().nullable(),
  in: z$2.number().array().optional().nullable(),
  notIn: z$2.number().array().optional().nullable(),
  lt: z$2.number().optional(),
  lte: z$2.number().optional(),
  gt: z$2.number().optional(),
  gte: z$2.number().optional(),
  not: z$2.union([z$2.number(), z$2.lazy(() => NestedFloatNullableWithAggregatesFilterSchema)]).optional().nullable(),
  _count: z$2.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z$2.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z$2.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _min: z$2.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _max: z$2.lazy(() => NestedFloatNullableFilterSchema).optional()
}).strict();
var EnumChecklistFrequencyFilterSchema = z$2.object({
  equals: z$2.lazy(() => ChecklistFrequencySchema).optional(),
  in: z$2.lazy(() => ChecklistFrequencySchema).array().optional(),
  notIn: z$2.lazy(() => ChecklistFrequencySchema).array().optional(),
  not: z$2.union([z$2.lazy(() => ChecklistFrequencySchema), z$2.lazy(() => NestedEnumChecklistFrequencyFilterSchema)]).optional()
}).strict();
var ChecklistItemListRelationFilterSchema = z$2.object({
  every: z$2.lazy(() => ChecklistItemWhereInputSchema).optional(),
  some: z$2.lazy(() => ChecklistItemWhereInputSchema).optional(),
  none: z$2.lazy(() => ChecklistItemWhereInputSchema).optional()
}).strict();
var ChecklistCompleteListRelationFilterSchema = z$2.object({
  every: z$2.lazy(() => ChecklistCompleteWhereInputSchema).optional(),
  some: z$2.lazy(() => ChecklistCompleteWhereInputSchema).optional(),
  none: z$2.lazy(() => ChecklistCompleteWhereInputSchema).optional()
}).strict();
var ChecklistItemOrderByRelationAggregateInputSchema = z$2.object({
  _count: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var ChecklistCompleteOrderByRelationAggregateInputSchema = z$2.object({
  _count: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var QualityChecklistCountOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  name: z$2.lazy(() => SortOrderSchema).optional(),
  description: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional(),
  frequency: z$2.lazy(() => SortOrderSchema).optional(),
  isActive: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var QualityChecklistAvgOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var QualityChecklistMaxOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  name: z$2.lazy(() => SortOrderSchema).optional(),
  description: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional(),
  frequency: z$2.lazy(() => SortOrderSchema).optional(),
  isActive: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var QualityChecklistMinOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  name: z$2.lazy(() => SortOrderSchema).optional(),
  description: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional(),
  frequency: z$2.lazy(() => SortOrderSchema).optional(),
  isActive: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var QualityChecklistSumOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var EnumChecklistFrequencyWithAggregatesFilterSchema = z$2.object({
  equals: z$2.lazy(() => ChecklistFrequencySchema).optional(),
  in: z$2.lazy(() => ChecklistFrequencySchema).array().optional(),
  notIn: z$2.lazy(() => ChecklistFrequencySchema).array().optional(),
  not: z$2.union([z$2.lazy(() => ChecklistFrequencySchema), z$2.lazy(() => NestedEnumChecklistFrequencyWithAggregatesFilterSchema)]).optional(),
  _count: z$2.lazy(() => NestedIntFilterSchema).optional(),
  _min: z$2.lazy(() => NestedEnumChecklistFrequencyFilterSchema).optional(),
  _max: z$2.lazy(() => NestedEnumChecklistFrequencyFilterSchema).optional()
}).strict();
var EnumChecklistItemTypeFilterSchema = z$2.object({
  equals: z$2.lazy(() => ChecklistItemTypeSchema).optional(),
  in: z$2.lazy(() => ChecklistItemTypeSchema).array().optional(),
  notIn: z$2.lazy(() => ChecklistItemTypeSchema).array().optional(),
  not: z$2.union([z$2.lazy(() => ChecklistItemTypeSchema), z$2.lazy(() => NestedEnumChecklistItemTypeFilterSchema)]).optional()
}).strict();
var QualityChecklistRelationFilterSchema = z$2.object({
  is: z$2.lazy(() => QualityChecklistWhereInputSchema).optional(),
  isNot: z$2.lazy(() => QualityChecklistWhereInputSchema).optional()
}).strict();
var ChecklistItemCompleteListRelationFilterSchema = z$2.object({
  every: z$2.lazy(() => ChecklistItemCompleteWhereInputSchema).optional(),
  some: z$2.lazy(() => ChecklistItemCompleteWhereInputSchema).optional(),
  none: z$2.lazy(() => ChecklistItemCompleteWhereInputSchema).optional()
}).strict();
var ChecklistItemCompleteOrderByRelationAggregateInputSchema = z$2.object({
  _count: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var ChecklistItemCountOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  checklistId: z$2.lazy(() => SortOrderSchema).optional(),
  description: z$2.lazy(() => SortOrderSchema).optional(),
  order: z$2.lazy(() => SortOrderSchema).optional(),
  type: z$2.lazy(() => SortOrderSchema).optional(),
  requiredPhotos: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var ChecklistItemAvgOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  checklistId: z$2.lazy(() => SortOrderSchema).optional(),
  order: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var ChecklistItemMaxOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  checklistId: z$2.lazy(() => SortOrderSchema).optional(),
  description: z$2.lazy(() => SortOrderSchema).optional(),
  order: z$2.lazy(() => SortOrderSchema).optional(),
  type: z$2.lazy(() => SortOrderSchema).optional(),
  requiredPhotos: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var ChecklistItemMinOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  checklistId: z$2.lazy(() => SortOrderSchema).optional(),
  description: z$2.lazy(() => SortOrderSchema).optional(),
  order: z$2.lazy(() => SortOrderSchema).optional(),
  type: z$2.lazy(() => SortOrderSchema).optional(),
  requiredPhotos: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var ChecklistItemSumOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  checklistId: z$2.lazy(() => SortOrderSchema).optional(),
  order: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var EnumChecklistItemTypeWithAggregatesFilterSchema = z$2.object({
  equals: z$2.lazy(() => ChecklistItemTypeSchema).optional(),
  in: z$2.lazy(() => ChecklistItemTypeSchema).array().optional(),
  notIn: z$2.lazy(() => ChecklistItemTypeSchema).array().optional(),
  not: z$2.union([z$2.lazy(() => ChecklistItemTypeSchema), z$2.lazy(() => NestedEnumChecklistItemTypeWithAggregatesFilterSchema)]).optional(),
  _count: z$2.lazy(() => NestedIntFilterSchema).optional(),
  _min: z$2.lazy(() => NestedEnumChecklistItemTypeFilterSchema).optional(),
  _max: z$2.lazy(() => NestedEnumChecklistItemTypeFilterSchema).optional()
}).strict();
var ChecklistCompleteCountOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  checklistId: z$2.lazy(() => SortOrderSchema).optional(),
  completedById: z$2.lazy(() => SortOrderSchema).optional(),
  date: z$2.lazy(() => SortOrderSchema).optional(),
  notes: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var ChecklistCompleteAvgOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  checklistId: z$2.lazy(() => SortOrderSchema).optional(),
  completedById: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var ChecklistCompleteMaxOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  checklistId: z$2.lazy(() => SortOrderSchema).optional(),
  completedById: z$2.lazy(() => SortOrderSchema).optional(),
  date: z$2.lazy(() => SortOrderSchema).optional(),
  notes: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var ChecklistCompleteMinOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  checklistId: z$2.lazy(() => SortOrderSchema).optional(),
  completedById: z$2.lazy(() => SortOrderSchema).optional(),
  date: z$2.lazy(() => SortOrderSchema).optional(),
  notes: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var ChecklistCompleteSumOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  checklistId: z$2.lazy(() => SortOrderSchema).optional(),
  completedById: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var EnumChecklistStatusFilterSchema = z$2.object({
  equals: z$2.lazy(() => ChecklistStatusSchema).optional(),
  in: z$2.lazy(() => ChecklistStatusSchema).array().optional(),
  notIn: z$2.lazy(() => ChecklistStatusSchema).array().optional(),
  not: z$2.union([z$2.lazy(() => ChecklistStatusSchema), z$2.lazy(() => NestedEnumChecklistStatusFilterSchema)]).optional()
}).strict();
var StringNullableListFilterSchema = z$2.object({
  equals: z$2.string().array().optional().nullable(),
  has: z$2.string().optional().nullable(),
  hasEvery: z$2.string().array().optional(),
  hasSome: z$2.string().array().optional(),
  isEmpty: z$2.boolean().optional()
}).strict();
var ChecklistCompleteRelationFilterSchema = z$2.object({
  is: z$2.lazy(() => ChecklistCompleteWhereInputSchema).optional(),
  isNot: z$2.lazy(() => ChecklistCompleteWhereInputSchema).optional()
}).strict();
var ChecklistItemRelationFilterSchema = z$2.object({
  is: z$2.lazy(() => ChecklistItemWhereInputSchema).optional(),
  isNot: z$2.lazy(() => ChecklistItemWhereInputSchema).optional()
}).strict();
var ChecklistItemCompleteCountOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  checklistCompleteId: z$2.lazy(() => SortOrderSchema).optional(),
  checklistItemId: z$2.lazy(() => SortOrderSchema).optional(),
  status: z$2.lazy(() => SortOrderSchema).optional(),
  notes: z$2.lazy(() => SortOrderSchema).optional(),
  photoUrls: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var ChecklistItemCompleteAvgOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  checklistCompleteId: z$2.lazy(() => SortOrderSchema).optional(),
  checklistItemId: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var ChecklistItemCompleteMaxOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  checklistCompleteId: z$2.lazy(() => SortOrderSchema).optional(),
  checklistItemId: z$2.lazy(() => SortOrderSchema).optional(),
  status: z$2.lazy(() => SortOrderSchema).optional(),
  notes: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var ChecklistItemCompleteMinOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  checklistCompleteId: z$2.lazy(() => SortOrderSchema).optional(),
  checklistItemId: z$2.lazy(() => SortOrderSchema).optional(),
  status: z$2.lazy(() => SortOrderSchema).optional(),
  notes: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var ChecklistItemCompleteSumOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  checklistCompleteId: z$2.lazy(() => SortOrderSchema).optional(),
  checklistItemId: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var EnumChecklistStatusWithAggregatesFilterSchema = z$2.object({
  equals: z$2.lazy(() => ChecklistStatusSchema).optional(),
  in: z$2.lazy(() => ChecklistStatusSchema).array().optional(),
  notIn: z$2.lazy(() => ChecklistStatusSchema).array().optional(),
  not: z$2.union([z$2.lazy(() => ChecklistStatusSchema), z$2.lazy(() => NestedEnumChecklistStatusWithAggregatesFilterSchema)]).optional(),
  _count: z$2.lazy(() => NestedIntFilterSchema).optional(),
  _min: z$2.lazy(() => NestedEnumChecklistStatusFilterSchema).optional(),
  _max: z$2.lazy(() => NestedEnumChecklistStatusFilterSchema).optional()
}).strict();
var VendorRelationFilterSchema = z$2.object({
  is: z$2.lazy(() => VendorWhereInputSchema).optional(),
  isNot: z$2.lazy(() => VendorWhereInputSchema).optional()
}).strict();
var IngredientRelationFilterSchema = z$2.object({
  is: z$2.lazy(() => IngredientWhereInputSchema).optional(),
  isNot: z$2.lazy(() => IngredientWhereInputSchema).optional()
}).strict();
var SupplierPriceHistoryCountOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  vendorId: z$2.lazy(() => SortOrderSchema).optional(),
  ingredientId: z$2.lazy(() => SortOrderSchema).optional(),
  price: z$2.lazy(() => SortOrderSchema).optional(),
  unit: z$2.lazy(() => SortOrderSchema).optional(),
  startDate: z$2.lazy(() => SortOrderSchema).optional(),
  endDate: z$2.lazy(() => SortOrderSchema).optional(),
  notes: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var SupplierPriceHistoryAvgOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  vendorId: z$2.lazy(() => SortOrderSchema).optional(),
  ingredientId: z$2.lazy(() => SortOrderSchema).optional(),
  price: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var SupplierPriceHistoryMaxOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  vendorId: z$2.lazy(() => SortOrderSchema).optional(),
  ingredientId: z$2.lazy(() => SortOrderSchema).optional(),
  price: z$2.lazy(() => SortOrderSchema).optional(),
  unit: z$2.lazy(() => SortOrderSchema).optional(),
  startDate: z$2.lazy(() => SortOrderSchema).optional(),
  endDate: z$2.lazy(() => SortOrderSchema).optional(),
  notes: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var SupplierPriceHistoryMinOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  vendorId: z$2.lazy(() => SortOrderSchema).optional(),
  ingredientId: z$2.lazy(() => SortOrderSchema).optional(),
  price: z$2.lazy(() => SortOrderSchema).optional(),
  unit: z$2.lazy(() => SortOrderSchema).optional(),
  startDate: z$2.lazy(() => SortOrderSchema).optional(),
  endDate: z$2.lazy(() => SortOrderSchema).optional(),
  notes: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var SupplierPriceHistorySumOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  vendorId: z$2.lazy(() => SortOrderSchema).optional(),
  ingredientId: z$2.lazy(() => SortOrderSchema).optional(),
  price: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var EnumFeedbackSourceFilterSchema = z$2.object({
  equals: z$2.lazy(() => FeedbackSourceSchema).optional(),
  in: z$2.lazy(() => FeedbackSourceSchema).array().optional(),
  notIn: z$2.lazy(() => FeedbackSourceSchema).array().optional(),
  not: z$2.union([z$2.lazy(() => FeedbackSourceSchema), z$2.lazy(() => NestedEnumFeedbackSourceFilterSchema)]).optional()
}).strict();
var EnumFeedbackStatusFilterSchema = z$2.object({
  equals: z$2.lazy(() => FeedbackStatusSchema).optional(),
  in: z$2.lazy(() => FeedbackStatusSchema).array().optional(),
  notIn: z$2.lazy(() => FeedbackStatusSchema).array().optional(),
  not: z$2.union([z$2.lazy(() => FeedbackStatusSchema), z$2.lazy(() => NestedEnumFeedbackStatusFilterSchema)]).optional()
}).strict();
var MenuItemNullableRelationFilterSchema = z$2.object({
  is: z$2.lazy(() => MenuItemWhereInputSchema).optional().nullable(),
  isNot: z$2.lazy(() => MenuItemWhereInputSchema).optional().nullable()
}).strict();
var CustomerFeedbackCountOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional(),
  menuItemId: z$2.lazy(() => SortOrderSchema).optional(),
  rating: z$2.lazy(() => SortOrderSchema).optional(),
  comment: z$2.lazy(() => SortOrderSchema).optional(),
  source: z$2.lazy(() => SortOrderSchema).optional(),
  tags: z$2.lazy(() => SortOrderSchema).optional(),
  status: z$2.lazy(() => SortOrderSchema).optional(),
  responseText: z$2.lazy(() => SortOrderSchema).optional(),
  respondedAt: z$2.lazy(() => SortOrderSchema).optional(),
  respondedById: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var CustomerFeedbackAvgOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional(),
  menuItemId: z$2.lazy(() => SortOrderSchema).optional(),
  rating: z$2.lazy(() => SortOrderSchema).optional(),
  respondedById: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var CustomerFeedbackMaxOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional(),
  menuItemId: z$2.lazy(() => SortOrderSchema).optional(),
  rating: z$2.lazy(() => SortOrderSchema).optional(),
  comment: z$2.lazy(() => SortOrderSchema).optional(),
  source: z$2.lazy(() => SortOrderSchema).optional(),
  status: z$2.lazy(() => SortOrderSchema).optional(),
  responseText: z$2.lazy(() => SortOrderSchema).optional(),
  respondedAt: z$2.lazy(() => SortOrderSchema).optional(),
  respondedById: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var CustomerFeedbackMinOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional(),
  menuItemId: z$2.lazy(() => SortOrderSchema).optional(),
  rating: z$2.lazy(() => SortOrderSchema).optional(),
  comment: z$2.lazy(() => SortOrderSchema).optional(),
  source: z$2.lazy(() => SortOrderSchema).optional(),
  status: z$2.lazy(() => SortOrderSchema).optional(),
  responseText: z$2.lazy(() => SortOrderSchema).optional(),
  respondedAt: z$2.lazy(() => SortOrderSchema).optional(),
  respondedById: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var CustomerFeedbackSumOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional(),
  menuItemId: z$2.lazy(() => SortOrderSchema).optional(),
  rating: z$2.lazy(() => SortOrderSchema).optional(),
  respondedById: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var EnumFeedbackSourceWithAggregatesFilterSchema = z$2.object({
  equals: z$2.lazy(() => FeedbackSourceSchema).optional(),
  in: z$2.lazy(() => FeedbackSourceSchema).array().optional(),
  notIn: z$2.lazy(() => FeedbackSourceSchema).array().optional(),
  not: z$2.union([z$2.lazy(() => FeedbackSourceSchema), z$2.lazy(() => NestedEnumFeedbackSourceWithAggregatesFilterSchema)]).optional(),
  _count: z$2.lazy(() => NestedIntFilterSchema).optional(),
  _min: z$2.lazy(() => NestedEnumFeedbackSourceFilterSchema).optional(),
  _max: z$2.lazy(() => NestedEnumFeedbackSourceFilterSchema).optional()
}).strict();
var EnumFeedbackStatusWithAggregatesFilterSchema = z$2.object({
  equals: z$2.lazy(() => FeedbackStatusSchema).optional(),
  in: z$2.lazy(() => FeedbackStatusSchema).array().optional(),
  notIn: z$2.lazy(() => FeedbackStatusSchema).array().optional(),
  not: z$2.union([z$2.lazy(() => FeedbackStatusSchema), z$2.lazy(() => NestedEnumFeedbackStatusWithAggregatesFilterSchema)]).optional(),
  _count: z$2.lazy(() => NestedIntFilterSchema).optional(),
  _min: z$2.lazy(() => NestedEnumFeedbackStatusFilterSchema).optional(),
  _max: z$2.lazy(() => NestedEnumFeedbackStatusFilterSchema).optional()
}).strict();
var RecipeListRelationFilterSchema = z$2.object({
  every: z$2.lazy(() => RecipeWhereInputSchema).optional(),
  some: z$2.lazy(() => RecipeWhereInputSchema).optional(),
  none: z$2.lazy(() => RecipeWhereInputSchema).optional()
}).strict();
var IngredientListRelationFilterSchema = z$2.object({
  every: z$2.lazy(() => IngredientWhereInputSchema).optional(),
  some: z$2.lazy(() => IngredientWhereInputSchema).optional(),
  none: z$2.lazy(() => IngredientWhereInputSchema).optional()
}).strict();
var RecipeOrderByRelationAggregateInputSchema = z$2.object({
  _count: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var IngredientOrderByRelationAggregateInputSchema = z$2.object({
  _count: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var DietaryRestrictionCountOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  name: z$2.lazy(() => SortOrderSchema).optional(),
  description: z$2.lazy(() => SortOrderSchema).optional(),
  icon: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var DietaryRestrictionAvgOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var DietaryRestrictionMaxOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  name: z$2.lazy(() => SortOrderSchema).optional(),
  description: z$2.lazy(() => SortOrderSchema).optional(),
  icon: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var DietaryRestrictionMinOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  name: z$2.lazy(() => SortOrderSchema).optional(),
  description: z$2.lazy(() => SortOrderSchema).optional(),
  icon: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var DietaryRestrictionSumOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var RecipeTagCountOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  name: z$2.lazy(() => SortOrderSchema).optional(),
  description: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var RecipeTagAvgOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var RecipeTagMaxOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  name: z$2.lazy(() => SortOrderSchema).optional(),
  description: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var RecipeTagMinOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  name: z$2.lazy(() => SortOrderSchema).optional(),
  description: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var RecipeTagSumOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var LeftoverItemCountOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional(),
  date: z$2.lazy(() => SortOrderSchema).optional(),
  menuItemId: z$2.lazy(() => SortOrderSchema).optional(),
  quantity: z$2.lazy(() => SortOrderSchema).optional(),
  reason: z$2.lazy(() => SortOrderSchema).optional(),
  recordedById: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var LeftoverItemAvgOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional(),
  menuItemId: z$2.lazy(() => SortOrderSchema).optional(),
  quantity: z$2.lazy(() => SortOrderSchema).optional(),
  recordedById: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var LeftoverItemMaxOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional(),
  date: z$2.lazy(() => SortOrderSchema).optional(),
  menuItemId: z$2.lazy(() => SortOrderSchema).optional(),
  quantity: z$2.lazy(() => SortOrderSchema).optional(),
  reason: z$2.lazy(() => SortOrderSchema).optional(),
  recordedById: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var LeftoverItemMinOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional(),
  date: z$2.lazy(() => SortOrderSchema).optional(),
  menuItemId: z$2.lazy(() => SortOrderSchema).optional(),
  quantity: z$2.lazy(() => SortOrderSchema).optional(),
  reason: z$2.lazy(() => SortOrderSchema).optional(),
  recordedById: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var LeftoverItemSumOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional(),
  menuItemId: z$2.lazy(() => SortOrderSchema).optional(),
  quantity: z$2.lazy(() => SortOrderSchema).optional(),
  recordedById: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var WasteRecordCountOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional(),
  date: z$2.lazy(() => SortOrderSchema).optional(),
  ingredientId: z$2.lazy(() => SortOrderSchema).optional(),
  quantity: z$2.lazy(() => SortOrderSchema).optional(),
  unit: z$2.lazy(() => SortOrderSchema).optional(),
  reason: z$2.lazy(() => SortOrderSchema).optional(),
  recordedById: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var WasteRecordAvgOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional(),
  ingredientId: z$2.lazy(() => SortOrderSchema).optional(),
  quantity: z$2.lazy(() => SortOrderSchema).optional(),
  recordedById: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var WasteRecordMaxOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional(),
  date: z$2.lazy(() => SortOrderSchema).optional(),
  ingredientId: z$2.lazy(() => SortOrderSchema).optional(),
  quantity: z$2.lazy(() => SortOrderSchema).optional(),
  unit: z$2.lazy(() => SortOrderSchema).optional(),
  reason: z$2.lazy(() => SortOrderSchema).optional(),
  recordedById: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var WasteRecordMinOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional(),
  date: z$2.lazy(() => SortOrderSchema).optional(),
  ingredientId: z$2.lazy(() => SortOrderSchema).optional(),
  quantity: z$2.lazy(() => SortOrderSchema).optional(),
  unit: z$2.lazy(() => SortOrderSchema).optional(),
  reason: z$2.lazy(() => SortOrderSchema).optional(),
  recordedById: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var WasteRecordSumOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional(),
  ingredientId: z$2.lazy(() => SortOrderSchema).optional(),
  quantity: z$2.lazy(() => SortOrderSchema).optional(),
  recordedById: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var ProductionPlanItemListRelationFilterSchema = z$2.object({
  every: z$2.lazy(() => ProductionPlanItemWhereInputSchema).optional(),
  some: z$2.lazy(() => ProductionPlanItemWhereInputSchema).optional(),
  none: z$2.lazy(() => ProductionPlanItemWhereInputSchema).optional()
}).strict();
var ProductionPlanItemOrderByRelationAggregateInputSchema = z$2.object({
  _count: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var ProductionPlanCountOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional(),
  date: z$2.lazy(() => SortOrderSchema).optional(),
  createdById: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var ProductionPlanAvgOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional(),
  createdById: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var ProductionPlanMaxOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional(),
  date: z$2.lazy(() => SortOrderSchema).optional(),
  createdById: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var ProductionPlanMinOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional(),
  date: z$2.lazy(() => SortOrderSchema).optional(),
  createdById: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var ProductionPlanSumOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional(),
  createdById: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var ProductionPlanRelationFilterSchema = z$2.object({
  is: z$2.lazy(() => ProductionPlanWhereInputSchema).optional(),
  isNot: z$2.lazy(() => ProductionPlanWhereInputSchema).optional()
}).strict();
var ProductionPlanItemCountOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  productionPlanId: z$2.lazy(() => SortOrderSchema).optional(),
  recipeId: z$2.lazy(() => SortOrderSchema).optional(),
  quantity: z$2.lazy(() => SortOrderSchema).optional(),
  unit: z$2.lazy(() => SortOrderSchema).optional(),
  assignedToId: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var ProductionPlanItemAvgOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  productionPlanId: z$2.lazy(() => SortOrderSchema).optional(),
  recipeId: z$2.lazy(() => SortOrderSchema).optional(),
  quantity: z$2.lazy(() => SortOrderSchema).optional(),
  assignedToId: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var ProductionPlanItemMaxOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  productionPlanId: z$2.lazy(() => SortOrderSchema).optional(),
  recipeId: z$2.lazy(() => SortOrderSchema).optional(),
  quantity: z$2.lazy(() => SortOrderSchema).optional(),
  unit: z$2.lazy(() => SortOrderSchema).optional(),
  assignedToId: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var ProductionPlanItemMinOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  productionPlanId: z$2.lazy(() => SortOrderSchema).optional(),
  recipeId: z$2.lazy(() => SortOrderSchema).optional(),
  quantity: z$2.lazy(() => SortOrderSchema).optional(),
  unit: z$2.lazy(() => SortOrderSchema).optional(),
  assignedToId: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var ProductionPlanItemSumOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  productionPlanId: z$2.lazy(() => SortOrderSchema).optional(),
  recipeId: z$2.lazy(() => SortOrderSchema).optional(),
  quantity: z$2.lazy(() => SortOrderSchema).optional(),
  assignedToId: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var EnumTaskTypeFilterSchema = z$2.object({
  equals: z$2.lazy(() => TaskTypeSchema).optional(),
  in: z$2.lazy(() => TaskTypeSchema).array().optional(),
  notIn: z$2.lazy(() => TaskTypeSchema).array().optional(),
  not: z$2.union([z$2.lazy(() => TaskTypeSchema), z$2.lazy(() => NestedEnumTaskTypeFilterSchema)]).optional()
}).strict();
var ShiftRelationFilterSchema = z$2.object({
  is: z$2.lazy(() => ShiftWhereInputSchema).optional(),
  isNot: z$2.lazy(() => ShiftWhereInputSchema).optional()
}).strict();
var ShiftTaskCountOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  shiftId: z$2.lazy(() => SortOrderSchema).optional(),
  taskType: z$2.lazy(() => SortOrderSchema).optional(),
  startTime: z$2.lazy(() => SortOrderSchema).optional(),
  endTime: z$2.lazy(() => SortOrderSchema).optional(),
  duration: z$2.lazy(() => SortOrderSchema).optional(),
  notes: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var ShiftTaskAvgOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  shiftId: z$2.lazy(() => SortOrderSchema).optional(),
  duration: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var ShiftTaskMaxOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  shiftId: z$2.lazy(() => SortOrderSchema).optional(),
  taskType: z$2.lazy(() => SortOrderSchema).optional(),
  startTime: z$2.lazy(() => SortOrderSchema).optional(),
  endTime: z$2.lazy(() => SortOrderSchema).optional(),
  duration: z$2.lazy(() => SortOrderSchema).optional(),
  notes: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var ShiftTaskMinOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  shiftId: z$2.lazy(() => SortOrderSchema).optional(),
  taskType: z$2.lazy(() => SortOrderSchema).optional(),
  startTime: z$2.lazy(() => SortOrderSchema).optional(),
  endTime: z$2.lazy(() => SortOrderSchema).optional(),
  duration: z$2.lazy(() => SortOrderSchema).optional(),
  notes: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var ShiftTaskSumOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  shiftId: z$2.lazy(() => SortOrderSchema).optional(),
  duration: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var EnumTaskTypeWithAggregatesFilterSchema = z$2.object({
  equals: z$2.lazy(() => TaskTypeSchema).optional(),
  in: z$2.lazy(() => TaskTypeSchema).array().optional(),
  notIn: z$2.lazy(() => TaskTypeSchema).array().optional(),
  not: z$2.union([z$2.lazy(() => TaskTypeSchema), z$2.lazy(() => NestedEnumTaskTypeWithAggregatesFilterSchema)]).optional(),
  _count: z$2.lazy(() => NestedIntFilterSchema).optional(),
  _min: z$2.lazy(() => NestedEnumTaskTypeFilterSchema).optional(),
  _max: z$2.lazy(() => NestedEnumTaskTypeFilterSchema).optional()
}).strict();
var EnumDayOfWeekFilterSchema = z$2.object({
  equals: z$2.lazy(() => DayOfWeekSchema).optional(),
  in: z$2.lazy(() => DayOfWeekSchema).array().optional(),
  notIn: z$2.lazy(() => DayOfWeekSchema).array().optional(),
  not: z$2.union([z$2.lazy(() => DayOfWeekSchema), z$2.lazy(() => NestedEnumDayOfWeekFilterSchema)]).optional()
}).strict();
var AvailabilityCountOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  userId: z$2.lazy(() => SortOrderSchema).optional(),
  dayOfWeek: z$2.lazy(() => SortOrderSchema).optional(),
  startTime: z$2.lazy(() => SortOrderSchema).optional(),
  endTime: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var AvailabilityAvgOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  userId: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var AvailabilityMaxOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  userId: z$2.lazy(() => SortOrderSchema).optional(),
  dayOfWeek: z$2.lazy(() => SortOrderSchema).optional(),
  startTime: z$2.lazy(() => SortOrderSchema).optional(),
  endTime: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var AvailabilityMinOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  userId: z$2.lazy(() => SortOrderSchema).optional(),
  dayOfWeek: z$2.lazy(() => SortOrderSchema).optional(),
  startTime: z$2.lazy(() => SortOrderSchema).optional(),
  endTime: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var AvailabilitySumOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  userId: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var EnumDayOfWeekWithAggregatesFilterSchema = z$2.object({
  equals: z$2.lazy(() => DayOfWeekSchema).optional(),
  in: z$2.lazy(() => DayOfWeekSchema).array().optional(),
  notIn: z$2.lazy(() => DayOfWeekSchema).array().optional(),
  not: z$2.union([z$2.lazy(() => DayOfWeekSchema), z$2.lazy(() => NestedEnumDayOfWeekWithAggregatesFilterSchema)]).optional(),
  _count: z$2.lazy(() => NestedIntFilterSchema).optional(),
  _min: z$2.lazy(() => NestedEnumDayOfWeekFilterSchema).optional(),
  _max: z$2.lazy(() => NestedEnumDayOfWeekFilterSchema).optional()
}).strict();
var EnumConstraintTypeFilterSchema = z$2.object({
  equals: z$2.lazy(() => ConstraintTypeSchema).optional(),
  in: z$2.lazy(() => ConstraintTypeSchema).array().optional(),
  notIn: z$2.lazy(() => ConstraintTypeSchema).array().optional(),
  not: z$2.union([z$2.lazy(() => ConstraintTypeSchema), z$2.lazy(() => NestedEnumConstraintTypeFilterSchema)]).optional()
}).strict();
var SchedulingConstraintCountOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  userId: z$2.lazy(() => SortOrderSchema).optional(),
  date: z$2.lazy(() => SortOrderSchema).optional(),
  constraintsType: z$2.lazy(() => SortOrderSchema).optional(),
  startTime: z$2.lazy(() => SortOrderSchema).optional(),
  endTime: z$2.lazy(() => SortOrderSchema).optional(),
  notes: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var SchedulingConstraintAvgOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  userId: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var SchedulingConstraintMaxOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  userId: z$2.lazy(() => SortOrderSchema).optional(),
  date: z$2.lazy(() => SortOrderSchema).optional(),
  constraintsType: z$2.lazy(() => SortOrderSchema).optional(),
  startTime: z$2.lazy(() => SortOrderSchema).optional(),
  endTime: z$2.lazy(() => SortOrderSchema).optional(),
  notes: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var SchedulingConstraintMinOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  userId: z$2.lazy(() => SortOrderSchema).optional(),
  date: z$2.lazy(() => SortOrderSchema).optional(),
  constraintsType: z$2.lazy(() => SortOrderSchema).optional(),
  startTime: z$2.lazy(() => SortOrderSchema).optional(),
  endTime: z$2.lazy(() => SortOrderSchema).optional(),
  notes: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var SchedulingConstraintSumOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  userId: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var EnumConstraintTypeWithAggregatesFilterSchema = z$2.object({
  equals: z$2.lazy(() => ConstraintTypeSchema).optional(),
  in: z$2.lazy(() => ConstraintTypeSchema).array().optional(),
  notIn: z$2.lazy(() => ConstraintTypeSchema).array().optional(),
  not: z$2.union([z$2.lazy(() => ConstraintTypeSchema), z$2.lazy(() => NestedEnumConstraintTypeWithAggregatesFilterSchema)]).optional(),
  _count: z$2.lazy(() => NestedIntFilterSchema).optional(),
  _min: z$2.lazy(() => NestedEnumConstraintTypeFilterSchema).optional(),
  _max: z$2.lazy(() => NestedEnumConstraintTypeFilterSchema).optional()
}).strict();
var InventoryItemRelationFilterSchema = z$2.object({
  is: z$2.lazy(() => InventoryItemWhereInputSchema).optional(),
  isNot: z$2.lazy(() => InventoryItemWhereInputSchema).optional()
}).strict();
var RecipeNullableRelationFilterSchema = z$2.object({
  is: z$2.lazy(() => RecipeWhereInputSchema).optional().nullable(),
  isNot: z$2.lazy(() => RecipeWhereInputSchema).optional().nullable()
}).strict();
var InventoryWithdrawalCountOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  inventoryItemId: z$2.lazy(() => SortOrderSchema).optional(),
  dateTime: z$2.lazy(() => SortOrderSchema).optional(),
  quantity: z$2.lazy(() => SortOrderSchema).optional(),
  unit: z$2.lazy(() => SortOrderSchema).optional(),
  recipeId: z$2.lazy(() => SortOrderSchema).optional(),
  createdById: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var InventoryWithdrawalAvgOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  inventoryItemId: z$2.lazy(() => SortOrderSchema).optional(),
  quantity: z$2.lazy(() => SortOrderSchema).optional(),
  recipeId: z$2.lazy(() => SortOrderSchema).optional(),
  createdById: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var InventoryWithdrawalMaxOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  inventoryItemId: z$2.lazy(() => SortOrderSchema).optional(),
  dateTime: z$2.lazy(() => SortOrderSchema).optional(),
  quantity: z$2.lazy(() => SortOrderSchema).optional(),
  unit: z$2.lazy(() => SortOrderSchema).optional(),
  recipeId: z$2.lazy(() => SortOrderSchema).optional(),
  createdById: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var InventoryWithdrawalMinOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  inventoryItemId: z$2.lazy(() => SortOrderSchema).optional(),
  dateTime: z$2.lazy(() => SortOrderSchema).optional(),
  quantity: z$2.lazy(() => SortOrderSchema).optional(),
  unit: z$2.lazy(() => SortOrderSchema).optional(),
  recipeId: z$2.lazy(() => SortOrderSchema).optional(),
  createdById: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var InventoryWithdrawalSumOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  inventoryItemId: z$2.lazy(() => SortOrderSchema).optional(),
  quantity: z$2.lazy(() => SortOrderSchema).optional(),
  recipeId: z$2.lazy(() => SortOrderSchema).optional(),
  createdById: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var IngredientAllergenListRelationFilterSchema = z$2.object({
  every: z$2.lazy(() => IngredientAllergenWhereInputSchema).optional(),
  some: z$2.lazy(() => IngredientAllergenWhereInputSchema).optional(),
  none: z$2.lazy(() => IngredientAllergenWhereInputSchema).optional()
}).strict();
var IngredientAllergenOrderByRelationAggregateInputSchema = z$2.object({
  _count: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var AllergenCountOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  name: z$2.lazy(() => SortOrderSchema).optional(),
  description: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var AllergenAvgOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var AllergenMaxOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  name: z$2.lazy(() => SortOrderSchema).optional(),
  description: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var AllergenMinOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  name: z$2.lazy(() => SortOrderSchema).optional(),
  description: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var AllergenSumOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var AllergenRelationFilterSchema = z$2.object({
  is: z$2.lazy(() => AllergenWhereInputSchema).optional(),
  isNot: z$2.lazy(() => AllergenWhereInputSchema).optional()
}).strict();
var IngredientAllergenCountOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  ingredientId: z$2.lazy(() => SortOrderSchema).optional(),
  allergenId: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var IngredientAllergenAvgOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  ingredientId: z$2.lazy(() => SortOrderSchema).optional(),
  allergenId: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var IngredientAllergenMaxOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  ingredientId: z$2.lazy(() => SortOrderSchema).optional(),
  allergenId: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var IngredientAllergenMinOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  ingredientId: z$2.lazy(() => SortOrderSchema).optional(),
  allergenId: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var IngredientAllergenSumOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  ingredientId: z$2.lazy(() => SortOrderSchema).optional(),
  allergenId: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var NutritionalRecommendationCountOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  menuItemId: z$2.lazy(() => SortOrderSchema).optional(),
  recommendation: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var NutritionalRecommendationAvgOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  menuItemId: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var NutritionalRecommendationMaxOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  menuItemId: z$2.lazy(() => SortOrderSchema).optional(),
  recommendation: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var NutritionalRecommendationMinOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  menuItemId: z$2.lazy(() => SortOrderSchema).optional(),
  recommendation: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var NutritionalRecommendationSumOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  menuItemId: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var EarlyAccessCountOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  email: z$2.lazy(() => SortOrderSchema).optional(),
  isEmailSent: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var EarlyAccessAvgOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var EarlyAccessMaxOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  email: z$2.lazy(() => SortOrderSchema).optional(),
  isEmailSent: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var EarlyAccessMinOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  email: z$2.lazy(() => SortOrderSchema).optional(),
  isEmailSent: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var EarlyAccessSumOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var RestaurantListRelationFilterSchema = z$2.object({
  every: z$2.lazy(() => RestaurantWhereInputSchema).optional(),
  some: z$2.lazy(() => RestaurantWhereInputSchema).optional(),
  none: z$2.lazy(() => RestaurantWhereInputSchema).optional()
}).strict();
var UserListRelationFilterSchema = z$2.object({
  every: z$2.lazy(() => UserWhereInputSchema).optional(),
  some: z$2.lazy(() => UserWhereInputSchema).optional(),
  none: z$2.lazy(() => UserWhereInputSchema).optional()
}).strict();
var RestaurantOrderByRelationAggregateInputSchema = z$2.object({
  _count: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var UserOrderByRelationAggregateInputSchema = z$2.object({
  _count: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var OrganizationCountOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  name: z$2.lazy(() => SortOrderSchema).optional(),
  imageUrl: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var OrganizationAvgOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var OrganizationMaxOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  name: z$2.lazy(() => SortOrderSchema).optional(),
  imageUrl: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var OrganizationMinOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  name: z$2.lazy(() => SortOrderSchema).optional(),
  imageUrl: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var OrganizationSumOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var OrganizationNullableRelationFilterSchema = z$2.object({
  is: z$2.lazy(() => OrganizationWhereInputSchema).optional().nullable(),
  isNot: z$2.lazy(() => OrganizationWhereInputSchema).optional().nullable()
}).strict();
var CookBookListRelationFilterSchema = z$2.object({
  every: z$2.lazy(() => CookBookWhereInputSchema).optional(),
  some: z$2.lazy(() => CookBookWhereInputSchema).optional(),
  none: z$2.lazy(() => CookBookWhereInputSchema).optional()
}).strict();
var InventoryNullableRelationFilterSchema = z$2.object({
  is: z$2.lazy(() => InventoryWhereInputSchema).optional().nullable(),
  isNot: z$2.lazy(() => InventoryWhereInputSchema).optional().nullable()
}).strict();
var OrderListRelationFilterSchema = z$2.object({
  every: z$2.lazy(() => OrderWhereInputSchema).optional(),
  some: z$2.lazy(() => OrderWhereInputSchema).optional(),
  none: z$2.lazy(() => OrderWhereInputSchema).optional()
}).strict();
var MenuListRelationFilterSchema = z$2.object({
  every: z$2.lazy(() => MenuWhereInputSchema).optional(),
  some: z$2.lazy(() => MenuWhereInputSchema).optional(),
  none: z$2.lazy(() => MenuWhereInputSchema).optional()
}).strict();
var SalesTransactionsListRelationFilterSchema = z$2.object({
  every: z$2.lazy(() => SalesTransactionsWhereInputSchema).optional(),
  some: z$2.lazy(() => SalesTransactionsWhereInputSchema).optional(),
  none: z$2.lazy(() => SalesTransactionsWhereInputSchema).optional()
}).strict();
var LeftoverItemListRelationFilterSchema = z$2.object({
  every: z$2.lazy(() => LeftoverItemWhereInputSchema).optional(),
  some: z$2.lazy(() => LeftoverItemWhereInputSchema).optional(),
  none: z$2.lazy(() => LeftoverItemWhereInputSchema).optional()
}).strict();
var WasteRecordListRelationFilterSchema = z$2.object({
  every: z$2.lazy(() => WasteRecordWhereInputSchema).optional(),
  some: z$2.lazy(() => WasteRecordWhereInputSchema).optional(),
  none: z$2.lazy(() => WasteRecordWhereInputSchema).optional()
}).strict();
var ProductionPlanListRelationFilterSchema = z$2.object({
  every: z$2.lazy(() => ProductionPlanWhereInputSchema).optional(),
  some: z$2.lazy(() => ProductionPlanWhereInputSchema).optional(),
  none: z$2.lazy(() => ProductionPlanWhereInputSchema).optional()
}).strict();
var EquipmentListRelationFilterSchema = z$2.object({
  every: z$2.lazy(() => EquipmentWhereInputSchema).optional(),
  some: z$2.lazy(() => EquipmentWhereInputSchema).optional(),
  none: z$2.lazy(() => EquipmentWhereInputSchema).optional()
}).strict();
var QualityChecklistListRelationFilterSchema = z$2.object({
  every: z$2.lazy(() => QualityChecklistWhereInputSchema).optional(),
  some: z$2.lazy(() => QualityChecklistWhereInputSchema).optional(),
  none: z$2.lazy(() => QualityChecklistWhereInputSchema).optional()
}).strict();
var CustomerFeedbackListRelationFilterSchema = z$2.object({
  every: z$2.lazy(() => CustomerFeedbackWhereInputSchema).optional(),
  some: z$2.lazy(() => CustomerFeedbackWhereInputSchema).optional(),
  none: z$2.lazy(() => CustomerFeedbackWhereInputSchema).optional()
}).strict();
var CookBookOrderByRelationAggregateInputSchema = z$2.object({
  _count: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var OrderOrderByRelationAggregateInputSchema = z$2.object({
  _count: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var MenuOrderByRelationAggregateInputSchema = z$2.object({
  _count: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var SalesTransactionsOrderByRelationAggregateInputSchema = z$2.object({
  _count: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var LeftoverItemOrderByRelationAggregateInputSchema = z$2.object({
  _count: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var WasteRecordOrderByRelationAggregateInputSchema = z$2.object({
  _count: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var ProductionPlanOrderByRelationAggregateInputSchema = z$2.object({
  _count: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var EquipmentOrderByRelationAggregateInputSchema = z$2.object({
  _count: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var QualityChecklistOrderByRelationAggregateInputSchema = z$2.object({
  _count: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var CustomerFeedbackOrderByRelationAggregateInputSchema = z$2.object({
  _count: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var RestaurantCountOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  name: z$2.lazy(() => SortOrderSchema).optional(),
  imageUrl: z$2.lazy(() => SortOrderSchema).optional(),
  address: z$2.lazy(() => SortOrderSchema).optional(),
  city: z$2.lazy(() => SortOrderSchema).optional(),
  zipCode: z$2.lazy(() => SortOrderSchema).optional(),
  state: z$2.lazy(() => SortOrderSchema).optional(),
  owner: z$2.lazy(() => SortOrderSchema).optional(),
  organizationId: z$2.lazy(() => SortOrderSchema).optional(),
  foodCost: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional(),
  isDeleted: z$2.lazy(() => SortOrderSchema).optional(),
  deleted: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var RestaurantAvgOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  organizationId: z$2.lazy(() => SortOrderSchema).optional(),
  foodCost: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var RestaurantMaxOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  name: z$2.lazy(() => SortOrderSchema).optional(),
  imageUrl: z$2.lazy(() => SortOrderSchema).optional(),
  address: z$2.lazy(() => SortOrderSchema).optional(),
  city: z$2.lazy(() => SortOrderSchema).optional(),
  zipCode: z$2.lazy(() => SortOrderSchema).optional(),
  state: z$2.lazy(() => SortOrderSchema).optional(),
  owner: z$2.lazy(() => SortOrderSchema).optional(),
  organizationId: z$2.lazy(() => SortOrderSchema).optional(),
  foodCost: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional(),
  isDeleted: z$2.lazy(() => SortOrderSchema).optional(),
  deleted: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var RestaurantMinOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  name: z$2.lazy(() => SortOrderSchema).optional(),
  imageUrl: z$2.lazy(() => SortOrderSchema).optional(),
  address: z$2.lazy(() => SortOrderSchema).optional(),
  city: z$2.lazy(() => SortOrderSchema).optional(),
  zipCode: z$2.lazy(() => SortOrderSchema).optional(),
  state: z$2.lazy(() => SortOrderSchema).optional(),
  owner: z$2.lazy(() => SortOrderSchema).optional(),
  organizationId: z$2.lazy(() => SortOrderSchema).optional(),
  foodCost: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional(),
  isDeleted: z$2.lazy(() => SortOrderSchema).optional(),
  deleted: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var RestaurantSumOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  organizationId: z$2.lazy(() => SortOrderSchema).optional(),
  foodCost: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var EnumUserRoleFilterSchema = z$2.object({
  equals: z$2.lazy(() => UserRoleSchema).optional(),
  in: z$2.lazy(() => UserRoleSchema).array().optional(),
  notIn: z$2.lazy(() => UserRoleSchema).array().optional(),
  not: z$2.union([z$2.lazy(() => UserRoleSchema), z$2.lazy(() => NestedEnumUserRoleFilterSchema)]).optional()
}).strict();
var RestaurantNullableRelationFilterSchema = z$2.object({
  is: z$2.lazy(() => RestaurantWhereInputSchema).optional().nullable(),
  isNot: z$2.lazy(() => RestaurantWhereInputSchema).optional().nullable()
}).strict();
var ShiftListRelationFilterSchema = z$2.object({
  every: z$2.lazy(() => ShiftWhereInputSchema).optional(),
  some: z$2.lazy(() => ShiftWhereInputSchema).optional(),
  none: z$2.lazy(() => ShiftWhereInputSchema).optional()
}).strict();
var PrepItemListRelationFilterSchema = z$2.object({
  every: z$2.lazy(() => PrepItemWhereInputSchema).optional(),
  some: z$2.lazy(() => PrepItemWhereInputSchema).optional(),
  none: z$2.lazy(() => PrepItemWhereInputSchema).optional()
}).strict();
var InventoryItemListRelationFilterSchema = z$2.object({
  every: z$2.lazy(() => InventoryItemWhereInputSchema).optional(),
  some: z$2.lazy(() => InventoryItemWhereInputSchema).optional(),
  none: z$2.lazy(() => InventoryItemWhereInputSchema).optional()
}).strict();
var SessionListRelationFilterSchema = z$2.object({
  every: z$2.lazy(() => SessionWhereInputSchema).optional(),
  some: z$2.lazy(() => SessionWhereInputSchema).optional(),
  none: z$2.lazy(() => SessionWhereInputSchema).optional()
}).strict();
var PasswordResetListRelationFilterSchema = z$2.object({
  every: z$2.lazy(() => PasswordResetWhereInputSchema).optional(),
  some: z$2.lazy(() => PasswordResetWhereInputSchema).optional(),
  none: z$2.lazy(() => PasswordResetWhereInputSchema).optional()
}).strict();
var AvailabilityListRelationFilterSchema = z$2.object({
  every: z$2.lazy(() => AvailabilityWhereInputSchema).optional(),
  some: z$2.lazy(() => AvailabilityWhereInputSchema).optional(),
  none: z$2.lazy(() => AvailabilityWhereInputSchema).optional()
}).strict();
var SchedulingConstraintListRelationFilterSchema = z$2.object({
  every: z$2.lazy(() => SchedulingConstraintWhereInputSchema).optional(),
  some: z$2.lazy(() => SchedulingConstraintWhereInputSchema).optional(),
  none: z$2.lazy(() => SchedulingConstraintWhereInputSchema).optional()
}).strict();
var InventoryWithdrawalListRelationFilterSchema = z$2.object({
  every: z$2.lazy(() => InventoryWithdrawalWhereInputSchema).optional(),
  some: z$2.lazy(() => InventoryWithdrawalWhereInputSchema).optional(),
  none: z$2.lazy(() => InventoryWithdrawalWhereInputSchema).optional()
}).strict();
var RecipeVersionListRelationFilterSchema = z$2.object({
  every: z$2.lazy(() => RecipeVersionWhereInputSchema).optional(),
  some: z$2.lazy(() => RecipeVersionWhereInputSchema).optional(),
  none: z$2.lazy(() => RecipeVersionWhereInputSchema).optional()
}).strict();
var ShiftOrderByRelationAggregateInputSchema = z$2.object({
  _count: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var PrepItemOrderByRelationAggregateInputSchema = z$2.object({
  _count: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var InventoryItemOrderByRelationAggregateInputSchema = z$2.object({
  _count: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var SessionOrderByRelationAggregateInputSchema = z$2.object({
  _count: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var PasswordResetOrderByRelationAggregateInputSchema = z$2.object({
  _count: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var AvailabilityOrderByRelationAggregateInputSchema = z$2.object({
  _count: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var SchedulingConstraintOrderByRelationAggregateInputSchema = z$2.object({
  _count: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var InventoryWithdrawalOrderByRelationAggregateInputSchema = z$2.object({
  _count: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var RecipeVersionOrderByRelationAggregateInputSchema = z$2.object({
  _count: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var UserCountOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  email: z$2.lazy(() => SortOrderSchema).optional(),
  sub: z$2.lazy(() => SortOrderSchema).optional(),
  passwordHash: z$2.lazy(() => SortOrderSchema).optional(),
  firstName: z$2.lazy(() => SortOrderSchema).optional(),
  lastName: z$2.lazy(() => SortOrderSchema).optional(),
  profileImage: z$2.lazy(() => SortOrderSchema).optional(),
  verified: z$2.lazy(() => SortOrderSchema).optional(),
  role: z$2.lazy(() => SortOrderSchema).optional(),
  organizationId: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var UserAvgOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  sub: z$2.lazy(() => SortOrderSchema).optional(),
  organizationId: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var UserMaxOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  email: z$2.lazy(() => SortOrderSchema).optional(),
  sub: z$2.lazy(() => SortOrderSchema).optional(),
  passwordHash: z$2.lazy(() => SortOrderSchema).optional(),
  firstName: z$2.lazy(() => SortOrderSchema).optional(),
  lastName: z$2.lazy(() => SortOrderSchema).optional(),
  profileImage: z$2.lazy(() => SortOrderSchema).optional(),
  verified: z$2.lazy(() => SortOrderSchema).optional(),
  role: z$2.lazy(() => SortOrderSchema).optional(),
  organizationId: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var UserMinOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  email: z$2.lazy(() => SortOrderSchema).optional(),
  sub: z$2.lazy(() => SortOrderSchema).optional(),
  passwordHash: z$2.lazy(() => SortOrderSchema).optional(),
  firstName: z$2.lazy(() => SortOrderSchema).optional(),
  lastName: z$2.lazy(() => SortOrderSchema).optional(),
  profileImage: z$2.lazy(() => SortOrderSchema).optional(),
  verified: z$2.lazy(() => SortOrderSchema).optional(),
  role: z$2.lazy(() => SortOrderSchema).optional(),
  organizationId: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var UserSumOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  sub: z$2.lazy(() => SortOrderSchema).optional(),
  organizationId: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var EnumUserRoleWithAggregatesFilterSchema = z$2.object({
  equals: z$2.lazy(() => UserRoleSchema).optional(),
  in: z$2.lazy(() => UserRoleSchema).array().optional(),
  notIn: z$2.lazy(() => UserRoleSchema).array().optional(),
  not: z$2.union([z$2.lazy(() => UserRoleSchema), z$2.lazy(() => NestedEnumUserRoleWithAggregatesFilterSchema)]).optional(),
  _count: z$2.lazy(() => NestedIntFilterSchema).optional(),
  _min: z$2.lazy(() => NestedEnumUserRoleFilterSchema).optional(),
  _max: z$2.lazy(() => NestedEnumUserRoleFilterSchema).optional()
}).strict();
var SessionCountOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  userId: z$2.lazy(() => SortOrderSchema).optional(),
  code: z$2.lazy(() => SortOrderSchema).optional(),
  token: z$2.lazy(() => SortOrderSchema).optional(),
  expiresAt: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var SessionAvgOrderByAggregateInputSchema = z$2.object({
  userId: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var SessionMaxOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  userId: z$2.lazy(() => SortOrderSchema).optional(),
  code: z$2.lazy(() => SortOrderSchema).optional(),
  token: z$2.lazy(() => SortOrderSchema).optional(),
  expiresAt: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var SessionMinOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  userId: z$2.lazy(() => SortOrderSchema).optional(),
  code: z$2.lazy(() => SortOrderSchema).optional(),
  token: z$2.lazy(() => SortOrderSchema).optional(),
  expiresAt: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var SessionSumOrderByAggregateInputSchema = z$2.object({
  userId: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var CookBookCountOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  name: z$2.lazy(() => SortOrderSchema).optional(),
  imageUrl: z$2.lazy(() => SortOrderSchema).optional(),
  category: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var CookBookAvgOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var CookBookMaxOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  name: z$2.lazy(() => SortOrderSchema).optional(),
  imageUrl: z$2.lazy(() => SortOrderSchema).optional(),
  category: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var CookBookMinOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  name: z$2.lazy(() => SortOrderSchema).optional(),
  imageUrl: z$2.lazy(() => SortOrderSchema).optional(),
  category: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var CookBookSumOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var CookBookRelationFilterSchema = z$2.object({
  is: z$2.lazy(() => CookBookWhereInputSchema).optional(),
  isNot: z$2.lazy(() => CookBookWhereInputSchema).optional()
}).strict();
var FoodCostHistoryListRelationFilterSchema = z$2.object({
  every: z$2.lazy(() => FoodCostHistoryWhereInputSchema).optional(),
  some: z$2.lazy(() => FoodCostHistoryWhereInputSchema).optional(),
  none: z$2.lazy(() => FoodCostHistoryWhereInputSchema).optional()
}).strict();
var PrepHistoryListRelationFilterSchema = z$2.object({
  every: z$2.lazy(() => PrepHistoryWhereInputSchema).optional(),
  some: z$2.lazy(() => PrepHistoryWhereInputSchema).optional(),
  none: z$2.lazy(() => PrepHistoryWhereInputSchema).optional()
}).strict();
var PrepBoardListRelationFilterSchema = z$2.object({
  every: z$2.lazy(() => PrepBoardWhereInputSchema).optional(),
  some: z$2.lazy(() => PrepBoardWhereInputSchema).optional(),
  none: z$2.lazy(() => PrepBoardWhereInputSchema).optional()
}).strict();
var MenuItemRecipeListRelationFilterSchema = z$2.object({
  every: z$2.lazy(() => MenuItemRecipeWhereInputSchema).optional(),
  some: z$2.lazy(() => MenuItemRecipeWhereInputSchema).optional(),
  none: z$2.lazy(() => MenuItemRecipeWhereInputSchema).optional()
}).strict();
var RecipeTagListRelationFilterSchema = z$2.object({
  every: z$2.lazy(() => RecipeTagWhereInputSchema).optional(),
  some: z$2.lazy(() => RecipeTagWhereInputSchema).optional(),
  none: z$2.lazy(() => RecipeTagWhereInputSchema).optional()
}).strict();
var DietaryRestrictionListRelationFilterSchema = z$2.object({
  every: z$2.lazy(() => DietaryRestrictionWhereInputSchema).optional(),
  some: z$2.lazy(() => DietaryRestrictionWhereInputSchema).optional(),
  none: z$2.lazy(() => DietaryRestrictionWhereInputSchema).optional()
}).strict();
var FoodCostHistoryOrderByRelationAggregateInputSchema = z$2.object({
  _count: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var PrepHistoryOrderByRelationAggregateInputSchema = z$2.object({
  _count: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var PrepBoardOrderByRelationAggregateInputSchema = z$2.object({
  _count: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var MenuItemRecipeOrderByRelationAggregateInputSchema = z$2.object({
  _count: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var RecipeTagOrderByRelationAggregateInputSchema = z$2.object({
  _count: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var DietaryRestrictionOrderByRelationAggregateInputSchema = z$2.object({
  _count: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var RecipeCountOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  name: z$2.lazy(() => SortOrderSchema).optional(),
  imageUrl: z$2.lazy(() => SortOrderSchema).optional(),
  description: z$2.lazy(() => SortOrderSchema).optional(),
  servings: z$2.lazy(() => SortOrderSchema).optional(),
  cookTime: z$2.lazy(() => SortOrderSchema).optional(),
  prepTime: z$2.lazy(() => SortOrderSchema).optional(),
  frequency: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional(),
  cookBookId: z$2.lazy(() => SortOrderSchema).optional(),
  foodCost: z$2.lazy(() => SortOrderSchema).optional(),
  isDeleted: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var RecipeAvgOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  servings: z$2.lazy(() => SortOrderSchema).optional(),
  cookTime: z$2.lazy(() => SortOrderSchema).optional(),
  prepTime: z$2.lazy(() => SortOrderSchema).optional(),
  frequency: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional(),
  cookBookId: z$2.lazy(() => SortOrderSchema).optional(),
  foodCost: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var RecipeMaxOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  name: z$2.lazy(() => SortOrderSchema).optional(),
  description: z$2.lazy(() => SortOrderSchema).optional(),
  servings: z$2.lazy(() => SortOrderSchema).optional(),
  cookTime: z$2.lazy(() => SortOrderSchema).optional(),
  prepTime: z$2.lazy(() => SortOrderSchema).optional(),
  frequency: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional(),
  cookBookId: z$2.lazy(() => SortOrderSchema).optional(),
  foodCost: z$2.lazy(() => SortOrderSchema).optional(),
  isDeleted: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var RecipeMinOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  name: z$2.lazy(() => SortOrderSchema).optional(),
  description: z$2.lazy(() => SortOrderSchema).optional(),
  servings: z$2.lazy(() => SortOrderSchema).optional(),
  cookTime: z$2.lazy(() => SortOrderSchema).optional(),
  prepTime: z$2.lazy(() => SortOrderSchema).optional(),
  frequency: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional(),
  cookBookId: z$2.lazy(() => SortOrderSchema).optional(),
  foodCost: z$2.lazy(() => SortOrderSchema).optional(),
  isDeleted: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var RecipeSumOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  servings: z$2.lazy(() => SortOrderSchema).optional(),
  cookTime: z$2.lazy(() => SortOrderSchema).optional(),
  prepTime: z$2.lazy(() => SortOrderSchema).optional(),
  frequency: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional(),
  cookBookId: z$2.lazy(() => SortOrderSchema).optional(),
  foodCost: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var OrderItemListRelationFilterSchema = z$2.object({
  every: z$2.lazy(() => OrderItemWhereInputSchema).optional(),
  some: z$2.lazy(() => OrderItemWhereInputSchema).optional(),
  none: z$2.lazy(() => OrderItemWhereInputSchema).optional()
}).strict();
var VendorListRelationFilterSchema = z$2.object({
  every: z$2.lazy(() => VendorWhereInputSchema).optional(),
  some: z$2.lazy(() => VendorWhereInputSchema).optional(),
  none: z$2.lazy(() => VendorWhereInputSchema).optional()
}).strict();
var SupplierPriceHistoryListRelationFilterSchema = z$2.object({
  every: z$2.lazy(() => SupplierPriceHistoryWhereInputSchema).optional(),
  some: z$2.lazy(() => SupplierPriceHistoryWhereInputSchema).optional(),
  none: z$2.lazy(() => SupplierPriceHistoryWhereInputSchema).optional()
}).strict();
var DietaryRestrictionNullableRelationFilterSchema = z$2.object({
  is: z$2.lazy(() => DietaryRestrictionWhereInputSchema).optional().nullable(),
  isNot: z$2.lazy(() => DietaryRestrictionWhereInputSchema).optional().nullable()
}).strict();
var OrderItemOrderByRelationAggregateInputSchema = z$2.object({
  _count: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var VendorOrderByRelationAggregateInputSchema = z$2.object({
  _count: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var SupplierPriceHistoryOrderByRelationAggregateInputSchema = z$2.object({
  _count: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var IngredientCountOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  name: z$2.lazy(() => SortOrderSchema).optional(),
  category: z$2.lazy(() => SortOrderSchema).optional(),
  price: z$2.lazy(() => SortOrderSchema).optional(),
  dietaryRestrictionId: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var IngredientAvgOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  price: z$2.lazy(() => SortOrderSchema).optional(),
  dietaryRestrictionId: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var IngredientMaxOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  name: z$2.lazy(() => SortOrderSchema).optional(),
  category: z$2.lazy(() => SortOrderSchema).optional(),
  price: z$2.lazy(() => SortOrderSchema).optional(),
  dietaryRestrictionId: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var IngredientMinOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  name: z$2.lazy(() => SortOrderSchema).optional(),
  category: z$2.lazy(() => SortOrderSchema).optional(),
  price: z$2.lazy(() => SortOrderSchema).optional(),
  dietaryRestrictionId: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var IngredientSumOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  price: z$2.lazy(() => SortOrderSchema).optional(),
  dietaryRestrictionId: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var RecipeVersionNullableRelationFilterSchema = z$2.object({
  is: z$2.lazy(() => RecipeVersionWhereInputSchema).optional().nullable(),
  isNot: z$2.lazy(() => RecipeVersionWhereInputSchema).optional().nullable()
}).strict();
var RecipeIngredientRecipeIdIngredientIdCompoundUniqueInputSchema = z$2.object({
  recipeId: z$2.number(),
  ingredientId: z$2.number()
}).strict();
var RecipeIngredientCountOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  recipeId: z$2.lazy(() => SortOrderSchema).optional(),
  ingredientId: z$2.lazy(() => SortOrderSchema).optional(),
  quantity: z$2.lazy(() => SortOrderSchema).optional(),
  unit: z$2.lazy(() => SortOrderSchema).optional(),
  joinAt: z$2.lazy(() => SortOrderSchema).optional(),
  recipeVersionId: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var RecipeIngredientAvgOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  recipeId: z$2.lazy(() => SortOrderSchema).optional(),
  ingredientId: z$2.lazy(() => SortOrderSchema).optional(),
  quantity: z$2.lazy(() => SortOrderSchema).optional(),
  recipeVersionId: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var RecipeIngredientMaxOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  recipeId: z$2.lazy(() => SortOrderSchema).optional(),
  ingredientId: z$2.lazy(() => SortOrderSchema).optional(),
  quantity: z$2.lazy(() => SortOrderSchema).optional(),
  unit: z$2.lazy(() => SortOrderSchema).optional(),
  joinAt: z$2.lazy(() => SortOrderSchema).optional(),
  recipeVersionId: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var RecipeIngredientMinOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  recipeId: z$2.lazy(() => SortOrderSchema).optional(),
  ingredientId: z$2.lazy(() => SortOrderSchema).optional(),
  quantity: z$2.lazy(() => SortOrderSchema).optional(),
  unit: z$2.lazy(() => SortOrderSchema).optional(),
  joinAt: z$2.lazy(() => SortOrderSchema).optional(),
  recipeVersionId: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var RecipeIngredientSumOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  recipeId: z$2.lazy(() => SortOrderSchema).optional(),
  ingredientId: z$2.lazy(() => SortOrderSchema).optional(),
  quantity: z$2.lazy(() => SortOrderSchema).optional(),
  recipeVersionId: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var RecipeInstructionRecipeIdStepNumberCompoundUniqueInputSchema = z$2.object({
  recipeId: z$2.number(),
  stepNumber: z$2.number()
}).strict();
var RecipeInstructionCountOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  recipeId: z$2.lazy(() => SortOrderSchema).optional(),
  stepNumber: z$2.lazy(() => SortOrderSchema).optional(),
  instruction: z$2.lazy(() => SortOrderSchema).optional(),
  imageUrl: z$2.lazy(() => SortOrderSchema).optional(),
  recipeVersionId: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var RecipeInstructionAvgOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  recipeId: z$2.lazy(() => SortOrderSchema).optional(),
  stepNumber: z$2.lazy(() => SortOrderSchema).optional(),
  recipeVersionId: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var RecipeInstructionMaxOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  recipeId: z$2.lazy(() => SortOrderSchema).optional(),
  stepNumber: z$2.lazy(() => SortOrderSchema).optional(),
  instruction: z$2.lazy(() => SortOrderSchema).optional(),
  imageUrl: z$2.lazy(() => SortOrderSchema).optional(),
  recipeVersionId: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var RecipeInstructionMinOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  recipeId: z$2.lazy(() => SortOrderSchema).optional(),
  stepNumber: z$2.lazy(() => SortOrderSchema).optional(),
  instruction: z$2.lazy(() => SortOrderSchema).optional(),
  imageUrl: z$2.lazy(() => SortOrderSchema).optional(),
  recipeVersionId: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var RecipeInstructionSumOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  recipeId: z$2.lazy(() => SortOrderSchema).optional(),
  stepNumber: z$2.lazy(() => SortOrderSchema).optional(),
  recipeVersionId: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var InventoryCountOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var InventoryAvgOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var InventoryMaxOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var InventoryMinOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var InventorySumOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var InventoryRelationFilterSchema = z$2.object({
  is: z$2.lazy(() => InventoryWhereInputSchema).optional(),
  isNot: z$2.lazy(() => InventoryWhereInputSchema).optional()
}).strict();
var InventoryItemCountOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  inventoryId: z$2.lazy(() => SortOrderSchema).optional(),
  ingredientId: z$2.lazy(() => SortOrderSchema).optional(),
  quantity: z$2.lazy(() => SortOrderSchema).optional(),
  unit: z$2.lazy(() => SortOrderSchema).optional(),
  minQuantity: z$2.lazy(() => SortOrderSchema).optional(),
  restockThreshold: z$2.lazy(() => SortOrderSchema).optional(),
  lastUpdatedById: z$2.lazy(() => SortOrderSchema).optional(),
  lastUpdated: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var InventoryItemAvgOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  inventoryId: z$2.lazy(() => SortOrderSchema).optional(),
  ingredientId: z$2.lazy(() => SortOrderSchema).optional(),
  quantity: z$2.lazy(() => SortOrderSchema).optional(),
  minQuantity: z$2.lazy(() => SortOrderSchema).optional(),
  restockThreshold: z$2.lazy(() => SortOrderSchema).optional(),
  lastUpdatedById: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var InventoryItemMaxOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  inventoryId: z$2.lazy(() => SortOrderSchema).optional(),
  ingredientId: z$2.lazy(() => SortOrderSchema).optional(),
  quantity: z$2.lazy(() => SortOrderSchema).optional(),
  unit: z$2.lazy(() => SortOrderSchema).optional(),
  minQuantity: z$2.lazy(() => SortOrderSchema).optional(),
  restockThreshold: z$2.lazy(() => SortOrderSchema).optional(),
  lastUpdatedById: z$2.lazy(() => SortOrderSchema).optional(),
  lastUpdated: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var InventoryItemMinOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  inventoryId: z$2.lazy(() => SortOrderSchema).optional(),
  ingredientId: z$2.lazy(() => SortOrderSchema).optional(),
  quantity: z$2.lazy(() => SortOrderSchema).optional(),
  unit: z$2.lazy(() => SortOrderSchema).optional(),
  minQuantity: z$2.lazy(() => SortOrderSchema).optional(),
  restockThreshold: z$2.lazy(() => SortOrderSchema).optional(),
  lastUpdatedById: z$2.lazy(() => SortOrderSchema).optional(),
  lastUpdated: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var InventoryItemSumOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  inventoryId: z$2.lazy(() => SortOrderSchema).optional(),
  ingredientId: z$2.lazy(() => SortOrderSchema).optional(),
  quantity: z$2.lazy(() => SortOrderSchema).optional(),
  minQuantity: z$2.lazy(() => SortOrderSchema).optional(),
  restockThreshold: z$2.lazy(() => SortOrderSchema).optional(),
  lastUpdatedById: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var EnumOrderStatusFilterSchema = z$2.object({
  equals: z$2.lazy(() => OrderStatusSchema).optional(),
  in: z$2.lazy(() => OrderStatusSchema).array().optional(),
  notIn: z$2.lazy(() => OrderStatusSchema).array().optional(),
  not: z$2.union([z$2.lazy(() => OrderStatusSchema), z$2.lazy(() => NestedEnumOrderStatusFilterSchema)]).optional()
}).strict();
var OrderCountOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional(),
  vendorId: z$2.lazy(() => SortOrderSchema).optional(),
  status: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var OrderAvgOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional(),
  vendorId: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var OrderMaxOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional(),
  vendorId: z$2.lazy(() => SortOrderSchema).optional(),
  status: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var OrderMinOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional(),
  vendorId: z$2.lazy(() => SortOrderSchema).optional(),
  status: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var OrderSumOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional(),
  vendorId: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var EnumOrderStatusWithAggregatesFilterSchema = z$2.object({
  equals: z$2.lazy(() => OrderStatusSchema).optional(),
  in: z$2.lazy(() => OrderStatusSchema).array().optional(),
  notIn: z$2.lazy(() => OrderStatusSchema).array().optional(),
  not: z$2.union([z$2.lazy(() => OrderStatusSchema), z$2.lazy(() => NestedEnumOrderStatusWithAggregatesFilterSchema)]).optional(),
  _count: z$2.lazy(() => NestedIntFilterSchema).optional(),
  _min: z$2.lazy(() => NestedEnumOrderStatusFilterSchema).optional(),
  _max: z$2.lazy(() => NestedEnumOrderStatusFilterSchema).optional()
}).strict();
var OrderRelationFilterSchema = z$2.object({
  is: z$2.lazy(() => OrderWhereInputSchema).optional(),
  isNot: z$2.lazy(() => OrderWhereInputSchema).optional()
}).strict();
var OrderItemCountOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  orderId: z$2.lazy(() => SortOrderSchema).optional(),
  ingredientId: z$2.lazy(() => SortOrderSchema).optional(),
  quantity: z$2.lazy(() => SortOrderSchema).optional(),
  unit: z$2.lazy(() => SortOrderSchema).optional(),
  price: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var OrderItemAvgOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  orderId: z$2.lazy(() => SortOrderSchema).optional(),
  ingredientId: z$2.lazy(() => SortOrderSchema).optional(),
  quantity: z$2.lazy(() => SortOrderSchema).optional(),
  price: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var OrderItemMaxOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  orderId: z$2.lazy(() => SortOrderSchema).optional(),
  ingredientId: z$2.lazy(() => SortOrderSchema).optional(),
  quantity: z$2.lazy(() => SortOrderSchema).optional(),
  unit: z$2.lazy(() => SortOrderSchema).optional(),
  price: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var OrderItemMinOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  orderId: z$2.lazy(() => SortOrderSchema).optional(),
  ingredientId: z$2.lazy(() => SortOrderSchema).optional(),
  quantity: z$2.lazy(() => SortOrderSchema).optional(),
  unit: z$2.lazy(() => SortOrderSchema).optional(),
  price: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var OrderItemSumOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  orderId: z$2.lazy(() => SortOrderSchema).optional(),
  ingredientId: z$2.lazy(() => SortOrderSchema).optional(),
  quantity: z$2.lazy(() => SortOrderSchema).optional(),
  price: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var VendorCountOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  name: z$2.lazy(() => SortOrderSchema).optional(),
  contact: z$2.lazy(() => SortOrderSchema).optional(),
  email: z$2.lazy(() => SortOrderSchema).optional(),
  phone: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var VendorAvgOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var VendorMaxOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  name: z$2.lazy(() => SortOrderSchema).optional(),
  contact: z$2.lazy(() => SortOrderSchema).optional(),
  email: z$2.lazy(() => SortOrderSchema).optional(),
  phone: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var VendorMinOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  name: z$2.lazy(() => SortOrderSchema).optional(),
  contact: z$2.lazy(() => SortOrderSchema).optional(),
  email: z$2.lazy(() => SortOrderSchema).optional(),
  phone: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var VendorSumOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var EnumShiftStatusFilterSchema = z$2.object({
  equals: z$2.lazy(() => ShiftStatusSchema).optional(),
  in: z$2.lazy(() => ShiftStatusSchema).array().optional(),
  notIn: z$2.lazy(() => ShiftStatusSchema).array().optional(),
  not: z$2.union([z$2.lazy(() => ShiftStatusSchema), z$2.lazy(() => NestedEnumShiftStatusFilterSchema)]).optional()
}).strict();
var ShiftTaskListRelationFilterSchema = z$2.object({
  every: z$2.lazy(() => ShiftTaskWhereInputSchema).optional(),
  some: z$2.lazy(() => ShiftTaskWhereInputSchema).optional(),
  none: z$2.lazy(() => ShiftTaskWhereInputSchema).optional()
}).strict();
var ShiftTaskOrderByRelationAggregateInputSchema = z$2.object({
  _count: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var ShiftCountOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  userId: z$2.lazy(() => SortOrderSchema).optional(),
  startTime: z$2.lazy(() => SortOrderSchema).optional(),
  endTime: z$2.lazy(() => SortOrderSchema).optional(),
  status: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var ShiftAvgOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  userId: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var ShiftMaxOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  userId: z$2.lazy(() => SortOrderSchema).optional(),
  startTime: z$2.lazy(() => SortOrderSchema).optional(),
  endTime: z$2.lazy(() => SortOrderSchema).optional(),
  status: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var ShiftMinOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  userId: z$2.lazy(() => SortOrderSchema).optional(),
  startTime: z$2.lazy(() => SortOrderSchema).optional(),
  endTime: z$2.lazy(() => SortOrderSchema).optional(),
  status: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var ShiftSumOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  userId: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var EnumShiftStatusWithAggregatesFilterSchema = z$2.object({
  equals: z$2.lazy(() => ShiftStatusSchema).optional(),
  in: z$2.lazy(() => ShiftStatusSchema).array().optional(),
  notIn: z$2.lazy(() => ShiftStatusSchema).array().optional(),
  not: z$2.union([z$2.lazy(() => ShiftStatusSchema), z$2.lazy(() => NestedEnumShiftStatusWithAggregatesFilterSchema)]).optional(),
  _count: z$2.lazy(() => NestedIntFilterSchema).optional(),
  _min: z$2.lazy(() => NestedEnumShiftStatusFilterSchema).optional(),
  _max: z$2.lazy(() => NestedEnumShiftStatusFilterSchema).optional()
}).strict();
var EnumPrepStatusFilterSchema = z$2.object({
  equals: z$2.lazy(() => PrepStatusSchema).optional(),
  in: z$2.lazy(() => PrepStatusSchema).array().optional(),
  notIn: z$2.lazy(() => PrepStatusSchema).array().optional(),
  not: z$2.union([z$2.lazy(() => PrepStatusSchema), z$2.lazy(() => NestedEnumPrepStatusFilterSchema)]).optional()
}).strict();
var PrepBoardCountOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  name: z$2.lazy(() => SortOrderSchema).optional(),
  status: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var PrepBoardAvgOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var PrepBoardMaxOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  name: z$2.lazy(() => SortOrderSchema).optional(),
  status: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var PrepBoardMinOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  name: z$2.lazy(() => SortOrderSchema).optional(),
  status: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var PrepBoardSumOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var EnumPrepStatusWithAggregatesFilterSchema = z$2.object({
  equals: z$2.lazy(() => PrepStatusSchema).optional(),
  in: z$2.lazy(() => PrepStatusSchema).array().optional(),
  notIn: z$2.lazy(() => PrepStatusSchema).array().optional(),
  not: z$2.union([z$2.lazy(() => PrepStatusSchema), z$2.lazy(() => NestedEnumPrepStatusWithAggregatesFilterSchema)]).optional(),
  _count: z$2.lazy(() => NestedIntFilterSchema).optional(),
  _min: z$2.lazy(() => NestedEnumPrepStatusFilterSchema).optional(),
  _max: z$2.lazy(() => NestedEnumPrepStatusFilterSchema).optional()
}).strict();
var PrepBoardRelationFilterSchema = z$2.object({
  is: z$2.lazy(() => PrepBoardWhereInputSchema).optional(),
  isNot: z$2.lazy(() => PrepBoardWhereInputSchema).optional()
}).strict();
var PrepItemCountOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  prepBoardId: z$2.lazy(() => SortOrderSchema).optional(),
  recipeId: z$2.lazy(() => SortOrderSchema).optional(),
  quantity: z$2.lazy(() => SortOrderSchema).optional(),
  status: z$2.lazy(() => SortOrderSchema).optional(),
  assignedToId: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var PrepItemAvgOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  prepBoardId: z$2.lazy(() => SortOrderSchema).optional(),
  recipeId: z$2.lazy(() => SortOrderSchema).optional(),
  quantity: z$2.lazy(() => SortOrderSchema).optional(),
  assignedToId: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var PrepItemMaxOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  prepBoardId: z$2.lazy(() => SortOrderSchema).optional(),
  recipeId: z$2.lazy(() => SortOrderSchema).optional(),
  quantity: z$2.lazy(() => SortOrderSchema).optional(),
  status: z$2.lazy(() => SortOrderSchema).optional(),
  assignedToId: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var PrepItemMinOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  prepBoardId: z$2.lazy(() => SortOrderSchema).optional(),
  recipeId: z$2.lazy(() => SortOrderSchema).optional(),
  quantity: z$2.lazy(() => SortOrderSchema).optional(),
  status: z$2.lazy(() => SortOrderSchema).optional(),
  assignedToId: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var PrepItemSumOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  prepBoardId: z$2.lazy(() => SortOrderSchema).optional(),
  recipeId: z$2.lazy(() => SortOrderSchema).optional(),
  quantity: z$2.lazy(() => SortOrderSchema).optional(),
  assignedToId: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var PasswordResetCountOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  token: z$2.lazy(() => SortOrderSchema).optional(),
  userId: z$2.lazy(() => SortOrderSchema).optional(),
  expiresAt: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var PasswordResetAvgOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  userId: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var PasswordResetMaxOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  token: z$2.lazy(() => SortOrderSchema).optional(),
  userId: z$2.lazy(() => SortOrderSchema).optional(),
  expiresAt: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var PasswordResetMinOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  token: z$2.lazy(() => SortOrderSchema).optional(),
  userId: z$2.lazy(() => SortOrderSchema).optional(),
  expiresAt: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var PasswordResetSumOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  userId: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var MenuCategoryListRelationFilterSchema = z$2.object({
  every: z$2.lazy(() => MenuCategoryWhereInputSchema).optional(),
  some: z$2.lazy(() => MenuCategoryWhereInputSchema).optional(),
  none: z$2.lazy(() => MenuCategoryWhereInputSchema).optional()
}).strict();
var MenuCategoryOrderByRelationAggregateInputSchema = z$2.object({
  _count: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var MenuCountOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  name: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var MenuAvgOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var MenuMaxOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  name: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var MenuMinOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  name: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var MenuSumOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  restaurantId: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var MenuItemRecipeMenuItemIdRecipeIdCompoundUniqueInputSchema = z$2.object({
  menuItemId: z$2.number(),
  recipeId: z$2.number()
}).strict();
var MenuItemRecipeCountOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  menuItemId: z$2.lazy(() => SortOrderSchema).optional(),
  recipeId: z$2.lazy(() => SortOrderSchema).optional(),
  joinAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var MenuItemRecipeAvgOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  menuItemId: z$2.lazy(() => SortOrderSchema).optional(),
  recipeId: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var MenuItemRecipeMaxOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  menuItemId: z$2.lazy(() => SortOrderSchema).optional(),
  recipeId: z$2.lazy(() => SortOrderSchema).optional(),
  joinAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var MenuItemRecipeMinOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  menuItemId: z$2.lazy(() => SortOrderSchema).optional(),
  recipeId: z$2.lazy(() => SortOrderSchema).optional(),
  joinAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var MenuItemRecipeSumOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  menuItemId: z$2.lazy(() => SortOrderSchema).optional(),
  recipeId: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var IntNullableListFilterSchema = z$2.object({
  equals: z$2.number().array().optional().nullable(),
  has: z$2.number().optional().nullable(),
  hasEvery: z$2.number().array().optional(),
  hasSome: z$2.number().array().optional(),
  isEmpty: z$2.boolean().optional()
}).strict();
var FloatNullableListFilterSchema = z$2.object({
  equals: z$2.number().array().optional().nullable(),
  has: z$2.number().optional().nullable(),
  hasEvery: z$2.number().array().optional(),
  hasSome: z$2.number().array().optional(),
  isEmpty: z$2.boolean().optional()
}).strict();
var NutritionalInfoNullableRelationFilterSchema = z$2.object({
  is: z$2.lazy(() => NutritionalInfoWhereInputSchema).optional().nullable(),
  isNot: z$2.lazy(() => NutritionalInfoWhereInputSchema).optional().nullable()
}).strict();
var NutritionalRecommendationListRelationFilterSchema = z$2.object({
  every: z$2.lazy(() => NutritionalRecommendationWhereInputSchema).optional(),
  some: z$2.lazy(() => NutritionalRecommendationWhereInputSchema).optional(),
  none: z$2.lazy(() => NutritionalRecommendationWhereInputSchema).optional()
}).strict();
var MenuCategoryNullableRelationFilterSchema = z$2.object({
  is: z$2.lazy(() => MenuCategoryWhereInputSchema).optional().nullable(),
  isNot: z$2.lazy(() => MenuCategoryWhereInputSchema).optional().nullable()
}).strict();
var NutritionalRecommendationOrderByRelationAggregateInputSchema = z$2.object({
  _count: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var MenuItemCountOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  name: z$2.lazy(() => SortOrderSchema).optional(),
  description: z$2.lazy(() => SortOrderSchema).optional(),
  price: z$2.lazy(() => SortOrderSchema).optional(),
  foodCost: z$2.lazy(() => SortOrderSchema).optional(),
  recipeIds: z$2.lazy(() => SortOrderSchema).optional(),
  recipeServingsAmount: z$2.lazy(() => SortOrderSchema).optional(),
  recipeServingsCost: z$2.lazy(() => SortOrderSchema).optional(),
  allergens: z$2.lazy(() => SortOrderSchema).optional(),
  nutritionalInfoId: z$2.lazy(() => SortOrderSchema).optional(),
  menuId: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional(),
  categoryId: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var MenuItemAvgOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  price: z$2.lazy(() => SortOrderSchema).optional(),
  foodCost: z$2.lazy(() => SortOrderSchema).optional(),
  recipeIds: z$2.lazy(() => SortOrderSchema).optional(),
  recipeServingsAmount: z$2.lazy(() => SortOrderSchema).optional(),
  recipeServingsCost: z$2.lazy(() => SortOrderSchema).optional(),
  nutritionalInfoId: z$2.lazy(() => SortOrderSchema).optional(),
  menuId: z$2.lazy(() => SortOrderSchema).optional(),
  categoryId: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var MenuItemMaxOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  name: z$2.lazy(() => SortOrderSchema).optional(),
  description: z$2.lazy(() => SortOrderSchema).optional(),
  price: z$2.lazy(() => SortOrderSchema).optional(),
  foodCost: z$2.lazy(() => SortOrderSchema).optional(),
  nutritionalInfoId: z$2.lazy(() => SortOrderSchema).optional(),
  menuId: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional(),
  categoryId: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var MenuItemMinOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  name: z$2.lazy(() => SortOrderSchema).optional(),
  description: z$2.lazy(() => SortOrderSchema).optional(),
  price: z$2.lazy(() => SortOrderSchema).optional(),
  foodCost: z$2.lazy(() => SortOrderSchema).optional(),
  nutritionalInfoId: z$2.lazy(() => SortOrderSchema).optional(),
  menuId: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional(),
  categoryId: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var MenuItemSumOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  price: z$2.lazy(() => SortOrderSchema).optional(),
  foodCost: z$2.lazy(() => SortOrderSchema).optional(),
  recipeIds: z$2.lazy(() => SortOrderSchema).optional(),
  recipeServingsAmount: z$2.lazy(() => SortOrderSchema).optional(),
  recipeServingsCost: z$2.lazy(() => SortOrderSchema).optional(),
  nutritionalInfoId: z$2.lazy(() => SortOrderSchema).optional(),
  menuId: z$2.lazy(() => SortOrderSchema).optional(),
  categoryId: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var NutritionalInfoCountOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  menuItemId: z$2.lazy(() => SortOrderSchema).optional(),
  calories: z$2.lazy(() => SortOrderSchema).optional(),
  fat: z$2.lazy(() => SortOrderSchema).optional(),
  saturatedFat: z$2.lazy(() => SortOrderSchema).optional(),
  transFat: z$2.lazy(() => SortOrderSchema).optional(),
  cholesterol: z$2.lazy(() => SortOrderSchema).optional(),
  sodium: z$2.lazy(() => SortOrderSchema).optional(),
  carbohydrates: z$2.lazy(() => SortOrderSchema).optional(),
  fiber: z$2.lazy(() => SortOrderSchema).optional(),
  sugar: z$2.lazy(() => SortOrderSchema).optional(),
  protein: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var NutritionalInfoAvgOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  menuItemId: z$2.lazy(() => SortOrderSchema).optional(),
  calories: z$2.lazy(() => SortOrderSchema).optional(),
  fat: z$2.lazy(() => SortOrderSchema).optional(),
  saturatedFat: z$2.lazy(() => SortOrderSchema).optional(),
  transFat: z$2.lazy(() => SortOrderSchema).optional(),
  cholesterol: z$2.lazy(() => SortOrderSchema).optional(),
  sodium: z$2.lazy(() => SortOrderSchema).optional(),
  carbohydrates: z$2.lazy(() => SortOrderSchema).optional(),
  fiber: z$2.lazy(() => SortOrderSchema).optional(),
  sugar: z$2.lazy(() => SortOrderSchema).optional(),
  protein: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var NutritionalInfoMaxOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  menuItemId: z$2.lazy(() => SortOrderSchema).optional(),
  calories: z$2.lazy(() => SortOrderSchema).optional(),
  fat: z$2.lazy(() => SortOrderSchema).optional(),
  saturatedFat: z$2.lazy(() => SortOrderSchema).optional(),
  transFat: z$2.lazy(() => SortOrderSchema).optional(),
  cholesterol: z$2.lazy(() => SortOrderSchema).optional(),
  sodium: z$2.lazy(() => SortOrderSchema).optional(),
  carbohydrates: z$2.lazy(() => SortOrderSchema).optional(),
  fiber: z$2.lazy(() => SortOrderSchema).optional(),
  sugar: z$2.lazy(() => SortOrderSchema).optional(),
  protein: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var NutritionalInfoMinOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  menuItemId: z$2.lazy(() => SortOrderSchema).optional(),
  calories: z$2.lazy(() => SortOrderSchema).optional(),
  fat: z$2.lazy(() => SortOrderSchema).optional(),
  saturatedFat: z$2.lazy(() => SortOrderSchema).optional(),
  transFat: z$2.lazy(() => SortOrderSchema).optional(),
  cholesterol: z$2.lazy(() => SortOrderSchema).optional(),
  sodium: z$2.lazy(() => SortOrderSchema).optional(),
  carbohydrates: z$2.lazy(() => SortOrderSchema).optional(),
  fiber: z$2.lazy(() => SortOrderSchema).optional(),
  sugar: z$2.lazy(() => SortOrderSchema).optional(),
  protein: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var NutritionalInfoSumOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  menuItemId: z$2.lazy(() => SortOrderSchema).optional(),
  calories: z$2.lazy(() => SortOrderSchema).optional(),
  fat: z$2.lazy(() => SortOrderSchema).optional(),
  saturatedFat: z$2.lazy(() => SortOrderSchema).optional(),
  transFat: z$2.lazy(() => SortOrderSchema).optional(),
  cholesterol: z$2.lazy(() => SortOrderSchema).optional(),
  sodium: z$2.lazy(() => SortOrderSchema).optional(),
  carbohydrates: z$2.lazy(() => SortOrderSchema).optional(),
  fiber: z$2.lazy(() => SortOrderSchema).optional(),
  sugar: z$2.lazy(() => SortOrderSchema).optional(),
  protein: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var FoodCostHistoryCountOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  recipeId: z$2.lazy(() => SortOrderSchema).optional(),
  cost: z$2.lazy(() => SortOrderSchema).optional(),
  date: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var FoodCostHistoryAvgOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  recipeId: z$2.lazy(() => SortOrderSchema).optional(),
  cost: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var FoodCostHistoryMaxOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  recipeId: z$2.lazy(() => SortOrderSchema).optional(),
  cost: z$2.lazy(() => SortOrderSchema).optional(),
  date: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var FoodCostHistoryMinOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  recipeId: z$2.lazy(() => SortOrderSchema).optional(),
  cost: z$2.lazy(() => SortOrderSchema).optional(),
  date: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var FoodCostHistorySumOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  recipeId: z$2.lazy(() => SortOrderSchema).optional(),
  cost: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var PrepHistoryCountOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  recipeId: z$2.lazy(() => SortOrderSchema).optional(),
  quantity: z$2.lazy(() => SortOrderSchema).optional(),
  date: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var PrepHistoryAvgOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  recipeId: z$2.lazy(() => SortOrderSchema).optional(),
  quantity: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var PrepHistoryMaxOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  recipeId: z$2.lazy(() => SortOrderSchema).optional(),
  quantity: z$2.lazy(() => SortOrderSchema).optional(),
  date: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var PrepHistoryMinOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  recipeId: z$2.lazy(() => SortOrderSchema).optional(),
  quantity: z$2.lazy(() => SortOrderSchema).optional(),
  date: z$2.lazy(() => SortOrderSchema).optional(),
  createdAt: z$2.lazy(() => SortOrderSchema).optional(),
  updatedAt: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var PrepHistorySumOrderByAggregateInputSchema = z$2.object({
  id: z$2.lazy(() => SortOrderSchema).optional(),
  recipeId: z$2.lazy(() => SortOrderSchema).optional(),
  quantity: z$2.lazy(() => SortOrderSchema).optional()
}).strict();
var RestaurantCreateNestedOneWithoutSalesTransactionsInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RestaurantCreateWithoutSalesTransactionsInputSchema), z$2.lazy(() => RestaurantUncheckedCreateWithoutSalesTransactionsInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => RestaurantCreateOrConnectWithoutSalesTransactionsInputSchema).optional(),
  connect: z$2.lazy(() => RestaurantWhereUniqueInputSchema).optional()
}).strict();
var MenuItemCreateNestedOneWithoutSalesTransactionsInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => MenuItemCreateWithoutSalesTransactionsInputSchema), z$2.lazy(() => MenuItemUncheckedCreateWithoutSalesTransactionsInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => MenuItemCreateOrConnectWithoutSalesTransactionsInputSchema).optional(),
  connect: z$2.lazy(() => MenuItemWhereUniqueInputSchema).optional()
}).strict();
var NullableStringFieldUpdateOperationsInputSchema = z$2.object({
  set: z$2.string().optional().nullable()
}).strict();
var FloatFieldUpdateOperationsInputSchema = z$2.object({
  set: z$2.number().optional(),
  increment: z$2.number().optional(),
  decrement: z$2.number().optional(),
  multiply: z$2.number().optional(),
  divide: z$2.number().optional()
}).strict();
var DateTimeFieldUpdateOperationsInputSchema = z$2.object({
  set: z$2.coerce.date().optional()
}).strict();
var RestaurantUpdateOneRequiredWithoutSalesTransactionsNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RestaurantCreateWithoutSalesTransactionsInputSchema), z$2.lazy(() => RestaurantUncheckedCreateWithoutSalesTransactionsInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => RestaurantCreateOrConnectWithoutSalesTransactionsInputSchema).optional(),
  upsert: z$2.lazy(() => RestaurantUpsertWithoutSalesTransactionsInputSchema).optional(),
  connect: z$2.lazy(() => RestaurantWhereUniqueInputSchema).optional(),
  update: z$2.union([z$2.lazy(() => RestaurantUpdateToOneWithWhereWithoutSalesTransactionsInputSchema), z$2.lazy(() => RestaurantUpdateWithoutSalesTransactionsInputSchema), z$2.lazy(() => RestaurantUncheckedUpdateWithoutSalesTransactionsInputSchema)]).optional()
}).strict();
var MenuItemUpdateOneRequiredWithoutSalesTransactionsNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => MenuItemCreateWithoutSalesTransactionsInputSchema), z$2.lazy(() => MenuItemUncheckedCreateWithoutSalesTransactionsInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => MenuItemCreateOrConnectWithoutSalesTransactionsInputSchema).optional(),
  upsert: z$2.lazy(() => MenuItemUpsertWithoutSalesTransactionsInputSchema).optional(),
  connect: z$2.lazy(() => MenuItemWhereUniqueInputSchema).optional(),
  update: z$2.union([z$2.lazy(() => MenuItemUpdateToOneWithWhereWithoutSalesTransactionsInputSchema), z$2.lazy(() => MenuItemUpdateWithoutSalesTransactionsInputSchema), z$2.lazy(() => MenuItemUncheckedUpdateWithoutSalesTransactionsInputSchema)]).optional()
}).strict();
var IntFieldUpdateOperationsInputSchema = z$2.object({
  set: z$2.number().optional(),
  increment: z$2.number().optional(),
  decrement: z$2.number().optional(),
  multiply: z$2.number().optional(),
  divide: z$2.number().optional()
}).strict();
var MenuCreateNestedOneWithoutMenuCategoryInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => MenuCreateWithoutMenuCategoryInputSchema), z$2.lazy(() => MenuUncheckedCreateWithoutMenuCategoryInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => MenuCreateOrConnectWithoutMenuCategoryInputSchema).optional(),
  connect: z$2.lazy(() => MenuWhereUniqueInputSchema).optional()
}).strict();
var MenuItemCreateNestedManyWithoutCategoryInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => MenuItemCreateWithoutCategoryInputSchema), z$2.lazy(() => MenuItemCreateWithoutCategoryInputSchema).array(), z$2.lazy(() => MenuItemUncheckedCreateWithoutCategoryInputSchema), z$2.lazy(() => MenuItemUncheckedCreateWithoutCategoryInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => MenuItemCreateOrConnectWithoutCategoryInputSchema), z$2.lazy(() => MenuItemCreateOrConnectWithoutCategoryInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => MenuItemCreateManyCategoryInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => MenuItemWhereUniqueInputSchema), z$2.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional()
}).strict();
var MenuItemUncheckedCreateNestedManyWithoutCategoryInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => MenuItemCreateWithoutCategoryInputSchema), z$2.lazy(() => MenuItemCreateWithoutCategoryInputSchema).array(), z$2.lazy(() => MenuItemUncheckedCreateWithoutCategoryInputSchema), z$2.lazy(() => MenuItemUncheckedCreateWithoutCategoryInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => MenuItemCreateOrConnectWithoutCategoryInputSchema), z$2.lazy(() => MenuItemCreateOrConnectWithoutCategoryInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => MenuItemCreateManyCategoryInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => MenuItemWhereUniqueInputSchema), z$2.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional()
}).strict();
var StringFieldUpdateOperationsInputSchema = z$2.object({
  set: z$2.string().optional()
}).strict();
var BoolFieldUpdateOperationsInputSchema = z$2.object({
  set: z$2.boolean().optional()
}).strict();
var MenuUpdateOneRequiredWithoutMenuCategoryNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => MenuCreateWithoutMenuCategoryInputSchema), z$2.lazy(() => MenuUncheckedCreateWithoutMenuCategoryInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => MenuCreateOrConnectWithoutMenuCategoryInputSchema).optional(),
  upsert: z$2.lazy(() => MenuUpsertWithoutMenuCategoryInputSchema).optional(),
  connect: z$2.lazy(() => MenuWhereUniqueInputSchema).optional(),
  update: z$2.union([z$2.lazy(() => MenuUpdateToOneWithWhereWithoutMenuCategoryInputSchema), z$2.lazy(() => MenuUpdateWithoutMenuCategoryInputSchema), z$2.lazy(() => MenuUncheckedUpdateWithoutMenuCategoryInputSchema)]).optional()
}).strict();
var MenuItemUpdateManyWithoutCategoryNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => MenuItemCreateWithoutCategoryInputSchema), z$2.lazy(() => MenuItemCreateWithoutCategoryInputSchema).array(), z$2.lazy(() => MenuItemUncheckedCreateWithoutCategoryInputSchema), z$2.lazy(() => MenuItemUncheckedCreateWithoutCategoryInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => MenuItemCreateOrConnectWithoutCategoryInputSchema), z$2.lazy(() => MenuItemCreateOrConnectWithoutCategoryInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => MenuItemUpsertWithWhereUniqueWithoutCategoryInputSchema), z$2.lazy(() => MenuItemUpsertWithWhereUniqueWithoutCategoryInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => MenuItemCreateManyCategoryInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => MenuItemWhereUniqueInputSchema), z$2.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => MenuItemWhereUniqueInputSchema), z$2.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => MenuItemWhereUniqueInputSchema), z$2.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => MenuItemWhereUniqueInputSchema), z$2.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => MenuItemUpdateWithWhereUniqueWithoutCategoryInputSchema), z$2.lazy(() => MenuItemUpdateWithWhereUniqueWithoutCategoryInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => MenuItemUpdateManyWithWhereWithoutCategoryInputSchema), z$2.lazy(() => MenuItemUpdateManyWithWhereWithoutCategoryInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => MenuItemScalarWhereInputSchema), z$2.lazy(() => MenuItemScalarWhereInputSchema).array()]).optional()
}).strict();
var MenuItemUncheckedUpdateManyWithoutCategoryNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => MenuItemCreateWithoutCategoryInputSchema), z$2.lazy(() => MenuItemCreateWithoutCategoryInputSchema).array(), z$2.lazy(() => MenuItemUncheckedCreateWithoutCategoryInputSchema), z$2.lazy(() => MenuItemUncheckedCreateWithoutCategoryInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => MenuItemCreateOrConnectWithoutCategoryInputSchema), z$2.lazy(() => MenuItemCreateOrConnectWithoutCategoryInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => MenuItemUpsertWithWhereUniqueWithoutCategoryInputSchema), z$2.lazy(() => MenuItemUpsertWithWhereUniqueWithoutCategoryInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => MenuItemCreateManyCategoryInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => MenuItemWhereUniqueInputSchema), z$2.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => MenuItemWhereUniqueInputSchema), z$2.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => MenuItemWhereUniqueInputSchema), z$2.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => MenuItemWhereUniqueInputSchema), z$2.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => MenuItemUpdateWithWhereUniqueWithoutCategoryInputSchema), z$2.lazy(() => MenuItemUpdateWithWhereUniqueWithoutCategoryInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => MenuItemUpdateManyWithWhereWithoutCategoryInputSchema), z$2.lazy(() => MenuItemUpdateManyWithWhereWithoutCategoryInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => MenuItemScalarWhereInputSchema), z$2.lazy(() => MenuItemScalarWhereInputSchema).array()]).optional()
}).strict();
var RecipeCreateNestedOneWithoutVersionsInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeCreateWithoutVersionsInputSchema), z$2.lazy(() => RecipeUncheckedCreateWithoutVersionsInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => RecipeCreateOrConnectWithoutVersionsInputSchema).optional(),
  connect: z$2.lazy(() => RecipeWhereUniqueInputSchema).optional()
}).strict();
var RecipeIngredientCreateNestedManyWithoutRecipeVersionInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeIngredientCreateWithoutRecipeVersionInputSchema), z$2.lazy(() => RecipeIngredientCreateWithoutRecipeVersionInputSchema).array(), z$2.lazy(() => RecipeIngredientUncheckedCreateWithoutRecipeVersionInputSchema), z$2.lazy(() => RecipeIngredientUncheckedCreateWithoutRecipeVersionInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => RecipeIngredientCreateOrConnectWithoutRecipeVersionInputSchema), z$2.lazy(() => RecipeIngredientCreateOrConnectWithoutRecipeVersionInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => RecipeIngredientCreateManyRecipeVersionInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => RecipeIngredientWhereUniqueInputSchema), z$2.lazy(() => RecipeIngredientWhereUniqueInputSchema).array()]).optional()
}).strict();
var RecipeInstructionCreateNestedManyWithoutRecipeVersionInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeInstructionCreateWithoutRecipeVersionInputSchema), z$2.lazy(() => RecipeInstructionCreateWithoutRecipeVersionInputSchema).array(), z$2.lazy(() => RecipeInstructionUncheckedCreateWithoutRecipeVersionInputSchema), z$2.lazy(() => RecipeInstructionUncheckedCreateWithoutRecipeVersionInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => RecipeInstructionCreateOrConnectWithoutRecipeVersionInputSchema), z$2.lazy(() => RecipeInstructionCreateOrConnectWithoutRecipeVersionInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => RecipeInstructionCreateManyRecipeVersionInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => RecipeInstructionWhereUniqueInputSchema), z$2.lazy(() => RecipeInstructionWhereUniqueInputSchema).array()]).optional()
}).strict();
var UserCreateNestedOneWithoutRecipeVersionsCreatedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => UserCreateWithoutRecipeVersionsCreatedInputSchema), z$2.lazy(() => UserUncheckedCreateWithoutRecipeVersionsCreatedInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => UserCreateOrConnectWithoutRecipeVersionsCreatedInputSchema).optional(),
  connect: z$2.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();
var UserCreateNestedOneWithoutRecipeVersionsApprovedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => UserCreateWithoutRecipeVersionsApprovedInputSchema), z$2.lazy(() => UserUncheckedCreateWithoutRecipeVersionsApprovedInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => UserCreateOrConnectWithoutRecipeVersionsApprovedInputSchema).optional(),
  connect: z$2.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();
var RecipeIngredientUncheckedCreateNestedManyWithoutRecipeVersionInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeIngredientCreateWithoutRecipeVersionInputSchema), z$2.lazy(() => RecipeIngredientCreateWithoutRecipeVersionInputSchema).array(), z$2.lazy(() => RecipeIngredientUncheckedCreateWithoutRecipeVersionInputSchema), z$2.lazy(() => RecipeIngredientUncheckedCreateWithoutRecipeVersionInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => RecipeIngredientCreateOrConnectWithoutRecipeVersionInputSchema), z$2.lazy(() => RecipeIngredientCreateOrConnectWithoutRecipeVersionInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => RecipeIngredientCreateManyRecipeVersionInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => RecipeIngredientWhereUniqueInputSchema), z$2.lazy(() => RecipeIngredientWhereUniqueInputSchema).array()]).optional()
}).strict();
var RecipeInstructionUncheckedCreateNestedManyWithoutRecipeVersionInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeInstructionCreateWithoutRecipeVersionInputSchema), z$2.lazy(() => RecipeInstructionCreateWithoutRecipeVersionInputSchema).array(), z$2.lazy(() => RecipeInstructionUncheckedCreateWithoutRecipeVersionInputSchema), z$2.lazy(() => RecipeInstructionUncheckedCreateWithoutRecipeVersionInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => RecipeInstructionCreateOrConnectWithoutRecipeVersionInputSchema), z$2.lazy(() => RecipeInstructionCreateOrConnectWithoutRecipeVersionInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => RecipeInstructionCreateManyRecipeVersionInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => RecipeInstructionWhereUniqueInputSchema), z$2.lazy(() => RecipeInstructionWhereUniqueInputSchema).array()]).optional()
}).strict();
var NullableDateTimeFieldUpdateOperationsInputSchema = z$2.object({
  set: z$2.coerce.date().optional().nullable()
}).strict();
var RecipeUpdateOneRequiredWithoutVersionsNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeCreateWithoutVersionsInputSchema), z$2.lazy(() => RecipeUncheckedCreateWithoutVersionsInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => RecipeCreateOrConnectWithoutVersionsInputSchema).optional(),
  upsert: z$2.lazy(() => RecipeUpsertWithoutVersionsInputSchema).optional(),
  connect: z$2.lazy(() => RecipeWhereUniqueInputSchema).optional(),
  update: z$2.union([z$2.lazy(() => RecipeUpdateToOneWithWhereWithoutVersionsInputSchema), z$2.lazy(() => RecipeUpdateWithoutVersionsInputSchema), z$2.lazy(() => RecipeUncheckedUpdateWithoutVersionsInputSchema)]).optional()
}).strict();
var RecipeIngredientUpdateManyWithoutRecipeVersionNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeIngredientCreateWithoutRecipeVersionInputSchema), z$2.lazy(() => RecipeIngredientCreateWithoutRecipeVersionInputSchema).array(), z$2.lazy(() => RecipeIngredientUncheckedCreateWithoutRecipeVersionInputSchema), z$2.lazy(() => RecipeIngredientUncheckedCreateWithoutRecipeVersionInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => RecipeIngredientCreateOrConnectWithoutRecipeVersionInputSchema), z$2.lazy(() => RecipeIngredientCreateOrConnectWithoutRecipeVersionInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => RecipeIngredientUpsertWithWhereUniqueWithoutRecipeVersionInputSchema), z$2.lazy(() => RecipeIngredientUpsertWithWhereUniqueWithoutRecipeVersionInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => RecipeIngredientCreateManyRecipeVersionInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => RecipeIngredientWhereUniqueInputSchema), z$2.lazy(() => RecipeIngredientWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => RecipeIngredientWhereUniqueInputSchema), z$2.lazy(() => RecipeIngredientWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => RecipeIngredientWhereUniqueInputSchema), z$2.lazy(() => RecipeIngredientWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => RecipeIngredientWhereUniqueInputSchema), z$2.lazy(() => RecipeIngredientWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => RecipeIngredientUpdateWithWhereUniqueWithoutRecipeVersionInputSchema), z$2.lazy(() => RecipeIngredientUpdateWithWhereUniqueWithoutRecipeVersionInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => RecipeIngredientUpdateManyWithWhereWithoutRecipeVersionInputSchema), z$2.lazy(() => RecipeIngredientUpdateManyWithWhereWithoutRecipeVersionInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => RecipeIngredientScalarWhereInputSchema), z$2.lazy(() => RecipeIngredientScalarWhereInputSchema).array()]).optional()
}).strict();
var RecipeInstructionUpdateManyWithoutRecipeVersionNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeInstructionCreateWithoutRecipeVersionInputSchema), z$2.lazy(() => RecipeInstructionCreateWithoutRecipeVersionInputSchema).array(), z$2.lazy(() => RecipeInstructionUncheckedCreateWithoutRecipeVersionInputSchema), z$2.lazy(() => RecipeInstructionUncheckedCreateWithoutRecipeVersionInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => RecipeInstructionCreateOrConnectWithoutRecipeVersionInputSchema), z$2.lazy(() => RecipeInstructionCreateOrConnectWithoutRecipeVersionInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => RecipeInstructionUpsertWithWhereUniqueWithoutRecipeVersionInputSchema), z$2.lazy(() => RecipeInstructionUpsertWithWhereUniqueWithoutRecipeVersionInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => RecipeInstructionCreateManyRecipeVersionInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => RecipeInstructionWhereUniqueInputSchema), z$2.lazy(() => RecipeInstructionWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => RecipeInstructionWhereUniqueInputSchema), z$2.lazy(() => RecipeInstructionWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => RecipeInstructionWhereUniqueInputSchema), z$2.lazy(() => RecipeInstructionWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => RecipeInstructionWhereUniqueInputSchema), z$2.lazy(() => RecipeInstructionWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => RecipeInstructionUpdateWithWhereUniqueWithoutRecipeVersionInputSchema), z$2.lazy(() => RecipeInstructionUpdateWithWhereUniqueWithoutRecipeVersionInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => RecipeInstructionUpdateManyWithWhereWithoutRecipeVersionInputSchema), z$2.lazy(() => RecipeInstructionUpdateManyWithWhereWithoutRecipeVersionInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => RecipeInstructionScalarWhereInputSchema), z$2.lazy(() => RecipeInstructionScalarWhereInputSchema).array()]).optional()
}).strict();
var UserUpdateOneRequiredWithoutRecipeVersionsCreatedNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => UserCreateWithoutRecipeVersionsCreatedInputSchema), z$2.lazy(() => UserUncheckedCreateWithoutRecipeVersionsCreatedInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => UserCreateOrConnectWithoutRecipeVersionsCreatedInputSchema).optional(),
  upsert: z$2.lazy(() => UserUpsertWithoutRecipeVersionsCreatedInputSchema).optional(),
  connect: z$2.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z$2.union([z$2.lazy(() => UserUpdateToOneWithWhereWithoutRecipeVersionsCreatedInputSchema), z$2.lazy(() => UserUpdateWithoutRecipeVersionsCreatedInputSchema), z$2.lazy(() => UserUncheckedUpdateWithoutRecipeVersionsCreatedInputSchema)]).optional()
}).strict();
var UserUpdateOneWithoutRecipeVersionsApprovedNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => UserCreateWithoutRecipeVersionsApprovedInputSchema), z$2.lazy(() => UserUncheckedCreateWithoutRecipeVersionsApprovedInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => UserCreateOrConnectWithoutRecipeVersionsApprovedInputSchema).optional(),
  upsert: z$2.lazy(() => UserUpsertWithoutRecipeVersionsApprovedInputSchema).optional(),
  disconnect: z$2.union([z$2.boolean(), z$2.lazy(() => UserWhereInputSchema)]).optional(),
  delete: z$2.union([z$2.boolean(), z$2.lazy(() => UserWhereInputSchema)]).optional(),
  connect: z$2.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z$2.union([z$2.lazy(() => UserUpdateToOneWithWhereWithoutRecipeVersionsApprovedInputSchema), z$2.lazy(() => UserUpdateWithoutRecipeVersionsApprovedInputSchema), z$2.lazy(() => UserUncheckedUpdateWithoutRecipeVersionsApprovedInputSchema)]).optional()
}).strict();
var NullableIntFieldUpdateOperationsInputSchema = z$2.object({
  set: z$2.number().optional().nullable(),
  increment: z$2.number().optional(),
  decrement: z$2.number().optional(),
  multiply: z$2.number().optional(),
  divide: z$2.number().optional()
}).strict();
var RecipeIngredientUncheckedUpdateManyWithoutRecipeVersionNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeIngredientCreateWithoutRecipeVersionInputSchema), z$2.lazy(() => RecipeIngredientCreateWithoutRecipeVersionInputSchema).array(), z$2.lazy(() => RecipeIngredientUncheckedCreateWithoutRecipeVersionInputSchema), z$2.lazy(() => RecipeIngredientUncheckedCreateWithoutRecipeVersionInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => RecipeIngredientCreateOrConnectWithoutRecipeVersionInputSchema), z$2.lazy(() => RecipeIngredientCreateOrConnectWithoutRecipeVersionInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => RecipeIngredientUpsertWithWhereUniqueWithoutRecipeVersionInputSchema), z$2.lazy(() => RecipeIngredientUpsertWithWhereUniqueWithoutRecipeVersionInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => RecipeIngredientCreateManyRecipeVersionInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => RecipeIngredientWhereUniqueInputSchema), z$2.lazy(() => RecipeIngredientWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => RecipeIngredientWhereUniqueInputSchema), z$2.lazy(() => RecipeIngredientWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => RecipeIngredientWhereUniqueInputSchema), z$2.lazy(() => RecipeIngredientWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => RecipeIngredientWhereUniqueInputSchema), z$2.lazy(() => RecipeIngredientWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => RecipeIngredientUpdateWithWhereUniqueWithoutRecipeVersionInputSchema), z$2.lazy(() => RecipeIngredientUpdateWithWhereUniqueWithoutRecipeVersionInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => RecipeIngredientUpdateManyWithWhereWithoutRecipeVersionInputSchema), z$2.lazy(() => RecipeIngredientUpdateManyWithWhereWithoutRecipeVersionInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => RecipeIngredientScalarWhereInputSchema), z$2.lazy(() => RecipeIngredientScalarWhereInputSchema).array()]).optional()
}).strict();
var RecipeInstructionUncheckedUpdateManyWithoutRecipeVersionNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeInstructionCreateWithoutRecipeVersionInputSchema), z$2.lazy(() => RecipeInstructionCreateWithoutRecipeVersionInputSchema).array(), z$2.lazy(() => RecipeInstructionUncheckedCreateWithoutRecipeVersionInputSchema), z$2.lazy(() => RecipeInstructionUncheckedCreateWithoutRecipeVersionInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => RecipeInstructionCreateOrConnectWithoutRecipeVersionInputSchema), z$2.lazy(() => RecipeInstructionCreateOrConnectWithoutRecipeVersionInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => RecipeInstructionUpsertWithWhereUniqueWithoutRecipeVersionInputSchema), z$2.lazy(() => RecipeInstructionUpsertWithWhereUniqueWithoutRecipeVersionInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => RecipeInstructionCreateManyRecipeVersionInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => RecipeInstructionWhereUniqueInputSchema), z$2.lazy(() => RecipeInstructionWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => RecipeInstructionWhereUniqueInputSchema), z$2.lazy(() => RecipeInstructionWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => RecipeInstructionWhereUniqueInputSchema), z$2.lazy(() => RecipeInstructionWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => RecipeInstructionWhereUniqueInputSchema), z$2.lazy(() => RecipeInstructionWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => RecipeInstructionUpdateWithWhereUniqueWithoutRecipeVersionInputSchema), z$2.lazy(() => RecipeInstructionUpdateWithWhereUniqueWithoutRecipeVersionInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => RecipeInstructionUpdateManyWithWhereWithoutRecipeVersionInputSchema), z$2.lazy(() => RecipeInstructionUpdateManyWithWhereWithoutRecipeVersionInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => RecipeInstructionScalarWhereInputSchema), z$2.lazy(() => RecipeInstructionScalarWhereInputSchema).array()]).optional()
}).strict();
var RestaurantCreateNestedOneWithoutEquipmentInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RestaurantCreateWithoutEquipmentInputSchema), z$2.lazy(() => RestaurantUncheckedCreateWithoutEquipmentInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => RestaurantCreateOrConnectWithoutEquipmentInputSchema).optional(),
  connect: z$2.lazy(() => RestaurantWhereUniqueInputSchema).optional()
}).strict();
var RecipeEquipmentCreateNestedManyWithoutEquipmentInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeEquipmentCreateWithoutEquipmentInputSchema), z$2.lazy(() => RecipeEquipmentCreateWithoutEquipmentInputSchema).array(), z$2.lazy(() => RecipeEquipmentUncheckedCreateWithoutEquipmentInputSchema), z$2.lazy(() => RecipeEquipmentUncheckedCreateWithoutEquipmentInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => RecipeEquipmentCreateOrConnectWithoutEquipmentInputSchema), z$2.lazy(() => RecipeEquipmentCreateOrConnectWithoutEquipmentInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => RecipeEquipmentCreateManyEquipmentInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => RecipeEquipmentWhereUniqueInputSchema), z$2.lazy(() => RecipeEquipmentWhereUniqueInputSchema).array()]).optional()
}).strict();
var MaintenanceLogCreateNestedManyWithoutEquipmentInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => MaintenanceLogCreateWithoutEquipmentInputSchema), z$2.lazy(() => MaintenanceLogCreateWithoutEquipmentInputSchema).array(), z$2.lazy(() => MaintenanceLogUncheckedCreateWithoutEquipmentInputSchema), z$2.lazy(() => MaintenanceLogUncheckedCreateWithoutEquipmentInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => MaintenanceLogCreateOrConnectWithoutEquipmentInputSchema), z$2.lazy(() => MaintenanceLogCreateOrConnectWithoutEquipmentInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => MaintenanceLogCreateManyEquipmentInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => MaintenanceLogWhereUniqueInputSchema), z$2.lazy(() => MaintenanceLogWhereUniqueInputSchema).array()]).optional()
}).strict();
var RecipeEquipmentUncheckedCreateNestedManyWithoutEquipmentInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeEquipmentCreateWithoutEquipmentInputSchema), z$2.lazy(() => RecipeEquipmentCreateWithoutEquipmentInputSchema).array(), z$2.lazy(() => RecipeEquipmentUncheckedCreateWithoutEquipmentInputSchema), z$2.lazy(() => RecipeEquipmentUncheckedCreateWithoutEquipmentInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => RecipeEquipmentCreateOrConnectWithoutEquipmentInputSchema), z$2.lazy(() => RecipeEquipmentCreateOrConnectWithoutEquipmentInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => RecipeEquipmentCreateManyEquipmentInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => RecipeEquipmentWhereUniqueInputSchema), z$2.lazy(() => RecipeEquipmentWhereUniqueInputSchema).array()]).optional()
}).strict();
var MaintenanceLogUncheckedCreateNestedManyWithoutEquipmentInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => MaintenanceLogCreateWithoutEquipmentInputSchema), z$2.lazy(() => MaintenanceLogCreateWithoutEquipmentInputSchema).array(), z$2.lazy(() => MaintenanceLogUncheckedCreateWithoutEquipmentInputSchema), z$2.lazy(() => MaintenanceLogUncheckedCreateWithoutEquipmentInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => MaintenanceLogCreateOrConnectWithoutEquipmentInputSchema), z$2.lazy(() => MaintenanceLogCreateOrConnectWithoutEquipmentInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => MaintenanceLogCreateManyEquipmentInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => MaintenanceLogWhereUniqueInputSchema), z$2.lazy(() => MaintenanceLogWhereUniqueInputSchema).array()]).optional()
}).strict();
var EnumEquipmentStatusFieldUpdateOperationsInputSchema = z$2.object({
  set: z$2.lazy(() => EquipmentStatusSchema).optional()
}).strict();
var RestaurantUpdateOneRequiredWithoutEquipmentNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RestaurantCreateWithoutEquipmentInputSchema), z$2.lazy(() => RestaurantUncheckedCreateWithoutEquipmentInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => RestaurantCreateOrConnectWithoutEquipmentInputSchema).optional(),
  upsert: z$2.lazy(() => RestaurantUpsertWithoutEquipmentInputSchema).optional(),
  connect: z$2.lazy(() => RestaurantWhereUniqueInputSchema).optional(),
  update: z$2.union([z$2.lazy(() => RestaurantUpdateToOneWithWhereWithoutEquipmentInputSchema), z$2.lazy(() => RestaurantUpdateWithoutEquipmentInputSchema), z$2.lazy(() => RestaurantUncheckedUpdateWithoutEquipmentInputSchema)]).optional()
}).strict();
var RecipeEquipmentUpdateManyWithoutEquipmentNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeEquipmentCreateWithoutEquipmentInputSchema), z$2.lazy(() => RecipeEquipmentCreateWithoutEquipmentInputSchema).array(), z$2.lazy(() => RecipeEquipmentUncheckedCreateWithoutEquipmentInputSchema), z$2.lazy(() => RecipeEquipmentUncheckedCreateWithoutEquipmentInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => RecipeEquipmentCreateOrConnectWithoutEquipmentInputSchema), z$2.lazy(() => RecipeEquipmentCreateOrConnectWithoutEquipmentInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => RecipeEquipmentUpsertWithWhereUniqueWithoutEquipmentInputSchema), z$2.lazy(() => RecipeEquipmentUpsertWithWhereUniqueWithoutEquipmentInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => RecipeEquipmentCreateManyEquipmentInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => RecipeEquipmentWhereUniqueInputSchema), z$2.lazy(() => RecipeEquipmentWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => RecipeEquipmentWhereUniqueInputSchema), z$2.lazy(() => RecipeEquipmentWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => RecipeEquipmentWhereUniqueInputSchema), z$2.lazy(() => RecipeEquipmentWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => RecipeEquipmentWhereUniqueInputSchema), z$2.lazy(() => RecipeEquipmentWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => RecipeEquipmentUpdateWithWhereUniqueWithoutEquipmentInputSchema), z$2.lazy(() => RecipeEquipmentUpdateWithWhereUniqueWithoutEquipmentInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => RecipeEquipmentUpdateManyWithWhereWithoutEquipmentInputSchema), z$2.lazy(() => RecipeEquipmentUpdateManyWithWhereWithoutEquipmentInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => RecipeEquipmentScalarWhereInputSchema), z$2.lazy(() => RecipeEquipmentScalarWhereInputSchema).array()]).optional()
}).strict();
var MaintenanceLogUpdateManyWithoutEquipmentNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => MaintenanceLogCreateWithoutEquipmentInputSchema), z$2.lazy(() => MaintenanceLogCreateWithoutEquipmentInputSchema).array(), z$2.lazy(() => MaintenanceLogUncheckedCreateWithoutEquipmentInputSchema), z$2.lazy(() => MaintenanceLogUncheckedCreateWithoutEquipmentInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => MaintenanceLogCreateOrConnectWithoutEquipmentInputSchema), z$2.lazy(() => MaintenanceLogCreateOrConnectWithoutEquipmentInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => MaintenanceLogUpsertWithWhereUniqueWithoutEquipmentInputSchema), z$2.lazy(() => MaintenanceLogUpsertWithWhereUniqueWithoutEquipmentInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => MaintenanceLogCreateManyEquipmentInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => MaintenanceLogWhereUniqueInputSchema), z$2.lazy(() => MaintenanceLogWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => MaintenanceLogWhereUniqueInputSchema), z$2.lazy(() => MaintenanceLogWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => MaintenanceLogWhereUniqueInputSchema), z$2.lazy(() => MaintenanceLogWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => MaintenanceLogWhereUniqueInputSchema), z$2.lazy(() => MaintenanceLogWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => MaintenanceLogUpdateWithWhereUniqueWithoutEquipmentInputSchema), z$2.lazy(() => MaintenanceLogUpdateWithWhereUniqueWithoutEquipmentInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => MaintenanceLogUpdateManyWithWhereWithoutEquipmentInputSchema), z$2.lazy(() => MaintenanceLogUpdateManyWithWhereWithoutEquipmentInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => MaintenanceLogScalarWhereInputSchema), z$2.lazy(() => MaintenanceLogScalarWhereInputSchema).array()]).optional()
}).strict();
var RecipeEquipmentUncheckedUpdateManyWithoutEquipmentNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeEquipmentCreateWithoutEquipmentInputSchema), z$2.lazy(() => RecipeEquipmentCreateWithoutEquipmentInputSchema).array(), z$2.lazy(() => RecipeEquipmentUncheckedCreateWithoutEquipmentInputSchema), z$2.lazy(() => RecipeEquipmentUncheckedCreateWithoutEquipmentInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => RecipeEquipmentCreateOrConnectWithoutEquipmentInputSchema), z$2.lazy(() => RecipeEquipmentCreateOrConnectWithoutEquipmentInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => RecipeEquipmentUpsertWithWhereUniqueWithoutEquipmentInputSchema), z$2.lazy(() => RecipeEquipmentUpsertWithWhereUniqueWithoutEquipmentInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => RecipeEquipmentCreateManyEquipmentInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => RecipeEquipmentWhereUniqueInputSchema), z$2.lazy(() => RecipeEquipmentWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => RecipeEquipmentWhereUniqueInputSchema), z$2.lazy(() => RecipeEquipmentWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => RecipeEquipmentWhereUniqueInputSchema), z$2.lazy(() => RecipeEquipmentWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => RecipeEquipmentWhereUniqueInputSchema), z$2.lazy(() => RecipeEquipmentWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => RecipeEquipmentUpdateWithWhereUniqueWithoutEquipmentInputSchema), z$2.lazy(() => RecipeEquipmentUpdateWithWhereUniqueWithoutEquipmentInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => RecipeEquipmentUpdateManyWithWhereWithoutEquipmentInputSchema), z$2.lazy(() => RecipeEquipmentUpdateManyWithWhereWithoutEquipmentInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => RecipeEquipmentScalarWhereInputSchema), z$2.lazy(() => RecipeEquipmentScalarWhereInputSchema).array()]).optional()
}).strict();
var MaintenanceLogUncheckedUpdateManyWithoutEquipmentNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => MaintenanceLogCreateWithoutEquipmentInputSchema), z$2.lazy(() => MaintenanceLogCreateWithoutEquipmentInputSchema).array(), z$2.lazy(() => MaintenanceLogUncheckedCreateWithoutEquipmentInputSchema), z$2.lazy(() => MaintenanceLogUncheckedCreateWithoutEquipmentInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => MaintenanceLogCreateOrConnectWithoutEquipmentInputSchema), z$2.lazy(() => MaintenanceLogCreateOrConnectWithoutEquipmentInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => MaintenanceLogUpsertWithWhereUniqueWithoutEquipmentInputSchema), z$2.lazy(() => MaintenanceLogUpsertWithWhereUniqueWithoutEquipmentInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => MaintenanceLogCreateManyEquipmentInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => MaintenanceLogWhereUniqueInputSchema), z$2.lazy(() => MaintenanceLogWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => MaintenanceLogWhereUniqueInputSchema), z$2.lazy(() => MaintenanceLogWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => MaintenanceLogWhereUniqueInputSchema), z$2.lazy(() => MaintenanceLogWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => MaintenanceLogWhereUniqueInputSchema), z$2.lazy(() => MaintenanceLogWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => MaintenanceLogUpdateWithWhereUniqueWithoutEquipmentInputSchema), z$2.lazy(() => MaintenanceLogUpdateWithWhereUniqueWithoutEquipmentInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => MaintenanceLogUpdateManyWithWhereWithoutEquipmentInputSchema), z$2.lazy(() => MaintenanceLogUpdateManyWithWhereWithoutEquipmentInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => MaintenanceLogScalarWhereInputSchema), z$2.lazy(() => MaintenanceLogScalarWhereInputSchema).array()]).optional()
}).strict();
var RecipeCreateNestedOneWithoutEquipmentInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeCreateWithoutEquipmentInputSchema), z$2.lazy(() => RecipeUncheckedCreateWithoutEquipmentInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => RecipeCreateOrConnectWithoutEquipmentInputSchema).optional(),
  connect: z$2.lazy(() => RecipeWhereUniqueInputSchema).optional()
}).strict();
var EquipmentCreateNestedOneWithoutRecipesInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => EquipmentCreateWithoutRecipesInputSchema), z$2.lazy(() => EquipmentUncheckedCreateWithoutRecipesInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => EquipmentCreateOrConnectWithoutRecipesInputSchema).optional(),
  connect: z$2.lazy(() => EquipmentWhereUniqueInputSchema).optional()
}).strict();
var RecipeUpdateOneRequiredWithoutEquipmentNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeCreateWithoutEquipmentInputSchema), z$2.lazy(() => RecipeUncheckedCreateWithoutEquipmentInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => RecipeCreateOrConnectWithoutEquipmentInputSchema).optional(),
  upsert: z$2.lazy(() => RecipeUpsertWithoutEquipmentInputSchema).optional(),
  connect: z$2.lazy(() => RecipeWhereUniqueInputSchema).optional(),
  update: z$2.union([z$2.lazy(() => RecipeUpdateToOneWithWhereWithoutEquipmentInputSchema), z$2.lazy(() => RecipeUpdateWithoutEquipmentInputSchema), z$2.lazy(() => RecipeUncheckedUpdateWithoutEquipmentInputSchema)]).optional()
}).strict();
var EquipmentUpdateOneRequiredWithoutRecipesNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => EquipmentCreateWithoutRecipesInputSchema), z$2.lazy(() => EquipmentUncheckedCreateWithoutRecipesInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => EquipmentCreateOrConnectWithoutRecipesInputSchema).optional(),
  upsert: z$2.lazy(() => EquipmentUpsertWithoutRecipesInputSchema).optional(),
  connect: z$2.lazy(() => EquipmentWhereUniqueInputSchema).optional(),
  update: z$2.union([z$2.lazy(() => EquipmentUpdateToOneWithWhereWithoutRecipesInputSchema), z$2.lazy(() => EquipmentUpdateWithoutRecipesInputSchema), z$2.lazy(() => EquipmentUncheckedUpdateWithoutRecipesInputSchema)]).optional()
}).strict();
var EquipmentCreateNestedOneWithoutMaintenanceLogsInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => EquipmentCreateWithoutMaintenanceLogsInputSchema), z$2.lazy(() => EquipmentUncheckedCreateWithoutMaintenanceLogsInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => EquipmentCreateOrConnectWithoutMaintenanceLogsInputSchema).optional(),
  connect: z$2.lazy(() => EquipmentWhereUniqueInputSchema).optional()
}).strict();
var EnumMaintenanceTypeFieldUpdateOperationsInputSchema = z$2.object({
  set: z$2.lazy(() => MaintenanceTypeSchema).optional()
}).strict();
var NullableFloatFieldUpdateOperationsInputSchema = z$2.object({
  set: z$2.number().optional().nullable(),
  increment: z$2.number().optional(),
  decrement: z$2.number().optional(),
  multiply: z$2.number().optional(),
  divide: z$2.number().optional()
}).strict();
var EquipmentUpdateOneRequiredWithoutMaintenanceLogsNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => EquipmentCreateWithoutMaintenanceLogsInputSchema), z$2.lazy(() => EquipmentUncheckedCreateWithoutMaintenanceLogsInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => EquipmentCreateOrConnectWithoutMaintenanceLogsInputSchema).optional(),
  upsert: z$2.lazy(() => EquipmentUpsertWithoutMaintenanceLogsInputSchema).optional(),
  connect: z$2.lazy(() => EquipmentWhereUniqueInputSchema).optional(),
  update: z$2.union([z$2.lazy(() => EquipmentUpdateToOneWithWhereWithoutMaintenanceLogsInputSchema), z$2.lazy(() => EquipmentUpdateWithoutMaintenanceLogsInputSchema), z$2.lazy(() => EquipmentUncheckedUpdateWithoutMaintenanceLogsInputSchema)]).optional()
}).strict();
var RestaurantCreateNestedOneWithoutQualityChecklistInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RestaurantCreateWithoutQualityChecklistInputSchema), z$2.lazy(() => RestaurantUncheckedCreateWithoutQualityChecklistInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => RestaurantCreateOrConnectWithoutQualityChecklistInputSchema).optional(),
  connect: z$2.lazy(() => RestaurantWhereUniqueInputSchema).optional()
}).strict();
var ChecklistItemCreateNestedManyWithoutChecklistInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => ChecklistItemCreateWithoutChecklistInputSchema), z$2.lazy(() => ChecklistItemCreateWithoutChecklistInputSchema).array(), z$2.lazy(() => ChecklistItemUncheckedCreateWithoutChecklistInputSchema), z$2.lazy(() => ChecklistItemUncheckedCreateWithoutChecklistInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => ChecklistItemCreateOrConnectWithoutChecklistInputSchema), z$2.lazy(() => ChecklistItemCreateOrConnectWithoutChecklistInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => ChecklistItemCreateManyChecklistInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => ChecklistItemWhereUniqueInputSchema), z$2.lazy(() => ChecklistItemWhereUniqueInputSchema).array()]).optional()
}).strict();
var ChecklistCompleteCreateNestedManyWithoutChecklistInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => ChecklistCompleteCreateWithoutChecklistInputSchema), z$2.lazy(() => ChecklistCompleteCreateWithoutChecklistInputSchema).array(), z$2.lazy(() => ChecklistCompleteUncheckedCreateWithoutChecklistInputSchema), z$2.lazy(() => ChecklistCompleteUncheckedCreateWithoutChecklistInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => ChecklistCompleteCreateOrConnectWithoutChecklistInputSchema), z$2.lazy(() => ChecklistCompleteCreateOrConnectWithoutChecklistInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => ChecklistCompleteCreateManyChecklistInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => ChecklistCompleteWhereUniqueInputSchema), z$2.lazy(() => ChecklistCompleteWhereUniqueInputSchema).array()]).optional()
}).strict();
var ChecklistItemUncheckedCreateNestedManyWithoutChecklistInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => ChecklistItemCreateWithoutChecklistInputSchema), z$2.lazy(() => ChecklistItemCreateWithoutChecklistInputSchema).array(), z$2.lazy(() => ChecklistItemUncheckedCreateWithoutChecklistInputSchema), z$2.lazy(() => ChecklistItemUncheckedCreateWithoutChecklistInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => ChecklistItemCreateOrConnectWithoutChecklistInputSchema), z$2.lazy(() => ChecklistItemCreateOrConnectWithoutChecklistInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => ChecklistItemCreateManyChecklistInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => ChecklistItemWhereUniqueInputSchema), z$2.lazy(() => ChecklistItemWhereUniqueInputSchema).array()]).optional()
}).strict();
var ChecklistCompleteUncheckedCreateNestedManyWithoutChecklistInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => ChecklistCompleteCreateWithoutChecklistInputSchema), z$2.lazy(() => ChecklistCompleteCreateWithoutChecklistInputSchema).array(), z$2.lazy(() => ChecklistCompleteUncheckedCreateWithoutChecklistInputSchema), z$2.lazy(() => ChecklistCompleteUncheckedCreateWithoutChecklistInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => ChecklistCompleteCreateOrConnectWithoutChecklistInputSchema), z$2.lazy(() => ChecklistCompleteCreateOrConnectWithoutChecklistInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => ChecklistCompleteCreateManyChecklistInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => ChecklistCompleteWhereUniqueInputSchema), z$2.lazy(() => ChecklistCompleteWhereUniqueInputSchema).array()]).optional()
}).strict();
var EnumChecklistFrequencyFieldUpdateOperationsInputSchema = z$2.object({
  set: z$2.lazy(() => ChecklistFrequencySchema).optional()
}).strict();
var RestaurantUpdateOneRequiredWithoutQualityChecklistNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RestaurantCreateWithoutQualityChecklistInputSchema), z$2.lazy(() => RestaurantUncheckedCreateWithoutQualityChecklistInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => RestaurantCreateOrConnectWithoutQualityChecklistInputSchema).optional(),
  upsert: z$2.lazy(() => RestaurantUpsertWithoutQualityChecklistInputSchema).optional(),
  connect: z$2.lazy(() => RestaurantWhereUniqueInputSchema).optional(),
  update: z$2.union([z$2.lazy(() => RestaurantUpdateToOneWithWhereWithoutQualityChecklistInputSchema), z$2.lazy(() => RestaurantUpdateWithoutQualityChecklistInputSchema), z$2.lazy(() => RestaurantUncheckedUpdateWithoutQualityChecklistInputSchema)]).optional()
}).strict();
var ChecklistItemUpdateManyWithoutChecklistNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => ChecklistItemCreateWithoutChecklistInputSchema), z$2.lazy(() => ChecklistItemCreateWithoutChecklistInputSchema).array(), z$2.lazy(() => ChecklistItemUncheckedCreateWithoutChecklistInputSchema), z$2.lazy(() => ChecklistItemUncheckedCreateWithoutChecklistInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => ChecklistItemCreateOrConnectWithoutChecklistInputSchema), z$2.lazy(() => ChecklistItemCreateOrConnectWithoutChecklistInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => ChecklistItemUpsertWithWhereUniqueWithoutChecklistInputSchema), z$2.lazy(() => ChecklistItemUpsertWithWhereUniqueWithoutChecklistInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => ChecklistItemCreateManyChecklistInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => ChecklistItemWhereUniqueInputSchema), z$2.lazy(() => ChecklistItemWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => ChecklistItemWhereUniqueInputSchema), z$2.lazy(() => ChecklistItemWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => ChecklistItemWhereUniqueInputSchema), z$2.lazy(() => ChecklistItemWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => ChecklistItemWhereUniqueInputSchema), z$2.lazy(() => ChecklistItemWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => ChecklistItemUpdateWithWhereUniqueWithoutChecklistInputSchema), z$2.lazy(() => ChecklistItemUpdateWithWhereUniqueWithoutChecklistInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => ChecklistItemUpdateManyWithWhereWithoutChecklistInputSchema), z$2.lazy(() => ChecklistItemUpdateManyWithWhereWithoutChecklistInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => ChecklistItemScalarWhereInputSchema), z$2.lazy(() => ChecklistItemScalarWhereInputSchema).array()]).optional()
}).strict();
var ChecklistCompleteUpdateManyWithoutChecklistNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => ChecklistCompleteCreateWithoutChecklistInputSchema), z$2.lazy(() => ChecklistCompleteCreateWithoutChecklistInputSchema).array(), z$2.lazy(() => ChecklistCompleteUncheckedCreateWithoutChecklistInputSchema), z$2.lazy(() => ChecklistCompleteUncheckedCreateWithoutChecklistInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => ChecklistCompleteCreateOrConnectWithoutChecklistInputSchema), z$2.lazy(() => ChecklistCompleteCreateOrConnectWithoutChecklistInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => ChecklistCompleteUpsertWithWhereUniqueWithoutChecklistInputSchema), z$2.lazy(() => ChecklistCompleteUpsertWithWhereUniqueWithoutChecklistInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => ChecklistCompleteCreateManyChecklistInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => ChecklistCompleteWhereUniqueInputSchema), z$2.lazy(() => ChecklistCompleteWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => ChecklistCompleteWhereUniqueInputSchema), z$2.lazy(() => ChecklistCompleteWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => ChecklistCompleteWhereUniqueInputSchema), z$2.lazy(() => ChecklistCompleteWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => ChecklistCompleteWhereUniqueInputSchema), z$2.lazy(() => ChecklistCompleteWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => ChecklistCompleteUpdateWithWhereUniqueWithoutChecklistInputSchema), z$2.lazy(() => ChecklistCompleteUpdateWithWhereUniqueWithoutChecklistInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => ChecklistCompleteUpdateManyWithWhereWithoutChecklistInputSchema), z$2.lazy(() => ChecklistCompleteUpdateManyWithWhereWithoutChecklistInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => ChecklistCompleteScalarWhereInputSchema), z$2.lazy(() => ChecklistCompleteScalarWhereInputSchema).array()]).optional()
}).strict();
var ChecklistItemUncheckedUpdateManyWithoutChecklistNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => ChecklistItemCreateWithoutChecklistInputSchema), z$2.lazy(() => ChecklistItemCreateWithoutChecklistInputSchema).array(), z$2.lazy(() => ChecklistItemUncheckedCreateWithoutChecklistInputSchema), z$2.lazy(() => ChecklistItemUncheckedCreateWithoutChecklistInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => ChecklistItemCreateOrConnectWithoutChecklistInputSchema), z$2.lazy(() => ChecklistItemCreateOrConnectWithoutChecklistInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => ChecklistItemUpsertWithWhereUniqueWithoutChecklistInputSchema), z$2.lazy(() => ChecklistItemUpsertWithWhereUniqueWithoutChecklistInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => ChecklistItemCreateManyChecklistInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => ChecklistItemWhereUniqueInputSchema), z$2.lazy(() => ChecklistItemWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => ChecklistItemWhereUniqueInputSchema), z$2.lazy(() => ChecklistItemWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => ChecklistItemWhereUniqueInputSchema), z$2.lazy(() => ChecklistItemWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => ChecklistItemWhereUniqueInputSchema), z$2.lazy(() => ChecklistItemWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => ChecklistItemUpdateWithWhereUniqueWithoutChecklistInputSchema), z$2.lazy(() => ChecklistItemUpdateWithWhereUniqueWithoutChecklistInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => ChecklistItemUpdateManyWithWhereWithoutChecklistInputSchema), z$2.lazy(() => ChecklistItemUpdateManyWithWhereWithoutChecklistInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => ChecklistItemScalarWhereInputSchema), z$2.lazy(() => ChecklistItemScalarWhereInputSchema).array()]).optional()
}).strict();
var ChecklistCompleteUncheckedUpdateManyWithoutChecklistNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => ChecklistCompleteCreateWithoutChecklistInputSchema), z$2.lazy(() => ChecklistCompleteCreateWithoutChecklistInputSchema).array(), z$2.lazy(() => ChecklistCompleteUncheckedCreateWithoutChecklistInputSchema), z$2.lazy(() => ChecklistCompleteUncheckedCreateWithoutChecklistInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => ChecklistCompleteCreateOrConnectWithoutChecklistInputSchema), z$2.lazy(() => ChecklistCompleteCreateOrConnectWithoutChecklistInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => ChecklistCompleteUpsertWithWhereUniqueWithoutChecklistInputSchema), z$2.lazy(() => ChecklistCompleteUpsertWithWhereUniqueWithoutChecklistInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => ChecklistCompleteCreateManyChecklistInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => ChecklistCompleteWhereUniqueInputSchema), z$2.lazy(() => ChecklistCompleteWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => ChecklistCompleteWhereUniqueInputSchema), z$2.lazy(() => ChecklistCompleteWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => ChecklistCompleteWhereUniqueInputSchema), z$2.lazy(() => ChecklistCompleteWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => ChecklistCompleteWhereUniqueInputSchema), z$2.lazy(() => ChecklistCompleteWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => ChecklistCompleteUpdateWithWhereUniqueWithoutChecklistInputSchema), z$2.lazy(() => ChecklistCompleteUpdateWithWhereUniqueWithoutChecklistInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => ChecklistCompleteUpdateManyWithWhereWithoutChecklistInputSchema), z$2.lazy(() => ChecklistCompleteUpdateManyWithWhereWithoutChecklistInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => ChecklistCompleteScalarWhereInputSchema), z$2.lazy(() => ChecklistCompleteScalarWhereInputSchema).array()]).optional()
}).strict();
var QualityChecklistCreateNestedOneWithoutItemsInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => QualityChecklistCreateWithoutItemsInputSchema), z$2.lazy(() => QualityChecklistUncheckedCreateWithoutItemsInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => QualityChecklistCreateOrConnectWithoutItemsInputSchema).optional(),
  connect: z$2.lazy(() => QualityChecklistWhereUniqueInputSchema).optional()
}).strict();
var ChecklistItemCompleteCreateNestedManyWithoutChecklistItemInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => ChecklistItemCompleteCreateWithoutChecklistItemInputSchema), z$2.lazy(() => ChecklistItemCompleteCreateWithoutChecklistItemInputSchema).array(), z$2.lazy(() => ChecklistItemCompleteUncheckedCreateWithoutChecklistItemInputSchema), z$2.lazy(() => ChecklistItemCompleteUncheckedCreateWithoutChecklistItemInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => ChecklistItemCompleteCreateOrConnectWithoutChecklistItemInputSchema), z$2.lazy(() => ChecklistItemCompleteCreateOrConnectWithoutChecklistItemInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => ChecklistItemCompleteCreateManyChecklistItemInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema), z$2.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema).array()]).optional()
}).strict();
var ChecklistItemCompleteUncheckedCreateNestedManyWithoutChecklistItemInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => ChecklistItemCompleteCreateWithoutChecklistItemInputSchema), z$2.lazy(() => ChecklistItemCompleteCreateWithoutChecklistItemInputSchema).array(), z$2.lazy(() => ChecklistItemCompleteUncheckedCreateWithoutChecklistItemInputSchema), z$2.lazy(() => ChecklistItemCompleteUncheckedCreateWithoutChecklistItemInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => ChecklistItemCompleteCreateOrConnectWithoutChecklistItemInputSchema), z$2.lazy(() => ChecklistItemCompleteCreateOrConnectWithoutChecklistItemInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => ChecklistItemCompleteCreateManyChecklistItemInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema), z$2.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema).array()]).optional()
}).strict();
var EnumChecklistItemTypeFieldUpdateOperationsInputSchema = z$2.object({
  set: z$2.lazy(() => ChecklistItemTypeSchema).optional()
}).strict();
var QualityChecklistUpdateOneRequiredWithoutItemsNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => QualityChecklistCreateWithoutItemsInputSchema), z$2.lazy(() => QualityChecklistUncheckedCreateWithoutItemsInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => QualityChecklistCreateOrConnectWithoutItemsInputSchema).optional(),
  upsert: z$2.lazy(() => QualityChecklistUpsertWithoutItemsInputSchema).optional(),
  connect: z$2.lazy(() => QualityChecklistWhereUniqueInputSchema).optional(),
  update: z$2.union([z$2.lazy(() => QualityChecklistUpdateToOneWithWhereWithoutItemsInputSchema), z$2.lazy(() => QualityChecklistUpdateWithoutItemsInputSchema), z$2.lazy(() => QualityChecklistUncheckedUpdateWithoutItemsInputSchema)]).optional()
}).strict();
var ChecklistItemCompleteUpdateManyWithoutChecklistItemNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => ChecklistItemCompleteCreateWithoutChecklistItemInputSchema), z$2.lazy(() => ChecklistItemCompleteCreateWithoutChecklistItemInputSchema).array(), z$2.lazy(() => ChecklistItemCompleteUncheckedCreateWithoutChecklistItemInputSchema), z$2.lazy(() => ChecklistItemCompleteUncheckedCreateWithoutChecklistItemInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => ChecklistItemCompleteCreateOrConnectWithoutChecklistItemInputSchema), z$2.lazy(() => ChecklistItemCompleteCreateOrConnectWithoutChecklistItemInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => ChecklistItemCompleteUpsertWithWhereUniqueWithoutChecklistItemInputSchema), z$2.lazy(() => ChecklistItemCompleteUpsertWithWhereUniqueWithoutChecklistItemInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => ChecklistItemCompleteCreateManyChecklistItemInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema), z$2.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema), z$2.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema), z$2.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema), z$2.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => ChecklistItemCompleteUpdateWithWhereUniqueWithoutChecklistItemInputSchema), z$2.lazy(() => ChecklistItemCompleteUpdateWithWhereUniqueWithoutChecklistItemInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => ChecklistItemCompleteUpdateManyWithWhereWithoutChecklistItemInputSchema), z$2.lazy(() => ChecklistItemCompleteUpdateManyWithWhereWithoutChecklistItemInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => ChecklistItemCompleteScalarWhereInputSchema), z$2.lazy(() => ChecklistItemCompleteScalarWhereInputSchema).array()]).optional()
}).strict();
var ChecklistItemCompleteUncheckedUpdateManyWithoutChecklistItemNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => ChecklistItemCompleteCreateWithoutChecklistItemInputSchema), z$2.lazy(() => ChecklistItemCompleteCreateWithoutChecklistItemInputSchema).array(), z$2.lazy(() => ChecklistItemCompleteUncheckedCreateWithoutChecklistItemInputSchema), z$2.lazy(() => ChecklistItemCompleteUncheckedCreateWithoutChecklistItemInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => ChecklistItemCompleteCreateOrConnectWithoutChecklistItemInputSchema), z$2.lazy(() => ChecklistItemCompleteCreateOrConnectWithoutChecklistItemInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => ChecklistItemCompleteUpsertWithWhereUniqueWithoutChecklistItemInputSchema), z$2.lazy(() => ChecklistItemCompleteUpsertWithWhereUniqueWithoutChecklistItemInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => ChecklistItemCompleteCreateManyChecklistItemInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema), z$2.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema), z$2.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema), z$2.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema), z$2.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => ChecklistItemCompleteUpdateWithWhereUniqueWithoutChecklistItemInputSchema), z$2.lazy(() => ChecklistItemCompleteUpdateWithWhereUniqueWithoutChecklistItemInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => ChecklistItemCompleteUpdateManyWithWhereWithoutChecklistItemInputSchema), z$2.lazy(() => ChecklistItemCompleteUpdateManyWithWhereWithoutChecklistItemInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => ChecklistItemCompleteScalarWhereInputSchema), z$2.lazy(() => ChecklistItemCompleteScalarWhereInputSchema).array()]).optional()
}).strict();
var QualityChecklistCreateNestedOneWithoutCompletionsInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => QualityChecklistCreateWithoutCompletionsInputSchema), z$2.lazy(() => QualityChecklistUncheckedCreateWithoutCompletionsInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => QualityChecklistCreateOrConnectWithoutCompletionsInputSchema).optional(),
  connect: z$2.lazy(() => QualityChecklistWhereUniqueInputSchema).optional()
}).strict();
var UserCreateNestedOneWithoutChecklistCompleteInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => UserCreateWithoutChecklistCompleteInputSchema), z$2.lazy(() => UserUncheckedCreateWithoutChecklistCompleteInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => UserCreateOrConnectWithoutChecklistCompleteInputSchema).optional(),
  connect: z$2.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();
var ChecklistItemCompleteCreateNestedManyWithoutChecklistCompleteInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => ChecklistItemCompleteCreateWithoutChecklistCompleteInputSchema), z$2.lazy(() => ChecklistItemCompleteCreateWithoutChecklistCompleteInputSchema).array(), z$2.lazy(() => ChecklistItemCompleteUncheckedCreateWithoutChecklistCompleteInputSchema), z$2.lazy(() => ChecklistItemCompleteUncheckedCreateWithoutChecklistCompleteInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => ChecklistItemCompleteCreateOrConnectWithoutChecklistCompleteInputSchema), z$2.lazy(() => ChecklistItemCompleteCreateOrConnectWithoutChecklistCompleteInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => ChecklistItemCompleteCreateManyChecklistCompleteInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema), z$2.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema).array()]).optional()
}).strict();
var ChecklistItemCompleteUncheckedCreateNestedManyWithoutChecklistCompleteInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => ChecklistItemCompleteCreateWithoutChecklistCompleteInputSchema), z$2.lazy(() => ChecklistItemCompleteCreateWithoutChecklistCompleteInputSchema).array(), z$2.lazy(() => ChecklistItemCompleteUncheckedCreateWithoutChecklistCompleteInputSchema), z$2.lazy(() => ChecklistItemCompleteUncheckedCreateWithoutChecklistCompleteInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => ChecklistItemCompleteCreateOrConnectWithoutChecklistCompleteInputSchema), z$2.lazy(() => ChecklistItemCompleteCreateOrConnectWithoutChecklistCompleteInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => ChecklistItemCompleteCreateManyChecklistCompleteInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema), z$2.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema).array()]).optional()
}).strict();
var QualityChecklistUpdateOneRequiredWithoutCompletionsNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => QualityChecklistCreateWithoutCompletionsInputSchema), z$2.lazy(() => QualityChecklistUncheckedCreateWithoutCompletionsInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => QualityChecklistCreateOrConnectWithoutCompletionsInputSchema).optional(),
  upsert: z$2.lazy(() => QualityChecklistUpsertWithoutCompletionsInputSchema).optional(),
  connect: z$2.lazy(() => QualityChecklistWhereUniqueInputSchema).optional(),
  update: z$2.union([z$2.lazy(() => QualityChecklistUpdateToOneWithWhereWithoutCompletionsInputSchema), z$2.lazy(() => QualityChecklistUpdateWithoutCompletionsInputSchema), z$2.lazy(() => QualityChecklistUncheckedUpdateWithoutCompletionsInputSchema)]).optional()
}).strict();
var UserUpdateOneRequiredWithoutChecklistCompleteNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => UserCreateWithoutChecklistCompleteInputSchema), z$2.lazy(() => UserUncheckedCreateWithoutChecklistCompleteInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => UserCreateOrConnectWithoutChecklistCompleteInputSchema).optional(),
  upsert: z$2.lazy(() => UserUpsertWithoutChecklistCompleteInputSchema).optional(),
  connect: z$2.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z$2.union([z$2.lazy(() => UserUpdateToOneWithWhereWithoutChecklistCompleteInputSchema), z$2.lazy(() => UserUpdateWithoutChecklistCompleteInputSchema), z$2.lazy(() => UserUncheckedUpdateWithoutChecklistCompleteInputSchema)]).optional()
}).strict();
var ChecklistItemCompleteUpdateManyWithoutChecklistCompleteNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => ChecklistItemCompleteCreateWithoutChecklistCompleteInputSchema), z$2.lazy(() => ChecklistItemCompleteCreateWithoutChecklistCompleteInputSchema).array(), z$2.lazy(() => ChecklistItemCompleteUncheckedCreateWithoutChecklistCompleteInputSchema), z$2.lazy(() => ChecklistItemCompleteUncheckedCreateWithoutChecklistCompleteInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => ChecklistItemCompleteCreateOrConnectWithoutChecklistCompleteInputSchema), z$2.lazy(() => ChecklistItemCompleteCreateOrConnectWithoutChecklistCompleteInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => ChecklistItemCompleteUpsertWithWhereUniqueWithoutChecklistCompleteInputSchema), z$2.lazy(() => ChecklistItemCompleteUpsertWithWhereUniqueWithoutChecklistCompleteInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => ChecklistItemCompleteCreateManyChecklistCompleteInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema), z$2.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema), z$2.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema), z$2.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema), z$2.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => ChecklistItemCompleteUpdateWithWhereUniqueWithoutChecklistCompleteInputSchema), z$2.lazy(() => ChecklistItemCompleteUpdateWithWhereUniqueWithoutChecklistCompleteInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => ChecklistItemCompleteUpdateManyWithWhereWithoutChecklistCompleteInputSchema), z$2.lazy(() => ChecklistItemCompleteUpdateManyWithWhereWithoutChecklistCompleteInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => ChecklistItemCompleteScalarWhereInputSchema), z$2.lazy(() => ChecklistItemCompleteScalarWhereInputSchema).array()]).optional()
}).strict();
var ChecklistItemCompleteUncheckedUpdateManyWithoutChecklistCompleteNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => ChecklistItemCompleteCreateWithoutChecklistCompleteInputSchema), z$2.lazy(() => ChecklistItemCompleteCreateWithoutChecklistCompleteInputSchema).array(), z$2.lazy(() => ChecklistItemCompleteUncheckedCreateWithoutChecklistCompleteInputSchema), z$2.lazy(() => ChecklistItemCompleteUncheckedCreateWithoutChecklistCompleteInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => ChecklistItemCompleteCreateOrConnectWithoutChecklistCompleteInputSchema), z$2.lazy(() => ChecklistItemCompleteCreateOrConnectWithoutChecklistCompleteInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => ChecklistItemCompleteUpsertWithWhereUniqueWithoutChecklistCompleteInputSchema), z$2.lazy(() => ChecklistItemCompleteUpsertWithWhereUniqueWithoutChecklistCompleteInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => ChecklistItemCompleteCreateManyChecklistCompleteInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema), z$2.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema), z$2.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema), z$2.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema), z$2.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => ChecklistItemCompleteUpdateWithWhereUniqueWithoutChecklistCompleteInputSchema), z$2.lazy(() => ChecklistItemCompleteUpdateWithWhereUniqueWithoutChecklistCompleteInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => ChecklistItemCompleteUpdateManyWithWhereWithoutChecklistCompleteInputSchema), z$2.lazy(() => ChecklistItemCompleteUpdateManyWithWhereWithoutChecklistCompleteInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => ChecklistItemCompleteScalarWhereInputSchema), z$2.lazy(() => ChecklistItemCompleteScalarWhereInputSchema).array()]).optional()
}).strict();
var ChecklistItemCompleteCreatephotoUrlsInputSchema = z$2.object({
  set: z$2.string().array()
}).strict();
var ChecklistCompleteCreateNestedOneWithoutItemsInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => ChecklistCompleteCreateWithoutItemsInputSchema), z$2.lazy(() => ChecklistCompleteUncheckedCreateWithoutItemsInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => ChecklistCompleteCreateOrConnectWithoutItemsInputSchema).optional(),
  connect: z$2.lazy(() => ChecklistCompleteWhereUniqueInputSchema).optional()
}).strict();
var ChecklistItemCreateNestedOneWithoutCompletionsInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => ChecklistItemCreateWithoutCompletionsInputSchema), z$2.lazy(() => ChecklistItemUncheckedCreateWithoutCompletionsInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => ChecklistItemCreateOrConnectWithoutCompletionsInputSchema).optional(),
  connect: z$2.lazy(() => ChecklistItemWhereUniqueInputSchema).optional()
}).strict();
var EnumChecklistStatusFieldUpdateOperationsInputSchema = z$2.object({
  set: z$2.lazy(() => ChecklistStatusSchema).optional()
}).strict();
var ChecklistItemCompleteUpdatephotoUrlsInputSchema = z$2.object({
  set: z$2.string().array().optional(),
  push: z$2.union([z$2.string(), z$2.string().array()]).optional()
}).strict();
var ChecklistCompleteUpdateOneRequiredWithoutItemsNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => ChecklistCompleteCreateWithoutItemsInputSchema), z$2.lazy(() => ChecklistCompleteUncheckedCreateWithoutItemsInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => ChecklistCompleteCreateOrConnectWithoutItemsInputSchema).optional(),
  upsert: z$2.lazy(() => ChecklistCompleteUpsertWithoutItemsInputSchema).optional(),
  connect: z$2.lazy(() => ChecklistCompleteWhereUniqueInputSchema).optional(),
  update: z$2.union([z$2.lazy(() => ChecklistCompleteUpdateToOneWithWhereWithoutItemsInputSchema), z$2.lazy(() => ChecklistCompleteUpdateWithoutItemsInputSchema), z$2.lazy(() => ChecklistCompleteUncheckedUpdateWithoutItemsInputSchema)]).optional()
}).strict();
var ChecklistItemUpdateOneRequiredWithoutCompletionsNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => ChecklistItemCreateWithoutCompletionsInputSchema), z$2.lazy(() => ChecklistItemUncheckedCreateWithoutCompletionsInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => ChecklistItemCreateOrConnectWithoutCompletionsInputSchema).optional(),
  upsert: z$2.lazy(() => ChecklistItemUpsertWithoutCompletionsInputSchema).optional(),
  connect: z$2.lazy(() => ChecklistItemWhereUniqueInputSchema).optional(),
  update: z$2.union([z$2.lazy(() => ChecklistItemUpdateToOneWithWhereWithoutCompletionsInputSchema), z$2.lazy(() => ChecklistItemUpdateWithoutCompletionsInputSchema), z$2.lazy(() => ChecklistItemUncheckedUpdateWithoutCompletionsInputSchema)]).optional()
}).strict();
var VendorCreateNestedOneWithoutSupplierPriceHistoryInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => VendorCreateWithoutSupplierPriceHistoryInputSchema), z$2.lazy(() => VendorUncheckedCreateWithoutSupplierPriceHistoryInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => VendorCreateOrConnectWithoutSupplierPriceHistoryInputSchema).optional(),
  connect: z$2.lazy(() => VendorWhereUniqueInputSchema).optional()
}).strict();
var IngredientCreateNestedOneWithoutSupplierPriceHistoryInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => IngredientCreateWithoutSupplierPriceHistoryInputSchema), z$2.lazy(() => IngredientUncheckedCreateWithoutSupplierPriceHistoryInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => IngredientCreateOrConnectWithoutSupplierPriceHistoryInputSchema).optional(),
  connect: z$2.lazy(() => IngredientWhereUniqueInputSchema).optional()
}).strict();
var VendorUpdateOneRequiredWithoutSupplierPriceHistoryNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => VendorCreateWithoutSupplierPriceHistoryInputSchema), z$2.lazy(() => VendorUncheckedCreateWithoutSupplierPriceHistoryInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => VendorCreateOrConnectWithoutSupplierPriceHistoryInputSchema).optional(),
  upsert: z$2.lazy(() => VendorUpsertWithoutSupplierPriceHistoryInputSchema).optional(),
  connect: z$2.lazy(() => VendorWhereUniqueInputSchema).optional(),
  update: z$2.union([z$2.lazy(() => VendorUpdateToOneWithWhereWithoutSupplierPriceHistoryInputSchema), z$2.lazy(() => VendorUpdateWithoutSupplierPriceHistoryInputSchema), z$2.lazy(() => VendorUncheckedUpdateWithoutSupplierPriceHistoryInputSchema)]).optional()
}).strict();
var IngredientUpdateOneRequiredWithoutSupplierPriceHistoryNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => IngredientCreateWithoutSupplierPriceHistoryInputSchema), z$2.lazy(() => IngredientUncheckedCreateWithoutSupplierPriceHistoryInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => IngredientCreateOrConnectWithoutSupplierPriceHistoryInputSchema).optional(),
  upsert: z$2.lazy(() => IngredientUpsertWithoutSupplierPriceHistoryInputSchema).optional(),
  connect: z$2.lazy(() => IngredientWhereUniqueInputSchema).optional(),
  update: z$2.union([z$2.lazy(() => IngredientUpdateToOneWithWhereWithoutSupplierPriceHistoryInputSchema), z$2.lazy(() => IngredientUpdateWithoutSupplierPriceHistoryInputSchema), z$2.lazy(() => IngredientUncheckedUpdateWithoutSupplierPriceHistoryInputSchema)]).optional()
}).strict();
var CustomerFeedbackCreatetagsInputSchema = z$2.object({
  set: z$2.string().array()
}).strict();
var RestaurantCreateNestedOneWithoutQustomerFeedbackInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RestaurantCreateWithoutQustomerFeedbackInputSchema), z$2.lazy(() => RestaurantUncheckedCreateWithoutQustomerFeedbackInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => RestaurantCreateOrConnectWithoutQustomerFeedbackInputSchema).optional(),
  connect: z$2.lazy(() => RestaurantWhereUniqueInputSchema).optional()
}).strict();
var MenuItemCreateNestedOneWithoutFeedbackInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => MenuItemCreateWithoutFeedbackInputSchema), z$2.lazy(() => MenuItemUncheckedCreateWithoutFeedbackInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => MenuItemCreateOrConnectWithoutFeedbackInputSchema).optional(),
  connect: z$2.lazy(() => MenuItemWhereUniqueInputSchema).optional()
}).strict();
var UserCreateNestedOneWithoutCustomerFeedbackInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => UserCreateWithoutCustomerFeedbackInputSchema), z$2.lazy(() => UserUncheckedCreateWithoutCustomerFeedbackInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => UserCreateOrConnectWithoutCustomerFeedbackInputSchema).optional(),
  connect: z$2.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();
var EnumFeedbackSourceFieldUpdateOperationsInputSchema = z$2.object({
  set: z$2.lazy(() => FeedbackSourceSchema).optional()
}).strict();
var CustomerFeedbackUpdatetagsInputSchema = z$2.object({
  set: z$2.string().array().optional(),
  push: z$2.union([z$2.string(), z$2.string().array()]).optional()
}).strict();
var EnumFeedbackStatusFieldUpdateOperationsInputSchema = z$2.object({
  set: z$2.lazy(() => FeedbackStatusSchema).optional()
}).strict();
var RestaurantUpdateOneRequiredWithoutQustomerFeedbackNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RestaurantCreateWithoutQustomerFeedbackInputSchema), z$2.lazy(() => RestaurantUncheckedCreateWithoutQustomerFeedbackInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => RestaurantCreateOrConnectWithoutQustomerFeedbackInputSchema).optional(),
  upsert: z$2.lazy(() => RestaurantUpsertWithoutQustomerFeedbackInputSchema).optional(),
  connect: z$2.lazy(() => RestaurantWhereUniqueInputSchema).optional(),
  update: z$2.union([z$2.lazy(() => RestaurantUpdateToOneWithWhereWithoutQustomerFeedbackInputSchema), z$2.lazy(() => RestaurantUpdateWithoutQustomerFeedbackInputSchema), z$2.lazy(() => RestaurantUncheckedUpdateWithoutQustomerFeedbackInputSchema)]).optional()
}).strict();
var MenuItemUpdateOneWithoutFeedbackNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => MenuItemCreateWithoutFeedbackInputSchema), z$2.lazy(() => MenuItemUncheckedCreateWithoutFeedbackInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => MenuItemCreateOrConnectWithoutFeedbackInputSchema).optional(),
  upsert: z$2.lazy(() => MenuItemUpsertWithoutFeedbackInputSchema).optional(),
  disconnect: z$2.union([z$2.boolean(), z$2.lazy(() => MenuItemWhereInputSchema)]).optional(),
  delete: z$2.union([z$2.boolean(), z$2.lazy(() => MenuItemWhereInputSchema)]).optional(),
  connect: z$2.lazy(() => MenuItemWhereUniqueInputSchema).optional(),
  update: z$2.union([z$2.lazy(() => MenuItemUpdateToOneWithWhereWithoutFeedbackInputSchema), z$2.lazy(() => MenuItemUpdateWithoutFeedbackInputSchema), z$2.lazy(() => MenuItemUncheckedUpdateWithoutFeedbackInputSchema)]).optional()
}).strict();
var UserUpdateOneWithoutCustomerFeedbackNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => UserCreateWithoutCustomerFeedbackInputSchema), z$2.lazy(() => UserUncheckedCreateWithoutCustomerFeedbackInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => UserCreateOrConnectWithoutCustomerFeedbackInputSchema).optional(),
  upsert: z$2.lazy(() => UserUpsertWithoutCustomerFeedbackInputSchema).optional(),
  disconnect: z$2.union([z$2.boolean(), z$2.lazy(() => UserWhereInputSchema)]).optional(),
  delete: z$2.union([z$2.boolean(), z$2.lazy(() => UserWhereInputSchema)]).optional(),
  connect: z$2.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z$2.union([z$2.lazy(() => UserUpdateToOneWithWhereWithoutCustomerFeedbackInputSchema), z$2.lazy(() => UserUpdateWithoutCustomerFeedbackInputSchema), z$2.lazy(() => UserUncheckedUpdateWithoutCustomerFeedbackInputSchema)]).optional()
}).strict();
var MenuItemCreateNestedManyWithoutDietaryRestrictionsInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => MenuItemCreateWithoutDietaryRestrictionsInputSchema), z$2.lazy(() => MenuItemCreateWithoutDietaryRestrictionsInputSchema).array(), z$2.lazy(() => MenuItemUncheckedCreateWithoutDietaryRestrictionsInputSchema), z$2.lazy(() => MenuItemUncheckedCreateWithoutDietaryRestrictionsInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => MenuItemCreateOrConnectWithoutDietaryRestrictionsInputSchema), z$2.lazy(() => MenuItemCreateOrConnectWithoutDietaryRestrictionsInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => MenuItemWhereUniqueInputSchema), z$2.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional()
}).strict();
var RecipeCreateNestedManyWithoutDietaryRestrictionsInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeCreateWithoutDietaryRestrictionsInputSchema), z$2.lazy(() => RecipeCreateWithoutDietaryRestrictionsInputSchema).array(), z$2.lazy(() => RecipeUncheckedCreateWithoutDietaryRestrictionsInputSchema), z$2.lazy(() => RecipeUncheckedCreateWithoutDietaryRestrictionsInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => RecipeCreateOrConnectWithoutDietaryRestrictionsInputSchema), z$2.lazy(() => RecipeCreateOrConnectWithoutDietaryRestrictionsInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => RecipeWhereUniqueInputSchema), z$2.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional()
}).strict();
var IngredientCreateNestedManyWithoutDietaryRestrictionInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => IngredientCreateWithoutDietaryRestrictionInputSchema), z$2.lazy(() => IngredientCreateWithoutDietaryRestrictionInputSchema).array(), z$2.lazy(() => IngredientUncheckedCreateWithoutDietaryRestrictionInputSchema), z$2.lazy(() => IngredientUncheckedCreateWithoutDietaryRestrictionInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => IngredientCreateOrConnectWithoutDietaryRestrictionInputSchema), z$2.lazy(() => IngredientCreateOrConnectWithoutDietaryRestrictionInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => IngredientCreateManyDietaryRestrictionInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => IngredientWhereUniqueInputSchema), z$2.lazy(() => IngredientWhereUniqueInputSchema).array()]).optional()
}).strict();
var MenuItemUncheckedCreateNestedManyWithoutDietaryRestrictionsInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => MenuItemCreateWithoutDietaryRestrictionsInputSchema), z$2.lazy(() => MenuItemCreateWithoutDietaryRestrictionsInputSchema).array(), z$2.lazy(() => MenuItemUncheckedCreateWithoutDietaryRestrictionsInputSchema), z$2.lazy(() => MenuItemUncheckedCreateWithoutDietaryRestrictionsInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => MenuItemCreateOrConnectWithoutDietaryRestrictionsInputSchema), z$2.lazy(() => MenuItemCreateOrConnectWithoutDietaryRestrictionsInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => MenuItemWhereUniqueInputSchema), z$2.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional()
}).strict();
var RecipeUncheckedCreateNestedManyWithoutDietaryRestrictionsInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeCreateWithoutDietaryRestrictionsInputSchema), z$2.lazy(() => RecipeCreateWithoutDietaryRestrictionsInputSchema).array(), z$2.lazy(() => RecipeUncheckedCreateWithoutDietaryRestrictionsInputSchema), z$2.lazy(() => RecipeUncheckedCreateWithoutDietaryRestrictionsInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => RecipeCreateOrConnectWithoutDietaryRestrictionsInputSchema), z$2.lazy(() => RecipeCreateOrConnectWithoutDietaryRestrictionsInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => RecipeWhereUniqueInputSchema), z$2.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional()
}).strict();
var IngredientUncheckedCreateNestedManyWithoutDietaryRestrictionInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => IngredientCreateWithoutDietaryRestrictionInputSchema), z$2.lazy(() => IngredientCreateWithoutDietaryRestrictionInputSchema).array(), z$2.lazy(() => IngredientUncheckedCreateWithoutDietaryRestrictionInputSchema), z$2.lazy(() => IngredientUncheckedCreateWithoutDietaryRestrictionInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => IngredientCreateOrConnectWithoutDietaryRestrictionInputSchema), z$2.lazy(() => IngredientCreateOrConnectWithoutDietaryRestrictionInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => IngredientCreateManyDietaryRestrictionInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => IngredientWhereUniqueInputSchema), z$2.lazy(() => IngredientWhereUniqueInputSchema).array()]).optional()
}).strict();
var MenuItemUpdateManyWithoutDietaryRestrictionsNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => MenuItemCreateWithoutDietaryRestrictionsInputSchema), z$2.lazy(() => MenuItemCreateWithoutDietaryRestrictionsInputSchema).array(), z$2.lazy(() => MenuItemUncheckedCreateWithoutDietaryRestrictionsInputSchema), z$2.lazy(() => MenuItemUncheckedCreateWithoutDietaryRestrictionsInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => MenuItemCreateOrConnectWithoutDietaryRestrictionsInputSchema), z$2.lazy(() => MenuItemCreateOrConnectWithoutDietaryRestrictionsInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => MenuItemUpsertWithWhereUniqueWithoutDietaryRestrictionsInputSchema), z$2.lazy(() => MenuItemUpsertWithWhereUniqueWithoutDietaryRestrictionsInputSchema).array()]).optional(),
  set: z$2.union([z$2.lazy(() => MenuItemWhereUniqueInputSchema), z$2.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => MenuItemWhereUniqueInputSchema), z$2.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => MenuItemWhereUniqueInputSchema), z$2.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => MenuItemWhereUniqueInputSchema), z$2.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => MenuItemUpdateWithWhereUniqueWithoutDietaryRestrictionsInputSchema), z$2.lazy(() => MenuItemUpdateWithWhereUniqueWithoutDietaryRestrictionsInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => MenuItemUpdateManyWithWhereWithoutDietaryRestrictionsInputSchema), z$2.lazy(() => MenuItemUpdateManyWithWhereWithoutDietaryRestrictionsInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => MenuItemScalarWhereInputSchema), z$2.lazy(() => MenuItemScalarWhereInputSchema).array()]).optional()
}).strict();
var RecipeUpdateManyWithoutDietaryRestrictionsNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeCreateWithoutDietaryRestrictionsInputSchema), z$2.lazy(() => RecipeCreateWithoutDietaryRestrictionsInputSchema).array(), z$2.lazy(() => RecipeUncheckedCreateWithoutDietaryRestrictionsInputSchema), z$2.lazy(() => RecipeUncheckedCreateWithoutDietaryRestrictionsInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => RecipeCreateOrConnectWithoutDietaryRestrictionsInputSchema), z$2.lazy(() => RecipeCreateOrConnectWithoutDietaryRestrictionsInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => RecipeUpsertWithWhereUniqueWithoutDietaryRestrictionsInputSchema), z$2.lazy(() => RecipeUpsertWithWhereUniqueWithoutDietaryRestrictionsInputSchema).array()]).optional(),
  set: z$2.union([z$2.lazy(() => RecipeWhereUniqueInputSchema), z$2.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => RecipeWhereUniqueInputSchema), z$2.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => RecipeWhereUniqueInputSchema), z$2.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => RecipeWhereUniqueInputSchema), z$2.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => RecipeUpdateWithWhereUniqueWithoutDietaryRestrictionsInputSchema), z$2.lazy(() => RecipeUpdateWithWhereUniqueWithoutDietaryRestrictionsInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => RecipeUpdateManyWithWhereWithoutDietaryRestrictionsInputSchema), z$2.lazy(() => RecipeUpdateManyWithWhereWithoutDietaryRestrictionsInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => RecipeScalarWhereInputSchema), z$2.lazy(() => RecipeScalarWhereInputSchema).array()]).optional()
}).strict();
var IngredientUpdateManyWithoutDietaryRestrictionNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => IngredientCreateWithoutDietaryRestrictionInputSchema), z$2.lazy(() => IngredientCreateWithoutDietaryRestrictionInputSchema).array(), z$2.lazy(() => IngredientUncheckedCreateWithoutDietaryRestrictionInputSchema), z$2.lazy(() => IngredientUncheckedCreateWithoutDietaryRestrictionInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => IngredientCreateOrConnectWithoutDietaryRestrictionInputSchema), z$2.lazy(() => IngredientCreateOrConnectWithoutDietaryRestrictionInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => IngredientUpsertWithWhereUniqueWithoutDietaryRestrictionInputSchema), z$2.lazy(() => IngredientUpsertWithWhereUniqueWithoutDietaryRestrictionInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => IngredientCreateManyDietaryRestrictionInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => IngredientWhereUniqueInputSchema), z$2.lazy(() => IngredientWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => IngredientWhereUniqueInputSchema), z$2.lazy(() => IngredientWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => IngredientWhereUniqueInputSchema), z$2.lazy(() => IngredientWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => IngredientWhereUniqueInputSchema), z$2.lazy(() => IngredientWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => IngredientUpdateWithWhereUniqueWithoutDietaryRestrictionInputSchema), z$2.lazy(() => IngredientUpdateWithWhereUniqueWithoutDietaryRestrictionInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => IngredientUpdateManyWithWhereWithoutDietaryRestrictionInputSchema), z$2.lazy(() => IngredientUpdateManyWithWhereWithoutDietaryRestrictionInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => IngredientScalarWhereInputSchema), z$2.lazy(() => IngredientScalarWhereInputSchema).array()]).optional()
}).strict();
var MenuItemUncheckedUpdateManyWithoutDietaryRestrictionsNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => MenuItemCreateWithoutDietaryRestrictionsInputSchema), z$2.lazy(() => MenuItemCreateWithoutDietaryRestrictionsInputSchema).array(), z$2.lazy(() => MenuItemUncheckedCreateWithoutDietaryRestrictionsInputSchema), z$2.lazy(() => MenuItemUncheckedCreateWithoutDietaryRestrictionsInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => MenuItemCreateOrConnectWithoutDietaryRestrictionsInputSchema), z$2.lazy(() => MenuItemCreateOrConnectWithoutDietaryRestrictionsInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => MenuItemUpsertWithWhereUniqueWithoutDietaryRestrictionsInputSchema), z$2.lazy(() => MenuItemUpsertWithWhereUniqueWithoutDietaryRestrictionsInputSchema).array()]).optional(),
  set: z$2.union([z$2.lazy(() => MenuItemWhereUniqueInputSchema), z$2.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => MenuItemWhereUniqueInputSchema), z$2.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => MenuItemWhereUniqueInputSchema), z$2.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => MenuItemWhereUniqueInputSchema), z$2.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => MenuItemUpdateWithWhereUniqueWithoutDietaryRestrictionsInputSchema), z$2.lazy(() => MenuItemUpdateWithWhereUniqueWithoutDietaryRestrictionsInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => MenuItemUpdateManyWithWhereWithoutDietaryRestrictionsInputSchema), z$2.lazy(() => MenuItemUpdateManyWithWhereWithoutDietaryRestrictionsInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => MenuItemScalarWhereInputSchema), z$2.lazy(() => MenuItemScalarWhereInputSchema).array()]).optional()
}).strict();
var RecipeUncheckedUpdateManyWithoutDietaryRestrictionsNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeCreateWithoutDietaryRestrictionsInputSchema), z$2.lazy(() => RecipeCreateWithoutDietaryRestrictionsInputSchema).array(), z$2.lazy(() => RecipeUncheckedCreateWithoutDietaryRestrictionsInputSchema), z$2.lazy(() => RecipeUncheckedCreateWithoutDietaryRestrictionsInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => RecipeCreateOrConnectWithoutDietaryRestrictionsInputSchema), z$2.lazy(() => RecipeCreateOrConnectWithoutDietaryRestrictionsInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => RecipeUpsertWithWhereUniqueWithoutDietaryRestrictionsInputSchema), z$2.lazy(() => RecipeUpsertWithWhereUniqueWithoutDietaryRestrictionsInputSchema).array()]).optional(),
  set: z$2.union([z$2.lazy(() => RecipeWhereUniqueInputSchema), z$2.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => RecipeWhereUniqueInputSchema), z$2.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => RecipeWhereUniqueInputSchema), z$2.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => RecipeWhereUniqueInputSchema), z$2.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => RecipeUpdateWithWhereUniqueWithoutDietaryRestrictionsInputSchema), z$2.lazy(() => RecipeUpdateWithWhereUniqueWithoutDietaryRestrictionsInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => RecipeUpdateManyWithWhereWithoutDietaryRestrictionsInputSchema), z$2.lazy(() => RecipeUpdateManyWithWhereWithoutDietaryRestrictionsInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => RecipeScalarWhereInputSchema), z$2.lazy(() => RecipeScalarWhereInputSchema).array()]).optional()
}).strict();
var IngredientUncheckedUpdateManyWithoutDietaryRestrictionNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => IngredientCreateWithoutDietaryRestrictionInputSchema), z$2.lazy(() => IngredientCreateWithoutDietaryRestrictionInputSchema).array(), z$2.lazy(() => IngredientUncheckedCreateWithoutDietaryRestrictionInputSchema), z$2.lazy(() => IngredientUncheckedCreateWithoutDietaryRestrictionInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => IngredientCreateOrConnectWithoutDietaryRestrictionInputSchema), z$2.lazy(() => IngredientCreateOrConnectWithoutDietaryRestrictionInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => IngredientUpsertWithWhereUniqueWithoutDietaryRestrictionInputSchema), z$2.lazy(() => IngredientUpsertWithWhereUniqueWithoutDietaryRestrictionInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => IngredientCreateManyDietaryRestrictionInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => IngredientWhereUniqueInputSchema), z$2.lazy(() => IngredientWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => IngredientWhereUniqueInputSchema), z$2.lazy(() => IngredientWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => IngredientWhereUniqueInputSchema), z$2.lazy(() => IngredientWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => IngredientWhereUniqueInputSchema), z$2.lazy(() => IngredientWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => IngredientUpdateWithWhereUniqueWithoutDietaryRestrictionInputSchema), z$2.lazy(() => IngredientUpdateWithWhereUniqueWithoutDietaryRestrictionInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => IngredientUpdateManyWithWhereWithoutDietaryRestrictionInputSchema), z$2.lazy(() => IngredientUpdateManyWithWhereWithoutDietaryRestrictionInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => IngredientScalarWhereInputSchema), z$2.lazy(() => IngredientScalarWhereInputSchema).array()]).optional()
}).strict();
var RecipeCreateNestedManyWithoutTagsInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeCreateWithoutTagsInputSchema), z$2.lazy(() => RecipeCreateWithoutTagsInputSchema).array(), z$2.lazy(() => RecipeUncheckedCreateWithoutTagsInputSchema), z$2.lazy(() => RecipeUncheckedCreateWithoutTagsInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => RecipeCreateOrConnectWithoutTagsInputSchema), z$2.lazy(() => RecipeCreateOrConnectWithoutTagsInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => RecipeWhereUniqueInputSchema), z$2.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional()
}).strict();
var RecipeUncheckedCreateNestedManyWithoutTagsInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeCreateWithoutTagsInputSchema), z$2.lazy(() => RecipeCreateWithoutTagsInputSchema).array(), z$2.lazy(() => RecipeUncheckedCreateWithoutTagsInputSchema), z$2.lazy(() => RecipeUncheckedCreateWithoutTagsInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => RecipeCreateOrConnectWithoutTagsInputSchema), z$2.lazy(() => RecipeCreateOrConnectWithoutTagsInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => RecipeWhereUniqueInputSchema), z$2.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional()
}).strict();
var RecipeUpdateManyWithoutTagsNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeCreateWithoutTagsInputSchema), z$2.lazy(() => RecipeCreateWithoutTagsInputSchema).array(), z$2.lazy(() => RecipeUncheckedCreateWithoutTagsInputSchema), z$2.lazy(() => RecipeUncheckedCreateWithoutTagsInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => RecipeCreateOrConnectWithoutTagsInputSchema), z$2.lazy(() => RecipeCreateOrConnectWithoutTagsInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => RecipeUpsertWithWhereUniqueWithoutTagsInputSchema), z$2.lazy(() => RecipeUpsertWithWhereUniqueWithoutTagsInputSchema).array()]).optional(),
  set: z$2.union([z$2.lazy(() => RecipeWhereUniqueInputSchema), z$2.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => RecipeWhereUniqueInputSchema), z$2.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => RecipeWhereUniqueInputSchema), z$2.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => RecipeWhereUniqueInputSchema), z$2.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => RecipeUpdateWithWhereUniqueWithoutTagsInputSchema), z$2.lazy(() => RecipeUpdateWithWhereUniqueWithoutTagsInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => RecipeUpdateManyWithWhereWithoutTagsInputSchema), z$2.lazy(() => RecipeUpdateManyWithWhereWithoutTagsInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => RecipeScalarWhereInputSchema), z$2.lazy(() => RecipeScalarWhereInputSchema).array()]).optional()
}).strict();
var RecipeUncheckedUpdateManyWithoutTagsNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeCreateWithoutTagsInputSchema), z$2.lazy(() => RecipeCreateWithoutTagsInputSchema).array(), z$2.lazy(() => RecipeUncheckedCreateWithoutTagsInputSchema), z$2.lazy(() => RecipeUncheckedCreateWithoutTagsInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => RecipeCreateOrConnectWithoutTagsInputSchema), z$2.lazy(() => RecipeCreateOrConnectWithoutTagsInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => RecipeUpsertWithWhereUniqueWithoutTagsInputSchema), z$2.lazy(() => RecipeUpsertWithWhereUniqueWithoutTagsInputSchema).array()]).optional(),
  set: z$2.union([z$2.lazy(() => RecipeWhereUniqueInputSchema), z$2.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => RecipeWhereUniqueInputSchema), z$2.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => RecipeWhereUniqueInputSchema), z$2.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => RecipeWhereUniqueInputSchema), z$2.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => RecipeUpdateWithWhereUniqueWithoutTagsInputSchema), z$2.lazy(() => RecipeUpdateWithWhereUniqueWithoutTagsInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => RecipeUpdateManyWithWhereWithoutTagsInputSchema), z$2.lazy(() => RecipeUpdateManyWithWhereWithoutTagsInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => RecipeScalarWhereInputSchema), z$2.lazy(() => RecipeScalarWhereInputSchema).array()]).optional()
}).strict();
var RestaurantCreateNestedOneWithoutLeftoverItemInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RestaurantCreateWithoutLeftoverItemInputSchema), z$2.lazy(() => RestaurantUncheckedCreateWithoutLeftoverItemInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => RestaurantCreateOrConnectWithoutLeftoverItemInputSchema).optional(),
  connect: z$2.lazy(() => RestaurantWhereUniqueInputSchema).optional()
}).strict();
var MenuItemCreateNestedOneWithoutLeftoverItemInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => MenuItemCreateWithoutLeftoverItemInputSchema), z$2.lazy(() => MenuItemUncheckedCreateWithoutLeftoverItemInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => MenuItemCreateOrConnectWithoutLeftoverItemInputSchema).optional(),
  connect: z$2.lazy(() => MenuItemWhereUniqueInputSchema).optional()
}).strict();
var UserCreateNestedOneWithoutLeftoverItemInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => UserCreateWithoutLeftoverItemInputSchema), z$2.lazy(() => UserUncheckedCreateWithoutLeftoverItemInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => UserCreateOrConnectWithoutLeftoverItemInputSchema).optional(),
  connect: z$2.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();
var RestaurantUpdateOneRequiredWithoutLeftoverItemNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RestaurantCreateWithoutLeftoverItemInputSchema), z$2.lazy(() => RestaurantUncheckedCreateWithoutLeftoverItemInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => RestaurantCreateOrConnectWithoutLeftoverItemInputSchema).optional(),
  upsert: z$2.lazy(() => RestaurantUpsertWithoutLeftoverItemInputSchema).optional(),
  connect: z$2.lazy(() => RestaurantWhereUniqueInputSchema).optional(),
  update: z$2.union([z$2.lazy(() => RestaurantUpdateToOneWithWhereWithoutLeftoverItemInputSchema), z$2.lazy(() => RestaurantUpdateWithoutLeftoverItemInputSchema), z$2.lazy(() => RestaurantUncheckedUpdateWithoutLeftoverItemInputSchema)]).optional()
}).strict();
var MenuItemUpdateOneRequiredWithoutLeftoverItemNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => MenuItemCreateWithoutLeftoverItemInputSchema), z$2.lazy(() => MenuItemUncheckedCreateWithoutLeftoverItemInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => MenuItemCreateOrConnectWithoutLeftoverItemInputSchema).optional(),
  upsert: z$2.lazy(() => MenuItemUpsertWithoutLeftoverItemInputSchema).optional(),
  connect: z$2.lazy(() => MenuItemWhereUniqueInputSchema).optional(),
  update: z$2.union([z$2.lazy(() => MenuItemUpdateToOneWithWhereWithoutLeftoverItemInputSchema), z$2.lazy(() => MenuItemUpdateWithoutLeftoverItemInputSchema), z$2.lazy(() => MenuItemUncheckedUpdateWithoutLeftoverItemInputSchema)]).optional()
}).strict();
var UserUpdateOneRequiredWithoutLeftoverItemNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => UserCreateWithoutLeftoverItemInputSchema), z$2.lazy(() => UserUncheckedCreateWithoutLeftoverItemInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => UserCreateOrConnectWithoutLeftoverItemInputSchema).optional(),
  upsert: z$2.lazy(() => UserUpsertWithoutLeftoverItemInputSchema).optional(),
  connect: z$2.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z$2.union([z$2.lazy(() => UserUpdateToOneWithWhereWithoutLeftoverItemInputSchema), z$2.lazy(() => UserUpdateWithoutLeftoverItemInputSchema), z$2.lazy(() => UserUncheckedUpdateWithoutLeftoverItemInputSchema)]).optional()
}).strict();
var RestaurantCreateNestedOneWithoutWasteRecordInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RestaurantCreateWithoutWasteRecordInputSchema), z$2.lazy(() => RestaurantUncheckedCreateWithoutWasteRecordInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => RestaurantCreateOrConnectWithoutWasteRecordInputSchema).optional(),
  connect: z$2.lazy(() => RestaurantWhereUniqueInputSchema).optional()
}).strict();
var IngredientCreateNestedOneWithoutWasteRecordInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => IngredientCreateWithoutWasteRecordInputSchema), z$2.lazy(() => IngredientUncheckedCreateWithoutWasteRecordInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => IngredientCreateOrConnectWithoutWasteRecordInputSchema).optional(),
  connect: z$2.lazy(() => IngredientWhereUniqueInputSchema).optional()
}).strict();
var UserCreateNestedOneWithoutWasteRecordInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => UserCreateWithoutWasteRecordInputSchema), z$2.lazy(() => UserUncheckedCreateWithoutWasteRecordInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => UserCreateOrConnectWithoutWasteRecordInputSchema).optional(),
  connect: z$2.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();
var RestaurantUpdateOneRequiredWithoutWasteRecordNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RestaurantCreateWithoutWasteRecordInputSchema), z$2.lazy(() => RestaurantUncheckedCreateWithoutWasteRecordInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => RestaurantCreateOrConnectWithoutWasteRecordInputSchema).optional(),
  upsert: z$2.lazy(() => RestaurantUpsertWithoutWasteRecordInputSchema).optional(),
  connect: z$2.lazy(() => RestaurantWhereUniqueInputSchema).optional(),
  update: z$2.union([z$2.lazy(() => RestaurantUpdateToOneWithWhereWithoutWasteRecordInputSchema), z$2.lazy(() => RestaurantUpdateWithoutWasteRecordInputSchema), z$2.lazy(() => RestaurantUncheckedUpdateWithoutWasteRecordInputSchema)]).optional()
}).strict();
var IngredientUpdateOneRequiredWithoutWasteRecordNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => IngredientCreateWithoutWasteRecordInputSchema), z$2.lazy(() => IngredientUncheckedCreateWithoutWasteRecordInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => IngredientCreateOrConnectWithoutWasteRecordInputSchema).optional(),
  upsert: z$2.lazy(() => IngredientUpsertWithoutWasteRecordInputSchema).optional(),
  connect: z$2.lazy(() => IngredientWhereUniqueInputSchema).optional(),
  update: z$2.union([z$2.lazy(() => IngredientUpdateToOneWithWhereWithoutWasteRecordInputSchema), z$2.lazy(() => IngredientUpdateWithoutWasteRecordInputSchema), z$2.lazy(() => IngredientUncheckedUpdateWithoutWasteRecordInputSchema)]).optional()
}).strict();
var UserUpdateOneRequiredWithoutWasteRecordNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => UserCreateWithoutWasteRecordInputSchema), z$2.lazy(() => UserUncheckedCreateWithoutWasteRecordInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => UserCreateOrConnectWithoutWasteRecordInputSchema).optional(),
  upsert: z$2.lazy(() => UserUpsertWithoutWasteRecordInputSchema).optional(),
  connect: z$2.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z$2.union([z$2.lazy(() => UserUpdateToOneWithWhereWithoutWasteRecordInputSchema), z$2.lazy(() => UserUpdateWithoutWasteRecordInputSchema), z$2.lazy(() => UserUncheckedUpdateWithoutWasteRecordInputSchema)]).optional()
}).strict();
var RestaurantCreateNestedOneWithoutProductionPlanInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RestaurantCreateWithoutProductionPlanInputSchema), z$2.lazy(() => RestaurantUncheckedCreateWithoutProductionPlanInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => RestaurantCreateOrConnectWithoutProductionPlanInputSchema).optional(),
  connect: z$2.lazy(() => RestaurantWhereUniqueInputSchema).optional()
}).strict();
var UserCreateNestedOneWithoutProductionPlanInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => UserCreateWithoutProductionPlanInputSchema), z$2.lazy(() => UserUncheckedCreateWithoutProductionPlanInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => UserCreateOrConnectWithoutProductionPlanInputSchema).optional(),
  connect: z$2.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();
var ProductionPlanItemCreateNestedManyWithoutProductionPlanInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => ProductionPlanItemCreateWithoutProductionPlanInputSchema), z$2.lazy(() => ProductionPlanItemCreateWithoutProductionPlanInputSchema).array(), z$2.lazy(() => ProductionPlanItemUncheckedCreateWithoutProductionPlanInputSchema), z$2.lazy(() => ProductionPlanItemUncheckedCreateWithoutProductionPlanInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => ProductionPlanItemCreateOrConnectWithoutProductionPlanInputSchema), z$2.lazy(() => ProductionPlanItemCreateOrConnectWithoutProductionPlanInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => ProductionPlanItemCreateManyProductionPlanInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => ProductionPlanItemWhereUniqueInputSchema), z$2.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array()]).optional()
}).strict();
var ProductionPlanItemUncheckedCreateNestedManyWithoutProductionPlanInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => ProductionPlanItemCreateWithoutProductionPlanInputSchema), z$2.lazy(() => ProductionPlanItemCreateWithoutProductionPlanInputSchema).array(), z$2.lazy(() => ProductionPlanItemUncheckedCreateWithoutProductionPlanInputSchema), z$2.lazy(() => ProductionPlanItemUncheckedCreateWithoutProductionPlanInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => ProductionPlanItemCreateOrConnectWithoutProductionPlanInputSchema), z$2.lazy(() => ProductionPlanItemCreateOrConnectWithoutProductionPlanInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => ProductionPlanItemCreateManyProductionPlanInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => ProductionPlanItemWhereUniqueInputSchema), z$2.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array()]).optional()
}).strict();
var RestaurantUpdateOneRequiredWithoutProductionPlanNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RestaurantCreateWithoutProductionPlanInputSchema), z$2.lazy(() => RestaurantUncheckedCreateWithoutProductionPlanInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => RestaurantCreateOrConnectWithoutProductionPlanInputSchema).optional(),
  upsert: z$2.lazy(() => RestaurantUpsertWithoutProductionPlanInputSchema).optional(),
  connect: z$2.lazy(() => RestaurantWhereUniqueInputSchema).optional(),
  update: z$2.union([z$2.lazy(() => RestaurantUpdateToOneWithWhereWithoutProductionPlanInputSchema), z$2.lazy(() => RestaurantUpdateWithoutProductionPlanInputSchema), z$2.lazy(() => RestaurantUncheckedUpdateWithoutProductionPlanInputSchema)]).optional()
}).strict();
var UserUpdateOneRequiredWithoutProductionPlanNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => UserCreateWithoutProductionPlanInputSchema), z$2.lazy(() => UserUncheckedCreateWithoutProductionPlanInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => UserCreateOrConnectWithoutProductionPlanInputSchema).optional(),
  upsert: z$2.lazy(() => UserUpsertWithoutProductionPlanInputSchema).optional(),
  connect: z$2.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z$2.union([z$2.lazy(() => UserUpdateToOneWithWhereWithoutProductionPlanInputSchema), z$2.lazy(() => UserUpdateWithoutProductionPlanInputSchema), z$2.lazy(() => UserUncheckedUpdateWithoutProductionPlanInputSchema)]).optional()
}).strict();
var ProductionPlanItemUpdateManyWithoutProductionPlanNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => ProductionPlanItemCreateWithoutProductionPlanInputSchema), z$2.lazy(() => ProductionPlanItemCreateWithoutProductionPlanInputSchema).array(), z$2.lazy(() => ProductionPlanItemUncheckedCreateWithoutProductionPlanInputSchema), z$2.lazy(() => ProductionPlanItemUncheckedCreateWithoutProductionPlanInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => ProductionPlanItemCreateOrConnectWithoutProductionPlanInputSchema), z$2.lazy(() => ProductionPlanItemCreateOrConnectWithoutProductionPlanInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => ProductionPlanItemUpsertWithWhereUniqueWithoutProductionPlanInputSchema), z$2.lazy(() => ProductionPlanItemUpsertWithWhereUniqueWithoutProductionPlanInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => ProductionPlanItemCreateManyProductionPlanInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => ProductionPlanItemWhereUniqueInputSchema), z$2.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => ProductionPlanItemWhereUniqueInputSchema), z$2.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => ProductionPlanItemWhereUniqueInputSchema), z$2.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => ProductionPlanItemWhereUniqueInputSchema), z$2.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => ProductionPlanItemUpdateWithWhereUniqueWithoutProductionPlanInputSchema), z$2.lazy(() => ProductionPlanItemUpdateWithWhereUniqueWithoutProductionPlanInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => ProductionPlanItemUpdateManyWithWhereWithoutProductionPlanInputSchema), z$2.lazy(() => ProductionPlanItemUpdateManyWithWhereWithoutProductionPlanInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => ProductionPlanItemScalarWhereInputSchema), z$2.lazy(() => ProductionPlanItemScalarWhereInputSchema).array()]).optional()
}).strict();
var ProductionPlanItemUncheckedUpdateManyWithoutProductionPlanNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => ProductionPlanItemCreateWithoutProductionPlanInputSchema), z$2.lazy(() => ProductionPlanItemCreateWithoutProductionPlanInputSchema).array(), z$2.lazy(() => ProductionPlanItemUncheckedCreateWithoutProductionPlanInputSchema), z$2.lazy(() => ProductionPlanItemUncheckedCreateWithoutProductionPlanInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => ProductionPlanItemCreateOrConnectWithoutProductionPlanInputSchema), z$2.lazy(() => ProductionPlanItemCreateOrConnectWithoutProductionPlanInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => ProductionPlanItemUpsertWithWhereUniqueWithoutProductionPlanInputSchema), z$2.lazy(() => ProductionPlanItemUpsertWithWhereUniqueWithoutProductionPlanInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => ProductionPlanItemCreateManyProductionPlanInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => ProductionPlanItemWhereUniqueInputSchema), z$2.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => ProductionPlanItemWhereUniqueInputSchema), z$2.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => ProductionPlanItemWhereUniqueInputSchema), z$2.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => ProductionPlanItemWhereUniqueInputSchema), z$2.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => ProductionPlanItemUpdateWithWhereUniqueWithoutProductionPlanInputSchema), z$2.lazy(() => ProductionPlanItemUpdateWithWhereUniqueWithoutProductionPlanInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => ProductionPlanItemUpdateManyWithWhereWithoutProductionPlanInputSchema), z$2.lazy(() => ProductionPlanItemUpdateManyWithWhereWithoutProductionPlanInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => ProductionPlanItemScalarWhereInputSchema), z$2.lazy(() => ProductionPlanItemScalarWhereInputSchema).array()]).optional()
}).strict();
var ProductionPlanCreateNestedOneWithoutItemsInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => ProductionPlanCreateWithoutItemsInputSchema), z$2.lazy(() => ProductionPlanUncheckedCreateWithoutItemsInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => ProductionPlanCreateOrConnectWithoutItemsInputSchema).optional(),
  connect: z$2.lazy(() => ProductionPlanWhereUniqueInputSchema).optional()
}).strict();
var RecipeCreateNestedOneWithoutProductionPlanItemInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeCreateWithoutProductionPlanItemInputSchema), z$2.lazy(() => RecipeUncheckedCreateWithoutProductionPlanItemInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => RecipeCreateOrConnectWithoutProductionPlanItemInputSchema).optional(),
  connect: z$2.lazy(() => RecipeWhereUniqueInputSchema).optional()
}).strict();
var UserCreateNestedOneWithoutProductionPlanItemInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => UserCreateWithoutProductionPlanItemInputSchema), z$2.lazy(() => UserUncheckedCreateWithoutProductionPlanItemInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => UserCreateOrConnectWithoutProductionPlanItemInputSchema).optional(),
  connect: z$2.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();
var ProductionPlanUpdateOneRequiredWithoutItemsNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => ProductionPlanCreateWithoutItemsInputSchema), z$2.lazy(() => ProductionPlanUncheckedCreateWithoutItemsInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => ProductionPlanCreateOrConnectWithoutItemsInputSchema).optional(),
  upsert: z$2.lazy(() => ProductionPlanUpsertWithoutItemsInputSchema).optional(),
  connect: z$2.lazy(() => ProductionPlanWhereUniqueInputSchema).optional(),
  update: z$2.union([z$2.lazy(() => ProductionPlanUpdateToOneWithWhereWithoutItemsInputSchema), z$2.lazy(() => ProductionPlanUpdateWithoutItemsInputSchema), z$2.lazy(() => ProductionPlanUncheckedUpdateWithoutItemsInputSchema)]).optional()
}).strict();
var RecipeUpdateOneRequiredWithoutProductionPlanItemNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeCreateWithoutProductionPlanItemInputSchema), z$2.lazy(() => RecipeUncheckedCreateWithoutProductionPlanItemInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => RecipeCreateOrConnectWithoutProductionPlanItemInputSchema).optional(),
  upsert: z$2.lazy(() => RecipeUpsertWithoutProductionPlanItemInputSchema).optional(),
  connect: z$2.lazy(() => RecipeWhereUniqueInputSchema).optional(),
  update: z$2.union([z$2.lazy(() => RecipeUpdateToOneWithWhereWithoutProductionPlanItemInputSchema), z$2.lazy(() => RecipeUpdateWithoutProductionPlanItemInputSchema), z$2.lazy(() => RecipeUncheckedUpdateWithoutProductionPlanItemInputSchema)]).optional()
}).strict();
var UserUpdateOneWithoutProductionPlanItemNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => UserCreateWithoutProductionPlanItemInputSchema), z$2.lazy(() => UserUncheckedCreateWithoutProductionPlanItemInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => UserCreateOrConnectWithoutProductionPlanItemInputSchema).optional(),
  upsert: z$2.lazy(() => UserUpsertWithoutProductionPlanItemInputSchema).optional(),
  disconnect: z$2.union([z$2.boolean(), z$2.lazy(() => UserWhereInputSchema)]).optional(),
  delete: z$2.union([z$2.boolean(), z$2.lazy(() => UserWhereInputSchema)]).optional(),
  connect: z$2.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z$2.union([z$2.lazy(() => UserUpdateToOneWithWhereWithoutProductionPlanItemInputSchema), z$2.lazy(() => UserUpdateWithoutProductionPlanItemInputSchema), z$2.lazy(() => UserUncheckedUpdateWithoutProductionPlanItemInputSchema)]).optional()
}).strict();
var ShiftCreateNestedOneWithoutShiftTaskInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => ShiftCreateWithoutShiftTaskInputSchema), z$2.lazy(() => ShiftUncheckedCreateWithoutShiftTaskInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => ShiftCreateOrConnectWithoutShiftTaskInputSchema).optional(),
  connect: z$2.lazy(() => ShiftWhereUniqueInputSchema).optional()
}).strict();
var EnumTaskTypeFieldUpdateOperationsInputSchema = z$2.object({
  set: z$2.lazy(() => TaskTypeSchema).optional()
}).strict();
var ShiftUpdateOneRequiredWithoutShiftTaskNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => ShiftCreateWithoutShiftTaskInputSchema), z$2.lazy(() => ShiftUncheckedCreateWithoutShiftTaskInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => ShiftCreateOrConnectWithoutShiftTaskInputSchema).optional(),
  upsert: z$2.lazy(() => ShiftUpsertWithoutShiftTaskInputSchema).optional(),
  connect: z$2.lazy(() => ShiftWhereUniqueInputSchema).optional(),
  update: z$2.union([z$2.lazy(() => ShiftUpdateToOneWithWhereWithoutShiftTaskInputSchema), z$2.lazy(() => ShiftUpdateWithoutShiftTaskInputSchema), z$2.lazy(() => ShiftUncheckedUpdateWithoutShiftTaskInputSchema)]).optional()
}).strict();
var UserCreateNestedOneWithoutAvailabilityInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => UserCreateWithoutAvailabilityInputSchema), z$2.lazy(() => UserUncheckedCreateWithoutAvailabilityInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => UserCreateOrConnectWithoutAvailabilityInputSchema).optional(),
  connect: z$2.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();
var EnumDayOfWeekFieldUpdateOperationsInputSchema = z$2.object({
  set: z$2.lazy(() => DayOfWeekSchema).optional()
}).strict();
var UserUpdateOneRequiredWithoutAvailabilityNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => UserCreateWithoutAvailabilityInputSchema), z$2.lazy(() => UserUncheckedCreateWithoutAvailabilityInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => UserCreateOrConnectWithoutAvailabilityInputSchema).optional(),
  upsert: z$2.lazy(() => UserUpsertWithoutAvailabilityInputSchema).optional(),
  connect: z$2.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z$2.union([z$2.lazy(() => UserUpdateToOneWithWhereWithoutAvailabilityInputSchema), z$2.lazy(() => UserUpdateWithoutAvailabilityInputSchema), z$2.lazy(() => UserUncheckedUpdateWithoutAvailabilityInputSchema)]).optional()
}).strict();
var UserCreateNestedOneWithoutSchedulingConstraintInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => UserCreateWithoutSchedulingConstraintInputSchema), z$2.lazy(() => UserUncheckedCreateWithoutSchedulingConstraintInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => UserCreateOrConnectWithoutSchedulingConstraintInputSchema).optional(),
  connect: z$2.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();
var EnumConstraintTypeFieldUpdateOperationsInputSchema = z$2.object({
  set: z$2.lazy(() => ConstraintTypeSchema).optional()
}).strict();
var UserUpdateOneRequiredWithoutSchedulingConstraintNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => UserCreateWithoutSchedulingConstraintInputSchema), z$2.lazy(() => UserUncheckedCreateWithoutSchedulingConstraintInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => UserCreateOrConnectWithoutSchedulingConstraintInputSchema).optional(),
  upsert: z$2.lazy(() => UserUpsertWithoutSchedulingConstraintInputSchema).optional(),
  connect: z$2.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z$2.union([z$2.lazy(() => UserUpdateToOneWithWhereWithoutSchedulingConstraintInputSchema), z$2.lazy(() => UserUpdateWithoutSchedulingConstraintInputSchema), z$2.lazy(() => UserUncheckedUpdateWithoutSchedulingConstraintInputSchema)]).optional()
}).strict();
var InventoryItemCreateNestedOneWithoutInventoryWithdrawalInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => InventoryItemCreateWithoutInventoryWithdrawalInputSchema), z$2.lazy(() => InventoryItemUncheckedCreateWithoutInventoryWithdrawalInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => InventoryItemCreateOrConnectWithoutInventoryWithdrawalInputSchema).optional(),
  connect: z$2.lazy(() => InventoryItemWhereUniqueInputSchema).optional()
}).strict();
var RecipeCreateNestedOneWithoutInventoryWithdrawalInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeCreateWithoutInventoryWithdrawalInputSchema), z$2.lazy(() => RecipeUncheckedCreateWithoutInventoryWithdrawalInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => RecipeCreateOrConnectWithoutInventoryWithdrawalInputSchema).optional(),
  connect: z$2.lazy(() => RecipeWhereUniqueInputSchema).optional()
}).strict();
var UserCreateNestedOneWithoutInventoryWithdrawalInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => UserCreateWithoutInventoryWithdrawalInputSchema), z$2.lazy(() => UserUncheckedCreateWithoutInventoryWithdrawalInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => UserCreateOrConnectWithoutInventoryWithdrawalInputSchema).optional(),
  connect: z$2.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();
var InventoryItemUpdateOneRequiredWithoutInventoryWithdrawalNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => InventoryItemCreateWithoutInventoryWithdrawalInputSchema), z$2.lazy(() => InventoryItemUncheckedCreateWithoutInventoryWithdrawalInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => InventoryItemCreateOrConnectWithoutInventoryWithdrawalInputSchema).optional(),
  upsert: z$2.lazy(() => InventoryItemUpsertWithoutInventoryWithdrawalInputSchema).optional(),
  connect: z$2.lazy(() => InventoryItemWhereUniqueInputSchema).optional(),
  update: z$2.union([z$2.lazy(() => InventoryItemUpdateToOneWithWhereWithoutInventoryWithdrawalInputSchema), z$2.lazy(() => InventoryItemUpdateWithoutInventoryWithdrawalInputSchema), z$2.lazy(() => InventoryItemUncheckedUpdateWithoutInventoryWithdrawalInputSchema)]).optional()
}).strict();
var RecipeUpdateOneWithoutInventoryWithdrawalNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeCreateWithoutInventoryWithdrawalInputSchema), z$2.lazy(() => RecipeUncheckedCreateWithoutInventoryWithdrawalInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => RecipeCreateOrConnectWithoutInventoryWithdrawalInputSchema).optional(),
  upsert: z$2.lazy(() => RecipeUpsertWithoutInventoryWithdrawalInputSchema).optional(),
  disconnect: z$2.union([z$2.boolean(), z$2.lazy(() => RecipeWhereInputSchema)]).optional(),
  delete: z$2.union([z$2.boolean(), z$2.lazy(() => RecipeWhereInputSchema)]).optional(),
  connect: z$2.lazy(() => RecipeWhereUniqueInputSchema).optional(),
  update: z$2.union([z$2.lazy(() => RecipeUpdateToOneWithWhereWithoutInventoryWithdrawalInputSchema), z$2.lazy(() => RecipeUpdateWithoutInventoryWithdrawalInputSchema), z$2.lazy(() => RecipeUncheckedUpdateWithoutInventoryWithdrawalInputSchema)]).optional()
}).strict();
var UserUpdateOneRequiredWithoutInventoryWithdrawalNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => UserCreateWithoutInventoryWithdrawalInputSchema), z$2.lazy(() => UserUncheckedCreateWithoutInventoryWithdrawalInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => UserCreateOrConnectWithoutInventoryWithdrawalInputSchema).optional(),
  upsert: z$2.lazy(() => UserUpsertWithoutInventoryWithdrawalInputSchema).optional(),
  connect: z$2.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z$2.union([z$2.lazy(() => UserUpdateToOneWithWhereWithoutInventoryWithdrawalInputSchema), z$2.lazy(() => UserUpdateWithoutInventoryWithdrawalInputSchema), z$2.lazy(() => UserUncheckedUpdateWithoutInventoryWithdrawalInputSchema)]).optional()
}).strict();
var IngredientAllergenCreateNestedManyWithoutAllergenInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => IngredientAllergenCreateWithoutAllergenInputSchema), z$2.lazy(() => IngredientAllergenCreateWithoutAllergenInputSchema).array(), z$2.lazy(() => IngredientAllergenUncheckedCreateWithoutAllergenInputSchema), z$2.lazy(() => IngredientAllergenUncheckedCreateWithoutAllergenInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => IngredientAllergenCreateOrConnectWithoutAllergenInputSchema), z$2.lazy(() => IngredientAllergenCreateOrConnectWithoutAllergenInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => IngredientAllergenCreateManyAllergenInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => IngredientAllergenWhereUniqueInputSchema), z$2.lazy(() => IngredientAllergenWhereUniqueInputSchema).array()]).optional()
}).strict();
var IngredientAllergenUncheckedCreateNestedManyWithoutAllergenInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => IngredientAllergenCreateWithoutAllergenInputSchema), z$2.lazy(() => IngredientAllergenCreateWithoutAllergenInputSchema).array(), z$2.lazy(() => IngredientAllergenUncheckedCreateWithoutAllergenInputSchema), z$2.lazy(() => IngredientAllergenUncheckedCreateWithoutAllergenInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => IngredientAllergenCreateOrConnectWithoutAllergenInputSchema), z$2.lazy(() => IngredientAllergenCreateOrConnectWithoutAllergenInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => IngredientAllergenCreateManyAllergenInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => IngredientAllergenWhereUniqueInputSchema), z$2.lazy(() => IngredientAllergenWhereUniqueInputSchema).array()]).optional()
}).strict();
var IngredientAllergenUpdateManyWithoutAllergenNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => IngredientAllergenCreateWithoutAllergenInputSchema), z$2.lazy(() => IngredientAllergenCreateWithoutAllergenInputSchema).array(), z$2.lazy(() => IngredientAllergenUncheckedCreateWithoutAllergenInputSchema), z$2.lazy(() => IngredientAllergenUncheckedCreateWithoutAllergenInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => IngredientAllergenCreateOrConnectWithoutAllergenInputSchema), z$2.lazy(() => IngredientAllergenCreateOrConnectWithoutAllergenInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => IngredientAllergenUpsertWithWhereUniqueWithoutAllergenInputSchema), z$2.lazy(() => IngredientAllergenUpsertWithWhereUniqueWithoutAllergenInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => IngredientAllergenCreateManyAllergenInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => IngredientAllergenWhereUniqueInputSchema), z$2.lazy(() => IngredientAllergenWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => IngredientAllergenWhereUniqueInputSchema), z$2.lazy(() => IngredientAllergenWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => IngredientAllergenWhereUniqueInputSchema), z$2.lazy(() => IngredientAllergenWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => IngredientAllergenWhereUniqueInputSchema), z$2.lazy(() => IngredientAllergenWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => IngredientAllergenUpdateWithWhereUniqueWithoutAllergenInputSchema), z$2.lazy(() => IngredientAllergenUpdateWithWhereUniqueWithoutAllergenInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => IngredientAllergenUpdateManyWithWhereWithoutAllergenInputSchema), z$2.lazy(() => IngredientAllergenUpdateManyWithWhereWithoutAllergenInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => IngredientAllergenScalarWhereInputSchema), z$2.lazy(() => IngredientAllergenScalarWhereInputSchema).array()]).optional()
}).strict();
var IngredientAllergenUncheckedUpdateManyWithoutAllergenNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => IngredientAllergenCreateWithoutAllergenInputSchema), z$2.lazy(() => IngredientAllergenCreateWithoutAllergenInputSchema).array(), z$2.lazy(() => IngredientAllergenUncheckedCreateWithoutAllergenInputSchema), z$2.lazy(() => IngredientAllergenUncheckedCreateWithoutAllergenInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => IngredientAllergenCreateOrConnectWithoutAllergenInputSchema), z$2.lazy(() => IngredientAllergenCreateOrConnectWithoutAllergenInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => IngredientAllergenUpsertWithWhereUniqueWithoutAllergenInputSchema), z$2.lazy(() => IngredientAllergenUpsertWithWhereUniqueWithoutAllergenInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => IngredientAllergenCreateManyAllergenInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => IngredientAllergenWhereUniqueInputSchema), z$2.lazy(() => IngredientAllergenWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => IngredientAllergenWhereUniqueInputSchema), z$2.lazy(() => IngredientAllergenWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => IngredientAllergenWhereUniqueInputSchema), z$2.lazy(() => IngredientAllergenWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => IngredientAllergenWhereUniqueInputSchema), z$2.lazy(() => IngredientAllergenWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => IngredientAllergenUpdateWithWhereUniqueWithoutAllergenInputSchema), z$2.lazy(() => IngredientAllergenUpdateWithWhereUniqueWithoutAllergenInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => IngredientAllergenUpdateManyWithWhereWithoutAllergenInputSchema), z$2.lazy(() => IngredientAllergenUpdateManyWithWhereWithoutAllergenInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => IngredientAllergenScalarWhereInputSchema), z$2.lazy(() => IngredientAllergenScalarWhereInputSchema).array()]).optional()
}).strict();
var IngredientCreateNestedOneWithoutIngredientAllergenInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => IngredientCreateWithoutIngredientAllergenInputSchema), z$2.lazy(() => IngredientUncheckedCreateWithoutIngredientAllergenInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => IngredientCreateOrConnectWithoutIngredientAllergenInputSchema).optional(),
  connect: z$2.lazy(() => IngredientWhereUniqueInputSchema).optional()
}).strict();
var AllergenCreateNestedOneWithoutIngredientsInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => AllergenCreateWithoutIngredientsInputSchema), z$2.lazy(() => AllergenUncheckedCreateWithoutIngredientsInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => AllergenCreateOrConnectWithoutIngredientsInputSchema).optional(),
  connect: z$2.lazy(() => AllergenWhereUniqueInputSchema).optional()
}).strict();
var IngredientUpdateOneRequiredWithoutIngredientAllergenNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => IngredientCreateWithoutIngredientAllergenInputSchema), z$2.lazy(() => IngredientUncheckedCreateWithoutIngredientAllergenInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => IngredientCreateOrConnectWithoutIngredientAllergenInputSchema).optional(),
  upsert: z$2.lazy(() => IngredientUpsertWithoutIngredientAllergenInputSchema).optional(),
  connect: z$2.lazy(() => IngredientWhereUniqueInputSchema).optional(),
  update: z$2.union([z$2.lazy(() => IngredientUpdateToOneWithWhereWithoutIngredientAllergenInputSchema), z$2.lazy(() => IngredientUpdateWithoutIngredientAllergenInputSchema), z$2.lazy(() => IngredientUncheckedUpdateWithoutIngredientAllergenInputSchema)]).optional()
}).strict();
var AllergenUpdateOneRequiredWithoutIngredientsNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => AllergenCreateWithoutIngredientsInputSchema), z$2.lazy(() => AllergenUncheckedCreateWithoutIngredientsInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => AllergenCreateOrConnectWithoutIngredientsInputSchema).optional(),
  upsert: z$2.lazy(() => AllergenUpsertWithoutIngredientsInputSchema).optional(),
  connect: z$2.lazy(() => AllergenWhereUniqueInputSchema).optional(),
  update: z$2.union([z$2.lazy(() => AllergenUpdateToOneWithWhereWithoutIngredientsInputSchema), z$2.lazy(() => AllergenUpdateWithoutIngredientsInputSchema), z$2.lazy(() => AllergenUncheckedUpdateWithoutIngredientsInputSchema)]).optional()
}).strict();
var MenuItemCreateNestedOneWithoutNutritionalRecommendationInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => MenuItemCreateWithoutNutritionalRecommendationInputSchema), z$2.lazy(() => MenuItemUncheckedCreateWithoutNutritionalRecommendationInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => MenuItemCreateOrConnectWithoutNutritionalRecommendationInputSchema).optional(),
  connect: z$2.lazy(() => MenuItemWhereUniqueInputSchema).optional()
}).strict();
var MenuItemUpdateOneRequiredWithoutNutritionalRecommendationNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => MenuItemCreateWithoutNutritionalRecommendationInputSchema), z$2.lazy(() => MenuItemUncheckedCreateWithoutNutritionalRecommendationInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => MenuItemCreateOrConnectWithoutNutritionalRecommendationInputSchema).optional(),
  upsert: z$2.lazy(() => MenuItemUpsertWithoutNutritionalRecommendationInputSchema).optional(),
  connect: z$2.lazy(() => MenuItemWhereUniqueInputSchema).optional(),
  update: z$2.union([z$2.lazy(() => MenuItemUpdateToOneWithWhereWithoutNutritionalRecommendationInputSchema), z$2.lazy(() => MenuItemUpdateWithoutNutritionalRecommendationInputSchema), z$2.lazy(() => MenuItemUncheckedUpdateWithoutNutritionalRecommendationInputSchema)]).optional()
}).strict();
var RestaurantCreateNestedManyWithoutOrganizationInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RestaurantCreateWithoutOrganizationInputSchema), z$2.lazy(() => RestaurantCreateWithoutOrganizationInputSchema).array(), z$2.lazy(() => RestaurantUncheckedCreateWithoutOrganizationInputSchema), z$2.lazy(() => RestaurantUncheckedCreateWithoutOrganizationInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => RestaurantCreateOrConnectWithoutOrganizationInputSchema), z$2.lazy(() => RestaurantCreateOrConnectWithoutOrganizationInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => RestaurantCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => RestaurantWhereUniqueInputSchema), z$2.lazy(() => RestaurantWhereUniqueInputSchema).array()]).optional()
}).strict();
var UserCreateNestedManyWithoutOrganizationInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => UserCreateWithoutOrganizationInputSchema), z$2.lazy(() => UserCreateWithoutOrganizationInputSchema).array(), z$2.lazy(() => UserUncheckedCreateWithoutOrganizationInputSchema), z$2.lazy(() => UserUncheckedCreateWithoutOrganizationInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => UserCreateOrConnectWithoutOrganizationInputSchema), z$2.lazy(() => UserCreateOrConnectWithoutOrganizationInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => UserCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => UserWhereUniqueInputSchema), z$2.lazy(() => UserWhereUniqueInputSchema).array()]).optional()
}).strict();
var RestaurantUncheckedCreateNestedManyWithoutOrganizationInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RestaurantCreateWithoutOrganizationInputSchema), z$2.lazy(() => RestaurantCreateWithoutOrganizationInputSchema).array(), z$2.lazy(() => RestaurantUncheckedCreateWithoutOrganizationInputSchema), z$2.lazy(() => RestaurantUncheckedCreateWithoutOrganizationInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => RestaurantCreateOrConnectWithoutOrganizationInputSchema), z$2.lazy(() => RestaurantCreateOrConnectWithoutOrganizationInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => RestaurantCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => RestaurantWhereUniqueInputSchema), z$2.lazy(() => RestaurantWhereUniqueInputSchema).array()]).optional()
}).strict();
var UserUncheckedCreateNestedManyWithoutOrganizationInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => UserCreateWithoutOrganizationInputSchema), z$2.lazy(() => UserCreateWithoutOrganizationInputSchema).array(), z$2.lazy(() => UserUncheckedCreateWithoutOrganizationInputSchema), z$2.lazy(() => UserUncheckedCreateWithoutOrganizationInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => UserCreateOrConnectWithoutOrganizationInputSchema), z$2.lazy(() => UserCreateOrConnectWithoutOrganizationInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => UserCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => UserWhereUniqueInputSchema), z$2.lazy(() => UserWhereUniqueInputSchema).array()]).optional()
}).strict();
var RestaurantUpdateManyWithoutOrganizationNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RestaurantCreateWithoutOrganizationInputSchema), z$2.lazy(() => RestaurantCreateWithoutOrganizationInputSchema).array(), z$2.lazy(() => RestaurantUncheckedCreateWithoutOrganizationInputSchema), z$2.lazy(() => RestaurantUncheckedCreateWithoutOrganizationInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => RestaurantCreateOrConnectWithoutOrganizationInputSchema), z$2.lazy(() => RestaurantCreateOrConnectWithoutOrganizationInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => RestaurantUpsertWithWhereUniqueWithoutOrganizationInputSchema), z$2.lazy(() => RestaurantUpsertWithWhereUniqueWithoutOrganizationInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => RestaurantCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => RestaurantWhereUniqueInputSchema), z$2.lazy(() => RestaurantWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => RestaurantWhereUniqueInputSchema), z$2.lazy(() => RestaurantWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => RestaurantWhereUniqueInputSchema), z$2.lazy(() => RestaurantWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => RestaurantWhereUniqueInputSchema), z$2.lazy(() => RestaurantWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => RestaurantUpdateWithWhereUniqueWithoutOrganizationInputSchema), z$2.lazy(() => RestaurantUpdateWithWhereUniqueWithoutOrganizationInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => RestaurantUpdateManyWithWhereWithoutOrganizationInputSchema), z$2.lazy(() => RestaurantUpdateManyWithWhereWithoutOrganizationInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => RestaurantScalarWhereInputSchema), z$2.lazy(() => RestaurantScalarWhereInputSchema).array()]).optional()
}).strict();
var UserUpdateManyWithoutOrganizationNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => UserCreateWithoutOrganizationInputSchema), z$2.lazy(() => UserCreateWithoutOrganizationInputSchema).array(), z$2.lazy(() => UserUncheckedCreateWithoutOrganizationInputSchema), z$2.lazy(() => UserUncheckedCreateWithoutOrganizationInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => UserCreateOrConnectWithoutOrganizationInputSchema), z$2.lazy(() => UserCreateOrConnectWithoutOrganizationInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => UserUpsertWithWhereUniqueWithoutOrganizationInputSchema), z$2.lazy(() => UserUpsertWithWhereUniqueWithoutOrganizationInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => UserCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => UserWhereUniqueInputSchema), z$2.lazy(() => UserWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => UserWhereUniqueInputSchema), z$2.lazy(() => UserWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => UserWhereUniqueInputSchema), z$2.lazy(() => UserWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => UserWhereUniqueInputSchema), z$2.lazy(() => UserWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => UserUpdateWithWhereUniqueWithoutOrganizationInputSchema), z$2.lazy(() => UserUpdateWithWhereUniqueWithoutOrganizationInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => UserUpdateManyWithWhereWithoutOrganizationInputSchema), z$2.lazy(() => UserUpdateManyWithWhereWithoutOrganizationInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => UserScalarWhereInputSchema), z$2.lazy(() => UserScalarWhereInputSchema).array()]).optional()
}).strict();
var RestaurantUncheckedUpdateManyWithoutOrganizationNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RestaurantCreateWithoutOrganizationInputSchema), z$2.lazy(() => RestaurantCreateWithoutOrganizationInputSchema).array(), z$2.lazy(() => RestaurantUncheckedCreateWithoutOrganizationInputSchema), z$2.lazy(() => RestaurantUncheckedCreateWithoutOrganizationInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => RestaurantCreateOrConnectWithoutOrganizationInputSchema), z$2.lazy(() => RestaurantCreateOrConnectWithoutOrganizationInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => RestaurantUpsertWithWhereUniqueWithoutOrganizationInputSchema), z$2.lazy(() => RestaurantUpsertWithWhereUniqueWithoutOrganizationInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => RestaurantCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => RestaurantWhereUniqueInputSchema), z$2.lazy(() => RestaurantWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => RestaurantWhereUniqueInputSchema), z$2.lazy(() => RestaurantWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => RestaurantWhereUniqueInputSchema), z$2.lazy(() => RestaurantWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => RestaurantWhereUniqueInputSchema), z$2.lazy(() => RestaurantWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => RestaurantUpdateWithWhereUniqueWithoutOrganizationInputSchema), z$2.lazy(() => RestaurantUpdateWithWhereUniqueWithoutOrganizationInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => RestaurantUpdateManyWithWhereWithoutOrganizationInputSchema), z$2.lazy(() => RestaurantUpdateManyWithWhereWithoutOrganizationInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => RestaurantScalarWhereInputSchema), z$2.lazy(() => RestaurantScalarWhereInputSchema).array()]).optional()
}).strict();
var UserUncheckedUpdateManyWithoutOrganizationNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => UserCreateWithoutOrganizationInputSchema), z$2.lazy(() => UserCreateWithoutOrganizationInputSchema).array(), z$2.lazy(() => UserUncheckedCreateWithoutOrganizationInputSchema), z$2.lazy(() => UserUncheckedCreateWithoutOrganizationInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => UserCreateOrConnectWithoutOrganizationInputSchema), z$2.lazy(() => UserCreateOrConnectWithoutOrganizationInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => UserUpsertWithWhereUniqueWithoutOrganizationInputSchema), z$2.lazy(() => UserUpsertWithWhereUniqueWithoutOrganizationInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => UserCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => UserWhereUniqueInputSchema), z$2.lazy(() => UserWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => UserWhereUniqueInputSchema), z$2.lazy(() => UserWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => UserWhereUniqueInputSchema), z$2.lazy(() => UserWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => UserWhereUniqueInputSchema), z$2.lazy(() => UserWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => UserUpdateWithWhereUniqueWithoutOrganizationInputSchema), z$2.lazy(() => UserUpdateWithWhereUniqueWithoutOrganizationInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => UserUpdateManyWithWhereWithoutOrganizationInputSchema), z$2.lazy(() => UserUpdateManyWithWhereWithoutOrganizationInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => UserScalarWhereInputSchema), z$2.lazy(() => UserScalarWhereInputSchema).array()]).optional()
}).strict();
var OrganizationCreateNestedOneWithoutRestaurantsInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => OrganizationCreateWithoutRestaurantsInputSchema), z$2.lazy(() => OrganizationUncheckedCreateWithoutRestaurantsInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => OrganizationCreateOrConnectWithoutRestaurantsInputSchema).optional(),
  connect: z$2.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();
var UserCreateNestedManyWithoutRestaurantInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => UserCreateWithoutRestaurantInputSchema), z$2.lazy(() => UserCreateWithoutRestaurantInputSchema).array(), z$2.lazy(() => UserUncheckedCreateWithoutRestaurantInputSchema), z$2.lazy(() => UserUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => UserCreateOrConnectWithoutRestaurantInputSchema), z$2.lazy(() => UserCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => UserCreateManyRestaurantInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => UserWhereUniqueInputSchema), z$2.lazy(() => UserWhereUniqueInputSchema).array()]).optional()
}).strict();
var CookBookCreateNestedManyWithoutRestaurantInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => CookBookCreateWithoutRestaurantInputSchema), z$2.lazy(() => CookBookCreateWithoutRestaurantInputSchema).array(), z$2.lazy(() => CookBookUncheckedCreateWithoutRestaurantInputSchema), z$2.lazy(() => CookBookUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => CookBookCreateOrConnectWithoutRestaurantInputSchema), z$2.lazy(() => CookBookCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => CookBookCreateManyRestaurantInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => CookBookWhereUniqueInputSchema), z$2.lazy(() => CookBookWhereUniqueInputSchema).array()]).optional()
}).strict();
var InventoryCreateNestedOneWithoutRestaurantInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => InventoryCreateWithoutRestaurantInputSchema), z$2.lazy(() => InventoryUncheckedCreateWithoutRestaurantInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => InventoryCreateOrConnectWithoutRestaurantInputSchema).optional(),
  connect: z$2.lazy(() => InventoryWhereUniqueInputSchema).optional()
}).strict();
var OrderCreateNestedManyWithoutRestaurantInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => OrderCreateWithoutRestaurantInputSchema), z$2.lazy(() => OrderCreateWithoutRestaurantInputSchema).array(), z$2.lazy(() => OrderUncheckedCreateWithoutRestaurantInputSchema), z$2.lazy(() => OrderUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => OrderCreateOrConnectWithoutRestaurantInputSchema), z$2.lazy(() => OrderCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => OrderCreateManyRestaurantInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => OrderWhereUniqueInputSchema), z$2.lazy(() => OrderWhereUniqueInputSchema).array()]).optional()
}).strict();
var RecipeCreateNestedManyWithoutRestaurantInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeCreateWithoutRestaurantInputSchema), z$2.lazy(() => RecipeCreateWithoutRestaurantInputSchema).array(), z$2.lazy(() => RecipeUncheckedCreateWithoutRestaurantInputSchema), z$2.lazy(() => RecipeUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => RecipeCreateOrConnectWithoutRestaurantInputSchema), z$2.lazy(() => RecipeCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => RecipeCreateManyRestaurantInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => RecipeWhereUniqueInputSchema), z$2.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional()
}).strict();
var MenuCreateNestedManyWithoutRestaurantInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => MenuCreateWithoutRestaurantInputSchema), z$2.lazy(() => MenuCreateWithoutRestaurantInputSchema).array(), z$2.lazy(() => MenuUncheckedCreateWithoutRestaurantInputSchema), z$2.lazy(() => MenuUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => MenuCreateOrConnectWithoutRestaurantInputSchema), z$2.lazy(() => MenuCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => MenuCreateManyRestaurantInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => MenuWhereUniqueInputSchema), z$2.lazy(() => MenuWhereUniqueInputSchema).array()]).optional()
}).strict();
var SalesTransactionsCreateNestedManyWithoutRestaurantInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => SalesTransactionsCreateWithoutRestaurantInputSchema), z$2.lazy(() => SalesTransactionsCreateWithoutRestaurantInputSchema).array(), z$2.lazy(() => SalesTransactionsUncheckedCreateWithoutRestaurantInputSchema), z$2.lazy(() => SalesTransactionsUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => SalesTransactionsCreateOrConnectWithoutRestaurantInputSchema), z$2.lazy(() => SalesTransactionsCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => SalesTransactionsCreateManyRestaurantInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => SalesTransactionsWhereUniqueInputSchema), z$2.lazy(() => SalesTransactionsWhereUniqueInputSchema).array()]).optional()
}).strict();
var LeftoverItemCreateNestedManyWithoutRestaurantInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => LeftoverItemCreateWithoutRestaurantInputSchema), z$2.lazy(() => LeftoverItemCreateWithoutRestaurantInputSchema).array(), z$2.lazy(() => LeftoverItemUncheckedCreateWithoutRestaurantInputSchema), z$2.lazy(() => LeftoverItemUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => LeftoverItemCreateOrConnectWithoutRestaurantInputSchema), z$2.lazy(() => LeftoverItemCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => LeftoverItemCreateManyRestaurantInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => LeftoverItemWhereUniqueInputSchema), z$2.lazy(() => LeftoverItemWhereUniqueInputSchema).array()]).optional()
}).strict();
var WasteRecordCreateNestedManyWithoutRestaurantInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => WasteRecordCreateWithoutRestaurantInputSchema), z$2.lazy(() => WasteRecordCreateWithoutRestaurantInputSchema).array(), z$2.lazy(() => WasteRecordUncheckedCreateWithoutRestaurantInputSchema), z$2.lazy(() => WasteRecordUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => WasteRecordCreateOrConnectWithoutRestaurantInputSchema), z$2.lazy(() => WasteRecordCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => WasteRecordCreateManyRestaurantInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => WasteRecordWhereUniqueInputSchema), z$2.lazy(() => WasteRecordWhereUniqueInputSchema).array()]).optional()
}).strict();
var ProductionPlanCreateNestedManyWithoutRestaurantInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => ProductionPlanCreateWithoutRestaurantInputSchema), z$2.lazy(() => ProductionPlanCreateWithoutRestaurantInputSchema).array(), z$2.lazy(() => ProductionPlanUncheckedCreateWithoutRestaurantInputSchema), z$2.lazy(() => ProductionPlanUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => ProductionPlanCreateOrConnectWithoutRestaurantInputSchema), z$2.lazy(() => ProductionPlanCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => ProductionPlanCreateManyRestaurantInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => ProductionPlanWhereUniqueInputSchema), z$2.lazy(() => ProductionPlanWhereUniqueInputSchema).array()]).optional()
}).strict();
var EquipmentCreateNestedManyWithoutRestaurantInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => EquipmentCreateWithoutRestaurantInputSchema), z$2.lazy(() => EquipmentCreateWithoutRestaurantInputSchema).array(), z$2.lazy(() => EquipmentUncheckedCreateWithoutRestaurantInputSchema), z$2.lazy(() => EquipmentUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => EquipmentCreateOrConnectWithoutRestaurantInputSchema), z$2.lazy(() => EquipmentCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => EquipmentCreateManyRestaurantInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => EquipmentWhereUniqueInputSchema), z$2.lazy(() => EquipmentWhereUniqueInputSchema).array()]).optional()
}).strict();
var QualityChecklistCreateNestedManyWithoutRestaurantInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => QualityChecklistCreateWithoutRestaurantInputSchema), z$2.lazy(() => QualityChecklistCreateWithoutRestaurantInputSchema).array(), z$2.lazy(() => QualityChecklistUncheckedCreateWithoutRestaurantInputSchema), z$2.lazy(() => QualityChecklistUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => QualityChecklistCreateOrConnectWithoutRestaurantInputSchema), z$2.lazy(() => QualityChecklistCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => QualityChecklistCreateManyRestaurantInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => QualityChecklistWhereUniqueInputSchema), z$2.lazy(() => QualityChecklistWhereUniqueInputSchema).array()]).optional()
}).strict();
var CustomerFeedbackCreateNestedManyWithoutRestaurantInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => CustomerFeedbackCreateWithoutRestaurantInputSchema), z$2.lazy(() => CustomerFeedbackCreateWithoutRestaurantInputSchema).array(), z$2.lazy(() => CustomerFeedbackUncheckedCreateWithoutRestaurantInputSchema), z$2.lazy(() => CustomerFeedbackUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => CustomerFeedbackCreateOrConnectWithoutRestaurantInputSchema), z$2.lazy(() => CustomerFeedbackCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => CustomerFeedbackCreateManyRestaurantInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => CustomerFeedbackWhereUniqueInputSchema), z$2.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array()]).optional()
}).strict();
var UserUncheckedCreateNestedManyWithoutRestaurantInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => UserCreateWithoutRestaurantInputSchema), z$2.lazy(() => UserCreateWithoutRestaurantInputSchema).array(), z$2.lazy(() => UserUncheckedCreateWithoutRestaurantInputSchema), z$2.lazy(() => UserUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => UserCreateOrConnectWithoutRestaurantInputSchema), z$2.lazy(() => UserCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => UserCreateManyRestaurantInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => UserWhereUniqueInputSchema), z$2.lazy(() => UserWhereUniqueInputSchema).array()]).optional()
}).strict();
var CookBookUncheckedCreateNestedManyWithoutRestaurantInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => CookBookCreateWithoutRestaurantInputSchema), z$2.lazy(() => CookBookCreateWithoutRestaurantInputSchema).array(), z$2.lazy(() => CookBookUncheckedCreateWithoutRestaurantInputSchema), z$2.lazy(() => CookBookUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => CookBookCreateOrConnectWithoutRestaurantInputSchema), z$2.lazy(() => CookBookCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => CookBookCreateManyRestaurantInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => CookBookWhereUniqueInputSchema), z$2.lazy(() => CookBookWhereUniqueInputSchema).array()]).optional()
}).strict();
var InventoryUncheckedCreateNestedOneWithoutRestaurantInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => InventoryCreateWithoutRestaurantInputSchema), z$2.lazy(() => InventoryUncheckedCreateWithoutRestaurantInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => InventoryCreateOrConnectWithoutRestaurantInputSchema).optional(),
  connect: z$2.lazy(() => InventoryWhereUniqueInputSchema).optional()
}).strict();
var OrderUncheckedCreateNestedManyWithoutRestaurantInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => OrderCreateWithoutRestaurantInputSchema), z$2.lazy(() => OrderCreateWithoutRestaurantInputSchema).array(), z$2.lazy(() => OrderUncheckedCreateWithoutRestaurantInputSchema), z$2.lazy(() => OrderUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => OrderCreateOrConnectWithoutRestaurantInputSchema), z$2.lazy(() => OrderCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => OrderCreateManyRestaurantInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => OrderWhereUniqueInputSchema), z$2.lazy(() => OrderWhereUniqueInputSchema).array()]).optional()
}).strict();
var RecipeUncheckedCreateNestedManyWithoutRestaurantInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeCreateWithoutRestaurantInputSchema), z$2.lazy(() => RecipeCreateWithoutRestaurantInputSchema).array(), z$2.lazy(() => RecipeUncheckedCreateWithoutRestaurantInputSchema), z$2.lazy(() => RecipeUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => RecipeCreateOrConnectWithoutRestaurantInputSchema), z$2.lazy(() => RecipeCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => RecipeCreateManyRestaurantInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => RecipeWhereUniqueInputSchema), z$2.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional()
}).strict();
var MenuUncheckedCreateNestedManyWithoutRestaurantInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => MenuCreateWithoutRestaurantInputSchema), z$2.lazy(() => MenuCreateWithoutRestaurantInputSchema).array(), z$2.lazy(() => MenuUncheckedCreateWithoutRestaurantInputSchema), z$2.lazy(() => MenuUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => MenuCreateOrConnectWithoutRestaurantInputSchema), z$2.lazy(() => MenuCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => MenuCreateManyRestaurantInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => MenuWhereUniqueInputSchema), z$2.lazy(() => MenuWhereUniqueInputSchema).array()]).optional()
}).strict();
var SalesTransactionsUncheckedCreateNestedManyWithoutRestaurantInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => SalesTransactionsCreateWithoutRestaurantInputSchema), z$2.lazy(() => SalesTransactionsCreateWithoutRestaurantInputSchema).array(), z$2.lazy(() => SalesTransactionsUncheckedCreateWithoutRestaurantInputSchema), z$2.lazy(() => SalesTransactionsUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => SalesTransactionsCreateOrConnectWithoutRestaurantInputSchema), z$2.lazy(() => SalesTransactionsCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => SalesTransactionsCreateManyRestaurantInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => SalesTransactionsWhereUniqueInputSchema), z$2.lazy(() => SalesTransactionsWhereUniqueInputSchema).array()]).optional()
}).strict();
var LeftoverItemUncheckedCreateNestedManyWithoutRestaurantInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => LeftoverItemCreateWithoutRestaurantInputSchema), z$2.lazy(() => LeftoverItemCreateWithoutRestaurantInputSchema).array(), z$2.lazy(() => LeftoverItemUncheckedCreateWithoutRestaurantInputSchema), z$2.lazy(() => LeftoverItemUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => LeftoverItemCreateOrConnectWithoutRestaurantInputSchema), z$2.lazy(() => LeftoverItemCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => LeftoverItemCreateManyRestaurantInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => LeftoverItemWhereUniqueInputSchema), z$2.lazy(() => LeftoverItemWhereUniqueInputSchema).array()]).optional()
}).strict();
var WasteRecordUncheckedCreateNestedManyWithoutRestaurantInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => WasteRecordCreateWithoutRestaurantInputSchema), z$2.lazy(() => WasteRecordCreateWithoutRestaurantInputSchema).array(), z$2.lazy(() => WasteRecordUncheckedCreateWithoutRestaurantInputSchema), z$2.lazy(() => WasteRecordUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => WasteRecordCreateOrConnectWithoutRestaurantInputSchema), z$2.lazy(() => WasteRecordCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => WasteRecordCreateManyRestaurantInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => WasteRecordWhereUniqueInputSchema), z$2.lazy(() => WasteRecordWhereUniqueInputSchema).array()]).optional()
}).strict();
var ProductionPlanUncheckedCreateNestedManyWithoutRestaurantInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => ProductionPlanCreateWithoutRestaurantInputSchema), z$2.lazy(() => ProductionPlanCreateWithoutRestaurantInputSchema).array(), z$2.lazy(() => ProductionPlanUncheckedCreateWithoutRestaurantInputSchema), z$2.lazy(() => ProductionPlanUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => ProductionPlanCreateOrConnectWithoutRestaurantInputSchema), z$2.lazy(() => ProductionPlanCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => ProductionPlanCreateManyRestaurantInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => ProductionPlanWhereUniqueInputSchema), z$2.lazy(() => ProductionPlanWhereUniqueInputSchema).array()]).optional()
}).strict();
var EquipmentUncheckedCreateNestedManyWithoutRestaurantInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => EquipmentCreateWithoutRestaurantInputSchema), z$2.lazy(() => EquipmentCreateWithoutRestaurantInputSchema).array(), z$2.lazy(() => EquipmentUncheckedCreateWithoutRestaurantInputSchema), z$2.lazy(() => EquipmentUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => EquipmentCreateOrConnectWithoutRestaurantInputSchema), z$2.lazy(() => EquipmentCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => EquipmentCreateManyRestaurantInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => EquipmentWhereUniqueInputSchema), z$2.lazy(() => EquipmentWhereUniqueInputSchema).array()]).optional()
}).strict();
var QualityChecklistUncheckedCreateNestedManyWithoutRestaurantInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => QualityChecklistCreateWithoutRestaurantInputSchema), z$2.lazy(() => QualityChecklistCreateWithoutRestaurantInputSchema).array(), z$2.lazy(() => QualityChecklistUncheckedCreateWithoutRestaurantInputSchema), z$2.lazy(() => QualityChecklistUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => QualityChecklistCreateOrConnectWithoutRestaurantInputSchema), z$2.lazy(() => QualityChecklistCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => QualityChecklistCreateManyRestaurantInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => QualityChecklistWhereUniqueInputSchema), z$2.lazy(() => QualityChecklistWhereUniqueInputSchema).array()]).optional()
}).strict();
var CustomerFeedbackUncheckedCreateNestedManyWithoutRestaurantInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => CustomerFeedbackCreateWithoutRestaurantInputSchema), z$2.lazy(() => CustomerFeedbackCreateWithoutRestaurantInputSchema).array(), z$2.lazy(() => CustomerFeedbackUncheckedCreateWithoutRestaurantInputSchema), z$2.lazy(() => CustomerFeedbackUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => CustomerFeedbackCreateOrConnectWithoutRestaurantInputSchema), z$2.lazy(() => CustomerFeedbackCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => CustomerFeedbackCreateManyRestaurantInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => CustomerFeedbackWhereUniqueInputSchema), z$2.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array()]).optional()
}).strict();
var OrganizationUpdateOneWithoutRestaurantsNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => OrganizationCreateWithoutRestaurantsInputSchema), z$2.lazy(() => OrganizationUncheckedCreateWithoutRestaurantsInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => OrganizationCreateOrConnectWithoutRestaurantsInputSchema).optional(),
  upsert: z$2.lazy(() => OrganizationUpsertWithoutRestaurantsInputSchema).optional(),
  disconnect: z$2.union([z$2.boolean(), z$2.lazy(() => OrganizationWhereInputSchema)]).optional(),
  delete: z$2.union([z$2.boolean(), z$2.lazy(() => OrganizationWhereInputSchema)]).optional(),
  connect: z$2.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z$2.union([z$2.lazy(() => OrganizationUpdateToOneWithWhereWithoutRestaurantsInputSchema), z$2.lazy(() => OrganizationUpdateWithoutRestaurantsInputSchema), z$2.lazy(() => OrganizationUncheckedUpdateWithoutRestaurantsInputSchema)]).optional()
}).strict();
var UserUpdateManyWithoutRestaurantNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => UserCreateWithoutRestaurantInputSchema), z$2.lazy(() => UserCreateWithoutRestaurantInputSchema).array(), z$2.lazy(() => UserUncheckedCreateWithoutRestaurantInputSchema), z$2.lazy(() => UserUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => UserCreateOrConnectWithoutRestaurantInputSchema), z$2.lazy(() => UserCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => UserUpsertWithWhereUniqueWithoutRestaurantInputSchema), z$2.lazy(() => UserUpsertWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => UserCreateManyRestaurantInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => UserWhereUniqueInputSchema), z$2.lazy(() => UserWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => UserWhereUniqueInputSchema), z$2.lazy(() => UserWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => UserWhereUniqueInputSchema), z$2.lazy(() => UserWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => UserWhereUniqueInputSchema), z$2.lazy(() => UserWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => UserUpdateWithWhereUniqueWithoutRestaurantInputSchema), z$2.lazy(() => UserUpdateWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => UserUpdateManyWithWhereWithoutRestaurantInputSchema), z$2.lazy(() => UserUpdateManyWithWhereWithoutRestaurantInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => UserScalarWhereInputSchema), z$2.lazy(() => UserScalarWhereInputSchema).array()]).optional()
}).strict();
var CookBookUpdateManyWithoutRestaurantNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => CookBookCreateWithoutRestaurantInputSchema), z$2.lazy(() => CookBookCreateWithoutRestaurantInputSchema).array(), z$2.lazy(() => CookBookUncheckedCreateWithoutRestaurantInputSchema), z$2.lazy(() => CookBookUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => CookBookCreateOrConnectWithoutRestaurantInputSchema), z$2.lazy(() => CookBookCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => CookBookUpsertWithWhereUniqueWithoutRestaurantInputSchema), z$2.lazy(() => CookBookUpsertWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => CookBookCreateManyRestaurantInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => CookBookWhereUniqueInputSchema), z$2.lazy(() => CookBookWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => CookBookWhereUniqueInputSchema), z$2.lazy(() => CookBookWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => CookBookWhereUniqueInputSchema), z$2.lazy(() => CookBookWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => CookBookWhereUniqueInputSchema), z$2.lazy(() => CookBookWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => CookBookUpdateWithWhereUniqueWithoutRestaurantInputSchema), z$2.lazy(() => CookBookUpdateWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => CookBookUpdateManyWithWhereWithoutRestaurantInputSchema), z$2.lazy(() => CookBookUpdateManyWithWhereWithoutRestaurantInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => CookBookScalarWhereInputSchema), z$2.lazy(() => CookBookScalarWhereInputSchema).array()]).optional()
}).strict();
var InventoryUpdateOneWithoutRestaurantNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => InventoryCreateWithoutRestaurantInputSchema), z$2.lazy(() => InventoryUncheckedCreateWithoutRestaurantInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => InventoryCreateOrConnectWithoutRestaurantInputSchema).optional(),
  upsert: z$2.lazy(() => InventoryUpsertWithoutRestaurantInputSchema).optional(),
  disconnect: z$2.union([z$2.boolean(), z$2.lazy(() => InventoryWhereInputSchema)]).optional(),
  delete: z$2.union([z$2.boolean(), z$2.lazy(() => InventoryWhereInputSchema)]).optional(),
  connect: z$2.lazy(() => InventoryWhereUniqueInputSchema).optional(),
  update: z$2.union([z$2.lazy(() => InventoryUpdateToOneWithWhereWithoutRestaurantInputSchema), z$2.lazy(() => InventoryUpdateWithoutRestaurantInputSchema), z$2.lazy(() => InventoryUncheckedUpdateWithoutRestaurantInputSchema)]).optional()
}).strict();
var OrderUpdateManyWithoutRestaurantNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => OrderCreateWithoutRestaurantInputSchema), z$2.lazy(() => OrderCreateWithoutRestaurantInputSchema).array(), z$2.lazy(() => OrderUncheckedCreateWithoutRestaurantInputSchema), z$2.lazy(() => OrderUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => OrderCreateOrConnectWithoutRestaurantInputSchema), z$2.lazy(() => OrderCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => OrderUpsertWithWhereUniqueWithoutRestaurantInputSchema), z$2.lazy(() => OrderUpsertWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => OrderCreateManyRestaurantInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => OrderWhereUniqueInputSchema), z$2.lazy(() => OrderWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => OrderWhereUniqueInputSchema), z$2.lazy(() => OrderWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => OrderWhereUniqueInputSchema), z$2.lazy(() => OrderWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => OrderWhereUniqueInputSchema), z$2.lazy(() => OrderWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => OrderUpdateWithWhereUniqueWithoutRestaurantInputSchema), z$2.lazy(() => OrderUpdateWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => OrderUpdateManyWithWhereWithoutRestaurantInputSchema), z$2.lazy(() => OrderUpdateManyWithWhereWithoutRestaurantInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => OrderScalarWhereInputSchema), z$2.lazy(() => OrderScalarWhereInputSchema).array()]).optional()
}).strict();
var RecipeUpdateManyWithoutRestaurantNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeCreateWithoutRestaurantInputSchema), z$2.lazy(() => RecipeCreateWithoutRestaurantInputSchema).array(), z$2.lazy(() => RecipeUncheckedCreateWithoutRestaurantInputSchema), z$2.lazy(() => RecipeUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => RecipeCreateOrConnectWithoutRestaurantInputSchema), z$2.lazy(() => RecipeCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => RecipeUpsertWithWhereUniqueWithoutRestaurantInputSchema), z$2.lazy(() => RecipeUpsertWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => RecipeCreateManyRestaurantInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => RecipeWhereUniqueInputSchema), z$2.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => RecipeWhereUniqueInputSchema), z$2.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => RecipeWhereUniqueInputSchema), z$2.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => RecipeWhereUniqueInputSchema), z$2.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => RecipeUpdateWithWhereUniqueWithoutRestaurantInputSchema), z$2.lazy(() => RecipeUpdateWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => RecipeUpdateManyWithWhereWithoutRestaurantInputSchema), z$2.lazy(() => RecipeUpdateManyWithWhereWithoutRestaurantInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => RecipeScalarWhereInputSchema), z$2.lazy(() => RecipeScalarWhereInputSchema).array()]).optional()
}).strict();
var MenuUpdateManyWithoutRestaurantNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => MenuCreateWithoutRestaurantInputSchema), z$2.lazy(() => MenuCreateWithoutRestaurantInputSchema).array(), z$2.lazy(() => MenuUncheckedCreateWithoutRestaurantInputSchema), z$2.lazy(() => MenuUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => MenuCreateOrConnectWithoutRestaurantInputSchema), z$2.lazy(() => MenuCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => MenuUpsertWithWhereUniqueWithoutRestaurantInputSchema), z$2.lazy(() => MenuUpsertWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => MenuCreateManyRestaurantInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => MenuWhereUniqueInputSchema), z$2.lazy(() => MenuWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => MenuWhereUniqueInputSchema), z$2.lazy(() => MenuWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => MenuWhereUniqueInputSchema), z$2.lazy(() => MenuWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => MenuWhereUniqueInputSchema), z$2.lazy(() => MenuWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => MenuUpdateWithWhereUniqueWithoutRestaurantInputSchema), z$2.lazy(() => MenuUpdateWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => MenuUpdateManyWithWhereWithoutRestaurantInputSchema), z$2.lazy(() => MenuUpdateManyWithWhereWithoutRestaurantInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => MenuScalarWhereInputSchema), z$2.lazy(() => MenuScalarWhereInputSchema).array()]).optional()
}).strict();
var SalesTransactionsUpdateManyWithoutRestaurantNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => SalesTransactionsCreateWithoutRestaurantInputSchema), z$2.lazy(() => SalesTransactionsCreateWithoutRestaurantInputSchema).array(), z$2.lazy(() => SalesTransactionsUncheckedCreateWithoutRestaurantInputSchema), z$2.lazy(() => SalesTransactionsUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => SalesTransactionsCreateOrConnectWithoutRestaurantInputSchema), z$2.lazy(() => SalesTransactionsCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => SalesTransactionsUpsertWithWhereUniqueWithoutRestaurantInputSchema), z$2.lazy(() => SalesTransactionsUpsertWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => SalesTransactionsCreateManyRestaurantInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => SalesTransactionsWhereUniqueInputSchema), z$2.lazy(() => SalesTransactionsWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => SalesTransactionsWhereUniqueInputSchema), z$2.lazy(() => SalesTransactionsWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => SalesTransactionsWhereUniqueInputSchema), z$2.lazy(() => SalesTransactionsWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => SalesTransactionsWhereUniqueInputSchema), z$2.lazy(() => SalesTransactionsWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => SalesTransactionsUpdateWithWhereUniqueWithoutRestaurantInputSchema), z$2.lazy(() => SalesTransactionsUpdateWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => SalesTransactionsUpdateManyWithWhereWithoutRestaurantInputSchema), z$2.lazy(() => SalesTransactionsUpdateManyWithWhereWithoutRestaurantInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => SalesTransactionsScalarWhereInputSchema), z$2.lazy(() => SalesTransactionsScalarWhereInputSchema).array()]).optional()
}).strict();
var LeftoverItemUpdateManyWithoutRestaurantNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => LeftoverItemCreateWithoutRestaurantInputSchema), z$2.lazy(() => LeftoverItemCreateWithoutRestaurantInputSchema).array(), z$2.lazy(() => LeftoverItemUncheckedCreateWithoutRestaurantInputSchema), z$2.lazy(() => LeftoverItemUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => LeftoverItemCreateOrConnectWithoutRestaurantInputSchema), z$2.lazy(() => LeftoverItemCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => LeftoverItemUpsertWithWhereUniqueWithoutRestaurantInputSchema), z$2.lazy(() => LeftoverItemUpsertWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => LeftoverItemCreateManyRestaurantInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => LeftoverItemWhereUniqueInputSchema), z$2.lazy(() => LeftoverItemWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => LeftoverItemWhereUniqueInputSchema), z$2.lazy(() => LeftoverItemWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => LeftoverItemWhereUniqueInputSchema), z$2.lazy(() => LeftoverItemWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => LeftoverItemWhereUniqueInputSchema), z$2.lazy(() => LeftoverItemWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => LeftoverItemUpdateWithWhereUniqueWithoutRestaurantInputSchema), z$2.lazy(() => LeftoverItemUpdateWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => LeftoverItemUpdateManyWithWhereWithoutRestaurantInputSchema), z$2.lazy(() => LeftoverItemUpdateManyWithWhereWithoutRestaurantInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => LeftoverItemScalarWhereInputSchema), z$2.lazy(() => LeftoverItemScalarWhereInputSchema).array()]).optional()
}).strict();
var WasteRecordUpdateManyWithoutRestaurantNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => WasteRecordCreateWithoutRestaurantInputSchema), z$2.lazy(() => WasteRecordCreateWithoutRestaurantInputSchema).array(), z$2.lazy(() => WasteRecordUncheckedCreateWithoutRestaurantInputSchema), z$2.lazy(() => WasteRecordUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => WasteRecordCreateOrConnectWithoutRestaurantInputSchema), z$2.lazy(() => WasteRecordCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => WasteRecordUpsertWithWhereUniqueWithoutRestaurantInputSchema), z$2.lazy(() => WasteRecordUpsertWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => WasteRecordCreateManyRestaurantInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => WasteRecordWhereUniqueInputSchema), z$2.lazy(() => WasteRecordWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => WasteRecordWhereUniqueInputSchema), z$2.lazy(() => WasteRecordWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => WasteRecordWhereUniqueInputSchema), z$2.lazy(() => WasteRecordWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => WasteRecordWhereUniqueInputSchema), z$2.lazy(() => WasteRecordWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => WasteRecordUpdateWithWhereUniqueWithoutRestaurantInputSchema), z$2.lazy(() => WasteRecordUpdateWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => WasteRecordUpdateManyWithWhereWithoutRestaurantInputSchema), z$2.lazy(() => WasteRecordUpdateManyWithWhereWithoutRestaurantInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => WasteRecordScalarWhereInputSchema), z$2.lazy(() => WasteRecordScalarWhereInputSchema).array()]).optional()
}).strict();
var ProductionPlanUpdateManyWithoutRestaurantNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => ProductionPlanCreateWithoutRestaurantInputSchema), z$2.lazy(() => ProductionPlanCreateWithoutRestaurantInputSchema).array(), z$2.lazy(() => ProductionPlanUncheckedCreateWithoutRestaurantInputSchema), z$2.lazy(() => ProductionPlanUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => ProductionPlanCreateOrConnectWithoutRestaurantInputSchema), z$2.lazy(() => ProductionPlanCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => ProductionPlanUpsertWithWhereUniqueWithoutRestaurantInputSchema), z$2.lazy(() => ProductionPlanUpsertWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => ProductionPlanCreateManyRestaurantInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => ProductionPlanWhereUniqueInputSchema), z$2.lazy(() => ProductionPlanWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => ProductionPlanWhereUniqueInputSchema), z$2.lazy(() => ProductionPlanWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => ProductionPlanWhereUniqueInputSchema), z$2.lazy(() => ProductionPlanWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => ProductionPlanWhereUniqueInputSchema), z$2.lazy(() => ProductionPlanWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => ProductionPlanUpdateWithWhereUniqueWithoutRestaurantInputSchema), z$2.lazy(() => ProductionPlanUpdateWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => ProductionPlanUpdateManyWithWhereWithoutRestaurantInputSchema), z$2.lazy(() => ProductionPlanUpdateManyWithWhereWithoutRestaurantInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => ProductionPlanScalarWhereInputSchema), z$2.lazy(() => ProductionPlanScalarWhereInputSchema).array()]).optional()
}).strict();
var EquipmentUpdateManyWithoutRestaurantNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => EquipmentCreateWithoutRestaurantInputSchema), z$2.lazy(() => EquipmentCreateWithoutRestaurantInputSchema).array(), z$2.lazy(() => EquipmentUncheckedCreateWithoutRestaurantInputSchema), z$2.lazy(() => EquipmentUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => EquipmentCreateOrConnectWithoutRestaurantInputSchema), z$2.lazy(() => EquipmentCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => EquipmentUpsertWithWhereUniqueWithoutRestaurantInputSchema), z$2.lazy(() => EquipmentUpsertWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => EquipmentCreateManyRestaurantInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => EquipmentWhereUniqueInputSchema), z$2.lazy(() => EquipmentWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => EquipmentWhereUniqueInputSchema), z$2.lazy(() => EquipmentWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => EquipmentWhereUniqueInputSchema), z$2.lazy(() => EquipmentWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => EquipmentWhereUniqueInputSchema), z$2.lazy(() => EquipmentWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => EquipmentUpdateWithWhereUniqueWithoutRestaurantInputSchema), z$2.lazy(() => EquipmentUpdateWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => EquipmentUpdateManyWithWhereWithoutRestaurantInputSchema), z$2.lazy(() => EquipmentUpdateManyWithWhereWithoutRestaurantInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => EquipmentScalarWhereInputSchema), z$2.lazy(() => EquipmentScalarWhereInputSchema).array()]).optional()
}).strict();
var QualityChecklistUpdateManyWithoutRestaurantNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => QualityChecklistCreateWithoutRestaurantInputSchema), z$2.lazy(() => QualityChecklistCreateWithoutRestaurantInputSchema).array(), z$2.lazy(() => QualityChecklistUncheckedCreateWithoutRestaurantInputSchema), z$2.lazy(() => QualityChecklistUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => QualityChecklistCreateOrConnectWithoutRestaurantInputSchema), z$2.lazy(() => QualityChecklistCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => QualityChecklistUpsertWithWhereUniqueWithoutRestaurantInputSchema), z$2.lazy(() => QualityChecklistUpsertWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => QualityChecklistCreateManyRestaurantInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => QualityChecklistWhereUniqueInputSchema), z$2.lazy(() => QualityChecklistWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => QualityChecklistWhereUniqueInputSchema), z$2.lazy(() => QualityChecklistWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => QualityChecklistWhereUniqueInputSchema), z$2.lazy(() => QualityChecklistWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => QualityChecklistWhereUniqueInputSchema), z$2.lazy(() => QualityChecklistWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => QualityChecklistUpdateWithWhereUniqueWithoutRestaurantInputSchema), z$2.lazy(() => QualityChecklistUpdateWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => QualityChecklistUpdateManyWithWhereWithoutRestaurantInputSchema), z$2.lazy(() => QualityChecklistUpdateManyWithWhereWithoutRestaurantInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => QualityChecklistScalarWhereInputSchema), z$2.lazy(() => QualityChecklistScalarWhereInputSchema).array()]).optional()
}).strict();
var CustomerFeedbackUpdateManyWithoutRestaurantNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => CustomerFeedbackCreateWithoutRestaurantInputSchema), z$2.lazy(() => CustomerFeedbackCreateWithoutRestaurantInputSchema).array(), z$2.lazy(() => CustomerFeedbackUncheckedCreateWithoutRestaurantInputSchema), z$2.lazy(() => CustomerFeedbackUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => CustomerFeedbackCreateOrConnectWithoutRestaurantInputSchema), z$2.lazy(() => CustomerFeedbackCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => CustomerFeedbackUpsertWithWhereUniqueWithoutRestaurantInputSchema), z$2.lazy(() => CustomerFeedbackUpsertWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => CustomerFeedbackCreateManyRestaurantInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => CustomerFeedbackWhereUniqueInputSchema), z$2.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => CustomerFeedbackWhereUniqueInputSchema), z$2.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => CustomerFeedbackWhereUniqueInputSchema), z$2.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => CustomerFeedbackWhereUniqueInputSchema), z$2.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => CustomerFeedbackUpdateWithWhereUniqueWithoutRestaurantInputSchema), z$2.lazy(() => CustomerFeedbackUpdateWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => CustomerFeedbackUpdateManyWithWhereWithoutRestaurantInputSchema), z$2.lazy(() => CustomerFeedbackUpdateManyWithWhereWithoutRestaurantInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => CustomerFeedbackScalarWhereInputSchema), z$2.lazy(() => CustomerFeedbackScalarWhereInputSchema).array()]).optional()
}).strict();
var UserUncheckedUpdateManyWithoutRestaurantNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => UserCreateWithoutRestaurantInputSchema), z$2.lazy(() => UserCreateWithoutRestaurantInputSchema).array(), z$2.lazy(() => UserUncheckedCreateWithoutRestaurantInputSchema), z$2.lazy(() => UserUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => UserCreateOrConnectWithoutRestaurantInputSchema), z$2.lazy(() => UserCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => UserUpsertWithWhereUniqueWithoutRestaurantInputSchema), z$2.lazy(() => UserUpsertWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => UserCreateManyRestaurantInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => UserWhereUniqueInputSchema), z$2.lazy(() => UserWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => UserWhereUniqueInputSchema), z$2.lazy(() => UserWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => UserWhereUniqueInputSchema), z$2.lazy(() => UserWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => UserWhereUniqueInputSchema), z$2.lazy(() => UserWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => UserUpdateWithWhereUniqueWithoutRestaurantInputSchema), z$2.lazy(() => UserUpdateWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => UserUpdateManyWithWhereWithoutRestaurantInputSchema), z$2.lazy(() => UserUpdateManyWithWhereWithoutRestaurantInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => UserScalarWhereInputSchema), z$2.lazy(() => UserScalarWhereInputSchema).array()]).optional()
}).strict();
var CookBookUncheckedUpdateManyWithoutRestaurantNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => CookBookCreateWithoutRestaurantInputSchema), z$2.lazy(() => CookBookCreateWithoutRestaurantInputSchema).array(), z$2.lazy(() => CookBookUncheckedCreateWithoutRestaurantInputSchema), z$2.lazy(() => CookBookUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => CookBookCreateOrConnectWithoutRestaurantInputSchema), z$2.lazy(() => CookBookCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => CookBookUpsertWithWhereUniqueWithoutRestaurantInputSchema), z$2.lazy(() => CookBookUpsertWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => CookBookCreateManyRestaurantInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => CookBookWhereUniqueInputSchema), z$2.lazy(() => CookBookWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => CookBookWhereUniqueInputSchema), z$2.lazy(() => CookBookWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => CookBookWhereUniqueInputSchema), z$2.lazy(() => CookBookWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => CookBookWhereUniqueInputSchema), z$2.lazy(() => CookBookWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => CookBookUpdateWithWhereUniqueWithoutRestaurantInputSchema), z$2.lazy(() => CookBookUpdateWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => CookBookUpdateManyWithWhereWithoutRestaurantInputSchema), z$2.lazy(() => CookBookUpdateManyWithWhereWithoutRestaurantInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => CookBookScalarWhereInputSchema), z$2.lazy(() => CookBookScalarWhereInputSchema).array()]).optional()
}).strict();
var InventoryUncheckedUpdateOneWithoutRestaurantNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => InventoryCreateWithoutRestaurantInputSchema), z$2.lazy(() => InventoryUncheckedCreateWithoutRestaurantInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => InventoryCreateOrConnectWithoutRestaurantInputSchema).optional(),
  upsert: z$2.lazy(() => InventoryUpsertWithoutRestaurantInputSchema).optional(),
  disconnect: z$2.union([z$2.boolean(), z$2.lazy(() => InventoryWhereInputSchema)]).optional(),
  delete: z$2.union([z$2.boolean(), z$2.lazy(() => InventoryWhereInputSchema)]).optional(),
  connect: z$2.lazy(() => InventoryWhereUniqueInputSchema).optional(),
  update: z$2.union([z$2.lazy(() => InventoryUpdateToOneWithWhereWithoutRestaurantInputSchema), z$2.lazy(() => InventoryUpdateWithoutRestaurantInputSchema), z$2.lazy(() => InventoryUncheckedUpdateWithoutRestaurantInputSchema)]).optional()
}).strict();
var OrderUncheckedUpdateManyWithoutRestaurantNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => OrderCreateWithoutRestaurantInputSchema), z$2.lazy(() => OrderCreateWithoutRestaurantInputSchema).array(), z$2.lazy(() => OrderUncheckedCreateWithoutRestaurantInputSchema), z$2.lazy(() => OrderUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => OrderCreateOrConnectWithoutRestaurantInputSchema), z$2.lazy(() => OrderCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => OrderUpsertWithWhereUniqueWithoutRestaurantInputSchema), z$2.lazy(() => OrderUpsertWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => OrderCreateManyRestaurantInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => OrderWhereUniqueInputSchema), z$2.lazy(() => OrderWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => OrderWhereUniqueInputSchema), z$2.lazy(() => OrderWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => OrderWhereUniqueInputSchema), z$2.lazy(() => OrderWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => OrderWhereUniqueInputSchema), z$2.lazy(() => OrderWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => OrderUpdateWithWhereUniqueWithoutRestaurantInputSchema), z$2.lazy(() => OrderUpdateWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => OrderUpdateManyWithWhereWithoutRestaurantInputSchema), z$2.lazy(() => OrderUpdateManyWithWhereWithoutRestaurantInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => OrderScalarWhereInputSchema), z$2.lazy(() => OrderScalarWhereInputSchema).array()]).optional()
}).strict();
var RecipeUncheckedUpdateManyWithoutRestaurantNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeCreateWithoutRestaurantInputSchema), z$2.lazy(() => RecipeCreateWithoutRestaurantInputSchema).array(), z$2.lazy(() => RecipeUncheckedCreateWithoutRestaurantInputSchema), z$2.lazy(() => RecipeUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => RecipeCreateOrConnectWithoutRestaurantInputSchema), z$2.lazy(() => RecipeCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => RecipeUpsertWithWhereUniqueWithoutRestaurantInputSchema), z$2.lazy(() => RecipeUpsertWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => RecipeCreateManyRestaurantInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => RecipeWhereUniqueInputSchema), z$2.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => RecipeWhereUniqueInputSchema), z$2.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => RecipeWhereUniqueInputSchema), z$2.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => RecipeWhereUniqueInputSchema), z$2.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => RecipeUpdateWithWhereUniqueWithoutRestaurantInputSchema), z$2.lazy(() => RecipeUpdateWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => RecipeUpdateManyWithWhereWithoutRestaurantInputSchema), z$2.lazy(() => RecipeUpdateManyWithWhereWithoutRestaurantInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => RecipeScalarWhereInputSchema), z$2.lazy(() => RecipeScalarWhereInputSchema).array()]).optional()
}).strict();
var MenuUncheckedUpdateManyWithoutRestaurantNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => MenuCreateWithoutRestaurantInputSchema), z$2.lazy(() => MenuCreateWithoutRestaurantInputSchema).array(), z$2.lazy(() => MenuUncheckedCreateWithoutRestaurantInputSchema), z$2.lazy(() => MenuUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => MenuCreateOrConnectWithoutRestaurantInputSchema), z$2.lazy(() => MenuCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => MenuUpsertWithWhereUniqueWithoutRestaurantInputSchema), z$2.lazy(() => MenuUpsertWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => MenuCreateManyRestaurantInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => MenuWhereUniqueInputSchema), z$2.lazy(() => MenuWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => MenuWhereUniqueInputSchema), z$2.lazy(() => MenuWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => MenuWhereUniqueInputSchema), z$2.lazy(() => MenuWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => MenuWhereUniqueInputSchema), z$2.lazy(() => MenuWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => MenuUpdateWithWhereUniqueWithoutRestaurantInputSchema), z$2.lazy(() => MenuUpdateWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => MenuUpdateManyWithWhereWithoutRestaurantInputSchema), z$2.lazy(() => MenuUpdateManyWithWhereWithoutRestaurantInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => MenuScalarWhereInputSchema), z$2.lazy(() => MenuScalarWhereInputSchema).array()]).optional()
}).strict();
var SalesTransactionsUncheckedUpdateManyWithoutRestaurantNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => SalesTransactionsCreateWithoutRestaurantInputSchema), z$2.lazy(() => SalesTransactionsCreateWithoutRestaurantInputSchema).array(), z$2.lazy(() => SalesTransactionsUncheckedCreateWithoutRestaurantInputSchema), z$2.lazy(() => SalesTransactionsUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => SalesTransactionsCreateOrConnectWithoutRestaurantInputSchema), z$2.lazy(() => SalesTransactionsCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => SalesTransactionsUpsertWithWhereUniqueWithoutRestaurantInputSchema), z$2.lazy(() => SalesTransactionsUpsertWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => SalesTransactionsCreateManyRestaurantInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => SalesTransactionsWhereUniqueInputSchema), z$2.lazy(() => SalesTransactionsWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => SalesTransactionsWhereUniqueInputSchema), z$2.lazy(() => SalesTransactionsWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => SalesTransactionsWhereUniqueInputSchema), z$2.lazy(() => SalesTransactionsWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => SalesTransactionsWhereUniqueInputSchema), z$2.lazy(() => SalesTransactionsWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => SalesTransactionsUpdateWithWhereUniqueWithoutRestaurantInputSchema), z$2.lazy(() => SalesTransactionsUpdateWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => SalesTransactionsUpdateManyWithWhereWithoutRestaurantInputSchema), z$2.lazy(() => SalesTransactionsUpdateManyWithWhereWithoutRestaurantInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => SalesTransactionsScalarWhereInputSchema), z$2.lazy(() => SalesTransactionsScalarWhereInputSchema).array()]).optional()
}).strict();
var LeftoverItemUncheckedUpdateManyWithoutRestaurantNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => LeftoverItemCreateWithoutRestaurantInputSchema), z$2.lazy(() => LeftoverItemCreateWithoutRestaurantInputSchema).array(), z$2.lazy(() => LeftoverItemUncheckedCreateWithoutRestaurantInputSchema), z$2.lazy(() => LeftoverItemUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => LeftoverItemCreateOrConnectWithoutRestaurantInputSchema), z$2.lazy(() => LeftoverItemCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => LeftoverItemUpsertWithWhereUniqueWithoutRestaurantInputSchema), z$2.lazy(() => LeftoverItemUpsertWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => LeftoverItemCreateManyRestaurantInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => LeftoverItemWhereUniqueInputSchema), z$2.lazy(() => LeftoverItemWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => LeftoverItemWhereUniqueInputSchema), z$2.lazy(() => LeftoverItemWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => LeftoverItemWhereUniqueInputSchema), z$2.lazy(() => LeftoverItemWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => LeftoverItemWhereUniqueInputSchema), z$2.lazy(() => LeftoverItemWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => LeftoverItemUpdateWithWhereUniqueWithoutRestaurantInputSchema), z$2.lazy(() => LeftoverItemUpdateWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => LeftoverItemUpdateManyWithWhereWithoutRestaurantInputSchema), z$2.lazy(() => LeftoverItemUpdateManyWithWhereWithoutRestaurantInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => LeftoverItemScalarWhereInputSchema), z$2.lazy(() => LeftoverItemScalarWhereInputSchema).array()]).optional()
}).strict();
var WasteRecordUncheckedUpdateManyWithoutRestaurantNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => WasteRecordCreateWithoutRestaurantInputSchema), z$2.lazy(() => WasteRecordCreateWithoutRestaurantInputSchema).array(), z$2.lazy(() => WasteRecordUncheckedCreateWithoutRestaurantInputSchema), z$2.lazy(() => WasteRecordUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => WasteRecordCreateOrConnectWithoutRestaurantInputSchema), z$2.lazy(() => WasteRecordCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => WasteRecordUpsertWithWhereUniqueWithoutRestaurantInputSchema), z$2.lazy(() => WasteRecordUpsertWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => WasteRecordCreateManyRestaurantInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => WasteRecordWhereUniqueInputSchema), z$2.lazy(() => WasteRecordWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => WasteRecordWhereUniqueInputSchema), z$2.lazy(() => WasteRecordWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => WasteRecordWhereUniqueInputSchema), z$2.lazy(() => WasteRecordWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => WasteRecordWhereUniqueInputSchema), z$2.lazy(() => WasteRecordWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => WasteRecordUpdateWithWhereUniqueWithoutRestaurantInputSchema), z$2.lazy(() => WasteRecordUpdateWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => WasteRecordUpdateManyWithWhereWithoutRestaurantInputSchema), z$2.lazy(() => WasteRecordUpdateManyWithWhereWithoutRestaurantInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => WasteRecordScalarWhereInputSchema), z$2.lazy(() => WasteRecordScalarWhereInputSchema).array()]).optional()
}).strict();
var ProductionPlanUncheckedUpdateManyWithoutRestaurantNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => ProductionPlanCreateWithoutRestaurantInputSchema), z$2.lazy(() => ProductionPlanCreateWithoutRestaurantInputSchema).array(), z$2.lazy(() => ProductionPlanUncheckedCreateWithoutRestaurantInputSchema), z$2.lazy(() => ProductionPlanUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => ProductionPlanCreateOrConnectWithoutRestaurantInputSchema), z$2.lazy(() => ProductionPlanCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => ProductionPlanUpsertWithWhereUniqueWithoutRestaurantInputSchema), z$2.lazy(() => ProductionPlanUpsertWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => ProductionPlanCreateManyRestaurantInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => ProductionPlanWhereUniqueInputSchema), z$2.lazy(() => ProductionPlanWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => ProductionPlanWhereUniqueInputSchema), z$2.lazy(() => ProductionPlanWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => ProductionPlanWhereUniqueInputSchema), z$2.lazy(() => ProductionPlanWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => ProductionPlanWhereUniqueInputSchema), z$2.lazy(() => ProductionPlanWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => ProductionPlanUpdateWithWhereUniqueWithoutRestaurantInputSchema), z$2.lazy(() => ProductionPlanUpdateWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => ProductionPlanUpdateManyWithWhereWithoutRestaurantInputSchema), z$2.lazy(() => ProductionPlanUpdateManyWithWhereWithoutRestaurantInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => ProductionPlanScalarWhereInputSchema), z$2.lazy(() => ProductionPlanScalarWhereInputSchema).array()]).optional()
}).strict();
var EquipmentUncheckedUpdateManyWithoutRestaurantNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => EquipmentCreateWithoutRestaurantInputSchema), z$2.lazy(() => EquipmentCreateWithoutRestaurantInputSchema).array(), z$2.lazy(() => EquipmentUncheckedCreateWithoutRestaurantInputSchema), z$2.lazy(() => EquipmentUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => EquipmentCreateOrConnectWithoutRestaurantInputSchema), z$2.lazy(() => EquipmentCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => EquipmentUpsertWithWhereUniqueWithoutRestaurantInputSchema), z$2.lazy(() => EquipmentUpsertWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => EquipmentCreateManyRestaurantInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => EquipmentWhereUniqueInputSchema), z$2.lazy(() => EquipmentWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => EquipmentWhereUniqueInputSchema), z$2.lazy(() => EquipmentWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => EquipmentWhereUniqueInputSchema), z$2.lazy(() => EquipmentWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => EquipmentWhereUniqueInputSchema), z$2.lazy(() => EquipmentWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => EquipmentUpdateWithWhereUniqueWithoutRestaurantInputSchema), z$2.lazy(() => EquipmentUpdateWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => EquipmentUpdateManyWithWhereWithoutRestaurantInputSchema), z$2.lazy(() => EquipmentUpdateManyWithWhereWithoutRestaurantInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => EquipmentScalarWhereInputSchema), z$2.lazy(() => EquipmentScalarWhereInputSchema).array()]).optional()
}).strict();
var QualityChecklistUncheckedUpdateManyWithoutRestaurantNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => QualityChecklistCreateWithoutRestaurantInputSchema), z$2.lazy(() => QualityChecklistCreateWithoutRestaurantInputSchema).array(), z$2.lazy(() => QualityChecklistUncheckedCreateWithoutRestaurantInputSchema), z$2.lazy(() => QualityChecklistUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => QualityChecklistCreateOrConnectWithoutRestaurantInputSchema), z$2.lazy(() => QualityChecklistCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => QualityChecklistUpsertWithWhereUniqueWithoutRestaurantInputSchema), z$2.lazy(() => QualityChecklistUpsertWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => QualityChecklistCreateManyRestaurantInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => QualityChecklistWhereUniqueInputSchema), z$2.lazy(() => QualityChecklistWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => QualityChecklistWhereUniqueInputSchema), z$2.lazy(() => QualityChecklistWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => QualityChecklistWhereUniqueInputSchema), z$2.lazy(() => QualityChecklistWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => QualityChecklistWhereUniqueInputSchema), z$2.lazy(() => QualityChecklistWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => QualityChecklistUpdateWithWhereUniqueWithoutRestaurantInputSchema), z$2.lazy(() => QualityChecklistUpdateWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => QualityChecklistUpdateManyWithWhereWithoutRestaurantInputSchema), z$2.lazy(() => QualityChecklistUpdateManyWithWhereWithoutRestaurantInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => QualityChecklistScalarWhereInputSchema), z$2.lazy(() => QualityChecklistScalarWhereInputSchema).array()]).optional()
}).strict();
var CustomerFeedbackUncheckedUpdateManyWithoutRestaurantNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => CustomerFeedbackCreateWithoutRestaurantInputSchema), z$2.lazy(() => CustomerFeedbackCreateWithoutRestaurantInputSchema).array(), z$2.lazy(() => CustomerFeedbackUncheckedCreateWithoutRestaurantInputSchema), z$2.lazy(() => CustomerFeedbackUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => CustomerFeedbackCreateOrConnectWithoutRestaurantInputSchema), z$2.lazy(() => CustomerFeedbackCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => CustomerFeedbackUpsertWithWhereUniqueWithoutRestaurantInputSchema), z$2.lazy(() => CustomerFeedbackUpsertWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => CustomerFeedbackCreateManyRestaurantInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => CustomerFeedbackWhereUniqueInputSchema), z$2.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => CustomerFeedbackWhereUniqueInputSchema), z$2.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => CustomerFeedbackWhereUniqueInputSchema), z$2.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => CustomerFeedbackWhereUniqueInputSchema), z$2.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => CustomerFeedbackUpdateWithWhereUniqueWithoutRestaurantInputSchema), z$2.lazy(() => CustomerFeedbackUpdateWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => CustomerFeedbackUpdateManyWithWhereWithoutRestaurantInputSchema), z$2.lazy(() => CustomerFeedbackUpdateManyWithWhereWithoutRestaurantInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => CustomerFeedbackScalarWhereInputSchema), z$2.lazy(() => CustomerFeedbackScalarWhereInputSchema).array()]).optional()
}).strict();
var OrganizationCreateNestedOneWithoutUsersInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => OrganizationCreateWithoutUsersInputSchema), z$2.lazy(() => OrganizationUncheckedCreateWithoutUsersInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => OrganizationCreateOrConnectWithoutUsersInputSchema).optional(),
  connect: z$2.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();
var RestaurantCreateNestedOneWithoutUsersInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RestaurantCreateWithoutUsersInputSchema), z$2.lazy(() => RestaurantUncheckedCreateWithoutUsersInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => RestaurantCreateOrConnectWithoutUsersInputSchema).optional(),
  connect: z$2.lazy(() => RestaurantWhereUniqueInputSchema).optional()
}).strict();
var ShiftCreateNestedManyWithoutUserInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => ShiftCreateWithoutUserInputSchema), z$2.lazy(() => ShiftCreateWithoutUserInputSchema).array(), z$2.lazy(() => ShiftUncheckedCreateWithoutUserInputSchema), z$2.lazy(() => ShiftUncheckedCreateWithoutUserInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => ShiftCreateOrConnectWithoutUserInputSchema), z$2.lazy(() => ShiftCreateOrConnectWithoutUserInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => ShiftCreateManyUserInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => ShiftWhereUniqueInputSchema), z$2.lazy(() => ShiftWhereUniqueInputSchema).array()]).optional()
}).strict();
var PrepItemCreateNestedManyWithoutAssignedToInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => PrepItemCreateWithoutAssignedToInputSchema), z$2.lazy(() => PrepItemCreateWithoutAssignedToInputSchema).array(), z$2.lazy(() => PrepItemUncheckedCreateWithoutAssignedToInputSchema), z$2.lazy(() => PrepItemUncheckedCreateWithoutAssignedToInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => PrepItemCreateOrConnectWithoutAssignedToInputSchema), z$2.lazy(() => PrepItemCreateOrConnectWithoutAssignedToInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => PrepItemCreateManyAssignedToInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => PrepItemWhereUniqueInputSchema), z$2.lazy(() => PrepItemWhereUniqueInputSchema).array()]).optional()
}).strict();
var InventoryItemCreateNestedManyWithoutLastUpdatedByInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => InventoryItemCreateWithoutLastUpdatedByInputSchema), z$2.lazy(() => InventoryItemCreateWithoutLastUpdatedByInputSchema).array(), z$2.lazy(() => InventoryItemUncheckedCreateWithoutLastUpdatedByInputSchema), z$2.lazy(() => InventoryItemUncheckedCreateWithoutLastUpdatedByInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => InventoryItemCreateOrConnectWithoutLastUpdatedByInputSchema), z$2.lazy(() => InventoryItemCreateOrConnectWithoutLastUpdatedByInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => InventoryItemCreateManyLastUpdatedByInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => InventoryItemWhereUniqueInputSchema), z$2.lazy(() => InventoryItemWhereUniqueInputSchema).array()]).optional()
}).strict();
var SessionCreateNestedManyWithoutUserInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => SessionCreateWithoutUserInputSchema), z$2.lazy(() => SessionCreateWithoutUserInputSchema).array(), z$2.lazy(() => SessionUncheckedCreateWithoutUserInputSchema), z$2.lazy(() => SessionUncheckedCreateWithoutUserInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => SessionCreateOrConnectWithoutUserInputSchema), z$2.lazy(() => SessionCreateOrConnectWithoutUserInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => SessionCreateManyUserInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => SessionWhereUniqueInputSchema), z$2.lazy(() => SessionWhereUniqueInputSchema).array()]).optional()
}).strict();
var PasswordResetCreateNestedManyWithoutUserInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => PasswordResetCreateWithoutUserInputSchema), z$2.lazy(() => PasswordResetCreateWithoutUserInputSchema).array(), z$2.lazy(() => PasswordResetUncheckedCreateWithoutUserInputSchema), z$2.lazy(() => PasswordResetUncheckedCreateWithoutUserInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => PasswordResetCreateOrConnectWithoutUserInputSchema), z$2.lazy(() => PasswordResetCreateOrConnectWithoutUserInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => PasswordResetCreateManyUserInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => PasswordResetWhereUniqueInputSchema), z$2.lazy(() => PasswordResetWhereUniqueInputSchema).array()]).optional()
}).strict();
var LeftoverItemCreateNestedManyWithoutRecordedByInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => LeftoverItemCreateWithoutRecordedByInputSchema), z$2.lazy(() => LeftoverItemCreateWithoutRecordedByInputSchema).array(), z$2.lazy(() => LeftoverItemUncheckedCreateWithoutRecordedByInputSchema), z$2.lazy(() => LeftoverItemUncheckedCreateWithoutRecordedByInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => LeftoverItemCreateOrConnectWithoutRecordedByInputSchema), z$2.lazy(() => LeftoverItemCreateOrConnectWithoutRecordedByInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => LeftoverItemCreateManyRecordedByInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => LeftoverItemWhereUniqueInputSchema), z$2.lazy(() => LeftoverItemWhereUniqueInputSchema).array()]).optional()
}).strict();
var WasteRecordCreateNestedManyWithoutRecordedByInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => WasteRecordCreateWithoutRecordedByInputSchema), z$2.lazy(() => WasteRecordCreateWithoutRecordedByInputSchema).array(), z$2.lazy(() => WasteRecordUncheckedCreateWithoutRecordedByInputSchema), z$2.lazy(() => WasteRecordUncheckedCreateWithoutRecordedByInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => WasteRecordCreateOrConnectWithoutRecordedByInputSchema), z$2.lazy(() => WasteRecordCreateOrConnectWithoutRecordedByInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => WasteRecordCreateManyRecordedByInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => WasteRecordWhereUniqueInputSchema), z$2.lazy(() => WasteRecordWhereUniqueInputSchema).array()]).optional()
}).strict();
var ProductionPlanCreateNestedManyWithoutCreatedByInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => ProductionPlanCreateWithoutCreatedByInputSchema), z$2.lazy(() => ProductionPlanCreateWithoutCreatedByInputSchema).array(), z$2.lazy(() => ProductionPlanUncheckedCreateWithoutCreatedByInputSchema), z$2.lazy(() => ProductionPlanUncheckedCreateWithoutCreatedByInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => ProductionPlanCreateOrConnectWithoutCreatedByInputSchema), z$2.lazy(() => ProductionPlanCreateOrConnectWithoutCreatedByInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => ProductionPlanCreateManyCreatedByInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => ProductionPlanWhereUniqueInputSchema), z$2.lazy(() => ProductionPlanWhereUniqueInputSchema).array()]).optional()
}).strict();
var ProductionPlanItemCreateNestedManyWithoutAssignedToInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => ProductionPlanItemCreateWithoutAssignedToInputSchema), z$2.lazy(() => ProductionPlanItemCreateWithoutAssignedToInputSchema).array(), z$2.lazy(() => ProductionPlanItemUncheckedCreateWithoutAssignedToInputSchema), z$2.lazy(() => ProductionPlanItemUncheckedCreateWithoutAssignedToInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => ProductionPlanItemCreateOrConnectWithoutAssignedToInputSchema), z$2.lazy(() => ProductionPlanItemCreateOrConnectWithoutAssignedToInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => ProductionPlanItemCreateManyAssignedToInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => ProductionPlanItemWhereUniqueInputSchema), z$2.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array()]).optional()
}).strict();
var AvailabilityCreateNestedManyWithoutUserInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => AvailabilityCreateWithoutUserInputSchema), z$2.lazy(() => AvailabilityCreateWithoutUserInputSchema).array(), z$2.lazy(() => AvailabilityUncheckedCreateWithoutUserInputSchema), z$2.lazy(() => AvailabilityUncheckedCreateWithoutUserInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => AvailabilityCreateOrConnectWithoutUserInputSchema), z$2.lazy(() => AvailabilityCreateOrConnectWithoutUserInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => AvailabilityCreateManyUserInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => AvailabilityWhereUniqueInputSchema), z$2.lazy(() => AvailabilityWhereUniqueInputSchema).array()]).optional()
}).strict();
var SchedulingConstraintCreateNestedManyWithoutUserInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => SchedulingConstraintCreateWithoutUserInputSchema), z$2.lazy(() => SchedulingConstraintCreateWithoutUserInputSchema).array(), z$2.lazy(() => SchedulingConstraintUncheckedCreateWithoutUserInputSchema), z$2.lazy(() => SchedulingConstraintUncheckedCreateWithoutUserInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => SchedulingConstraintCreateOrConnectWithoutUserInputSchema), z$2.lazy(() => SchedulingConstraintCreateOrConnectWithoutUserInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => SchedulingConstraintCreateManyUserInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => SchedulingConstraintWhereUniqueInputSchema), z$2.lazy(() => SchedulingConstraintWhereUniqueInputSchema).array()]).optional()
}).strict();
var InventoryWithdrawalCreateNestedManyWithoutCreatedByInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => InventoryWithdrawalCreateWithoutCreatedByInputSchema), z$2.lazy(() => InventoryWithdrawalCreateWithoutCreatedByInputSchema).array(), z$2.lazy(() => InventoryWithdrawalUncheckedCreateWithoutCreatedByInputSchema), z$2.lazy(() => InventoryWithdrawalUncheckedCreateWithoutCreatedByInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => InventoryWithdrawalCreateOrConnectWithoutCreatedByInputSchema), z$2.lazy(() => InventoryWithdrawalCreateOrConnectWithoutCreatedByInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => InventoryWithdrawalCreateManyCreatedByInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => InventoryWithdrawalWhereUniqueInputSchema), z$2.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array()]).optional()
}).strict();
var ChecklistCompleteCreateNestedManyWithoutCompletedByInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => ChecklistCompleteCreateWithoutCompletedByInputSchema), z$2.lazy(() => ChecklistCompleteCreateWithoutCompletedByInputSchema).array(), z$2.lazy(() => ChecklistCompleteUncheckedCreateWithoutCompletedByInputSchema), z$2.lazy(() => ChecklistCompleteUncheckedCreateWithoutCompletedByInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => ChecklistCompleteCreateOrConnectWithoutCompletedByInputSchema), z$2.lazy(() => ChecklistCompleteCreateOrConnectWithoutCompletedByInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => ChecklistCompleteCreateManyCompletedByInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => ChecklistCompleteWhereUniqueInputSchema), z$2.lazy(() => ChecklistCompleteWhereUniqueInputSchema).array()]).optional()
}).strict();
var CustomerFeedbackCreateNestedManyWithoutRespondedByInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => CustomerFeedbackCreateWithoutRespondedByInputSchema), z$2.lazy(() => CustomerFeedbackCreateWithoutRespondedByInputSchema).array(), z$2.lazy(() => CustomerFeedbackUncheckedCreateWithoutRespondedByInputSchema), z$2.lazy(() => CustomerFeedbackUncheckedCreateWithoutRespondedByInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => CustomerFeedbackCreateOrConnectWithoutRespondedByInputSchema), z$2.lazy(() => CustomerFeedbackCreateOrConnectWithoutRespondedByInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => CustomerFeedbackCreateManyRespondedByInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => CustomerFeedbackWhereUniqueInputSchema), z$2.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array()]).optional()
}).strict();
var RecipeVersionCreateNestedManyWithoutCreatedByInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeVersionCreateWithoutCreatedByInputSchema), z$2.lazy(() => RecipeVersionCreateWithoutCreatedByInputSchema).array(), z$2.lazy(() => RecipeVersionUncheckedCreateWithoutCreatedByInputSchema), z$2.lazy(() => RecipeVersionUncheckedCreateWithoutCreatedByInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => RecipeVersionCreateOrConnectWithoutCreatedByInputSchema), z$2.lazy(() => RecipeVersionCreateOrConnectWithoutCreatedByInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => RecipeVersionCreateManyCreatedByInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => RecipeVersionWhereUniqueInputSchema), z$2.lazy(() => RecipeVersionWhereUniqueInputSchema).array()]).optional()
}).strict();
var RecipeVersionCreateNestedManyWithoutApprovedByInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeVersionCreateWithoutApprovedByInputSchema), z$2.lazy(() => RecipeVersionCreateWithoutApprovedByInputSchema).array(), z$2.lazy(() => RecipeVersionUncheckedCreateWithoutApprovedByInputSchema), z$2.lazy(() => RecipeVersionUncheckedCreateWithoutApprovedByInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => RecipeVersionCreateOrConnectWithoutApprovedByInputSchema), z$2.lazy(() => RecipeVersionCreateOrConnectWithoutApprovedByInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => RecipeVersionCreateManyApprovedByInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => RecipeVersionWhereUniqueInputSchema), z$2.lazy(() => RecipeVersionWhereUniqueInputSchema).array()]).optional()
}).strict();
var ShiftUncheckedCreateNestedManyWithoutUserInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => ShiftCreateWithoutUserInputSchema), z$2.lazy(() => ShiftCreateWithoutUserInputSchema).array(), z$2.lazy(() => ShiftUncheckedCreateWithoutUserInputSchema), z$2.lazy(() => ShiftUncheckedCreateWithoutUserInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => ShiftCreateOrConnectWithoutUserInputSchema), z$2.lazy(() => ShiftCreateOrConnectWithoutUserInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => ShiftCreateManyUserInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => ShiftWhereUniqueInputSchema), z$2.lazy(() => ShiftWhereUniqueInputSchema).array()]).optional()
}).strict();
var PrepItemUncheckedCreateNestedManyWithoutAssignedToInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => PrepItemCreateWithoutAssignedToInputSchema), z$2.lazy(() => PrepItemCreateWithoutAssignedToInputSchema).array(), z$2.lazy(() => PrepItemUncheckedCreateWithoutAssignedToInputSchema), z$2.lazy(() => PrepItemUncheckedCreateWithoutAssignedToInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => PrepItemCreateOrConnectWithoutAssignedToInputSchema), z$2.lazy(() => PrepItemCreateOrConnectWithoutAssignedToInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => PrepItemCreateManyAssignedToInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => PrepItemWhereUniqueInputSchema), z$2.lazy(() => PrepItemWhereUniqueInputSchema).array()]).optional()
}).strict();
var InventoryItemUncheckedCreateNestedManyWithoutLastUpdatedByInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => InventoryItemCreateWithoutLastUpdatedByInputSchema), z$2.lazy(() => InventoryItemCreateWithoutLastUpdatedByInputSchema).array(), z$2.lazy(() => InventoryItemUncheckedCreateWithoutLastUpdatedByInputSchema), z$2.lazy(() => InventoryItemUncheckedCreateWithoutLastUpdatedByInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => InventoryItemCreateOrConnectWithoutLastUpdatedByInputSchema), z$2.lazy(() => InventoryItemCreateOrConnectWithoutLastUpdatedByInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => InventoryItemCreateManyLastUpdatedByInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => InventoryItemWhereUniqueInputSchema), z$2.lazy(() => InventoryItemWhereUniqueInputSchema).array()]).optional()
}).strict();
var SessionUncheckedCreateNestedManyWithoutUserInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => SessionCreateWithoutUserInputSchema), z$2.lazy(() => SessionCreateWithoutUserInputSchema).array(), z$2.lazy(() => SessionUncheckedCreateWithoutUserInputSchema), z$2.lazy(() => SessionUncheckedCreateWithoutUserInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => SessionCreateOrConnectWithoutUserInputSchema), z$2.lazy(() => SessionCreateOrConnectWithoutUserInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => SessionCreateManyUserInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => SessionWhereUniqueInputSchema), z$2.lazy(() => SessionWhereUniqueInputSchema).array()]).optional()
}).strict();
var PasswordResetUncheckedCreateNestedManyWithoutUserInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => PasswordResetCreateWithoutUserInputSchema), z$2.lazy(() => PasswordResetCreateWithoutUserInputSchema).array(), z$2.lazy(() => PasswordResetUncheckedCreateWithoutUserInputSchema), z$2.lazy(() => PasswordResetUncheckedCreateWithoutUserInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => PasswordResetCreateOrConnectWithoutUserInputSchema), z$2.lazy(() => PasswordResetCreateOrConnectWithoutUserInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => PasswordResetCreateManyUserInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => PasswordResetWhereUniqueInputSchema), z$2.lazy(() => PasswordResetWhereUniqueInputSchema).array()]).optional()
}).strict();
var LeftoverItemUncheckedCreateNestedManyWithoutRecordedByInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => LeftoverItemCreateWithoutRecordedByInputSchema), z$2.lazy(() => LeftoverItemCreateWithoutRecordedByInputSchema).array(), z$2.lazy(() => LeftoverItemUncheckedCreateWithoutRecordedByInputSchema), z$2.lazy(() => LeftoverItemUncheckedCreateWithoutRecordedByInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => LeftoverItemCreateOrConnectWithoutRecordedByInputSchema), z$2.lazy(() => LeftoverItemCreateOrConnectWithoutRecordedByInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => LeftoverItemCreateManyRecordedByInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => LeftoverItemWhereUniqueInputSchema), z$2.lazy(() => LeftoverItemWhereUniqueInputSchema).array()]).optional()
}).strict();
var WasteRecordUncheckedCreateNestedManyWithoutRecordedByInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => WasteRecordCreateWithoutRecordedByInputSchema), z$2.lazy(() => WasteRecordCreateWithoutRecordedByInputSchema).array(), z$2.lazy(() => WasteRecordUncheckedCreateWithoutRecordedByInputSchema), z$2.lazy(() => WasteRecordUncheckedCreateWithoutRecordedByInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => WasteRecordCreateOrConnectWithoutRecordedByInputSchema), z$2.lazy(() => WasteRecordCreateOrConnectWithoutRecordedByInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => WasteRecordCreateManyRecordedByInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => WasteRecordWhereUniqueInputSchema), z$2.lazy(() => WasteRecordWhereUniqueInputSchema).array()]).optional()
}).strict();
var ProductionPlanUncheckedCreateNestedManyWithoutCreatedByInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => ProductionPlanCreateWithoutCreatedByInputSchema), z$2.lazy(() => ProductionPlanCreateWithoutCreatedByInputSchema).array(), z$2.lazy(() => ProductionPlanUncheckedCreateWithoutCreatedByInputSchema), z$2.lazy(() => ProductionPlanUncheckedCreateWithoutCreatedByInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => ProductionPlanCreateOrConnectWithoutCreatedByInputSchema), z$2.lazy(() => ProductionPlanCreateOrConnectWithoutCreatedByInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => ProductionPlanCreateManyCreatedByInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => ProductionPlanWhereUniqueInputSchema), z$2.lazy(() => ProductionPlanWhereUniqueInputSchema).array()]).optional()
}).strict();
var ProductionPlanItemUncheckedCreateNestedManyWithoutAssignedToInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => ProductionPlanItemCreateWithoutAssignedToInputSchema), z$2.lazy(() => ProductionPlanItemCreateWithoutAssignedToInputSchema).array(), z$2.lazy(() => ProductionPlanItemUncheckedCreateWithoutAssignedToInputSchema), z$2.lazy(() => ProductionPlanItemUncheckedCreateWithoutAssignedToInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => ProductionPlanItemCreateOrConnectWithoutAssignedToInputSchema), z$2.lazy(() => ProductionPlanItemCreateOrConnectWithoutAssignedToInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => ProductionPlanItemCreateManyAssignedToInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => ProductionPlanItemWhereUniqueInputSchema), z$2.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array()]).optional()
}).strict();
var AvailabilityUncheckedCreateNestedManyWithoutUserInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => AvailabilityCreateWithoutUserInputSchema), z$2.lazy(() => AvailabilityCreateWithoutUserInputSchema).array(), z$2.lazy(() => AvailabilityUncheckedCreateWithoutUserInputSchema), z$2.lazy(() => AvailabilityUncheckedCreateWithoutUserInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => AvailabilityCreateOrConnectWithoutUserInputSchema), z$2.lazy(() => AvailabilityCreateOrConnectWithoutUserInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => AvailabilityCreateManyUserInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => AvailabilityWhereUniqueInputSchema), z$2.lazy(() => AvailabilityWhereUniqueInputSchema).array()]).optional()
}).strict();
var SchedulingConstraintUncheckedCreateNestedManyWithoutUserInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => SchedulingConstraintCreateWithoutUserInputSchema), z$2.lazy(() => SchedulingConstraintCreateWithoutUserInputSchema).array(), z$2.lazy(() => SchedulingConstraintUncheckedCreateWithoutUserInputSchema), z$2.lazy(() => SchedulingConstraintUncheckedCreateWithoutUserInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => SchedulingConstraintCreateOrConnectWithoutUserInputSchema), z$2.lazy(() => SchedulingConstraintCreateOrConnectWithoutUserInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => SchedulingConstraintCreateManyUserInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => SchedulingConstraintWhereUniqueInputSchema), z$2.lazy(() => SchedulingConstraintWhereUniqueInputSchema).array()]).optional()
}).strict();
var InventoryWithdrawalUncheckedCreateNestedManyWithoutCreatedByInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => InventoryWithdrawalCreateWithoutCreatedByInputSchema), z$2.lazy(() => InventoryWithdrawalCreateWithoutCreatedByInputSchema).array(), z$2.lazy(() => InventoryWithdrawalUncheckedCreateWithoutCreatedByInputSchema), z$2.lazy(() => InventoryWithdrawalUncheckedCreateWithoutCreatedByInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => InventoryWithdrawalCreateOrConnectWithoutCreatedByInputSchema), z$2.lazy(() => InventoryWithdrawalCreateOrConnectWithoutCreatedByInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => InventoryWithdrawalCreateManyCreatedByInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => InventoryWithdrawalWhereUniqueInputSchema), z$2.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array()]).optional()
}).strict();
var ChecklistCompleteUncheckedCreateNestedManyWithoutCompletedByInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => ChecklistCompleteCreateWithoutCompletedByInputSchema), z$2.lazy(() => ChecklistCompleteCreateWithoutCompletedByInputSchema).array(), z$2.lazy(() => ChecklistCompleteUncheckedCreateWithoutCompletedByInputSchema), z$2.lazy(() => ChecklistCompleteUncheckedCreateWithoutCompletedByInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => ChecklistCompleteCreateOrConnectWithoutCompletedByInputSchema), z$2.lazy(() => ChecklistCompleteCreateOrConnectWithoutCompletedByInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => ChecklistCompleteCreateManyCompletedByInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => ChecklistCompleteWhereUniqueInputSchema), z$2.lazy(() => ChecklistCompleteWhereUniqueInputSchema).array()]).optional()
}).strict();
var CustomerFeedbackUncheckedCreateNestedManyWithoutRespondedByInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => CustomerFeedbackCreateWithoutRespondedByInputSchema), z$2.lazy(() => CustomerFeedbackCreateWithoutRespondedByInputSchema).array(), z$2.lazy(() => CustomerFeedbackUncheckedCreateWithoutRespondedByInputSchema), z$2.lazy(() => CustomerFeedbackUncheckedCreateWithoutRespondedByInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => CustomerFeedbackCreateOrConnectWithoutRespondedByInputSchema), z$2.lazy(() => CustomerFeedbackCreateOrConnectWithoutRespondedByInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => CustomerFeedbackCreateManyRespondedByInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => CustomerFeedbackWhereUniqueInputSchema), z$2.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array()]).optional()
}).strict();
var RecipeVersionUncheckedCreateNestedManyWithoutCreatedByInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeVersionCreateWithoutCreatedByInputSchema), z$2.lazy(() => RecipeVersionCreateWithoutCreatedByInputSchema).array(), z$2.lazy(() => RecipeVersionUncheckedCreateWithoutCreatedByInputSchema), z$2.lazy(() => RecipeVersionUncheckedCreateWithoutCreatedByInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => RecipeVersionCreateOrConnectWithoutCreatedByInputSchema), z$2.lazy(() => RecipeVersionCreateOrConnectWithoutCreatedByInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => RecipeVersionCreateManyCreatedByInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => RecipeVersionWhereUniqueInputSchema), z$2.lazy(() => RecipeVersionWhereUniqueInputSchema).array()]).optional()
}).strict();
var RecipeVersionUncheckedCreateNestedManyWithoutApprovedByInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeVersionCreateWithoutApprovedByInputSchema), z$2.lazy(() => RecipeVersionCreateWithoutApprovedByInputSchema).array(), z$2.lazy(() => RecipeVersionUncheckedCreateWithoutApprovedByInputSchema), z$2.lazy(() => RecipeVersionUncheckedCreateWithoutApprovedByInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => RecipeVersionCreateOrConnectWithoutApprovedByInputSchema), z$2.lazy(() => RecipeVersionCreateOrConnectWithoutApprovedByInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => RecipeVersionCreateManyApprovedByInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => RecipeVersionWhereUniqueInputSchema), z$2.lazy(() => RecipeVersionWhereUniqueInputSchema).array()]).optional()
}).strict();
var EnumUserRoleFieldUpdateOperationsInputSchema = z$2.object({
  set: z$2.lazy(() => UserRoleSchema).optional()
}).strict();
var OrganizationUpdateOneWithoutUsersNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => OrganizationCreateWithoutUsersInputSchema), z$2.lazy(() => OrganizationUncheckedCreateWithoutUsersInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => OrganizationCreateOrConnectWithoutUsersInputSchema).optional(),
  upsert: z$2.lazy(() => OrganizationUpsertWithoutUsersInputSchema).optional(),
  disconnect: z$2.union([z$2.boolean(), z$2.lazy(() => OrganizationWhereInputSchema)]).optional(),
  delete: z$2.union([z$2.boolean(), z$2.lazy(() => OrganizationWhereInputSchema)]).optional(),
  connect: z$2.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z$2.union([z$2.lazy(() => OrganizationUpdateToOneWithWhereWithoutUsersInputSchema), z$2.lazy(() => OrganizationUpdateWithoutUsersInputSchema), z$2.lazy(() => OrganizationUncheckedUpdateWithoutUsersInputSchema)]).optional()
}).strict();
var RestaurantUpdateOneWithoutUsersNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RestaurantCreateWithoutUsersInputSchema), z$2.lazy(() => RestaurantUncheckedCreateWithoutUsersInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => RestaurantCreateOrConnectWithoutUsersInputSchema).optional(),
  upsert: z$2.lazy(() => RestaurantUpsertWithoutUsersInputSchema).optional(),
  disconnect: z$2.union([z$2.boolean(), z$2.lazy(() => RestaurantWhereInputSchema)]).optional(),
  delete: z$2.union([z$2.boolean(), z$2.lazy(() => RestaurantWhereInputSchema)]).optional(),
  connect: z$2.lazy(() => RestaurantWhereUniqueInputSchema).optional(),
  update: z$2.union([z$2.lazy(() => RestaurantUpdateToOneWithWhereWithoutUsersInputSchema), z$2.lazy(() => RestaurantUpdateWithoutUsersInputSchema), z$2.lazy(() => RestaurantUncheckedUpdateWithoutUsersInputSchema)]).optional()
}).strict();
var ShiftUpdateManyWithoutUserNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => ShiftCreateWithoutUserInputSchema), z$2.lazy(() => ShiftCreateWithoutUserInputSchema).array(), z$2.lazy(() => ShiftUncheckedCreateWithoutUserInputSchema), z$2.lazy(() => ShiftUncheckedCreateWithoutUserInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => ShiftCreateOrConnectWithoutUserInputSchema), z$2.lazy(() => ShiftCreateOrConnectWithoutUserInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => ShiftUpsertWithWhereUniqueWithoutUserInputSchema), z$2.lazy(() => ShiftUpsertWithWhereUniqueWithoutUserInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => ShiftCreateManyUserInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => ShiftWhereUniqueInputSchema), z$2.lazy(() => ShiftWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => ShiftWhereUniqueInputSchema), z$2.lazy(() => ShiftWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => ShiftWhereUniqueInputSchema), z$2.lazy(() => ShiftWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => ShiftWhereUniqueInputSchema), z$2.lazy(() => ShiftWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => ShiftUpdateWithWhereUniqueWithoutUserInputSchema), z$2.lazy(() => ShiftUpdateWithWhereUniqueWithoutUserInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => ShiftUpdateManyWithWhereWithoutUserInputSchema), z$2.lazy(() => ShiftUpdateManyWithWhereWithoutUserInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => ShiftScalarWhereInputSchema), z$2.lazy(() => ShiftScalarWhereInputSchema).array()]).optional()
}).strict();
var PrepItemUpdateManyWithoutAssignedToNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => PrepItemCreateWithoutAssignedToInputSchema), z$2.lazy(() => PrepItemCreateWithoutAssignedToInputSchema).array(), z$2.lazy(() => PrepItemUncheckedCreateWithoutAssignedToInputSchema), z$2.lazy(() => PrepItemUncheckedCreateWithoutAssignedToInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => PrepItemCreateOrConnectWithoutAssignedToInputSchema), z$2.lazy(() => PrepItemCreateOrConnectWithoutAssignedToInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => PrepItemUpsertWithWhereUniqueWithoutAssignedToInputSchema), z$2.lazy(() => PrepItemUpsertWithWhereUniqueWithoutAssignedToInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => PrepItemCreateManyAssignedToInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => PrepItemWhereUniqueInputSchema), z$2.lazy(() => PrepItemWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => PrepItemWhereUniqueInputSchema), z$2.lazy(() => PrepItemWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => PrepItemWhereUniqueInputSchema), z$2.lazy(() => PrepItemWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => PrepItemWhereUniqueInputSchema), z$2.lazy(() => PrepItemWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => PrepItemUpdateWithWhereUniqueWithoutAssignedToInputSchema), z$2.lazy(() => PrepItemUpdateWithWhereUniqueWithoutAssignedToInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => PrepItemUpdateManyWithWhereWithoutAssignedToInputSchema), z$2.lazy(() => PrepItemUpdateManyWithWhereWithoutAssignedToInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => PrepItemScalarWhereInputSchema), z$2.lazy(() => PrepItemScalarWhereInputSchema).array()]).optional()
}).strict();
var InventoryItemUpdateManyWithoutLastUpdatedByNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => InventoryItemCreateWithoutLastUpdatedByInputSchema), z$2.lazy(() => InventoryItemCreateWithoutLastUpdatedByInputSchema).array(), z$2.lazy(() => InventoryItemUncheckedCreateWithoutLastUpdatedByInputSchema), z$2.lazy(() => InventoryItemUncheckedCreateWithoutLastUpdatedByInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => InventoryItemCreateOrConnectWithoutLastUpdatedByInputSchema), z$2.lazy(() => InventoryItemCreateOrConnectWithoutLastUpdatedByInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => InventoryItemUpsertWithWhereUniqueWithoutLastUpdatedByInputSchema), z$2.lazy(() => InventoryItemUpsertWithWhereUniqueWithoutLastUpdatedByInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => InventoryItemCreateManyLastUpdatedByInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => InventoryItemWhereUniqueInputSchema), z$2.lazy(() => InventoryItemWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => InventoryItemWhereUniqueInputSchema), z$2.lazy(() => InventoryItemWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => InventoryItemWhereUniqueInputSchema), z$2.lazy(() => InventoryItemWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => InventoryItemWhereUniqueInputSchema), z$2.lazy(() => InventoryItemWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => InventoryItemUpdateWithWhereUniqueWithoutLastUpdatedByInputSchema), z$2.lazy(() => InventoryItemUpdateWithWhereUniqueWithoutLastUpdatedByInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => InventoryItemUpdateManyWithWhereWithoutLastUpdatedByInputSchema), z$2.lazy(() => InventoryItemUpdateManyWithWhereWithoutLastUpdatedByInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => InventoryItemScalarWhereInputSchema), z$2.lazy(() => InventoryItemScalarWhereInputSchema).array()]).optional()
}).strict();
var SessionUpdateManyWithoutUserNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => SessionCreateWithoutUserInputSchema), z$2.lazy(() => SessionCreateWithoutUserInputSchema).array(), z$2.lazy(() => SessionUncheckedCreateWithoutUserInputSchema), z$2.lazy(() => SessionUncheckedCreateWithoutUserInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => SessionCreateOrConnectWithoutUserInputSchema), z$2.lazy(() => SessionCreateOrConnectWithoutUserInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => SessionUpsertWithWhereUniqueWithoutUserInputSchema), z$2.lazy(() => SessionUpsertWithWhereUniqueWithoutUserInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => SessionCreateManyUserInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => SessionWhereUniqueInputSchema), z$2.lazy(() => SessionWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => SessionWhereUniqueInputSchema), z$2.lazy(() => SessionWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => SessionWhereUniqueInputSchema), z$2.lazy(() => SessionWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => SessionWhereUniqueInputSchema), z$2.lazy(() => SessionWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => SessionUpdateWithWhereUniqueWithoutUserInputSchema), z$2.lazy(() => SessionUpdateWithWhereUniqueWithoutUserInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => SessionUpdateManyWithWhereWithoutUserInputSchema), z$2.lazy(() => SessionUpdateManyWithWhereWithoutUserInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => SessionScalarWhereInputSchema), z$2.lazy(() => SessionScalarWhereInputSchema).array()]).optional()
}).strict();
var PasswordResetUpdateManyWithoutUserNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => PasswordResetCreateWithoutUserInputSchema), z$2.lazy(() => PasswordResetCreateWithoutUserInputSchema).array(), z$2.lazy(() => PasswordResetUncheckedCreateWithoutUserInputSchema), z$2.lazy(() => PasswordResetUncheckedCreateWithoutUserInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => PasswordResetCreateOrConnectWithoutUserInputSchema), z$2.lazy(() => PasswordResetCreateOrConnectWithoutUserInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => PasswordResetUpsertWithWhereUniqueWithoutUserInputSchema), z$2.lazy(() => PasswordResetUpsertWithWhereUniqueWithoutUserInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => PasswordResetCreateManyUserInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => PasswordResetWhereUniqueInputSchema), z$2.lazy(() => PasswordResetWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => PasswordResetWhereUniqueInputSchema), z$2.lazy(() => PasswordResetWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => PasswordResetWhereUniqueInputSchema), z$2.lazy(() => PasswordResetWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => PasswordResetWhereUniqueInputSchema), z$2.lazy(() => PasswordResetWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => PasswordResetUpdateWithWhereUniqueWithoutUserInputSchema), z$2.lazy(() => PasswordResetUpdateWithWhereUniqueWithoutUserInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => PasswordResetUpdateManyWithWhereWithoutUserInputSchema), z$2.lazy(() => PasswordResetUpdateManyWithWhereWithoutUserInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => PasswordResetScalarWhereInputSchema), z$2.lazy(() => PasswordResetScalarWhereInputSchema).array()]).optional()
}).strict();
var LeftoverItemUpdateManyWithoutRecordedByNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => LeftoverItemCreateWithoutRecordedByInputSchema), z$2.lazy(() => LeftoverItemCreateWithoutRecordedByInputSchema).array(), z$2.lazy(() => LeftoverItemUncheckedCreateWithoutRecordedByInputSchema), z$2.lazy(() => LeftoverItemUncheckedCreateWithoutRecordedByInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => LeftoverItemCreateOrConnectWithoutRecordedByInputSchema), z$2.lazy(() => LeftoverItemCreateOrConnectWithoutRecordedByInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => LeftoverItemUpsertWithWhereUniqueWithoutRecordedByInputSchema), z$2.lazy(() => LeftoverItemUpsertWithWhereUniqueWithoutRecordedByInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => LeftoverItemCreateManyRecordedByInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => LeftoverItemWhereUniqueInputSchema), z$2.lazy(() => LeftoverItemWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => LeftoverItemWhereUniqueInputSchema), z$2.lazy(() => LeftoverItemWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => LeftoverItemWhereUniqueInputSchema), z$2.lazy(() => LeftoverItemWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => LeftoverItemWhereUniqueInputSchema), z$2.lazy(() => LeftoverItemWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => LeftoverItemUpdateWithWhereUniqueWithoutRecordedByInputSchema), z$2.lazy(() => LeftoverItemUpdateWithWhereUniqueWithoutRecordedByInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => LeftoverItemUpdateManyWithWhereWithoutRecordedByInputSchema), z$2.lazy(() => LeftoverItemUpdateManyWithWhereWithoutRecordedByInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => LeftoverItemScalarWhereInputSchema), z$2.lazy(() => LeftoverItemScalarWhereInputSchema).array()]).optional()
}).strict();
var WasteRecordUpdateManyWithoutRecordedByNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => WasteRecordCreateWithoutRecordedByInputSchema), z$2.lazy(() => WasteRecordCreateWithoutRecordedByInputSchema).array(), z$2.lazy(() => WasteRecordUncheckedCreateWithoutRecordedByInputSchema), z$2.lazy(() => WasteRecordUncheckedCreateWithoutRecordedByInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => WasteRecordCreateOrConnectWithoutRecordedByInputSchema), z$2.lazy(() => WasteRecordCreateOrConnectWithoutRecordedByInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => WasteRecordUpsertWithWhereUniqueWithoutRecordedByInputSchema), z$2.lazy(() => WasteRecordUpsertWithWhereUniqueWithoutRecordedByInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => WasteRecordCreateManyRecordedByInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => WasteRecordWhereUniqueInputSchema), z$2.lazy(() => WasteRecordWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => WasteRecordWhereUniqueInputSchema), z$2.lazy(() => WasteRecordWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => WasteRecordWhereUniqueInputSchema), z$2.lazy(() => WasteRecordWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => WasteRecordWhereUniqueInputSchema), z$2.lazy(() => WasteRecordWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => WasteRecordUpdateWithWhereUniqueWithoutRecordedByInputSchema), z$2.lazy(() => WasteRecordUpdateWithWhereUniqueWithoutRecordedByInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => WasteRecordUpdateManyWithWhereWithoutRecordedByInputSchema), z$2.lazy(() => WasteRecordUpdateManyWithWhereWithoutRecordedByInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => WasteRecordScalarWhereInputSchema), z$2.lazy(() => WasteRecordScalarWhereInputSchema).array()]).optional()
}).strict();
var ProductionPlanUpdateManyWithoutCreatedByNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => ProductionPlanCreateWithoutCreatedByInputSchema), z$2.lazy(() => ProductionPlanCreateWithoutCreatedByInputSchema).array(), z$2.lazy(() => ProductionPlanUncheckedCreateWithoutCreatedByInputSchema), z$2.lazy(() => ProductionPlanUncheckedCreateWithoutCreatedByInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => ProductionPlanCreateOrConnectWithoutCreatedByInputSchema), z$2.lazy(() => ProductionPlanCreateOrConnectWithoutCreatedByInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => ProductionPlanUpsertWithWhereUniqueWithoutCreatedByInputSchema), z$2.lazy(() => ProductionPlanUpsertWithWhereUniqueWithoutCreatedByInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => ProductionPlanCreateManyCreatedByInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => ProductionPlanWhereUniqueInputSchema), z$2.lazy(() => ProductionPlanWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => ProductionPlanWhereUniqueInputSchema), z$2.lazy(() => ProductionPlanWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => ProductionPlanWhereUniqueInputSchema), z$2.lazy(() => ProductionPlanWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => ProductionPlanWhereUniqueInputSchema), z$2.lazy(() => ProductionPlanWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => ProductionPlanUpdateWithWhereUniqueWithoutCreatedByInputSchema), z$2.lazy(() => ProductionPlanUpdateWithWhereUniqueWithoutCreatedByInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => ProductionPlanUpdateManyWithWhereWithoutCreatedByInputSchema), z$2.lazy(() => ProductionPlanUpdateManyWithWhereWithoutCreatedByInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => ProductionPlanScalarWhereInputSchema), z$2.lazy(() => ProductionPlanScalarWhereInputSchema).array()]).optional()
}).strict();
var ProductionPlanItemUpdateManyWithoutAssignedToNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => ProductionPlanItemCreateWithoutAssignedToInputSchema), z$2.lazy(() => ProductionPlanItemCreateWithoutAssignedToInputSchema).array(), z$2.lazy(() => ProductionPlanItemUncheckedCreateWithoutAssignedToInputSchema), z$2.lazy(() => ProductionPlanItemUncheckedCreateWithoutAssignedToInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => ProductionPlanItemCreateOrConnectWithoutAssignedToInputSchema), z$2.lazy(() => ProductionPlanItemCreateOrConnectWithoutAssignedToInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => ProductionPlanItemUpsertWithWhereUniqueWithoutAssignedToInputSchema), z$2.lazy(() => ProductionPlanItemUpsertWithWhereUniqueWithoutAssignedToInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => ProductionPlanItemCreateManyAssignedToInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => ProductionPlanItemWhereUniqueInputSchema), z$2.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => ProductionPlanItemWhereUniqueInputSchema), z$2.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => ProductionPlanItemWhereUniqueInputSchema), z$2.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => ProductionPlanItemWhereUniqueInputSchema), z$2.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => ProductionPlanItemUpdateWithWhereUniqueWithoutAssignedToInputSchema), z$2.lazy(() => ProductionPlanItemUpdateWithWhereUniqueWithoutAssignedToInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => ProductionPlanItemUpdateManyWithWhereWithoutAssignedToInputSchema), z$2.lazy(() => ProductionPlanItemUpdateManyWithWhereWithoutAssignedToInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => ProductionPlanItemScalarWhereInputSchema), z$2.lazy(() => ProductionPlanItemScalarWhereInputSchema).array()]).optional()
}).strict();
var AvailabilityUpdateManyWithoutUserNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => AvailabilityCreateWithoutUserInputSchema), z$2.lazy(() => AvailabilityCreateWithoutUserInputSchema).array(), z$2.lazy(() => AvailabilityUncheckedCreateWithoutUserInputSchema), z$2.lazy(() => AvailabilityUncheckedCreateWithoutUserInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => AvailabilityCreateOrConnectWithoutUserInputSchema), z$2.lazy(() => AvailabilityCreateOrConnectWithoutUserInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => AvailabilityUpsertWithWhereUniqueWithoutUserInputSchema), z$2.lazy(() => AvailabilityUpsertWithWhereUniqueWithoutUserInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => AvailabilityCreateManyUserInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => AvailabilityWhereUniqueInputSchema), z$2.lazy(() => AvailabilityWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => AvailabilityWhereUniqueInputSchema), z$2.lazy(() => AvailabilityWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => AvailabilityWhereUniqueInputSchema), z$2.lazy(() => AvailabilityWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => AvailabilityWhereUniqueInputSchema), z$2.lazy(() => AvailabilityWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => AvailabilityUpdateWithWhereUniqueWithoutUserInputSchema), z$2.lazy(() => AvailabilityUpdateWithWhereUniqueWithoutUserInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => AvailabilityUpdateManyWithWhereWithoutUserInputSchema), z$2.lazy(() => AvailabilityUpdateManyWithWhereWithoutUserInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => AvailabilityScalarWhereInputSchema), z$2.lazy(() => AvailabilityScalarWhereInputSchema).array()]).optional()
}).strict();
var SchedulingConstraintUpdateManyWithoutUserNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => SchedulingConstraintCreateWithoutUserInputSchema), z$2.lazy(() => SchedulingConstraintCreateWithoutUserInputSchema).array(), z$2.lazy(() => SchedulingConstraintUncheckedCreateWithoutUserInputSchema), z$2.lazy(() => SchedulingConstraintUncheckedCreateWithoutUserInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => SchedulingConstraintCreateOrConnectWithoutUserInputSchema), z$2.lazy(() => SchedulingConstraintCreateOrConnectWithoutUserInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => SchedulingConstraintUpsertWithWhereUniqueWithoutUserInputSchema), z$2.lazy(() => SchedulingConstraintUpsertWithWhereUniqueWithoutUserInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => SchedulingConstraintCreateManyUserInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => SchedulingConstraintWhereUniqueInputSchema), z$2.lazy(() => SchedulingConstraintWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => SchedulingConstraintWhereUniqueInputSchema), z$2.lazy(() => SchedulingConstraintWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => SchedulingConstraintWhereUniqueInputSchema), z$2.lazy(() => SchedulingConstraintWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => SchedulingConstraintWhereUniqueInputSchema), z$2.lazy(() => SchedulingConstraintWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => SchedulingConstraintUpdateWithWhereUniqueWithoutUserInputSchema), z$2.lazy(() => SchedulingConstraintUpdateWithWhereUniqueWithoutUserInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => SchedulingConstraintUpdateManyWithWhereWithoutUserInputSchema), z$2.lazy(() => SchedulingConstraintUpdateManyWithWhereWithoutUserInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => SchedulingConstraintScalarWhereInputSchema), z$2.lazy(() => SchedulingConstraintScalarWhereInputSchema).array()]).optional()
}).strict();
var InventoryWithdrawalUpdateManyWithoutCreatedByNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => InventoryWithdrawalCreateWithoutCreatedByInputSchema), z$2.lazy(() => InventoryWithdrawalCreateWithoutCreatedByInputSchema).array(), z$2.lazy(() => InventoryWithdrawalUncheckedCreateWithoutCreatedByInputSchema), z$2.lazy(() => InventoryWithdrawalUncheckedCreateWithoutCreatedByInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => InventoryWithdrawalCreateOrConnectWithoutCreatedByInputSchema), z$2.lazy(() => InventoryWithdrawalCreateOrConnectWithoutCreatedByInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => InventoryWithdrawalUpsertWithWhereUniqueWithoutCreatedByInputSchema), z$2.lazy(() => InventoryWithdrawalUpsertWithWhereUniqueWithoutCreatedByInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => InventoryWithdrawalCreateManyCreatedByInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => InventoryWithdrawalWhereUniqueInputSchema), z$2.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => InventoryWithdrawalWhereUniqueInputSchema), z$2.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => InventoryWithdrawalWhereUniqueInputSchema), z$2.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => InventoryWithdrawalWhereUniqueInputSchema), z$2.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => InventoryWithdrawalUpdateWithWhereUniqueWithoutCreatedByInputSchema), z$2.lazy(() => InventoryWithdrawalUpdateWithWhereUniqueWithoutCreatedByInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => InventoryWithdrawalUpdateManyWithWhereWithoutCreatedByInputSchema), z$2.lazy(() => InventoryWithdrawalUpdateManyWithWhereWithoutCreatedByInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => InventoryWithdrawalScalarWhereInputSchema), z$2.lazy(() => InventoryWithdrawalScalarWhereInputSchema).array()]).optional()
}).strict();
var ChecklistCompleteUpdateManyWithoutCompletedByNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => ChecklistCompleteCreateWithoutCompletedByInputSchema), z$2.lazy(() => ChecklistCompleteCreateWithoutCompletedByInputSchema).array(), z$2.lazy(() => ChecklistCompleteUncheckedCreateWithoutCompletedByInputSchema), z$2.lazy(() => ChecklistCompleteUncheckedCreateWithoutCompletedByInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => ChecklistCompleteCreateOrConnectWithoutCompletedByInputSchema), z$2.lazy(() => ChecklistCompleteCreateOrConnectWithoutCompletedByInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => ChecklistCompleteUpsertWithWhereUniqueWithoutCompletedByInputSchema), z$2.lazy(() => ChecklistCompleteUpsertWithWhereUniqueWithoutCompletedByInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => ChecklistCompleteCreateManyCompletedByInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => ChecklistCompleteWhereUniqueInputSchema), z$2.lazy(() => ChecklistCompleteWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => ChecklistCompleteWhereUniqueInputSchema), z$2.lazy(() => ChecklistCompleteWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => ChecklistCompleteWhereUniqueInputSchema), z$2.lazy(() => ChecklistCompleteWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => ChecklistCompleteWhereUniqueInputSchema), z$2.lazy(() => ChecklistCompleteWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => ChecklistCompleteUpdateWithWhereUniqueWithoutCompletedByInputSchema), z$2.lazy(() => ChecklistCompleteUpdateWithWhereUniqueWithoutCompletedByInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => ChecklistCompleteUpdateManyWithWhereWithoutCompletedByInputSchema), z$2.lazy(() => ChecklistCompleteUpdateManyWithWhereWithoutCompletedByInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => ChecklistCompleteScalarWhereInputSchema), z$2.lazy(() => ChecklistCompleteScalarWhereInputSchema).array()]).optional()
}).strict();
var CustomerFeedbackUpdateManyWithoutRespondedByNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => CustomerFeedbackCreateWithoutRespondedByInputSchema), z$2.lazy(() => CustomerFeedbackCreateWithoutRespondedByInputSchema).array(), z$2.lazy(() => CustomerFeedbackUncheckedCreateWithoutRespondedByInputSchema), z$2.lazy(() => CustomerFeedbackUncheckedCreateWithoutRespondedByInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => CustomerFeedbackCreateOrConnectWithoutRespondedByInputSchema), z$2.lazy(() => CustomerFeedbackCreateOrConnectWithoutRespondedByInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => CustomerFeedbackUpsertWithWhereUniqueWithoutRespondedByInputSchema), z$2.lazy(() => CustomerFeedbackUpsertWithWhereUniqueWithoutRespondedByInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => CustomerFeedbackCreateManyRespondedByInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => CustomerFeedbackWhereUniqueInputSchema), z$2.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => CustomerFeedbackWhereUniqueInputSchema), z$2.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => CustomerFeedbackWhereUniqueInputSchema), z$2.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => CustomerFeedbackWhereUniqueInputSchema), z$2.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => CustomerFeedbackUpdateWithWhereUniqueWithoutRespondedByInputSchema), z$2.lazy(() => CustomerFeedbackUpdateWithWhereUniqueWithoutRespondedByInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => CustomerFeedbackUpdateManyWithWhereWithoutRespondedByInputSchema), z$2.lazy(() => CustomerFeedbackUpdateManyWithWhereWithoutRespondedByInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => CustomerFeedbackScalarWhereInputSchema), z$2.lazy(() => CustomerFeedbackScalarWhereInputSchema).array()]).optional()
}).strict();
var RecipeVersionUpdateManyWithoutCreatedByNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeVersionCreateWithoutCreatedByInputSchema), z$2.lazy(() => RecipeVersionCreateWithoutCreatedByInputSchema).array(), z$2.lazy(() => RecipeVersionUncheckedCreateWithoutCreatedByInputSchema), z$2.lazy(() => RecipeVersionUncheckedCreateWithoutCreatedByInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => RecipeVersionCreateOrConnectWithoutCreatedByInputSchema), z$2.lazy(() => RecipeVersionCreateOrConnectWithoutCreatedByInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => RecipeVersionUpsertWithWhereUniqueWithoutCreatedByInputSchema), z$2.lazy(() => RecipeVersionUpsertWithWhereUniqueWithoutCreatedByInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => RecipeVersionCreateManyCreatedByInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => RecipeVersionWhereUniqueInputSchema), z$2.lazy(() => RecipeVersionWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => RecipeVersionWhereUniqueInputSchema), z$2.lazy(() => RecipeVersionWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => RecipeVersionWhereUniqueInputSchema), z$2.lazy(() => RecipeVersionWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => RecipeVersionWhereUniqueInputSchema), z$2.lazy(() => RecipeVersionWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => RecipeVersionUpdateWithWhereUniqueWithoutCreatedByInputSchema), z$2.lazy(() => RecipeVersionUpdateWithWhereUniqueWithoutCreatedByInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => RecipeVersionUpdateManyWithWhereWithoutCreatedByInputSchema), z$2.lazy(() => RecipeVersionUpdateManyWithWhereWithoutCreatedByInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => RecipeVersionScalarWhereInputSchema), z$2.lazy(() => RecipeVersionScalarWhereInputSchema).array()]).optional()
}).strict();
var RecipeVersionUpdateManyWithoutApprovedByNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeVersionCreateWithoutApprovedByInputSchema), z$2.lazy(() => RecipeVersionCreateWithoutApprovedByInputSchema).array(), z$2.lazy(() => RecipeVersionUncheckedCreateWithoutApprovedByInputSchema), z$2.lazy(() => RecipeVersionUncheckedCreateWithoutApprovedByInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => RecipeVersionCreateOrConnectWithoutApprovedByInputSchema), z$2.lazy(() => RecipeVersionCreateOrConnectWithoutApprovedByInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => RecipeVersionUpsertWithWhereUniqueWithoutApprovedByInputSchema), z$2.lazy(() => RecipeVersionUpsertWithWhereUniqueWithoutApprovedByInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => RecipeVersionCreateManyApprovedByInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => RecipeVersionWhereUniqueInputSchema), z$2.lazy(() => RecipeVersionWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => RecipeVersionWhereUniqueInputSchema), z$2.lazy(() => RecipeVersionWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => RecipeVersionWhereUniqueInputSchema), z$2.lazy(() => RecipeVersionWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => RecipeVersionWhereUniqueInputSchema), z$2.lazy(() => RecipeVersionWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => RecipeVersionUpdateWithWhereUniqueWithoutApprovedByInputSchema), z$2.lazy(() => RecipeVersionUpdateWithWhereUniqueWithoutApprovedByInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => RecipeVersionUpdateManyWithWhereWithoutApprovedByInputSchema), z$2.lazy(() => RecipeVersionUpdateManyWithWhereWithoutApprovedByInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => RecipeVersionScalarWhereInputSchema), z$2.lazy(() => RecipeVersionScalarWhereInputSchema).array()]).optional()
}).strict();
var ShiftUncheckedUpdateManyWithoutUserNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => ShiftCreateWithoutUserInputSchema), z$2.lazy(() => ShiftCreateWithoutUserInputSchema).array(), z$2.lazy(() => ShiftUncheckedCreateWithoutUserInputSchema), z$2.lazy(() => ShiftUncheckedCreateWithoutUserInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => ShiftCreateOrConnectWithoutUserInputSchema), z$2.lazy(() => ShiftCreateOrConnectWithoutUserInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => ShiftUpsertWithWhereUniqueWithoutUserInputSchema), z$2.lazy(() => ShiftUpsertWithWhereUniqueWithoutUserInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => ShiftCreateManyUserInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => ShiftWhereUniqueInputSchema), z$2.lazy(() => ShiftWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => ShiftWhereUniqueInputSchema), z$2.lazy(() => ShiftWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => ShiftWhereUniqueInputSchema), z$2.lazy(() => ShiftWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => ShiftWhereUniqueInputSchema), z$2.lazy(() => ShiftWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => ShiftUpdateWithWhereUniqueWithoutUserInputSchema), z$2.lazy(() => ShiftUpdateWithWhereUniqueWithoutUserInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => ShiftUpdateManyWithWhereWithoutUserInputSchema), z$2.lazy(() => ShiftUpdateManyWithWhereWithoutUserInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => ShiftScalarWhereInputSchema), z$2.lazy(() => ShiftScalarWhereInputSchema).array()]).optional()
}).strict();
var PrepItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => PrepItemCreateWithoutAssignedToInputSchema), z$2.lazy(() => PrepItemCreateWithoutAssignedToInputSchema).array(), z$2.lazy(() => PrepItemUncheckedCreateWithoutAssignedToInputSchema), z$2.lazy(() => PrepItemUncheckedCreateWithoutAssignedToInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => PrepItemCreateOrConnectWithoutAssignedToInputSchema), z$2.lazy(() => PrepItemCreateOrConnectWithoutAssignedToInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => PrepItemUpsertWithWhereUniqueWithoutAssignedToInputSchema), z$2.lazy(() => PrepItemUpsertWithWhereUniqueWithoutAssignedToInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => PrepItemCreateManyAssignedToInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => PrepItemWhereUniqueInputSchema), z$2.lazy(() => PrepItemWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => PrepItemWhereUniqueInputSchema), z$2.lazy(() => PrepItemWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => PrepItemWhereUniqueInputSchema), z$2.lazy(() => PrepItemWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => PrepItemWhereUniqueInputSchema), z$2.lazy(() => PrepItemWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => PrepItemUpdateWithWhereUniqueWithoutAssignedToInputSchema), z$2.lazy(() => PrepItemUpdateWithWhereUniqueWithoutAssignedToInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => PrepItemUpdateManyWithWhereWithoutAssignedToInputSchema), z$2.lazy(() => PrepItemUpdateManyWithWhereWithoutAssignedToInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => PrepItemScalarWhereInputSchema), z$2.lazy(() => PrepItemScalarWhereInputSchema).array()]).optional()
}).strict();
var InventoryItemUncheckedUpdateManyWithoutLastUpdatedByNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => InventoryItemCreateWithoutLastUpdatedByInputSchema), z$2.lazy(() => InventoryItemCreateWithoutLastUpdatedByInputSchema).array(), z$2.lazy(() => InventoryItemUncheckedCreateWithoutLastUpdatedByInputSchema), z$2.lazy(() => InventoryItemUncheckedCreateWithoutLastUpdatedByInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => InventoryItemCreateOrConnectWithoutLastUpdatedByInputSchema), z$2.lazy(() => InventoryItemCreateOrConnectWithoutLastUpdatedByInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => InventoryItemUpsertWithWhereUniqueWithoutLastUpdatedByInputSchema), z$2.lazy(() => InventoryItemUpsertWithWhereUniqueWithoutLastUpdatedByInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => InventoryItemCreateManyLastUpdatedByInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => InventoryItemWhereUniqueInputSchema), z$2.lazy(() => InventoryItemWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => InventoryItemWhereUniqueInputSchema), z$2.lazy(() => InventoryItemWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => InventoryItemWhereUniqueInputSchema), z$2.lazy(() => InventoryItemWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => InventoryItemWhereUniqueInputSchema), z$2.lazy(() => InventoryItemWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => InventoryItemUpdateWithWhereUniqueWithoutLastUpdatedByInputSchema), z$2.lazy(() => InventoryItemUpdateWithWhereUniqueWithoutLastUpdatedByInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => InventoryItemUpdateManyWithWhereWithoutLastUpdatedByInputSchema), z$2.lazy(() => InventoryItemUpdateManyWithWhereWithoutLastUpdatedByInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => InventoryItemScalarWhereInputSchema), z$2.lazy(() => InventoryItemScalarWhereInputSchema).array()]).optional()
}).strict();
var SessionUncheckedUpdateManyWithoutUserNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => SessionCreateWithoutUserInputSchema), z$2.lazy(() => SessionCreateWithoutUserInputSchema).array(), z$2.lazy(() => SessionUncheckedCreateWithoutUserInputSchema), z$2.lazy(() => SessionUncheckedCreateWithoutUserInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => SessionCreateOrConnectWithoutUserInputSchema), z$2.lazy(() => SessionCreateOrConnectWithoutUserInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => SessionUpsertWithWhereUniqueWithoutUserInputSchema), z$2.lazy(() => SessionUpsertWithWhereUniqueWithoutUserInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => SessionCreateManyUserInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => SessionWhereUniqueInputSchema), z$2.lazy(() => SessionWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => SessionWhereUniqueInputSchema), z$2.lazy(() => SessionWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => SessionWhereUniqueInputSchema), z$2.lazy(() => SessionWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => SessionWhereUniqueInputSchema), z$2.lazy(() => SessionWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => SessionUpdateWithWhereUniqueWithoutUserInputSchema), z$2.lazy(() => SessionUpdateWithWhereUniqueWithoutUserInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => SessionUpdateManyWithWhereWithoutUserInputSchema), z$2.lazy(() => SessionUpdateManyWithWhereWithoutUserInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => SessionScalarWhereInputSchema), z$2.lazy(() => SessionScalarWhereInputSchema).array()]).optional()
}).strict();
var PasswordResetUncheckedUpdateManyWithoutUserNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => PasswordResetCreateWithoutUserInputSchema), z$2.lazy(() => PasswordResetCreateWithoutUserInputSchema).array(), z$2.lazy(() => PasswordResetUncheckedCreateWithoutUserInputSchema), z$2.lazy(() => PasswordResetUncheckedCreateWithoutUserInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => PasswordResetCreateOrConnectWithoutUserInputSchema), z$2.lazy(() => PasswordResetCreateOrConnectWithoutUserInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => PasswordResetUpsertWithWhereUniqueWithoutUserInputSchema), z$2.lazy(() => PasswordResetUpsertWithWhereUniqueWithoutUserInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => PasswordResetCreateManyUserInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => PasswordResetWhereUniqueInputSchema), z$2.lazy(() => PasswordResetWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => PasswordResetWhereUniqueInputSchema), z$2.lazy(() => PasswordResetWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => PasswordResetWhereUniqueInputSchema), z$2.lazy(() => PasswordResetWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => PasswordResetWhereUniqueInputSchema), z$2.lazy(() => PasswordResetWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => PasswordResetUpdateWithWhereUniqueWithoutUserInputSchema), z$2.lazy(() => PasswordResetUpdateWithWhereUniqueWithoutUserInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => PasswordResetUpdateManyWithWhereWithoutUserInputSchema), z$2.lazy(() => PasswordResetUpdateManyWithWhereWithoutUserInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => PasswordResetScalarWhereInputSchema), z$2.lazy(() => PasswordResetScalarWhereInputSchema).array()]).optional()
}).strict();
var LeftoverItemUncheckedUpdateManyWithoutRecordedByNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => LeftoverItemCreateWithoutRecordedByInputSchema), z$2.lazy(() => LeftoverItemCreateWithoutRecordedByInputSchema).array(), z$2.lazy(() => LeftoverItemUncheckedCreateWithoutRecordedByInputSchema), z$2.lazy(() => LeftoverItemUncheckedCreateWithoutRecordedByInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => LeftoverItemCreateOrConnectWithoutRecordedByInputSchema), z$2.lazy(() => LeftoverItemCreateOrConnectWithoutRecordedByInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => LeftoverItemUpsertWithWhereUniqueWithoutRecordedByInputSchema), z$2.lazy(() => LeftoverItemUpsertWithWhereUniqueWithoutRecordedByInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => LeftoverItemCreateManyRecordedByInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => LeftoverItemWhereUniqueInputSchema), z$2.lazy(() => LeftoverItemWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => LeftoverItemWhereUniqueInputSchema), z$2.lazy(() => LeftoverItemWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => LeftoverItemWhereUniqueInputSchema), z$2.lazy(() => LeftoverItemWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => LeftoverItemWhereUniqueInputSchema), z$2.lazy(() => LeftoverItemWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => LeftoverItemUpdateWithWhereUniqueWithoutRecordedByInputSchema), z$2.lazy(() => LeftoverItemUpdateWithWhereUniqueWithoutRecordedByInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => LeftoverItemUpdateManyWithWhereWithoutRecordedByInputSchema), z$2.lazy(() => LeftoverItemUpdateManyWithWhereWithoutRecordedByInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => LeftoverItemScalarWhereInputSchema), z$2.lazy(() => LeftoverItemScalarWhereInputSchema).array()]).optional()
}).strict();
var WasteRecordUncheckedUpdateManyWithoutRecordedByNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => WasteRecordCreateWithoutRecordedByInputSchema), z$2.lazy(() => WasteRecordCreateWithoutRecordedByInputSchema).array(), z$2.lazy(() => WasteRecordUncheckedCreateWithoutRecordedByInputSchema), z$2.lazy(() => WasteRecordUncheckedCreateWithoutRecordedByInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => WasteRecordCreateOrConnectWithoutRecordedByInputSchema), z$2.lazy(() => WasteRecordCreateOrConnectWithoutRecordedByInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => WasteRecordUpsertWithWhereUniqueWithoutRecordedByInputSchema), z$2.lazy(() => WasteRecordUpsertWithWhereUniqueWithoutRecordedByInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => WasteRecordCreateManyRecordedByInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => WasteRecordWhereUniqueInputSchema), z$2.lazy(() => WasteRecordWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => WasteRecordWhereUniqueInputSchema), z$2.lazy(() => WasteRecordWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => WasteRecordWhereUniqueInputSchema), z$2.lazy(() => WasteRecordWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => WasteRecordWhereUniqueInputSchema), z$2.lazy(() => WasteRecordWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => WasteRecordUpdateWithWhereUniqueWithoutRecordedByInputSchema), z$2.lazy(() => WasteRecordUpdateWithWhereUniqueWithoutRecordedByInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => WasteRecordUpdateManyWithWhereWithoutRecordedByInputSchema), z$2.lazy(() => WasteRecordUpdateManyWithWhereWithoutRecordedByInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => WasteRecordScalarWhereInputSchema), z$2.lazy(() => WasteRecordScalarWhereInputSchema).array()]).optional()
}).strict();
var ProductionPlanUncheckedUpdateManyWithoutCreatedByNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => ProductionPlanCreateWithoutCreatedByInputSchema), z$2.lazy(() => ProductionPlanCreateWithoutCreatedByInputSchema).array(), z$2.lazy(() => ProductionPlanUncheckedCreateWithoutCreatedByInputSchema), z$2.lazy(() => ProductionPlanUncheckedCreateWithoutCreatedByInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => ProductionPlanCreateOrConnectWithoutCreatedByInputSchema), z$2.lazy(() => ProductionPlanCreateOrConnectWithoutCreatedByInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => ProductionPlanUpsertWithWhereUniqueWithoutCreatedByInputSchema), z$2.lazy(() => ProductionPlanUpsertWithWhereUniqueWithoutCreatedByInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => ProductionPlanCreateManyCreatedByInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => ProductionPlanWhereUniqueInputSchema), z$2.lazy(() => ProductionPlanWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => ProductionPlanWhereUniqueInputSchema), z$2.lazy(() => ProductionPlanWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => ProductionPlanWhereUniqueInputSchema), z$2.lazy(() => ProductionPlanWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => ProductionPlanWhereUniqueInputSchema), z$2.lazy(() => ProductionPlanWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => ProductionPlanUpdateWithWhereUniqueWithoutCreatedByInputSchema), z$2.lazy(() => ProductionPlanUpdateWithWhereUniqueWithoutCreatedByInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => ProductionPlanUpdateManyWithWhereWithoutCreatedByInputSchema), z$2.lazy(() => ProductionPlanUpdateManyWithWhereWithoutCreatedByInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => ProductionPlanScalarWhereInputSchema), z$2.lazy(() => ProductionPlanScalarWhereInputSchema).array()]).optional()
}).strict();
var ProductionPlanItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => ProductionPlanItemCreateWithoutAssignedToInputSchema), z$2.lazy(() => ProductionPlanItemCreateWithoutAssignedToInputSchema).array(), z$2.lazy(() => ProductionPlanItemUncheckedCreateWithoutAssignedToInputSchema), z$2.lazy(() => ProductionPlanItemUncheckedCreateWithoutAssignedToInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => ProductionPlanItemCreateOrConnectWithoutAssignedToInputSchema), z$2.lazy(() => ProductionPlanItemCreateOrConnectWithoutAssignedToInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => ProductionPlanItemUpsertWithWhereUniqueWithoutAssignedToInputSchema), z$2.lazy(() => ProductionPlanItemUpsertWithWhereUniqueWithoutAssignedToInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => ProductionPlanItemCreateManyAssignedToInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => ProductionPlanItemWhereUniqueInputSchema), z$2.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => ProductionPlanItemWhereUniqueInputSchema), z$2.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => ProductionPlanItemWhereUniqueInputSchema), z$2.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => ProductionPlanItemWhereUniqueInputSchema), z$2.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => ProductionPlanItemUpdateWithWhereUniqueWithoutAssignedToInputSchema), z$2.lazy(() => ProductionPlanItemUpdateWithWhereUniqueWithoutAssignedToInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => ProductionPlanItemUpdateManyWithWhereWithoutAssignedToInputSchema), z$2.lazy(() => ProductionPlanItemUpdateManyWithWhereWithoutAssignedToInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => ProductionPlanItemScalarWhereInputSchema), z$2.lazy(() => ProductionPlanItemScalarWhereInputSchema).array()]).optional()
}).strict();
var AvailabilityUncheckedUpdateManyWithoutUserNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => AvailabilityCreateWithoutUserInputSchema), z$2.lazy(() => AvailabilityCreateWithoutUserInputSchema).array(), z$2.lazy(() => AvailabilityUncheckedCreateWithoutUserInputSchema), z$2.lazy(() => AvailabilityUncheckedCreateWithoutUserInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => AvailabilityCreateOrConnectWithoutUserInputSchema), z$2.lazy(() => AvailabilityCreateOrConnectWithoutUserInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => AvailabilityUpsertWithWhereUniqueWithoutUserInputSchema), z$2.lazy(() => AvailabilityUpsertWithWhereUniqueWithoutUserInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => AvailabilityCreateManyUserInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => AvailabilityWhereUniqueInputSchema), z$2.lazy(() => AvailabilityWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => AvailabilityWhereUniqueInputSchema), z$2.lazy(() => AvailabilityWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => AvailabilityWhereUniqueInputSchema), z$2.lazy(() => AvailabilityWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => AvailabilityWhereUniqueInputSchema), z$2.lazy(() => AvailabilityWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => AvailabilityUpdateWithWhereUniqueWithoutUserInputSchema), z$2.lazy(() => AvailabilityUpdateWithWhereUniqueWithoutUserInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => AvailabilityUpdateManyWithWhereWithoutUserInputSchema), z$2.lazy(() => AvailabilityUpdateManyWithWhereWithoutUserInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => AvailabilityScalarWhereInputSchema), z$2.lazy(() => AvailabilityScalarWhereInputSchema).array()]).optional()
}).strict();
var SchedulingConstraintUncheckedUpdateManyWithoutUserNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => SchedulingConstraintCreateWithoutUserInputSchema), z$2.lazy(() => SchedulingConstraintCreateWithoutUserInputSchema).array(), z$2.lazy(() => SchedulingConstraintUncheckedCreateWithoutUserInputSchema), z$2.lazy(() => SchedulingConstraintUncheckedCreateWithoutUserInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => SchedulingConstraintCreateOrConnectWithoutUserInputSchema), z$2.lazy(() => SchedulingConstraintCreateOrConnectWithoutUserInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => SchedulingConstraintUpsertWithWhereUniqueWithoutUserInputSchema), z$2.lazy(() => SchedulingConstraintUpsertWithWhereUniqueWithoutUserInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => SchedulingConstraintCreateManyUserInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => SchedulingConstraintWhereUniqueInputSchema), z$2.lazy(() => SchedulingConstraintWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => SchedulingConstraintWhereUniqueInputSchema), z$2.lazy(() => SchedulingConstraintWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => SchedulingConstraintWhereUniqueInputSchema), z$2.lazy(() => SchedulingConstraintWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => SchedulingConstraintWhereUniqueInputSchema), z$2.lazy(() => SchedulingConstraintWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => SchedulingConstraintUpdateWithWhereUniqueWithoutUserInputSchema), z$2.lazy(() => SchedulingConstraintUpdateWithWhereUniqueWithoutUserInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => SchedulingConstraintUpdateManyWithWhereWithoutUserInputSchema), z$2.lazy(() => SchedulingConstraintUpdateManyWithWhereWithoutUserInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => SchedulingConstraintScalarWhereInputSchema), z$2.lazy(() => SchedulingConstraintScalarWhereInputSchema).array()]).optional()
}).strict();
var InventoryWithdrawalUncheckedUpdateManyWithoutCreatedByNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => InventoryWithdrawalCreateWithoutCreatedByInputSchema), z$2.lazy(() => InventoryWithdrawalCreateWithoutCreatedByInputSchema).array(), z$2.lazy(() => InventoryWithdrawalUncheckedCreateWithoutCreatedByInputSchema), z$2.lazy(() => InventoryWithdrawalUncheckedCreateWithoutCreatedByInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => InventoryWithdrawalCreateOrConnectWithoutCreatedByInputSchema), z$2.lazy(() => InventoryWithdrawalCreateOrConnectWithoutCreatedByInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => InventoryWithdrawalUpsertWithWhereUniqueWithoutCreatedByInputSchema), z$2.lazy(() => InventoryWithdrawalUpsertWithWhereUniqueWithoutCreatedByInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => InventoryWithdrawalCreateManyCreatedByInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => InventoryWithdrawalWhereUniqueInputSchema), z$2.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => InventoryWithdrawalWhereUniqueInputSchema), z$2.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => InventoryWithdrawalWhereUniqueInputSchema), z$2.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => InventoryWithdrawalWhereUniqueInputSchema), z$2.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => InventoryWithdrawalUpdateWithWhereUniqueWithoutCreatedByInputSchema), z$2.lazy(() => InventoryWithdrawalUpdateWithWhereUniqueWithoutCreatedByInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => InventoryWithdrawalUpdateManyWithWhereWithoutCreatedByInputSchema), z$2.lazy(() => InventoryWithdrawalUpdateManyWithWhereWithoutCreatedByInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => InventoryWithdrawalScalarWhereInputSchema), z$2.lazy(() => InventoryWithdrawalScalarWhereInputSchema).array()]).optional()
}).strict();
var ChecklistCompleteUncheckedUpdateManyWithoutCompletedByNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => ChecklistCompleteCreateWithoutCompletedByInputSchema), z$2.lazy(() => ChecklistCompleteCreateWithoutCompletedByInputSchema).array(), z$2.lazy(() => ChecklistCompleteUncheckedCreateWithoutCompletedByInputSchema), z$2.lazy(() => ChecklistCompleteUncheckedCreateWithoutCompletedByInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => ChecklistCompleteCreateOrConnectWithoutCompletedByInputSchema), z$2.lazy(() => ChecklistCompleteCreateOrConnectWithoutCompletedByInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => ChecklistCompleteUpsertWithWhereUniqueWithoutCompletedByInputSchema), z$2.lazy(() => ChecklistCompleteUpsertWithWhereUniqueWithoutCompletedByInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => ChecklistCompleteCreateManyCompletedByInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => ChecklistCompleteWhereUniqueInputSchema), z$2.lazy(() => ChecklistCompleteWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => ChecklistCompleteWhereUniqueInputSchema), z$2.lazy(() => ChecklistCompleteWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => ChecklistCompleteWhereUniqueInputSchema), z$2.lazy(() => ChecklistCompleteWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => ChecklistCompleteWhereUniqueInputSchema), z$2.lazy(() => ChecklistCompleteWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => ChecklistCompleteUpdateWithWhereUniqueWithoutCompletedByInputSchema), z$2.lazy(() => ChecklistCompleteUpdateWithWhereUniqueWithoutCompletedByInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => ChecklistCompleteUpdateManyWithWhereWithoutCompletedByInputSchema), z$2.lazy(() => ChecklistCompleteUpdateManyWithWhereWithoutCompletedByInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => ChecklistCompleteScalarWhereInputSchema), z$2.lazy(() => ChecklistCompleteScalarWhereInputSchema).array()]).optional()
}).strict();
var CustomerFeedbackUncheckedUpdateManyWithoutRespondedByNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => CustomerFeedbackCreateWithoutRespondedByInputSchema), z$2.lazy(() => CustomerFeedbackCreateWithoutRespondedByInputSchema).array(), z$2.lazy(() => CustomerFeedbackUncheckedCreateWithoutRespondedByInputSchema), z$2.lazy(() => CustomerFeedbackUncheckedCreateWithoutRespondedByInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => CustomerFeedbackCreateOrConnectWithoutRespondedByInputSchema), z$2.lazy(() => CustomerFeedbackCreateOrConnectWithoutRespondedByInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => CustomerFeedbackUpsertWithWhereUniqueWithoutRespondedByInputSchema), z$2.lazy(() => CustomerFeedbackUpsertWithWhereUniqueWithoutRespondedByInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => CustomerFeedbackCreateManyRespondedByInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => CustomerFeedbackWhereUniqueInputSchema), z$2.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => CustomerFeedbackWhereUniqueInputSchema), z$2.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => CustomerFeedbackWhereUniqueInputSchema), z$2.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => CustomerFeedbackWhereUniqueInputSchema), z$2.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => CustomerFeedbackUpdateWithWhereUniqueWithoutRespondedByInputSchema), z$2.lazy(() => CustomerFeedbackUpdateWithWhereUniqueWithoutRespondedByInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => CustomerFeedbackUpdateManyWithWhereWithoutRespondedByInputSchema), z$2.lazy(() => CustomerFeedbackUpdateManyWithWhereWithoutRespondedByInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => CustomerFeedbackScalarWhereInputSchema), z$2.lazy(() => CustomerFeedbackScalarWhereInputSchema).array()]).optional()
}).strict();
var RecipeVersionUncheckedUpdateManyWithoutCreatedByNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeVersionCreateWithoutCreatedByInputSchema), z$2.lazy(() => RecipeVersionCreateWithoutCreatedByInputSchema).array(), z$2.lazy(() => RecipeVersionUncheckedCreateWithoutCreatedByInputSchema), z$2.lazy(() => RecipeVersionUncheckedCreateWithoutCreatedByInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => RecipeVersionCreateOrConnectWithoutCreatedByInputSchema), z$2.lazy(() => RecipeVersionCreateOrConnectWithoutCreatedByInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => RecipeVersionUpsertWithWhereUniqueWithoutCreatedByInputSchema), z$2.lazy(() => RecipeVersionUpsertWithWhereUniqueWithoutCreatedByInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => RecipeVersionCreateManyCreatedByInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => RecipeVersionWhereUniqueInputSchema), z$2.lazy(() => RecipeVersionWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => RecipeVersionWhereUniqueInputSchema), z$2.lazy(() => RecipeVersionWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => RecipeVersionWhereUniqueInputSchema), z$2.lazy(() => RecipeVersionWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => RecipeVersionWhereUniqueInputSchema), z$2.lazy(() => RecipeVersionWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => RecipeVersionUpdateWithWhereUniqueWithoutCreatedByInputSchema), z$2.lazy(() => RecipeVersionUpdateWithWhereUniqueWithoutCreatedByInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => RecipeVersionUpdateManyWithWhereWithoutCreatedByInputSchema), z$2.lazy(() => RecipeVersionUpdateManyWithWhereWithoutCreatedByInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => RecipeVersionScalarWhereInputSchema), z$2.lazy(() => RecipeVersionScalarWhereInputSchema).array()]).optional()
}).strict();
var RecipeVersionUncheckedUpdateManyWithoutApprovedByNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeVersionCreateWithoutApprovedByInputSchema), z$2.lazy(() => RecipeVersionCreateWithoutApprovedByInputSchema).array(), z$2.lazy(() => RecipeVersionUncheckedCreateWithoutApprovedByInputSchema), z$2.lazy(() => RecipeVersionUncheckedCreateWithoutApprovedByInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => RecipeVersionCreateOrConnectWithoutApprovedByInputSchema), z$2.lazy(() => RecipeVersionCreateOrConnectWithoutApprovedByInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => RecipeVersionUpsertWithWhereUniqueWithoutApprovedByInputSchema), z$2.lazy(() => RecipeVersionUpsertWithWhereUniqueWithoutApprovedByInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => RecipeVersionCreateManyApprovedByInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => RecipeVersionWhereUniqueInputSchema), z$2.lazy(() => RecipeVersionWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => RecipeVersionWhereUniqueInputSchema), z$2.lazy(() => RecipeVersionWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => RecipeVersionWhereUniqueInputSchema), z$2.lazy(() => RecipeVersionWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => RecipeVersionWhereUniqueInputSchema), z$2.lazy(() => RecipeVersionWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => RecipeVersionUpdateWithWhereUniqueWithoutApprovedByInputSchema), z$2.lazy(() => RecipeVersionUpdateWithWhereUniqueWithoutApprovedByInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => RecipeVersionUpdateManyWithWhereWithoutApprovedByInputSchema), z$2.lazy(() => RecipeVersionUpdateManyWithWhereWithoutApprovedByInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => RecipeVersionScalarWhereInputSchema), z$2.lazy(() => RecipeVersionScalarWhereInputSchema).array()]).optional()
}).strict();
var UserCreateNestedOneWithoutSessionsInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => UserCreateWithoutSessionsInputSchema), z$2.lazy(() => UserUncheckedCreateWithoutSessionsInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => UserCreateOrConnectWithoutSessionsInputSchema).optional(),
  connect: z$2.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();
var UserUpdateOneRequiredWithoutSessionsNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => UserCreateWithoutSessionsInputSchema), z$2.lazy(() => UserUncheckedCreateWithoutSessionsInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => UserCreateOrConnectWithoutSessionsInputSchema).optional(),
  upsert: z$2.lazy(() => UserUpsertWithoutSessionsInputSchema).optional(),
  connect: z$2.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z$2.union([z$2.lazy(() => UserUpdateToOneWithWhereWithoutSessionsInputSchema), z$2.lazy(() => UserUpdateWithoutSessionsInputSchema), z$2.lazy(() => UserUncheckedUpdateWithoutSessionsInputSchema)]).optional()
}).strict();
var RecipeCreateNestedManyWithoutCookBookInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeCreateWithoutCookBookInputSchema), z$2.lazy(() => RecipeCreateWithoutCookBookInputSchema).array(), z$2.lazy(() => RecipeUncheckedCreateWithoutCookBookInputSchema), z$2.lazy(() => RecipeUncheckedCreateWithoutCookBookInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => RecipeCreateOrConnectWithoutCookBookInputSchema), z$2.lazy(() => RecipeCreateOrConnectWithoutCookBookInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => RecipeCreateManyCookBookInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => RecipeWhereUniqueInputSchema), z$2.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional()
}).strict();
var RestaurantCreateNestedOneWithoutCookbooksInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RestaurantCreateWithoutCookbooksInputSchema), z$2.lazy(() => RestaurantUncheckedCreateWithoutCookbooksInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => RestaurantCreateOrConnectWithoutCookbooksInputSchema).optional(),
  connect: z$2.lazy(() => RestaurantWhereUniqueInputSchema).optional()
}).strict();
var RecipeUncheckedCreateNestedManyWithoutCookBookInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeCreateWithoutCookBookInputSchema), z$2.lazy(() => RecipeCreateWithoutCookBookInputSchema).array(), z$2.lazy(() => RecipeUncheckedCreateWithoutCookBookInputSchema), z$2.lazy(() => RecipeUncheckedCreateWithoutCookBookInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => RecipeCreateOrConnectWithoutCookBookInputSchema), z$2.lazy(() => RecipeCreateOrConnectWithoutCookBookInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => RecipeCreateManyCookBookInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => RecipeWhereUniqueInputSchema), z$2.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional()
}).strict();
var RecipeUpdateManyWithoutCookBookNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeCreateWithoutCookBookInputSchema), z$2.lazy(() => RecipeCreateWithoutCookBookInputSchema).array(), z$2.lazy(() => RecipeUncheckedCreateWithoutCookBookInputSchema), z$2.lazy(() => RecipeUncheckedCreateWithoutCookBookInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => RecipeCreateOrConnectWithoutCookBookInputSchema), z$2.lazy(() => RecipeCreateOrConnectWithoutCookBookInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => RecipeUpsertWithWhereUniqueWithoutCookBookInputSchema), z$2.lazy(() => RecipeUpsertWithWhereUniqueWithoutCookBookInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => RecipeCreateManyCookBookInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => RecipeWhereUniqueInputSchema), z$2.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => RecipeWhereUniqueInputSchema), z$2.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => RecipeWhereUniqueInputSchema), z$2.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => RecipeWhereUniqueInputSchema), z$2.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => RecipeUpdateWithWhereUniqueWithoutCookBookInputSchema), z$2.lazy(() => RecipeUpdateWithWhereUniqueWithoutCookBookInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => RecipeUpdateManyWithWhereWithoutCookBookInputSchema), z$2.lazy(() => RecipeUpdateManyWithWhereWithoutCookBookInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => RecipeScalarWhereInputSchema), z$2.lazy(() => RecipeScalarWhereInputSchema).array()]).optional()
}).strict();
var RestaurantUpdateOneWithoutCookbooksNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RestaurantCreateWithoutCookbooksInputSchema), z$2.lazy(() => RestaurantUncheckedCreateWithoutCookbooksInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => RestaurantCreateOrConnectWithoutCookbooksInputSchema).optional(),
  upsert: z$2.lazy(() => RestaurantUpsertWithoutCookbooksInputSchema).optional(),
  disconnect: z$2.union([z$2.boolean(), z$2.lazy(() => RestaurantWhereInputSchema)]).optional(),
  delete: z$2.union([z$2.boolean(), z$2.lazy(() => RestaurantWhereInputSchema)]).optional(),
  connect: z$2.lazy(() => RestaurantWhereUniqueInputSchema).optional(),
  update: z$2.union([z$2.lazy(() => RestaurantUpdateToOneWithWhereWithoutCookbooksInputSchema), z$2.lazy(() => RestaurantUpdateWithoutCookbooksInputSchema), z$2.lazy(() => RestaurantUncheckedUpdateWithoutCookbooksInputSchema)]).optional()
}).strict();
var RecipeUncheckedUpdateManyWithoutCookBookNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeCreateWithoutCookBookInputSchema), z$2.lazy(() => RecipeCreateWithoutCookBookInputSchema).array(), z$2.lazy(() => RecipeUncheckedCreateWithoutCookBookInputSchema), z$2.lazy(() => RecipeUncheckedCreateWithoutCookBookInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => RecipeCreateOrConnectWithoutCookBookInputSchema), z$2.lazy(() => RecipeCreateOrConnectWithoutCookBookInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => RecipeUpsertWithWhereUniqueWithoutCookBookInputSchema), z$2.lazy(() => RecipeUpsertWithWhereUniqueWithoutCookBookInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => RecipeCreateManyCookBookInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => RecipeWhereUniqueInputSchema), z$2.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => RecipeWhereUniqueInputSchema), z$2.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => RecipeWhereUniqueInputSchema), z$2.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => RecipeWhereUniqueInputSchema), z$2.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => RecipeUpdateWithWhereUniqueWithoutCookBookInputSchema), z$2.lazy(() => RecipeUpdateWithWhereUniqueWithoutCookBookInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => RecipeUpdateManyWithWhereWithoutCookBookInputSchema), z$2.lazy(() => RecipeUpdateManyWithWhereWithoutCookBookInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => RecipeScalarWhereInputSchema), z$2.lazy(() => RecipeScalarWhereInputSchema).array()]).optional()
}).strict();
var RecipeCreateimageUrlInputSchema = z$2.object({
  set: z$2.string().array()
}).strict();
var RestaurantCreateNestedOneWithoutRecipesInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RestaurantCreateWithoutRecipesInputSchema), z$2.lazy(() => RestaurantUncheckedCreateWithoutRecipesInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => RestaurantCreateOrConnectWithoutRecipesInputSchema).optional(),
  connect: z$2.lazy(() => RestaurantWhereUniqueInputSchema).optional()
}).strict();
var CookBookCreateNestedOneWithoutRecipesInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => CookBookCreateWithoutRecipesInputSchema), z$2.lazy(() => CookBookUncheckedCreateWithoutRecipesInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => CookBookCreateOrConnectWithoutRecipesInputSchema).optional(),
  connect: z$2.lazy(() => CookBookWhereUniqueInputSchema).optional()
}).strict();
var RecipeIngredientCreateNestedManyWithoutRecipeInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeIngredientCreateWithoutRecipeInputSchema), z$2.lazy(() => RecipeIngredientCreateWithoutRecipeInputSchema).array(), z$2.lazy(() => RecipeIngredientUncheckedCreateWithoutRecipeInputSchema), z$2.lazy(() => RecipeIngredientUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => RecipeIngredientCreateOrConnectWithoutRecipeInputSchema), z$2.lazy(() => RecipeIngredientCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => RecipeIngredientCreateManyRecipeInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => RecipeIngredientWhereUniqueInputSchema), z$2.lazy(() => RecipeIngredientWhereUniqueInputSchema).array()]).optional()
}).strict();
var RecipeInstructionCreateNestedManyWithoutRecipeInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeInstructionCreateWithoutRecipeInputSchema), z$2.lazy(() => RecipeInstructionCreateWithoutRecipeInputSchema).array(), z$2.lazy(() => RecipeInstructionUncheckedCreateWithoutRecipeInputSchema), z$2.lazy(() => RecipeInstructionUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => RecipeInstructionCreateOrConnectWithoutRecipeInputSchema), z$2.lazy(() => RecipeInstructionCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => RecipeInstructionCreateManyRecipeInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => RecipeInstructionWhereUniqueInputSchema), z$2.lazy(() => RecipeInstructionWhereUniqueInputSchema).array()]).optional()
}).strict();
var MenuItemCreateNestedManyWithoutRecipesInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => MenuItemCreateWithoutRecipesInputSchema), z$2.lazy(() => MenuItemCreateWithoutRecipesInputSchema).array(), z$2.lazy(() => MenuItemUncheckedCreateWithoutRecipesInputSchema), z$2.lazy(() => MenuItemUncheckedCreateWithoutRecipesInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => MenuItemCreateOrConnectWithoutRecipesInputSchema), z$2.lazy(() => MenuItemCreateOrConnectWithoutRecipesInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => MenuItemWhereUniqueInputSchema), z$2.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional()
}).strict();
var FoodCostHistoryCreateNestedManyWithoutRecipeInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => FoodCostHistoryCreateWithoutRecipeInputSchema), z$2.lazy(() => FoodCostHistoryCreateWithoutRecipeInputSchema).array(), z$2.lazy(() => FoodCostHistoryUncheckedCreateWithoutRecipeInputSchema), z$2.lazy(() => FoodCostHistoryUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => FoodCostHistoryCreateOrConnectWithoutRecipeInputSchema), z$2.lazy(() => FoodCostHistoryCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => FoodCostHistoryCreateManyRecipeInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => FoodCostHistoryWhereUniqueInputSchema), z$2.lazy(() => FoodCostHistoryWhereUniqueInputSchema).array()]).optional()
}).strict();
var PrepHistoryCreateNestedManyWithoutRecipeInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => PrepHistoryCreateWithoutRecipeInputSchema), z$2.lazy(() => PrepHistoryCreateWithoutRecipeInputSchema).array(), z$2.lazy(() => PrepHistoryUncheckedCreateWithoutRecipeInputSchema), z$2.lazy(() => PrepHistoryUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => PrepHistoryCreateOrConnectWithoutRecipeInputSchema), z$2.lazy(() => PrepHistoryCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => PrepHistoryCreateManyRecipeInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => PrepHistoryWhereUniqueInputSchema), z$2.lazy(() => PrepHistoryWhereUniqueInputSchema).array()]).optional()
}).strict();
var PrepBoardCreateNestedManyWithoutRecipesInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => PrepBoardCreateWithoutRecipesInputSchema), z$2.lazy(() => PrepBoardCreateWithoutRecipesInputSchema).array(), z$2.lazy(() => PrepBoardUncheckedCreateWithoutRecipesInputSchema), z$2.lazy(() => PrepBoardUncheckedCreateWithoutRecipesInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => PrepBoardCreateOrConnectWithoutRecipesInputSchema), z$2.lazy(() => PrepBoardCreateOrConnectWithoutRecipesInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => PrepBoardWhereUniqueInputSchema), z$2.lazy(() => PrepBoardWhereUniqueInputSchema).array()]).optional()
}).strict();
var PrepItemCreateNestedManyWithoutRecipeInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => PrepItemCreateWithoutRecipeInputSchema), z$2.lazy(() => PrepItemCreateWithoutRecipeInputSchema).array(), z$2.lazy(() => PrepItemUncheckedCreateWithoutRecipeInputSchema), z$2.lazy(() => PrepItemUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => PrepItemCreateOrConnectWithoutRecipeInputSchema), z$2.lazy(() => PrepItemCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => PrepItemCreateManyRecipeInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => PrepItemWhereUniqueInputSchema), z$2.lazy(() => PrepItemWhereUniqueInputSchema).array()]).optional()
}).strict();
var MenuItemRecipeCreateNestedManyWithoutRecipeInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => MenuItemRecipeCreateWithoutRecipeInputSchema), z$2.lazy(() => MenuItemRecipeCreateWithoutRecipeInputSchema).array(), z$2.lazy(() => MenuItemRecipeUncheckedCreateWithoutRecipeInputSchema), z$2.lazy(() => MenuItemRecipeUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => MenuItemRecipeCreateOrConnectWithoutRecipeInputSchema), z$2.lazy(() => MenuItemRecipeCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => MenuItemRecipeCreateManyRecipeInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => MenuItemRecipeWhereUniqueInputSchema), z$2.lazy(() => MenuItemRecipeWhereUniqueInputSchema).array()]).optional()
}).strict();
var ProductionPlanItemCreateNestedManyWithoutRecipeInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => ProductionPlanItemCreateWithoutRecipeInputSchema), z$2.lazy(() => ProductionPlanItemCreateWithoutRecipeInputSchema).array(), z$2.lazy(() => ProductionPlanItemUncheckedCreateWithoutRecipeInputSchema), z$2.lazy(() => ProductionPlanItemUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => ProductionPlanItemCreateOrConnectWithoutRecipeInputSchema), z$2.lazy(() => ProductionPlanItemCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => ProductionPlanItemCreateManyRecipeInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => ProductionPlanItemWhereUniqueInputSchema), z$2.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array()]).optional()
}).strict();
var InventoryWithdrawalCreateNestedManyWithoutRecipeInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => InventoryWithdrawalCreateWithoutRecipeInputSchema), z$2.lazy(() => InventoryWithdrawalCreateWithoutRecipeInputSchema).array(), z$2.lazy(() => InventoryWithdrawalUncheckedCreateWithoutRecipeInputSchema), z$2.lazy(() => InventoryWithdrawalUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => InventoryWithdrawalCreateOrConnectWithoutRecipeInputSchema), z$2.lazy(() => InventoryWithdrawalCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => InventoryWithdrawalCreateManyRecipeInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => InventoryWithdrawalWhereUniqueInputSchema), z$2.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array()]).optional()
}).strict();
var RecipeTagCreateNestedManyWithoutRecipesInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeTagCreateWithoutRecipesInputSchema), z$2.lazy(() => RecipeTagCreateWithoutRecipesInputSchema).array(), z$2.lazy(() => RecipeTagUncheckedCreateWithoutRecipesInputSchema), z$2.lazy(() => RecipeTagUncheckedCreateWithoutRecipesInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => RecipeTagCreateOrConnectWithoutRecipesInputSchema), z$2.lazy(() => RecipeTagCreateOrConnectWithoutRecipesInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => RecipeTagWhereUniqueInputSchema), z$2.lazy(() => RecipeTagWhereUniqueInputSchema).array()]).optional()
}).strict();
var RecipeVersionCreateNestedManyWithoutRecipeInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeVersionCreateWithoutRecipeInputSchema), z$2.lazy(() => RecipeVersionCreateWithoutRecipeInputSchema).array(), z$2.lazy(() => RecipeVersionUncheckedCreateWithoutRecipeInputSchema), z$2.lazy(() => RecipeVersionUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => RecipeVersionCreateOrConnectWithoutRecipeInputSchema), z$2.lazy(() => RecipeVersionCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => RecipeVersionCreateManyRecipeInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => RecipeVersionWhereUniqueInputSchema), z$2.lazy(() => RecipeVersionWhereUniqueInputSchema).array()]).optional()
}).strict();
var RecipeEquipmentCreateNestedManyWithoutRecipeInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeEquipmentCreateWithoutRecipeInputSchema), z$2.lazy(() => RecipeEquipmentCreateWithoutRecipeInputSchema).array(), z$2.lazy(() => RecipeEquipmentUncheckedCreateWithoutRecipeInputSchema), z$2.lazy(() => RecipeEquipmentUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => RecipeEquipmentCreateOrConnectWithoutRecipeInputSchema), z$2.lazy(() => RecipeEquipmentCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => RecipeEquipmentCreateManyRecipeInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => RecipeEquipmentWhereUniqueInputSchema), z$2.lazy(() => RecipeEquipmentWhereUniqueInputSchema).array()]).optional()
}).strict();
var DietaryRestrictionCreateNestedManyWithoutRecipesInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => DietaryRestrictionCreateWithoutRecipesInputSchema), z$2.lazy(() => DietaryRestrictionCreateWithoutRecipesInputSchema).array(), z$2.lazy(() => DietaryRestrictionUncheckedCreateWithoutRecipesInputSchema), z$2.lazy(() => DietaryRestrictionUncheckedCreateWithoutRecipesInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => DietaryRestrictionCreateOrConnectWithoutRecipesInputSchema), z$2.lazy(() => DietaryRestrictionCreateOrConnectWithoutRecipesInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => DietaryRestrictionWhereUniqueInputSchema), z$2.lazy(() => DietaryRestrictionWhereUniqueInputSchema).array()]).optional()
}).strict();
var RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeIngredientCreateWithoutRecipeInputSchema), z$2.lazy(() => RecipeIngredientCreateWithoutRecipeInputSchema).array(), z$2.lazy(() => RecipeIngredientUncheckedCreateWithoutRecipeInputSchema), z$2.lazy(() => RecipeIngredientUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => RecipeIngredientCreateOrConnectWithoutRecipeInputSchema), z$2.lazy(() => RecipeIngredientCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => RecipeIngredientCreateManyRecipeInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => RecipeIngredientWhereUniqueInputSchema), z$2.lazy(() => RecipeIngredientWhereUniqueInputSchema).array()]).optional()
}).strict();
var RecipeInstructionUncheckedCreateNestedManyWithoutRecipeInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeInstructionCreateWithoutRecipeInputSchema), z$2.lazy(() => RecipeInstructionCreateWithoutRecipeInputSchema).array(), z$2.lazy(() => RecipeInstructionUncheckedCreateWithoutRecipeInputSchema), z$2.lazy(() => RecipeInstructionUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => RecipeInstructionCreateOrConnectWithoutRecipeInputSchema), z$2.lazy(() => RecipeInstructionCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => RecipeInstructionCreateManyRecipeInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => RecipeInstructionWhereUniqueInputSchema), z$2.lazy(() => RecipeInstructionWhereUniqueInputSchema).array()]).optional()
}).strict();
var MenuItemUncheckedCreateNestedManyWithoutRecipesInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => MenuItemCreateWithoutRecipesInputSchema), z$2.lazy(() => MenuItemCreateWithoutRecipesInputSchema).array(), z$2.lazy(() => MenuItemUncheckedCreateWithoutRecipesInputSchema), z$2.lazy(() => MenuItemUncheckedCreateWithoutRecipesInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => MenuItemCreateOrConnectWithoutRecipesInputSchema), z$2.lazy(() => MenuItemCreateOrConnectWithoutRecipesInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => MenuItemWhereUniqueInputSchema), z$2.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional()
}).strict();
var FoodCostHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => FoodCostHistoryCreateWithoutRecipeInputSchema), z$2.lazy(() => FoodCostHistoryCreateWithoutRecipeInputSchema).array(), z$2.lazy(() => FoodCostHistoryUncheckedCreateWithoutRecipeInputSchema), z$2.lazy(() => FoodCostHistoryUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => FoodCostHistoryCreateOrConnectWithoutRecipeInputSchema), z$2.lazy(() => FoodCostHistoryCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => FoodCostHistoryCreateManyRecipeInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => FoodCostHistoryWhereUniqueInputSchema), z$2.lazy(() => FoodCostHistoryWhereUniqueInputSchema).array()]).optional()
}).strict();
var PrepHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => PrepHistoryCreateWithoutRecipeInputSchema), z$2.lazy(() => PrepHistoryCreateWithoutRecipeInputSchema).array(), z$2.lazy(() => PrepHistoryUncheckedCreateWithoutRecipeInputSchema), z$2.lazy(() => PrepHistoryUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => PrepHistoryCreateOrConnectWithoutRecipeInputSchema), z$2.lazy(() => PrepHistoryCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => PrepHistoryCreateManyRecipeInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => PrepHistoryWhereUniqueInputSchema), z$2.lazy(() => PrepHistoryWhereUniqueInputSchema).array()]).optional()
}).strict();
var PrepBoardUncheckedCreateNestedManyWithoutRecipesInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => PrepBoardCreateWithoutRecipesInputSchema), z$2.lazy(() => PrepBoardCreateWithoutRecipesInputSchema).array(), z$2.lazy(() => PrepBoardUncheckedCreateWithoutRecipesInputSchema), z$2.lazy(() => PrepBoardUncheckedCreateWithoutRecipesInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => PrepBoardCreateOrConnectWithoutRecipesInputSchema), z$2.lazy(() => PrepBoardCreateOrConnectWithoutRecipesInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => PrepBoardWhereUniqueInputSchema), z$2.lazy(() => PrepBoardWhereUniqueInputSchema).array()]).optional()
}).strict();
var PrepItemUncheckedCreateNestedManyWithoutRecipeInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => PrepItemCreateWithoutRecipeInputSchema), z$2.lazy(() => PrepItemCreateWithoutRecipeInputSchema).array(), z$2.lazy(() => PrepItemUncheckedCreateWithoutRecipeInputSchema), z$2.lazy(() => PrepItemUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => PrepItemCreateOrConnectWithoutRecipeInputSchema), z$2.lazy(() => PrepItemCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => PrepItemCreateManyRecipeInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => PrepItemWhereUniqueInputSchema), z$2.lazy(() => PrepItemWhereUniqueInputSchema).array()]).optional()
}).strict();
var MenuItemRecipeUncheckedCreateNestedManyWithoutRecipeInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => MenuItemRecipeCreateWithoutRecipeInputSchema), z$2.lazy(() => MenuItemRecipeCreateWithoutRecipeInputSchema).array(), z$2.lazy(() => MenuItemRecipeUncheckedCreateWithoutRecipeInputSchema), z$2.lazy(() => MenuItemRecipeUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => MenuItemRecipeCreateOrConnectWithoutRecipeInputSchema), z$2.lazy(() => MenuItemRecipeCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => MenuItemRecipeCreateManyRecipeInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => MenuItemRecipeWhereUniqueInputSchema), z$2.lazy(() => MenuItemRecipeWhereUniqueInputSchema).array()]).optional()
}).strict();
var ProductionPlanItemUncheckedCreateNestedManyWithoutRecipeInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => ProductionPlanItemCreateWithoutRecipeInputSchema), z$2.lazy(() => ProductionPlanItemCreateWithoutRecipeInputSchema).array(), z$2.lazy(() => ProductionPlanItemUncheckedCreateWithoutRecipeInputSchema), z$2.lazy(() => ProductionPlanItemUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => ProductionPlanItemCreateOrConnectWithoutRecipeInputSchema), z$2.lazy(() => ProductionPlanItemCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => ProductionPlanItemCreateManyRecipeInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => ProductionPlanItemWhereUniqueInputSchema), z$2.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array()]).optional()
}).strict();
var InventoryWithdrawalUncheckedCreateNestedManyWithoutRecipeInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => InventoryWithdrawalCreateWithoutRecipeInputSchema), z$2.lazy(() => InventoryWithdrawalCreateWithoutRecipeInputSchema).array(), z$2.lazy(() => InventoryWithdrawalUncheckedCreateWithoutRecipeInputSchema), z$2.lazy(() => InventoryWithdrawalUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => InventoryWithdrawalCreateOrConnectWithoutRecipeInputSchema), z$2.lazy(() => InventoryWithdrawalCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => InventoryWithdrawalCreateManyRecipeInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => InventoryWithdrawalWhereUniqueInputSchema), z$2.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array()]).optional()
}).strict();
var RecipeTagUncheckedCreateNestedManyWithoutRecipesInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeTagCreateWithoutRecipesInputSchema), z$2.lazy(() => RecipeTagCreateWithoutRecipesInputSchema).array(), z$2.lazy(() => RecipeTagUncheckedCreateWithoutRecipesInputSchema), z$2.lazy(() => RecipeTagUncheckedCreateWithoutRecipesInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => RecipeTagCreateOrConnectWithoutRecipesInputSchema), z$2.lazy(() => RecipeTagCreateOrConnectWithoutRecipesInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => RecipeTagWhereUniqueInputSchema), z$2.lazy(() => RecipeTagWhereUniqueInputSchema).array()]).optional()
}).strict();
var RecipeVersionUncheckedCreateNestedManyWithoutRecipeInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeVersionCreateWithoutRecipeInputSchema), z$2.lazy(() => RecipeVersionCreateWithoutRecipeInputSchema).array(), z$2.lazy(() => RecipeVersionUncheckedCreateWithoutRecipeInputSchema), z$2.lazy(() => RecipeVersionUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => RecipeVersionCreateOrConnectWithoutRecipeInputSchema), z$2.lazy(() => RecipeVersionCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => RecipeVersionCreateManyRecipeInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => RecipeVersionWhereUniqueInputSchema), z$2.lazy(() => RecipeVersionWhereUniqueInputSchema).array()]).optional()
}).strict();
var RecipeEquipmentUncheckedCreateNestedManyWithoutRecipeInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeEquipmentCreateWithoutRecipeInputSchema), z$2.lazy(() => RecipeEquipmentCreateWithoutRecipeInputSchema).array(), z$2.lazy(() => RecipeEquipmentUncheckedCreateWithoutRecipeInputSchema), z$2.lazy(() => RecipeEquipmentUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => RecipeEquipmentCreateOrConnectWithoutRecipeInputSchema), z$2.lazy(() => RecipeEquipmentCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => RecipeEquipmentCreateManyRecipeInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => RecipeEquipmentWhereUniqueInputSchema), z$2.lazy(() => RecipeEquipmentWhereUniqueInputSchema).array()]).optional()
}).strict();
var DietaryRestrictionUncheckedCreateNestedManyWithoutRecipesInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => DietaryRestrictionCreateWithoutRecipesInputSchema), z$2.lazy(() => DietaryRestrictionCreateWithoutRecipesInputSchema).array(), z$2.lazy(() => DietaryRestrictionUncheckedCreateWithoutRecipesInputSchema), z$2.lazy(() => DietaryRestrictionUncheckedCreateWithoutRecipesInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => DietaryRestrictionCreateOrConnectWithoutRecipesInputSchema), z$2.lazy(() => DietaryRestrictionCreateOrConnectWithoutRecipesInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => DietaryRestrictionWhereUniqueInputSchema), z$2.lazy(() => DietaryRestrictionWhereUniqueInputSchema).array()]).optional()
}).strict();
var RecipeUpdateimageUrlInputSchema = z$2.object({
  set: z$2.string().array().optional(),
  push: z$2.union([z$2.string(), z$2.string().array()]).optional()
}).strict();
var RestaurantUpdateOneRequiredWithoutRecipesNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RestaurantCreateWithoutRecipesInputSchema), z$2.lazy(() => RestaurantUncheckedCreateWithoutRecipesInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => RestaurantCreateOrConnectWithoutRecipesInputSchema).optional(),
  upsert: z$2.lazy(() => RestaurantUpsertWithoutRecipesInputSchema).optional(),
  connect: z$2.lazy(() => RestaurantWhereUniqueInputSchema).optional(),
  update: z$2.union([z$2.lazy(() => RestaurantUpdateToOneWithWhereWithoutRecipesInputSchema), z$2.lazy(() => RestaurantUpdateWithoutRecipesInputSchema), z$2.lazy(() => RestaurantUncheckedUpdateWithoutRecipesInputSchema)]).optional()
}).strict();
var CookBookUpdateOneRequiredWithoutRecipesNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => CookBookCreateWithoutRecipesInputSchema), z$2.lazy(() => CookBookUncheckedCreateWithoutRecipesInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => CookBookCreateOrConnectWithoutRecipesInputSchema).optional(),
  upsert: z$2.lazy(() => CookBookUpsertWithoutRecipesInputSchema).optional(),
  connect: z$2.lazy(() => CookBookWhereUniqueInputSchema).optional(),
  update: z$2.union([z$2.lazy(() => CookBookUpdateToOneWithWhereWithoutRecipesInputSchema), z$2.lazy(() => CookBookUpdateWithoutRecipesInputSchema), z$2.lazy(() => CookBookUncheckedUpdateWithoutRecipesInputSchema)]).optional()
}).strict();
var RecipeIngredientUpdateManyWithoutRecipeNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeIngredientCreateWithoutRecipeInputSchema), z$2.lazy(() => RecipeIngredientCreateWithoutRecipeInputSchema).array(), z$2.lazy(() => RecipeIngredientUncheckedCreateWithoutRecipeInputSchema), z$2.lazy(() => RecipeIngredientUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => RecipeIngredientCreateOrConnectWithoutRecipeInputSchema), z$2.lazy(() => RecipeIngredientCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => RecipeIngredientUpsertWithWhereUniqueWithoutRecipeInputSchema), z$2.lazy(() => RecipeIngredientUpsertWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => RecipeIngredientCreateManyRecipeInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => RecipeIngredientWhereUniqueInputSchema), z$2.lazy(() => RecipeIngredientWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => RecipeIngredientWhereUniqueInputSchema), z$2.lazy(() => RecipeIngredientWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => RecipeIngredientWhereUniqueInputSchema), z$2.lazy(() => RecipeIngredientWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => RecipeIngredientWhereUniqueInputSchema), z$2.lazy(() => RecipeIngredientWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => RecipeIngredientUpdateWithWhereUniqueWithoutRecipeInputSchema), z$2.lazy(() => RecipeIngredientUpdateWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => RecipeIngredientUpdateManyWithWhereWithoutRecipeInputSchema), z$2.lazy(() => RecipeIngredientUpdateManyWithWhereWithoutRecipeInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => RecipeIngredientScalarWhereInputSchema), z$2.lazy(() => RecipeIngredientScalarWhereInputSchema).array()]).optional()
}).strict();
var RecipeInstructionUpdateManyWithoutRecipeNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeInstructionCreateWithoutRecipeInputSchema), z$2.lazy(() => RecipeInstructionCreateWithoutRecipeInputSchema).array(), z$2.lazy(() => RecipeInstructionUncheckedCreateWithoutRecipeInputSchema), z$2.lazy(() => RecipeInstructionUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => RecipeInstructionCreateOrConnectWithoutRecipeInputSchema), z$2.lazy(() => RecipeInstructionCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => RecipeInstructionUpsertWithWhereUniqueWithoutRecipeInputSchema), z$2.lazy(() => RecipeInstructionUpsertWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => RecipeInstructionCreateManyRecipeInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => RecipeInstructionWhereUniqueInputSchema), z$2.lazy(() => RecipeInstructionWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => RecipeInstructionWhereUniqueInputSchema), z$2.lazy(() => RecipeInstructionWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => RecipeInstructionWhereUniqueInputSchema), z$2.lazy(() => RecipeInstructionWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => RecipeInstructionWhereUniqueInputSchema), z$2.lazy(() => RecipeInstructionWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => RecipeInstructionUpdateWithWhereUniqueWithoutRecipeInputSchema), z$2.lazy(() => RecipeInstructionUpdateWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => RecipeInstructionUpdateManyWithWhereWithoutRecipeInputSchema), z$2.lazy(() => RecipeInstructionUpdateManyWithWhereWithoutRecipeInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => RecipeInstructionScalarWhereInputSchema), z$2.lazy(() => RecipeInstructionScalarWhereInputSchema).array()]).optional()
}).strict();
var MenuItemUpdateManyWithoutRecipesNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => MenuItemCreateWithoutRecipesInputSchema), z$2.lazy(() => MenuItemCreateWithoutRecipesInputSchema).array(), z$2.lazy(() => MenuItemUncheckedCreateWithoutRecipesInputSchema), z$2.lazy(() => MenuItemUncheckedCreateWithoutRecipesInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => MenuItemCreateOrConnectWithoutRecipesInputSchema), z$2.lazy(() => MenuItemCreateOrConnectWithoutRecipesInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => MenuItemUpsertWithWhereUniqueWithoutRecipesInputSchema), z$2.lazy(() => MenuItemUpsertWithWhereUniqueWithoutRecipesInputSchema).array()]).optional(),
  set: z$2.union([z$2.lazy(() => MenuItemWhereUniqueInputSchema), z$2.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => MenuItemWhereUniqueInputSchema), z$2.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => MenuItemWhereUniqueInputSchema), z$2.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => MenuItemWhereUniqueInputSchema), z$2.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => MenuItemUpdateWithWhereUniqueWithoutRecipesInputSchema), z$2.lazy(() => MenuItemUpdateWithWhereUniqueWithoutRecipesInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => MenuItemUpdateManyWithWhereWithoutRecipesInputSchema), z$2.lazy(() => MenuItemUpdateManyWithWhereWithoutRecipesInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => MenuItemScalarWhereInputSchema), z$2.lazy(() => MenuItemScalarWhereInputSchema).array()]).optional()
}).strict();
var FoodCostHistoryUpdateManyWithoutRecipeNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => FoodCostHistoryCreateWithoutRecipeInputSchema), z$2.lazy(() => FoodCostHistoryCreateWithoutRecipeInputSchema).array(), z$2.lazy(() => FoodCostHistoryUncheckedCreateWithoutRecipeInputSchema), z$2.lazy(() => FoodCostHistoryUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => FoodCostHistoryCreateOrConnectWithoutRecipeInputSchema), z$2.lazy(() => FoodCostHistoryCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => FoodCostHistoryUpsertWithWhereUniqueWithoutRecipeInputSchema), z$2.lazy(() => FoodCostHistoryUpsertWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => FoodCostHistoryCreateManyRecipeInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => FoodCostHistoryWhereUniqueInputSchema), z$2.lazy(() => FoodCostHistoryWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => FoodCostHistoryWhereUniqueInputSchema), z$2.lazy(() => FoodCostHistoryWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => FoodCostHistoryWhereUniqueInputSchema), z$2.lazy(() => FoodCostHistoryWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => FoodCostHistoryWhereUniqueInputSchema), z$2.lazy(() => FoodCostHistoryWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => FoodCostHistoryUpdateWithWhereUniqueWithoutRecipeInputSchema), z$2.lazy(() => FoodCostHistoryUpdateWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => FoodCostHistoryUpdateManyWithWhereWithoutRecipeInputSchema), z$2.lazy(() => FoodCostHistoryUpdateManyWithWhereWithoutRecipeInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => FoodCostHistoryScalarWhereInputSchema), z$2.lazy(() => FoodCostHistoryScalarWhereInputSchema).array()]).optional()
}).strict();
var PrepHistoryUpdateManyWithoutRecipeNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => PrepHistoryCreateWithoutRecipeInputSchema), z$2.lazy(() => PrepHistoryCreateWithoutRecipeInputSchema).array(), z$2.lazy(() => PrepHistoryUncheckedCreateWithoutRecipeInputSchema), z$2.lazy(() => PrepHistoryUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => PrepHistoryCreateOrConnectWithoutRecipeInputSchema), z$2.lazy(() => PrepHistoryCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => PrepHistoryUpsertWithWhereUniqueWithoutRecipeInputSchema), z$2.lazy(() => PrepHistoryUpsertWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => PrepHistoryCreateManyRecipeInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => PrepHistoryWhereUniqueInputSchema), z$2.lazy(() => PrepHistoryWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => PrepHistoryWhereUniqueInputSchema), z$2.lazy(() => PrepHistoryWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => PrepHistoryWhereUniqueInputSchema), z$2.lazy(() => PrepHistoryWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => PrepHistoryWhereUniqueInputSchema), z$2.lazy(() => PrepHistoryWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => PrepHistoryUpdateWithWhereUniqueWithoutRecipeInputSchema), z$2.lazy(() => PrepHistoryUpdateWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => PrepHistoryUpdateManyWithWhereWithoutRecipeInputSchema), z$2.lazy(() => PrepHistoryUpdateManyWithWhereWithoutRecipeInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => PrepHistoryScalarWhereInputSchema), z$2.lazy(() => PrepHistoryScalarWhereInputSchema).array()]).optional()
}).strict();
var PrepBoardUpdateManyWithoutRecipesNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => PrepBoardCreateWithoutRecipesInputSchema), z$2.lazy(() => PrepBoardCreateWithoutRecipesInputSchema).array(), z$2.lazy(() => PrepBoardUncheckedCreateWithoutRecipesInputSchema), z$2.lazy(() => PrepBoardUncheckedCreateWithoutRecipesInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => PrepBoardCreateOrConnectWithoutRecipesInputSchema), z$2.lazy(() => PrepBoardCreateOrConnectWithoutRecipesInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => PrepBoardUpsertWithWhereUniqueWithoutRecipesInputSchema), z$2.lazy(() => PrepBoardUpsertWithWhereUniqueWithoutRecipesInputSchema).array()]).optional(),
  set: z$2.union([z$2.lazy(() => PrepBoardWhereUniqueInputSchema), z$2.lazy(() => PrepBoardWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => PrepBoardWhereUniqueInputSchema), z$2.lazy(() => PrepBoardWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => PrepBoardWhereUniqueInputSchema), z$2.lazy(() => PrepBoardWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => PrepBoardWhereUniqueInputSchema), z$2.lazy(() => PrepBoardWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => PrepBoardUpdateWithWhereUniqueWithoutRecipesInputSchema), z$2.lazy(() => PrepBoardUpdateWithWhereUniqueWithoutRecipesInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => PrepBoardUpdateManyWithWhereWithoutRecipesInputSchema), z$2.lazy(() => PrepBoardUpdateManyWithWhereWithoutRecipesInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => PrepBoardScalarWhereInputSchema), z$2.lazy(() => PrepBoardScalarWhereInputSchema).array()]).optional()
}).strict();
var PrepItemUpdateManyWithoutRecipeNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => PrepItemCreateWithoutRecipeInputSchema), z$2.lazy(() => PrepItemCreateWithoutRecipeInputSchema).array(), z$2.lazy(() => PrepItemUncheckedCreateWithoutRecipeInputSchema), z$2.lazy(() => PrepItemUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => PrepItemCreateOrConnectWithoutRecipeInputSchema), z$2.lazy(() => PrepItemCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => PrepItemUpsertWithWhereUniqueWithoutRecipeInputSchema), z$2.lazy(() => PrepItemUpsertWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => PrepItemCreateManyRecipeInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => PrepItemWhereUniqueInputSchema), z$2.lazy(() => PrepItemWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => PrepItemWhereUniqueInputSchema), z$2.lazy(() => PrepItemWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => PrepItemWhereUniqueInputSchema), z$2.lazy(() => PrepItemWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => PrepItemWhereUniqueInputSchema), z$2.lazy(() => PrepItemWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => PrepItemUpdateWithWhereUniqueWithoutRecipeInputSchema), z$2.lazy(() => PrepItemUpdateWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => PrepItemUpdateManyWithWhereWithoutRecipeInputSchema), z$2.lazy(() => PrepItemUpdateManyWithWhereWithoutRecipeInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => PrepItemScalarWhereInputSchema), z$2.lazy(() => PrepItemScalarWhereInputSchema).array()]).optional()
}).strict();
var MenuItemRecipeUpdateManyWithoutRecipeNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => MenuItemRecipeCreateWithoutRecipeInputSchema), z$2.lazy(() => MenuItemRecipeCreateWithoutRecipeInputSchema).array(), z$2.lazy(() => MenuItemRecipeUncheckedCreateWithoutRecipeInputSchema), z$2.lazy(() => MenuItemRecipeUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => MenuItemRecipeCreateOrConnectWithoutRecipeInputSchema), z$2.lazy(() => MenuItemRecipeCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => MenuItemRecipeUpsertWithWhereUniqueWithoutRecipeInputSchema), z$2.lazy(() => MenuItemRecipeUpsertWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => MenuItemRecipeCreateManyRecipeInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => MenuItemRecipeWhereUniqueInputSchema), z$2.lazy(() => MenuItemRecipeWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => MenuItemRecipeWhereUniqueInputSchema), z$2.lazy(() => MenuItemRecipeWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => MenuItemRecipeWhereUniqueInputSchema), z$2.lazy(() => MenuItemRecipeWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => MenuItemRecipeWhereUniqueInputSchema), z$2.lazy(() => MenuItemRecipeWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => MenuItemRecipeUpdateWithWhereUniqueWithoutRecipeInputSchema), z$2.lazy(() => MenuItemRecipeUpdateWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => MenuItemRecipeUpdateManyWithWhereWithoutRecipeInputSchema), z$2.lazy(() => MenuItemRecipeUpdateManyWithWhereWithoutRecipeInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => MenuItemRecipeScalarWhereInputSchema), z$2.lazy(() => MenuItemRecipeScalarWhereInputSchema).array()]).optional()
}).strict();
var ProductionPlanItemUpdateManyWithoutRecipeNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => ProductionPlanItemCreateWithoutRecipeInputSchema), z$2.lazy(() => ProductionPlanItemCreateWithoutRecipeInputSchema).array(), z$2.lazy(() => ProductionPlanItemUncheckedCreateWithoutRecipeInputSchema), z$2.lazy(() => ProductionPlanItemUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => ProductionPlanItemCreateOrConnectWithoutRecipeInputSchema), z$2.lazy(() => ProductionPlanItemCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => ProductionPlanItemUpsertWithWhereUniqueWithoutRecipeInputSchema), z$2.lazy(() => ProductionPlanItemUpsertWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => ProductionPlanItemCreateManyRecipeInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => ProductionPlanItemWhereUniqueInputSchema), z$2.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => ProductionPlanItemWhereUniqueInputSchema), z$2.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => ProductionPlanItemWhereUniqueInputSchema), z$2.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => ProductionPlanItemWhereUniqueInputSchema), z$2.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => ProductionPlanItemUpdateWithWhereUniqueWithoutRecipeInputSchema), z$2.lazy(() => ProductionPlanItemUpdateWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => ProductionPlanItemUpdateManyWithWhereWithoutRecipeInputSchema), z$2.lazy(() => ProductionPlanItemUpdateManyWithWhereWithoutRecipeInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => ProductionPlanItemScalarWhereInputSchema), z$2.lazy(() => ProductionPlanItemScalarWhereInputSchema).array()]).optional()
}).strict();
var InventoryWithdrawalUpdateManyWithoutRecipeNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => InventoryWithdrawalCreateWithoutRecipeInputSchema), z$2.lazy(() => InventoryWithdrawalCreateWithoutRecipeInputSchema).array(), z$2.lazy(() => InventoryWithdrawalUncheckedCreateWithoutRecipeInputSchema), z$2.lazy(() => InventoryWithdrawalUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => InventoryWithdrawalCreateOrConnectWithoutRecipeInputSchema), z$2.lazy(() => InventoryWithdrawalCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => InventoryWithdrawalUpsertWithWhereUniqueWithoutRecipeInputSchema), z$2.lazy(() => InventoryWithdrawalUpsertWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => InventoryWithdrawalCreateManyRecipeInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => InventoryWithdrawalWhereUniqueInputSchema), z$2.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => InventoryWithdrawalWhereUniqueInputSchema), z$2.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => InventoryWithdrawalWhereUniqueInputSchema), z$2.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => InventoryWithdrawalWhereUniqueInputSchema), z$2.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => InventoryWithdrawalUpdateWithWhereUniqueWithoutRecipeInputSchema), z$2.lazy(() => InventoryWithdrawalUpdateWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => InventoryWithdrawalUpdateManyWithWhereWithoutRecipeInputSchema), z$2.lazy(() => InventoryWithdrawalUpdateManyWithWhereWithoutRecipeInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => InventoryWithdrawalScalarWhereInputSchema), z$2.lazy(() => InventoryWithdrawalScalarWhereInputSchema).array()]).optional()
}).strict();
var RecipeTagUpdateManyWithoutRecipesNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeTagCreateWithoutRecipesInputSchema), z$2.lazy(() => RecipeTagCreateWithoutRecipesInputSchema).array(), z$2.lazy(() => RecipeTagUncheckedCreateWithoutRecipesInputSchema), z$2.lazy(() => RecipeTagUncheckedCreateWithoutRecipesInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => RecipeTagCreateOrConnectWithoutRecipesInputSchema), z$2.lazy(() => RecipeTagCreateOrConnectWithoutRecipesInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => RecipeTagUpsertWithWhereUniqueWithoutRecipesInputSchema), z$2.lazy(() => RecipeTagUpsertWithWhereUniqueWithoutRecipesInputSchema).array()]).optional(),
  set: z$2.union([z$2.lazy(() => RecipeTagWhereUniqueInputSchema), z$2.lazy(() => RecipeTagWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => RecipeTagWhereUniqueInputSchema), z$2.lazy(() => RecipeTagWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => RecipeTagWhereUniqueInputSchema), z$2.lazy(() => RecipeTagWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => RecipeTagWhereUniqueInputSchema), z$2.lazy(() => RecipeTagWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => RecipeTagUpdateWithWhereUniqueWithoutRecipesInputSchema), z$2.lazy(() => RecipeTagUpdateWithWhereUniqueWithoutRecipesInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => RecipeTagUpdateManyWithWhereWithoutRecipesInputSchema), z$2.lazy(() => RecipeTagUpdateManyWithWhereWithoutRecipesInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => RecipeTagScalarWhereInputSchema), z$2.lazy(() => RecipeTagScalarWhereInputSchema).array()]).optional()
}).strict();
var RecipeVersionUpdateManyWithoutRecipeNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeVersionCreateWithoutRecipeInputSchema), z$2.lazy(() => RecipeVersionCreateWithoutRecipeInputSchema).array(), z$2.lazy(() => RecipeVersionUncheckedCreateWithoutRecipeInputSchema), z$2.lazy(() => RecipeVersionUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => RecipeVersionCreateOrConnectWithoutRecipeInputSchema), z$2.lazy(() => RecipeVersionCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => RecipeVersionUpsertWithWhereUniqueWithoutRecipeInputSchema), z$2.lazy(() => RecipeVersionUpsertWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => RecipeVersionCreateManyRecipeInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => RecipeVersionWhereUniqueInputSchema), z$2.lazy(() => RecipeVersionWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => RecipeVersionWhereUniqueInputSchema), z$2.lazy(() => RecipeVersionWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => RecipeVersionWhereUniqueInputSchema), z$2.lazy(() => RecipeVersionWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => RecipeVersionWhereUniqueInputSchema), z$2.lazy(() => RecipeVersionWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => RecipeVersionUpdateWithWhereUniqueWithoutRecipeInputSchema), z$2.lazy(() => RecipeVersionUpdateWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => RecipeVersionUpdateManyWithWhereWithoutRecipeInputSchema), z$2.lazy(() => RecipeVersionUpdateManyWithWhereWithoutRecipeInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => RecipeVersionScalarWhereInputSchema), z$2.lazy(() => RecipeVersionScalarWhereInputSchema).array()]).optional()
}).strict();
var RecipeEquipmentUpdateManyWithoutRecipeNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeEquipmentCreateWithoutRecipeInputSchema), z$2.lazy(() => RecipeEquipmentCreateWithoutRecipeInputSchema).array(), z$2.lazy(() => RecipeEquipmentUncheckedCreateWithoutRecipeInputSchema), z$2.lazy(() => RecipeEquipmentUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => RecipeEquipmentCreateOrConnectWithoutRecipeInputSchema), z$2.lazy(() => RecipeEquipmentCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => RecipeEquipmentUpsertWithWhereUniqueWithoutRecipeInputSchema), z$2.lazy(() => RecipeEquipmentUpsertWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => RecipeEquipmentCreateManyRecipeInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => RecipeEquipmentWhereUniqueInputSchema), z$2.lazy(() => RecipeEquipmentWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => RecipeEquipmentWhereUniqueInputSchema), z$2.lazy(() => RecipeEquipmentWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => RecipeEquipmentWhereUniqueInputSchema), z$2.lazy(() => RecipeEquipmentWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => RecipeEquipmentWhereUniqueInputSchema), z$2.lazy(() => RecipeEquipmentWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => RecipeEquipmentUpdateWithWhereUniqueWithoutRecipeInputSchema), z$2.lazy(() => RecipeEquipmentUpdateWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => RecipeEquipmentUpdateManyWithWhereWithoutRecipeInputSchema), z$2.lazy(() => RecipeEquipmentUpdateManyWithWhereWithoutRecipeInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => RecipeEquipmentScalarWhereInputSchema), z$2.lazy(() => RecipeEquipmentScalarWhereInputSchema).array()]).optional()
}).strict();
var DietaryRestrictionUpdateManyWithoutRecipesNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => DietaryRestrictionCreateWithoutRecipesInputSchema), z$2.lazy(() => DietaryRestrictionCreateWithoutRecipesInputSchema).array(), z$2.lazy(() => DietaryRestrictionUncheckedCreateWithoutRecipesInputSchema), z$2.lazy(() => DietaryRestrictionUncheckedCreateWithoutRecipesInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => DietaryRestrictionCreateOrConnectWithoutRecipesInputSchema), z$2.lazy(() => DietaryRestrictionCreateOrConnectWithoutRecipesInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => DietaryRestrictionUpsertWithWhereUniqueWithoutRecipesInputSchema), z$2.lazy(() => DietaryRestrictionUpsertWithWhereUniqueWithoutRecipesInputSchema).array()]).optional(),
  set: z$2.union([z$2.lazy(() => DietaryRestrictionWhereUniqueInputSchema), z$2.lazy(() => DietaryRestrictionWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => DietaryRestrictionWhereUniqueInputSchema), z$2.lazy(() => DietaryRestrictionWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => DietaryRestrictionWhereUniqueInputSchema), z$2.lazy(() => DietaryRestrictionWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => DietaryRestrictionWhereUniqueInputSchema), z$2.lazy(() => DietaryRestrictionWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => DietaryRestrictionUpdateWithWhereUniqueWithoutRecipesInputSchema), z$2.lazy(() => DietaryRestrictionUpdateWithWhereUniqueWithoutRecipesInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => DietaryRestrictionUpdateManyWithWhereWithoutRecipesInputSchema), z$2.lazy(() => DietaryRestrictionUpdateManyWithWhereWithoutRecipesInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => DietaryRestrictionScalarWhereInputSchema), z$2.lazy(() => DietaryRestrictionScalarWhereInputSchema).array()]).optional()
}).strict();
var RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeIngredientCreateWithoutRecipeInputSchema), z$2.lazy(() => RecipeIngredientCreateWithoutRecipeInputSchema).array(), z$2.lazy(() => RecipeIngredientUncheckedCreateWithoutRecipeInputSchema), z$2.lazy(() => RecipeIngredientUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => RecipeIngredientCreateOrConnectWithoutRecipeInputSchema), z$2.lazy(() => RecipeIngredientCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => RecipeIngredientUpsertWithWhereUniqueWithoutRecipeInputSchema), z$2.lazy(() => RecipeIngredientUpsertWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => RecipeIngredientCreateManyRecipeInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => RecipeIngredientWhereUniqueInputSchema), z$2.lazy(() => RecipeIngredientWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => RecipeIngredientWhereUniqueInputSchema), z$2.lazy(() => RecipeIngredientWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => RecipeIngredientWhereUniqueInputSchema), z$2.lazy(() => RecipeIngredientWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => RecipeIngredientWhereUniqueInputSchema), z$2.lazy(() => RecipeIngredientWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => RecipeIngredientUpdateWithWhereUniqueWithoutRecipeInputSchema), z$2.lazy(() => RecipeIngredientUpdateWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => RecipeIngredientUpdateManyWithWhereWithoutRecipeInputSchema), z$2.lazy(() => RecipeIngredientUpdateManyWithWhereWithoutRecipeInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => RecipeIngredientScalarWhereInputSchema), z$2.lazy(() => RecipeIngredientScalarWhereInputSchema).array()]).optional()
}).strict();
var RecipeInstructionUncheckedUpdateManyWithoutRecipeNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeInstructionCreateWithoutRecipeInputSchema), z$2.lazy(() => RecipeInstructionCreateWithoutRecipeInputSchema).array(), z$2.lazy(() => RecipeInstructionUncheckedCreateWithoutRecipeInputSchema), z$2.lazy(() => RecipeInstructionUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => RecipeInstructionCreateOrConnectWithoutRecipeInputSchema), z$2.lazy(() => RecipeInstructionCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => RecipeInstructionUpsertWithWhereUniqueWithoutRecipeInputSchema), z$2.lazy(() => RecipeInstructionUpsertWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => RecipeInstructionCreateManyRecipeInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => RecipeInstructionWhereUniqueInputSchema), z$2.lazy(() => RecipeInstructionWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => RecipeInstructionWhereUniqueInputSchema), z$2.lazy(() => RecipeInstructionWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => RecipeInstructionWhereUniqueInputSchema), z$2.lazy(() => RecipeInstructionWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => RecipeInstructionWhereUniqueInputSchema), z$2.lazy(() => RecipeInstructionWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => RecipeInstructionUpdateWithWhereUniqueWithoutRecipeInputSchema), z$2.lazy(() => RecipeInstructionUpdateWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => RecipeInstructionUpdateManyWithWhereWithoutRecipeInputSchema), z$2.lazy(() => RecipeInstructionUpdateManyWithWhereWithoutRecipeInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => RecipeInstructionScalarWhereInputSchema), z$2.lazy(() => RecipeInstructionScalarWhereInputSchema).array()]).optional()
}).strict();
var MenuItemUncheckedUpdateManyWithoutRecipesNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => MenuItemCreateWithoutRecipesInputSchema), z$2.lazy(() => MenuItemCreateWithoutRecipesInputSchema).array(), z$2.lazy(() => MenuItemUncheckedCreateWithoutRecipesInputSchema), z$2.lazy(() => MenuItemUncheckedCreateWithoutRecipesInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => MenuItemCreateOrConnectWithoutRecipesInputSchema), z$2.lazy(() => MenuItemCreateOrConnectWithoutRecipesInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => MenuItemUpsertWithWhereUniqueWithoutRecipesInputSchema), z$2.lazy(() => MenuItemUpsertWithWhereUniqueWithoutRecipesInputSchema).array()]).optional(),
  set: z$2.union([z$2.lazy(() => MenuItemWhereUniqueInputSchema), z$2.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => MenuItemWhereUniqueInputSchema), z$2.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => MenuItemWhereUniqueInputSchema), z$2.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => MenuItemWhereUniqueInputSchema), z$2.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => MenuItemUpdateWithWhereUniqueWithoutRecipesInputSchema), z$2.lazy(() => MenuItemUpdateWithWhereUniqueWithoutRecipesInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => MenuItemUpdateManyWithWhereWithoutRecipesInputSchema), z$2.lazy(() => MenuItemUpdateManyWithWhereWithoutRecipesInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => MenuItemScalarWhereInputSchema), z$2.lazy(() => MenuItemScalarWhereInputSchema).array()]).optional()
}).strict();
var FoodCostHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => FoodCostHistoryCreateWithoutRecipeInputSchema), z$2.lazy(() => FoodCostHistoryCreateWithoutRecipeInputSchema).array(), z$2.lazy(() => FoodCostHistoryUncheckedCreateWithoutRecipeInputSchema), z$2.lazy(() => FoodCostHistoryUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => FoodCostHistoryCreateOrConnectWithoutRecipeInputSchema), z$2.lazy(() => FoodCostHistoryCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => FoodCostHistoryUpsertWithWhereUniqueWithoutRecipeInputSchema), z$2.lazy(() => FoodCostHistoryUpsertWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => FoodCostHistoryCreateManyRecipeInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => FoodCostHistoryWhereUniqueInputSchema), z$2.lazy(() => FoodCostHistoryWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => FoodCostHistoryWhereUniqueInputSchema), z$2.lazy(() => FoodCostHistoryWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => FoodCostHistoryWhereUniqueInputSchema), z$2.lazy(() => FoodCostHistoryWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => FoodCostHistoryWhereUniqueInputSchema), z$2.lazy(() => FoodCostHistoryWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => FoodCostHistoryUpdateWithWhereUniqueWithoutRecipeInputSchema), z$2.lazy(() => FoodCostHistoryUpdateWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => FoodCostHistoryUpdateManyWithWhereWithoutRecipeInputSchema), z$2.lazy(() => FoodCostHistoryUpdateManyWithWhereWithoutRecipeInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => FoodCostHistoryScalarWhereInputSchema), z$2.lazy(() => FoodCostHistoryScalarWhereInputSchema).array()]).optional()
}).strict();
var PrepHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => PrepHistoryCreateWithoutRecipeInputSchema), z$2.lazy(() => PrepHistoryCreateWithoutRecipeInputSchema).array(), z$2.lazy(() => PrepHistoryUncheckedCreateWithoutRecipeInputSchema), z$2.lazy(() => PrepHistoryUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => PrepHistoryCreateOrConnectWithoutRecipeInputSchema), z$2.lazy(() => PrepHistoryCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => PrepHistoryUpsertWithWhereUniqueWithoutRecipeInputSchema), z$2.lazy(() => PrepHistoryUpsertWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => PrepHistoryCreateManyRecipeInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => PrepHistoryWhereUniqueInputSchema), z$2.lazy(() => PrepHistoryWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => PrepHistoryWhereUniqueInputSchema), z$2.lazy(() => PrepHistoryWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => PrepHistoryWhereUniqueInputSchema), z$2.lazy(() => PrepHistoryWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => PrepHistoryWhereUniqueInputSchema), z$2.lazy(() => PrepHistoryWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => PrepHistoryUpdateWithWhereUniqueWithoutRecipeInputSchema), z$2.lazy(() => PrepHistoryUpdateWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => PrepHistoryUpdateManyWithWhereWithoutRecipeInputSchema), z$2.lazy(() => PrepHistoryUpdateManyWithWhereWithoutRecipeInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => PrepHistoryScalarWhereInputSchema), z$2.lazy(() => PrepHistoryScalarWhereInputSchema).array()]).optional()
}).strict();
var PrepBoardUncheckedUpdateManyWithoutRecipesNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => PrepBoardCreateWithoutRecipesInputSchema), z$2.lazy(() => PrepBoardCreateWithoutRecipesInputSchema).array(), z$2.lazy(() => PrepBoardUncheckedCreateWithoutRecipesInputSchema), z$2.lazy(() => PrepBoardUncheckedCreateWithoutRecipesInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => PrepBoardCreateOrConnectWithoutRecipesInputSchema), z$2.lazy(() => PrepBoardCreateOrConnectWithoutRecipesInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => PrepBoardUpsertWithWhereUniqueWithoutRecipesInputSchema), z$2.lazy(() => PrepBoardUpsertWithWhereUniqueWithoutRecipesInputSchema).array()]).optional(),
  set: z$2.union([z$2.lazy(() => PrepBoardWhereUniqueInputSchema), z$2.lazy(() => PrepBoardWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => PrepBoardWhereUniqueInputSchema), z$2.lazy(() => PrepBoardWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => PrepBoardWhereUniqueInputSchema), z$2.lazy(() => PrepBoardWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => PrepBoardWhereUniqueInputSchema), z$2.lazy(() => PrepBoardWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => PrepBoardUpdateWithWhereUniqueWithoutRecipesInputSchema), z$2.lazy(() => PrepBoardUpdateWithWhereUniqueWithoutRecipesInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => PrepBoardUpdateManyWithWhereWithoutRecipesInputSchema), z$2.lazy(() => PrepBoardUpdateManyWithWhereWithoutRecipesInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => PrepBoardScalarWhereInputSchema), z$2.lazy(() => PrepBoardScalarWhereInputSchema).array()]).optional()
}).strict();
var PrepItemUncheckedUpdateManyWithoutRecipeNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => PrepItemCreateWithoutRecipeInputSchema), z$2.lazy(() => PrepItemCreateWithoutRecipeInputSchema).array(), z$2.lazy(() => PrepItemUncheckedCreateWithoutRecipeInputSchema), z$2.lazy(() => PrepItemUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => PrepItemCreateOrConnectWithoutRecipeInputSchema), z$2.lazy(() => PrepItemCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => PrepItemUpsertWithWhereUniqueWithoutRecipeInputSchema), z$2.lazy(() => PrepItemUpsertWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => PrepItemCreateManyRecipeInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => PrepItemWhereUniqueInputSchema), z$2.lazy(() => PrepItemWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => PrepItemWhereUniqueInputSchema), z$2.lazy(() => PrepItemWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => PrepItemWhereUniqueInputSchema), z$2.lazy(() => PrepItemWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => PrepItemWhereUniqueInputSchema), z$2.lazy(() => PrepItemWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => PrepItemUpdateWithWhereUniqueWithoutRecipeInputSchema), z$2.lazy(() => PrepItemUpdateWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => PrepItemUpdateManyWithWhereWithoutRecipeInputSchema), z$2.lazy(() => PrepItemUpdateManyWithWhereWithoutRecipeInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => PrepItemScalarWhereInputSchema), z$2.lazy(() => PrepItemScalarWhereInputSchema).array()]).optional()
}).strict();
var MenuItemRecipeUncheckedUpdateManyWithoutRecipeNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => MenuItemRecipeCreateWithoutRecipeInputSchema), z$2.lazy(() => MenuItemRecipeCreateWithoutRecipeInputSchema).array(), z$2.lazy(() => MenuItemRecipeUncheckedCreateWithoutRecipeInputSchema), z$2.lazy(() => MenuItemRecipeUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => MenuItemRecipeCreateOrConnectWithoutRecipeInputSchema), z$2.lazy(() => MenuItemRecipeCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => MenuItemRecipeUpsertWithWhereUniqueWithoutRecipeInputSchema), z$2.lazy(() => MenuItemRecipeUpsertWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => MenuItemRecipeCreateManyRecipeInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => MenuItemRecipeWhereUniqueInputSchema), z$2.lazy(() => MenuItemRecipeWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => MenuItemRecipeWhereUniqueInputSchema), z$2.lazy(() => MenuItemRecipeWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => MenuItemRecipeWhereUniqueInputSchema), z$2.lazy(() => MenuItemRecipeWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => MenuItemRecipeWhereUniqueInputSchema), z$2.lazy(() => MenuItemRecipeWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => MenuItemRecipeUpdateWithWhereUniqueWithoutRecipeInputSchema), z$2.lazy(() => MenuItemRecipeUpdateWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => MenuItemRecipeUpdateManyWithWhereWithoutRecipeInputSchema), z$2.lazy(() => MenuItemRecipeUpdateManyWithWhereWithoutRecipeInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => MenuItemRecipeScalarWhereInputSchema), z$2.lazy(() => MenuItemRecipeScalarWhereInputSchema).array()]).optional()
}).strict();
var ProductionPlanItemUncheckedUpdateManyWithoutRecipeNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => ProductionPlanItemCreateWithoutRecipeInputSchema), z$2.lazy(() => ProductionPlanItemCreateWithoutRecipeInputSchema).array(), z$2.lazy(() => ProductionPlanItemUncheckedCreateWithoutRecipeInputSchema), z$2.lazy(() => ProductionPlanItemUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => ProductionPlanItemCreateOrConnectWithoutRecipeInputSchema), z$2.lazy(() => ProductionPlanItemCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => ProductionPlanItemUpsertWithWhereUniqueWithoutRecipeInputSchema), z$2.lazy(() => ProductionPlanItemUpsertWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => ProductionPlanItemCreateManyRecipeInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => ProductionPlanItemWhereUniqueInputSchema), z$2.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => ProductionPlanItemWhereUniqueInputSchema), z$2.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => ProductionPlanItemWhereUniqueInputSchema), z$2.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => ProductionPlanItemWhereUniqueInputSchema), z$2.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => ProductionPlanItemUpdateWithWhereUniqueWithoutRecipeInputSchema), z$2.lazy(() => ProductionPlanItemUpdateWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => ProductionPlanItemUpdateManyWithWhereWithoutRecipeInputSchema), z$2.lazy(() => ProductionPlanItemUpdateManyWithWhereWithoutRecipeInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => ProductionPlanItemScalarWhereInputSchema), z$2.lazy(() => ProductionPlanItemScalarWhereInputSchema).array()]).optional()
}).strict();
var InventoryWithdrawalUncheckedUpdateManyWithoutRecipeNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => InventoryWithdrawalCreateWithoutRecipeInputSchema), z$2.lazy(() => InventoryWithdrawalCreateWithoutRecipeInputSchema).array(), z$2.lazy(() => InventoryWithdrawalUncheckedCreateWithoutRecipeInputSchema), z$2.lazy(() => InventoryWithdrawalUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => InventoryWithdrawalCreateOrConnectWithoutRecipeInputSchema), z$2.lazy(() => InventoryWithdrawalCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => InventoryWithdrawalUpsertWithWhereUniqueWithoutRecipeInputSchema), z$2.lazy(() => InventoryWithdrawalUpsertWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => InventoryWithdrawalCreateManyRecipeInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => InventoryWithdrawalWhereUniqueInputSchema), z$2.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => InventoryWithdrawalWhereUniqueInputSchema), z$2.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => InventoryWithdrawalWhereUniqueInputSchema), z$2.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => InventoryWithdrawalWhereUniqueInputSchema), z$2.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => InventoryWithdrawalUpdateWithWhereUniqueWithoutRecipeInputSchema), z$2.lazy(() => InventoryWithdrawalUpdateWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => InventoryWithdrawalUpdateManyWithWhereWithoutRecipeInputSchema), z$2.lazy(() => InventoryWithdrawalUpdateManyWithWhereWithoutRecipeInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => InventoryWithdrawalScalarWhereInputSchema), z$2.lazy(() => InventoryWithdrawalScalarWhereInputSchema).array()]).optional()
}).strict();
var RecipeTagUncheckedUpdateManyWithoutRecipesNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeTagCreateWithoutRecipesInputSchema), z$2.lazy(() => RecipeTagCreateWithoutRecipesInputSchema).array(), z$2.lazy(() => RecipeTagUncheckedCreateWithoutRecipesInputSchema), z$2.lazy(() => RecipeTagUncheckedCreateWithoutRecipesInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => RecipeTagCreateOrConnectWithoutRecipesInputSchema), z$2.lazy(() => RecipeTagCreateOrConnectWithoutRecipesInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => RecipeTagUpsertWithWhereUniqueWithoutRecipesInputSchema), z$2.lazy(() => RecipeTagUpsertWithWhereUniqueWithoutRecipesInputSchema).array()]).optional(),
  set: z$2.union([z$2.lazy(() => RecipeTagWhereUniqueInputSchema), z$2.lazy(() => RecipeTagWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => RecipeTagWhereUniqueInputSchema), z$2.lazy(() => RecipeTagWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => RecipeTagWhereUniqueInputSchema), z$2.lazy(() => RecipeTagWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => RecipeTagWhereUniqueInputSchema), z$2.lazy(() => RecipeTagWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => RecipeTagUpdateWithWhereUniqueWithoutRecipesInputSchema), z$2.lazy(() => RecipeTagUpdateWithWhereUniqueWithoutRecipesInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => RecipeTagUpdateManyWithWhereWithoutRecipesInputSchema), z$2.lazy(() => RecipeTagUpdateManyWithWhereWithoutRecipesInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => RecipeTagScalarWhereInputSchema), z$2.lazy(() => RecipeTagScalarWhereInputSchema).array()]).optional()
}).strict();
var RecipeVersionUncheckedUpdateManyWithoutRecipeNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeVersionCreateWithoutRecipeInputSchema), z$2.lazy(() => RecipeVersionCreateWithoutRecipeInputSchema).array(), z$2.lazy(() => RecipeVersionUncheckedCreateWithoutRecipeInputSchema), z$2.lazy(() => RecipeVersionUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => RecipeVersionCreateOrConnectWithoutRecipeInputSchema), z$2.lazy(() => RecipeVersionCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => RecipeVersionUpsertWithWhereUniqueWithoutRecipeInputSchema), z$2.lazy(() => RecipeVersionUpsertWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => RecipeVersionCreateManyRecipeInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => RecipeVersionWhereUniqueInputSchema), z$2.lazy(() => RecipeVersionWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => RecipeVersionWhereUniqueInputSchema), z$2.lazy(() => RecipeVersionWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => RecipeVersionWhereUniqueInputSchema), z$2.lazy(() => RecipeVersionWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => RecipeVersionWhereUniqueInputSchema), z$2.lazy(() => RecipeVersionWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => RecipeVersionUpdateWithWhereUniqueWithoutRecipeInputSchema), z$2.lazy(() => RecipeVersionUpdateWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => RecipeVersionUpdateManyWithWhereWithoutRecipeInputSchema), z$2.lazy(() => RecipeVersionUpdateManyWithWhereWithoutRecipeInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => RecipeVersionScalarWhereInputSchema), z$2.lazy(() => RecipeVersionScalarWhereInputSchema).array()]).optional()
}).strict();
var RecipeEquipmentUncheckedUpdateManyWithoutRecipeNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeEquipmentCreateWithoutRecipeInputSchema), z$2.lazy(() => RecipeEquipmentCreateWithoutRecipeInputSchema).array(), z$2.lazy(() => RecipeEquipmentUncheckedCreateWithoutRecipeInputSchema), z$2.lazy(() => RecipeEquipmentUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => RecipeEquipmentCreateOrConnectWithoutRecipeInputSchema), z$2.lazy(() => RecipeEquipmentCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => RecipeEquipmentUpsertWithWhereUniqueWithoutRecipeInputSchema), z$2.lazy(() => RecipeEquipmentUpsertWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => RecipeEquipmentCreateManyRecipeInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => RecipeEquipmentWhereUniqueInputSchema), z$2.lazy(() => RecipeEquipmentWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => RecipeEquipmentWhereUniqueInputSchema), z$2.lazy(() => RecipeEquipmentWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => RecipeEquipmentWhereUniqueInputSchema), z$2.lazy(() => RecipeEquipmentWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => RecipeEquipmentWhereUniqueInputSchema), z$2.lazy(() => RecipeEquipmentWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => RecipeEquipmentUpdateWithWhereUniqueWithoutRecipeInputSchema), z$2.lazy(() => RecipeEquipmentUpdateWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => RecipeEquipmentUpdateManyWithWhereWithoutRecipeInputSchema), z$2.lazy(() => RecipeEquipmentUpdateManyWithWhereWithoutRecipeInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => RecipeEquipmentScalarWhereInputSchema), z$2.lazy(() => RecipeEquipmentScalarWhereInputSchema).array()]).optional()
}).strict();
var DietaryRestrictionUncheckedUpdateManyWithoutRecipesNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => DietaryRestrictionCreateWithoutRecipesInputSchema), z$2.lazy(() => DietaryRestrictionCreateWithoutRecipesInputSchema).array(), z$2.lazy(() => DietaryRestrictionUncheckedCreateWithoutRecipesInputSchema), z$2.lazy(() => DietaryRestrictionUncheckedCreateWithoutRecipesInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => DietaryRestrictionCreateOrConnectWithoutRecipesInputSchema), z$2.lazy(() => DietaryRestrictionCreateOrConnectWithoutRecipesInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => DietaryRestrictionUpsertWithWhereUniqueWithoutRecipesInputSchema), z$2.lazy(() => DietaryRestrictionUpsertWithWhereUniqueWithoutRecipesInputSchema).array()]).optional(),
  set: z$2.union([z$2.lazy(() => DietaryRestrictionWhereUniqueInputSchema), z$2.lazy(() => DietaryRestrictionWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => DietaryRestrictionWhereUniqueInputSchema), z$2.lazy(() => DietaryRestrictionWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => DietaryRestrictionWhereUniqueInputSchema), z$2.lazy(() => DietaryRestrictionWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => DietaryRestrictionWhereUniqueInputSchema), z$2.lazy(() => DietaryRestrictionWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => DietaryRestrictionUpdateWithWhereUniqueWithoutRecipesInputSchema), z$2.lazy(() => DietaryRestrictionUpdateWithWhereUniqueWithoutRecipesInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => DietaryRestrictionUpdateManyWithWhereWithoutRecipesInputSchema), z$2.lazy(() => DietaryRestrictionUpdateManyWithWhereWithoutRecipesInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => DietaryRestrictionScalarWhereInputSchema), z$2.lazy(() => DietaryRestrictionScalarWhereInputSchema).array()]).optional()
}).strict();
var RecipeIngredientCreateNestedManyWithoutIngredientInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeIngredientCreateWithoutIngredientInputSchema), z$2.lazy(() => RecipeIngredientCreateWithoutIngredientInputSchema).array(), z$2.lazy(() => RecipeIngredientUncheckedCreateWithoutIngredientInputSchema), z$2.lazy(() => RecipeIngredientUncheckedCreateWithoutIngredientInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => RecipeIngredientCreateOrConnectWithoutIngredientInputSchema), z$2.lazy(() => RecipeIngredientCreateOrConnectWithoutIngredientInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => RecipeIngredientCreateManyIngredientInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => RecipeIngredientWhereUniqueInputSchema), z$2.lazy(() => RecipeIngredientWhereUniqueInputSchema).array()]).optional()
}).strict();
var InventoryItemCreateNestedManyWithoutIngredientInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => InventoryItemCreateWithoutIngredientInputSchema), z$2.lazy(() => InventoryItemCreateWithoutIngredientInputSchema).array(), z$2.lazy(() => InventoryItemUncheckedCreateWithoutIngredientInputSchema), z$2.lazy(() => InventoryItemUncheckedCreateWithoutIngredientInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => InventoryItemCreateOrConnectWithoutIngredientInputSchema), z$2.lazy(() => InventoryItemCreateOrConnectWithoutIngredientInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => InventoryItemCreateManyIngredientInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => InventoryItemWhereUniqueInputSchema), z$2.lazy(() => InventoryItemWhereUniqueInputSchema).array()]).optional()
}).strict();
var OrderItemCreateNestedManyWithoutIngredientInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => OrderItemCreateWithoutIngredientInputSchema), z$2.lazy(() => OrderItemCreateWithoutIngredientInputSchema).array(), z$2.lazy(() => OrderItemUncheckedCreateWithoutIngredientInputSchema), z$2.lazy(() => OrderItemUncheckedCreateWithoutIngredientInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => OrderItemCreateOrConnectWithoutIngredientInputSchema), z$2.lazy(() => OrderItemCreateOrConnectWithoutIngredientInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => OrderItemCreateManyIngredientInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => OrderItemWhereUniqueInputSchema), z$2.lazy(() => OrderItemWhereUniqueInputSchema).array()]).optional()
}).strict();
var VendorCreateNestedManyWithoutIngredientsInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => VendorCreateWithoutIngredientsInputSchema), z$2.lazy(() => VendorCreateWithoutIngredientsInputSchema).array(), z$2.lazy(() => VendorUncheckedCreateWithoutIngredientsInputSchema), z$2.lazy(() => VendorUncheckedCreateWithoutIngredientsInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => VendorCreateOrConnectWithoutIngredientsInputSchema), z$2.lazy(() => VendorCreateOrConnectWithoutIngredientsInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => VendorWhereUniqueInputSchema), z$2.lazy(() => VendorWhereUniqueInputSchema).array()]).optional()
}).strict();
var WasteRecordCreateNestedManyWithoutIngredienteInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => WasteRecordCreateWithoutIngredienteInputSchema), z$2.lazy(() => WasteRecordCreateWithoutIngredienteInputSchema).array(), z$2.lazy(() => WasteRecordUncheckedCreateWithoutIngredienteInputSchema), z$2.lazy(() => WasteRecordUncheckedCreateWithoutIngredienteInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => WasteRecordCreateOrConnectWithoutIngredienteInputSchema), z$2.lazy(() => WasteRecordCreateOrConnectWithoutIngredienteInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => WasteRecordCreateManyIngredienteInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => WasteRecordWhereUniqueInputSchema), z$2.lazy(() => WasteRecordWhereUniqueInputSchema).array()]).optional()
}).strict();
var IngredientAllergenCreateNestedManyWithoutIngredientInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => IngredientAllergenCreateWithoutIngredientInputSchema), z$2.lazy(() => IngredientAllergenCreateWithoutIngredientInputSchema).array(), z$2.lazy(() => IngredientAllergenUncheckedCreateWithoutIngredientInputSchema), z$2.lazy(() => IngredientAllergenUncheckedCreateWithoutIngredientInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => IngredientAllergenCreateOrConnectWithoutIngredientInputSchema), z$2.lazy(() => IngredientAllergenCreateOrConnectWithoutIngredientInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => IngredientAllergenCreateManyIngredientInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => IngredientAllergenWhereUniqueInputSchema), z$2.lazy(() => IngredientAllergenWhereUniqueInputSchema).array()]).optional()
}).strict();
var SupplierPriceHistoryCreateNestedManyWithoutIngredientInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => SupplierPriceHistoryCreateWithoutIngredientInputSchema), z$2.lazy(() => SupplierPriceHistoryCreateWithoutIngredientInputSchema).array(), z$2.lazy(() => SupplierPriceHistoryUncheckedCreateWithoutIngredientInputSchema), z$2.lazy(() => SupplierPriceHistoryUncheckedCreateWithoutIngredientInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => SupplierPriceHistoryCreateOrConnectWithoutIngredientInputSchema), z$2.lazy(() => SupplierPriceHistoryCreateOrConnectWithoutIngredientInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => SupplierPriceHistoryCreateManyIngredientInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema), z$2.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema).array()]).optional()
}).strict();
var DietaryRestrictionCreateNestedOneWithoutIngredientsInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => DietaryRestrictionCreateWithoutIngredientsInputSchema), z$2.lazy(() => DietaryRestrictionUncheckedCreateWithoutIngredientsInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => DietaryRestrictionCreateOrConnectWithoutIngredientsInputSchema).optional(),
  connect: z$2.lazy(() => DietaryRestrictionWhereUniqueInputSchema).optional()
}).strict();
var RecipeIngredientUncheckedCreateNestedManyWithoutIngredientInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeIngredientCreateWithoutIngredientInputSchema), z$2.lazy(() => RecipeIngredientCreateWithoutIngredientInputSchema).array(), z$2.lazy(() => RecipeIngredientUncheckedCreateWithoutIngredientInputSchema), z$2.lazy(() => RecipeIngredientUncheckedCreateWithoutIngredientInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => RecipeIngredientCreateOrConnectWithoutIngredientInputSchema), z$2.lazy(() => RecipeIngredientCreateOrConnectWithoutIngredientInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => RecipeIngredientCreateManyIngredientInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => RecipeIngredientWhereUniqueInputSchema), z$2.lazy(() => RecipeIngredientWhereUniqueInputSchema).array()]).optional()
}).strict();
var InventoryItemUncheckedCreateNestedManyWithoutIngredientInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => InventoryItemCreateWithoutIngredientInputSchema), z$2.lazy(() => InventoryItemCreateWithoutIngredientInputSchema).array(), z$2.lazy(() => InventoryItemUncheckedCreateWithoutIngredientInputSchema), z$2.lazy(() => InventoryItemUncheckedCreateWithoutIngredientInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => InventoryItemCreateOrConnectWithoutIngredientInputSchema), z$2.lazy(() => InventoryItemCreateOrConnectWithoutIngredientInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => InventoryItemCreateManyIngredientInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => InventoryItemWhereUniqueInputSchema), z$2.lazy(() => InventoryItemWhereUniqueInputSchema).array()]).optional()
}).strict();
var OrderItemUncheckedCreateNestedManyWithoutIngredientInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => OrderItemCreateWithoutIngredientInputSchema), z$2.lazy(() => OrderItemCreateWithoutIngredientInputSchema).array(), z$2.lazy(() => OrderItemUncheckedCreateWithoutIngredientInputSchema), z$2.lazy(() => OrderItemUncheckedCreateWithoutIngredientInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => OrderItemCreateOrConnectWithoutIngredientInputSchema), z$2.lazy(() => OrderItemCreateOrConnectWithoutIngredientInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => OrderItemCreateManyIngredientInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => OrderItemWhereUniqueInputSchema), z$2.lazy(() => OrderItemWhereUniqueInputSchema).array()]).optional()
}).strict();
var VendorUncheckedCreateNestedManyWithoutIngredientsInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => VendorCreateWithoutIngredientsInputSchema), z$2.lazy(() => VendorCreateWithoutIngredientsInputSchema).array(), z$2.lazy(() => VendorUncheckedCreateWithoutIngredientsInputSchema), z$2.lazy(() => VendorUncheckedCreateWithoutIngredientsInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => VendorCreateOrConnectWithoutIngredientsInputSchema), z$2.lazy(() => VendorCreateOrConnectWithoutIngredientsInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => VendorWhereUniqueInputSchema), z$2.lazy(() => VendorWhereUniqueInputSchema).array()]).optional()
}).strict();
var WasteRecordUncheckedCreateNestedManyWithoutIngredienteInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => WasteRecordCreateWithoutIngredienteInputSchema), z$2.lazy(() => WasteRecordCreateWithoutIngredienteInputSchema).array(), z$2.lazy(() => WasteRecordUncheckedCreateWithoutIngredienteInputSchema), z$2.lazy(() => WasteRecordUncheckedCreateWithoutIngredienteInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => WasteRecordCreateOrConnectWithoutIngredienteInputSchema), z$2.lazy(() => WasteRecordCreateOrConnectWithoutIngredienteInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => WasteRecordCreateManyIngredienteInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => WasteRecordWhereUniqueInputSchema), z$2.lazy(() => WasteRecordWhereUniqueInputSchema).array()]).optional()
}).strict();
var IngredientAllergenUncheckedCreateNestedManyWithoutIngredientInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => IngredientAllergenCreateWithoutIngredientInputSchema), z$2.lazy(() => IngredientAllergenCreateWithoutIngredientInputSchema).array(), z$2.lazy(() => IngredientAllergenUncheckedCreateWithoutIngredientInputSchema), z$2.lazy(() => IngredientAllergenUncheckedCreateWithoutIngredientInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => IngredientAllergenCreateOrConnectWithoutIngredientInputSchema), z$2.lazy(() => IngredientAllergenCreateOrConnectWithoutIngredientInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => IngredientAllergenCreateManyIngredientInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => IngredientAllergenWhereUniqueInputSchema), z$2.lazy(() => IngredientAllergenWhereUniqueInputSchema).array()]).optional()
}).strict();
var SupplierPriceHistoryUncheckedCreateNestedManyWithoutIngredientInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => SupplierPriceHistoryCreateWithoutIngredientInputSchema), z$2.lazy(() => SupplierPriceHistoryCreateWithoutIngredientInputSchema).array(), z$2.lazy(() => SupplierPriceHistoryUncheckedCreateWithoutIngredientInputSchema), z$2.lazy(() => SupplierPriceHistoryUncheckedCreateWithoutIngredientInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => SupplierPriceHistoryCreateOrConnectWithoutIngredientInputSchema), z$2.lazy(() => SupplierPriceHistoryCreateOrConnectWithoutIngredientInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => SupplierPriceHistoryCreateManyIngredientInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema), z$2.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema).array()]).optional()
}).strict();
var RecipeIngredientUpdateManyWithoutIngredientNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeIngredientCreateWithoutIngredientInputSchema), z$2.lazy(() => RecipeIngredientCreateWithoutIngredientInputSchema).array(), z$2.lazy(() => RecipeIngredientUncheckedCreateWithoutIngredientInputSchema), z$2.lazy(() => RecipeIngredientUncheckedCreateWithoutIngredientInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => RecipeIngredientCreateOrConnectWithoutIngredientInputSchema), z$2.lazy(() => RecipeIngredientCreateOrConnectWithoutIngredientInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => RecipeIngredientUpsertWithWhereUniqueWithoutIngredientInputSchema), z$2.lazy(() => RecipeIngredientUpsertWithWhereUniqueWithoutIngredientInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => RecipeIngredientCreateManyIngredientInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => RecipeIngredientWhereUniqueInputSchema), z$2.lazy(() => RecipeIngredientWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => RecipeIngredientWhereUniqueInputSchema), z$2.lazy(() => RecipeIngredientWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => RecipeIngredientWhereUniqueInputSchema), z$2.lazy(() => RecipeIngredientWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => RecipeIngredientWhereUniqueInputSchema), z$2.lazy(() => RecipeIngredientWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => RecipeIngredientUpdateWithWhereUniqueWithoutIngredientInputSchema), z$2.lazy(() => RecipeIngredientUpdateWithWhereUniqueWithoutIngredientInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => RecipeIngredientUpdateManyWithWhereWithoutIngredientInputSchema), z$2.lazy(() => RecipeIngredientUpdateManyWithWhereWithoutIngredientInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => RecipeIngredientScalarWhereInputSchema), z$2.lazy(() => RecipeIngredientScalarWhereInputSchema).array()]).optional()
}).strict();
var InventoryItemUpdateManyWithoutIngredientNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => InventoryItemCreateWithoutIngredientInputSchema), z$2.lazy(() => InventoryItemCreateWithoutIngredientInputSchema).array(), z$2.lazy(() => InventoryItemUncheckedCreateWithoutIngredientInputSchema), z$2.lazy(() => InventoryItemUncheckedCreateWithoutIngredientInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => InventoryItemCreateOrConnectWithoutIngredientInputSchema), z$2.lazy(() => InventoryItemCreateOrConnectWithoutIngredientInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => InventoryItemUpsertWithWhereUniqueWithoutIngredientInputSchema), z$2.lazy(() => InventoryItemUpsertWithWhereUniqueWithoutIngredientInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => InventoryItemCreateManyIngredientInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => InventoryItemWhereUniqueInputSchema), z$2.lazy(() => InventoryItemWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => InventoryItemWhereUniqueInputSchema), z$2.lazy(() => InventoryItemWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => InventoryItemWhereUniqueInputSchema), z$2.lazy(() => InventoryItemWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => InventoryItemWhereUniqueInputSchema), z$2.lazy(() => InventoryItemWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => InventoryItemUpdateWithWhereUniqueWithoutIngredientInputSchema), z$2.lazy(() => InventoryItemUpdateWithWhereUniqueWithoutIngredientInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => InventoryItemUpdateManyWithWhereWithoutIngredientInputSchema), z$2.lazy(() => InventoryItemUpdateManyWithWhereWithoutIngredientInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => InventoryItemScalarWhereInputSchema), z$2.lazy(() => InventoryItemScalarWhereInputSchema).array()]).optional()
}).strict();
var OrderItemUpdateManyWithoutIngredientNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => OrderItemCreateWithoutIngredientInputSchema), z$2.lazy(() => OrderItemCreateWithoutIngredientInputSchema).array(), z$2.lazy(() => OrderItemUncheckedCreateWithoutIngredientInputSchema), z$2.lazy(() => OrderItemUncheckedCreateWithoutIngredientInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => OrderItemCreateOrConnectWithoutIngredientInputSchema), z$2.lazy(() => OrderItemCreateOrConnectWithoutIngredientInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => OrderItemUpsertWithWhereUniqueWithoutIngredientInputSchema), z$2.lazy(() => OrderItemUpsertWithWhereUniqueWithoutIngredientInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => OrderItemCreateManyIngredientInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => OrderItemWhereUniqueInputSchema), z$2.lazy(() => OrderItemWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => OrderItemWhereUniqueInputSchema), z$2.lazy(() => OrderItemWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => OrderItemWhereUniqueInputSchema), z$2.lazy(() => OrderItemWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => OrderItemWhereUniqueInputSchema), z$2.lazy(() => OrderItemWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => OrderItemUpdateWithWhereUniqueWithoutIngredientInputSchema), z$2.lazy(() => OrderItemUpdateWithWhereUniqueWithoutIngredientInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => OrderItemUpdateManyWithWhereWithoutIngredientInputSchema), z$2.lazy(() => OrderItemUpdateManyWithWhereWithoutIngredientInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => OrderItemScalarWhereInputSchema), z$2.lazy(() => OrderItemScalarWhereInputSchema).array()]).optional()
}).strict();
var VendorUpdateManyWithoutIngredientsNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => VendorCreateWithoutIngredientsInputSchema), z$2.lazy(() => VendorCreateWithoutIngredientsInputSchema).array(), z$2.lazy(() => VendorUncheckedCreateWithoutIngredientsInputSchema), z$2.lazy(() => VendorUncheckedCreateWithoutIngredientsInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => VendorCreateOrConnectWithoutIngredientsInputSchema), z$2.lazy(() => VendorCreateOrConnectWithoutIngredientsInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => VendorUpsertWithWhereUniqueWithoutIngredientsInputSchema), z$2.lazy(() => VendorUpsertWithWhereUniqueWithoutIngredientsInputSchema).array()]).optional(),
  set: z$2.union([z$2.lazy(() => VendorWhereUniqueInputSchema), z$2.lazy(() => VendorWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => VendorWhereUniqueInputSchema), z$2.lazy(() => VendorWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => VendorWhereUniqueInputSchema), z$2.lazy(() => VendorWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => VendorWhereUniqueInputSchema), z$2.lazy(() => VendorWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => VendorUpdateWithWhereUniqueWithoutIngredientsInputSchema), z$2.lazy(() => VendorUpdateWithWhereUniqueWithoutIngredientsInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => VendorUpdateManyWithWhereWithoutIngredientsInputSchema), z$2.lazy(() => VendorUpdateManyWithWhereWithoutIngredientsInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => VendorScalarWhereInputSchema), z$2.lazy(() => VendorScalarWhereInputSchema).array()]).optional()
}).strict();
var WasteRecordUpdateManyWithoutIngredienteNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => WasteRecordCreateWithoutIngredienteInputSchema), z$2.lazy(() => WasteRecordCreateWithoutIngredienteInputSchema).array(), z$2.lazy(() => WasteRecordUncheckedCreateWithoutIngredienteInputSchema), z$2.lazy(() => WasteRecordUncheckedCreateWithoutIngredienteInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => WasteRecordCreateOrConnectWithoutIngredienteInputSchema), z$2.lazy(() => WasteRecordCreateOrConnectWithoutIngredienteInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => WasteRecordUpsertWithWhereUniqueWithoutIngredienteInputSchema), z$2.lazy(() => WasteRecordUpsertWithWhereUniqueWithoutIngredienteInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => WasteRecordCreateManyIngredienteInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => WasteRecordWhereUniqueInputSchema), z$2.lazy(() => WasteRecordWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => WasteRecordWhereUniqueInputSchema), z$2.lazy(() => WasteRecordWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => WasteRecordWhereUniqueInputSchema), z$2.lazy(() => WasteRecordWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => WasteRecordWhereUniqueInputSchema), z$2.lazy(() => WasteRecordWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => WasteRecordUpdateWithWhereUniqueWithoutIngredienteInputSchema), z$2.lazy(() => WasteRecordUpdateWithWhereUniqueWithoutIngredienteInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => WasteRecordUpdateManyWithWhereWithoutIngredienteInputSchema), z$2.lazy(() => WasteRecordUpdateManyWithWhereWithoutIngredienteInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => WasteRecordScalarWhereInputSchema), z$2.lazy(() => WasteRecordScalarWhereInputSchema).array()]).optional()
}).strict();
var IngredientAllergenUpdateManyWithoutIngredientNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => IngredientAllergenCreateWithoutIngredientInputSchema), z$2.lazy(() => IngredientAllergenCreateWithoutIngredientInputSchema).array(), z$2.lazy(() => IngredientAllergenUncheckedCreateWithoutIngredientInputSchema), z$2.lazy(() => IngredientAllergenUncheckedCreateWithoutIngredientInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => IngredientAllergenCreateOrConnectWithoutIngredientInputSchema), z$2.lazy(() => IngredientAllergenCreateOrConnectWithoutIngredientInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => IngredientAllergenUpsertWithWhereUniqueWithoutIngredientInputSchema), z$2.lazy(() => IngredientAllergenUpsertWithWhereUniqueWithoutIngredientInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => IngredientAllergenCreateManyIngredientInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => IngredientAllergenWhereUniqueInputSchema), z$2.lazy(() => IngredientAllergenWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => IngredientAllergenWhereUniqueInputSchema), z$2.lazy(() => IngredientAllergenWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => IngredientAllergenWhereUniqueInputSchema), z$2.lazy(() => IngredientAllergenWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => IngredientAllergenWhereUniqueInputSchema), z$2.lazy(() => IngredientAllergenWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => IngredientAllergenUpdateWithWhereUniqueWithoutIngredientInputSchema), z$2.lazy(() => IngredientAllergenUpdateWithWhereUniqueWithoutIngredientInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => IngredientAllergenUpdateManyWithWhereWithoutIngredientInputSchema), z$2.lazy(() => IngredientAllergenUpdateManyWithWhereWithoutIngredientInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => IngredientAllergenScalarWhereInputSchema), z$2.lazy(() => IngredientAllergenScalarWhereInputSchema).array()]).optional()
}).strict();
var SupplierPriceHistoryUpdateManyWithoutIngredientNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => SupplierPriceHistoryCreateWithoutIngredientInputSchema), z$2.lazy(() => SupplierPriceHistoryCreateWithoutIngredientInputSchema).array(), z$2.lazy(() => SupplierPriceHistoryUncheckedCreateWithoutIngredientInputSchema), z$2.lazy(() => SupplierPriceHistoryUncheckedCreateWithoutIngredientInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => SupplierPriceHistoryCreateOrConnectWithoutIngredientInputSchema), z$2.lazy(() => SupplierPriceHistoryCreateOrConnectWithoutIngredientInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => SupplierPriceHistoryUpsertWithWhereUniqueWithoutIngredientInputSchema), z$2.lazy(() => SupplierPriceHistoryUpsertWithWhereUniqueWithoutIngredientInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => SupplierPriceHistoryCreateManyIngredientInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema), z$2.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema), z$2.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema), z$2.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema), z$2.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => SupplierPriceHistoryUpdateWithWhereUniqueWithoutIngredientInputSchema), z$2.lazy(() => SupplierPriceHistoryUpdateWithWhereUniqueWithoutIngredientInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => SupplierPriceHistoryUpdateManyWithWhereWithoutIngredientInputSchema), z$2.lazy(() => SupplierPriceHistoryUpdateManyWithWhereWithoutIngredientInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => SupplierPriceHistoryScalarWhereInputSchema), z$2.lazy(() => SupplierPriceHistoryScalarWhereInputSchema).array()]).optional()
}).strict();
var DietaryRestrictionUpdateOneWithoutIngredientsNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => DietaryRestrictionCreateWithoutIngredientsInputSchema), z$2.lazy(() => DietaryRestrictionUncheckedCreateWithoutIngredientsInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => DietaryRestrictionCreateOrConnectWithoutIngredientsInputSchema).optional(),
  upsert: z$2.lazy(() => DietaryRestrictionUpsertWithoutIngredientsInputSchema).optional(),
  disconnect: z$2.union([z$2.boolean(), z$2.lazy(() => DietaryRestrictionWhereInputSchema)]).optional(),
  delete: z$2.union([z$2.boolean(), z$2.lazy(() => DietaryRestrictionWhereInputSchema)]).optional(),
  connect: z$2.lazy(() => DietaryRestrictionWhereUniqueInputSchema).optional(),
  update: z$2.union([z$2.lazy(() => DietaryRestrictionUpdateToOneWithWhereWithoutIngredientsInputSchema), z$2.lazy(() => DietaryRestrictionUpdateWithoutIngredientsInputSchema), z$2.lazy(() => DietaryRestrictionUncheckedUpdateWithoutIngredientsInputSchema)]).optional()
}).strict();
var RecipeIngredientUncheckedUpdateManyWithoutIngredientNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeIngredientCreateWithoutIngredientInputSchema), z$2.lazy(() => RecipeIngredientCreateWithoutIngredientInputSchema).array(), z$2.lazy(() => RecipeIngredientUncheckedCreateWithoutIngredientInputSchema), z$2.lazy(() => RecipeIngredientUncheckedCreateWithoutIngredientInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => RecipeIngredientCreateOrConnectWithoutIngredientInputSchema), z$2.lazy(() => RecipeIngredientCreateOrConnectWithoutIngredientInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => RecipeIngredientUpsertWithWhereUniqueWithoutIngredientInputSchema), z$2.lazy(() => RecipeIngredientUpsertWithWhereUniqueWithoutIngredientInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => RecipeIngredientCreateManyIngredientInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => RecipeIngredientWhereUniqueInputSchema), z$2.lazy(() => RecipeIngredientWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => RecipeIngredientWhereUniqueInputSchema), z$2.lazy(() => RecipeIngredientWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => RecipeIngredientWhereUniqueInputSchema), z$2.lazy(() => RecipeIngredientWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => RecipeIngredientWhereUniqueInputSchema), z$2.lazy(() => RecipeIngredientWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => RecipeIngredientUpdateWithWhereUniqueWithoutIngredientInputSchema), z$2.lazy(() => RecipeIngredientUpdateWithWhereUniqueWithoutIngredientInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => RecipeIngredientUpdateManyWithWhereWithoutIngredientInputSchema), z$2.lazy(() => RecipeIngredientUpdateManyWithWhereWithoutIngredientInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => RecipeIngredientScalarWhereInputSchema), z$2.lazy(() => RecipeIngredientScalarWhereInputSchema).array()]).optional()
}).strict();
var InventoryItemUncheckedUpdateManyWithoutIngredientNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => InventoryItemCreateWithoutIngredientInputSchema), z$2.lazy(() => InventoryItemCreateWithoutIngredientInputSchema).array(), z$2.lazy(() => InventoryItemUncheckedCreateWithoutIngredientInputSchema), z$2.lazy(() => InventoryItemUncheckedCreateWithoutIngredientInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => InventoryItemCreateOrConnectWithoutIngredientInputSchema), z$2.lazy(() => InventoryItemCreateOrConnectWithoutIngredientInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => InventoryItemUpsertWithWhereUniqueWithoutIngredientInputSchema), z$2.lazy(() => InventoryItemUpsertWithWhereUniqueWithoutIngredientInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => InventoryItemCreateManyIngredientInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => InventoryItemWhereUniqueInputSchema), z$2.lazy(() => InventoryItemWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => InventoryItemWhereUniqueInputSchema), z$2.lazy(() => InventoryItemWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => InventoryItemWhereUniqueInputSchema), z$2.lazy(() => InventoryItemWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => InventoryItemWhereUniqueInputSchema), z$2.lazy(() => InventoryItemWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => InventoryItemUpdateWithWhereUniqueWithoutIngredientInputSchema), z$2.lazy(() => InventoryItemUpdateWithWhereUniqueWithoutIngredientInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => InventoryItemUpdateManyWithWhereWithoutIngredientInputSchema), z$2.lazy(() => InventoryItemUpdateManyWithWhereWithoutIngredientInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => InventoryItemScalarWhereInputSchema), z$2.lazy(() => InventoryItemScalarWhereInputSchema).array()]).optional()
}).strict();
var OrderItemUncheckedUpdateManyWithoutIngredientNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => OrderItemCreateWithoutIngredientInputSchema), z$2.lazy(() => OrderItemCreateWithoutIngredientInputSchema).array(), z$2.lazy(() => OrderItemUncheckedCreateWithoutIngredientInputSchema), z$2.lazy(() => OrderItemUncheckedCreateWithoutIngredientInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => OrderItemCreateOrConnectWithoutIngredientInputSchema), z$2.lazy(() => OrderItemCreateOrConnectWithoutIngredientInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => OrderItemUpsertWithWhereUniqueWithoutIngredientInputSchema), z$2.lazy(() => OrderItemUpsertWithWhereUniqueWithoutIngredientInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => OrderItemCreateManyIngredientInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => OrderItemWhereUniqueInputSchema), z$2.lazy(() => OrderItemWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => OrderItemWhereUniqueInputSchema), z$2.lazy(() => OrderItemWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => OrderItemWhereUniqueInputSchema), z$2.lazy(() => OrderItemWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => OrderItemWhereUniqueInputSchema), z$2.lazy(() => OrderItemWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => OrderItemUpdateWithWhereUniqueWithoutIngredientInputSchema), z$2.lazy(() => OrderItemUpdateWithWhereUniqueWithoutIngredientInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => OrderItemUpdateManyWithWhereWithoutIngredientInputSchema), z$2.lazy(() => OrderItemUpdateManyWithWhereWithoutIngredientInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => OrderItemScalarWhereInputSchema), z$2.lazy(() => OrderItemScalarWhereInputSchema).array()]).optional()
}).strict();
var VendorUncheckedUpdateManyWithoutIngredientsNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => VendorCreateWithoutIngredientsInputSchema), z$2.lazy(() => VendorCreateWithoutIngredientsInputSchema).array(), z$2.lazy(() => VendorUncheckedCreateWithoutIngredientsInputSchema), z$2.lazy(() => VendorUncheckedCreateWithoutIngredientsInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => VendorCreateOrConnectWithoutIngredientsInputSchema), z$2.lazy(() => VendorCreateOrConnectWithoutIngredientsInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => VendorUpsertWithWhereUniqueWithoutIngredientsInputSchema), z$2.lazy(() => VendorUpsertWithWhereUniqueWithoutIngredientsInputSchema).array()]).optional(),
  set: z$2.union([z$2.lazy(() => VendorWhereUniqueInputSchema), z$2.lazy(() => VendorWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => VendorWhereUniqueInputSchema), z$2.lazy(() => VendorWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => VendorWhereUniqueInputSchema), z$2.lazy(() => VendorWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => VendorWhereUniqueInputSchema), z$2.lazy(() => VendorWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => VendorUpdateWithWhereUniqueWithoutIngredientsInputSchema), z$2.lazy(() => VendorUpdateWithWhereUniqueWithoutIngredientsInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => VendorUpdateManyWithWhereWithoutIngredientsInputSchema), z$2.lazy(() => VendorUpdateManyWithWhereWithoutIngredientsInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => VendorScalarWhereInputSchema), z$2.lazy(() => VendorScalarWhereInputSchema).array()]).optional()
}).strict();
var WasteRecordUncheckedUpdateManyWithoutIngredienteNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => WasteRecordCreateWithoutIngredienteInputSchema), z$2.lazy(() => WasteRecordCreateWithoutIngredienteInputSchema).array(), z$2.lazy(() => WasteRecordUncheckedCreateWithoutIngredienteInputSchema), z$2.lazy(() => WasteRecordUncheckedCreateWithoutIngredienteInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => WasteRecordCreateOrConnectWithoutIngredienteInputSchema), z$2.lazy(() => WasteRecordCreateOrConnectWithoutIngredienteInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => WasteRecordUpsertWithWhereUniqueWithoutIngredienteInputSchema), z$2.lazy(() => WasteRecordUpsertWithWhereUniqueWithoutIngredienteInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => WasteRecordCreateManyIngredienteInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => WasteRecordWhereUniqueInputSchema), z$2.lazy(() => WasteRecordWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => WasteRecordWhereUniqueInputSchema), z$2.lazy(() => WasteRecordWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => WasteRecordWhereUniqueInputSchema), z$2.lazy(() => WasteRecordWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => WasteRecordWhereUniqueInputSchema), z$2.lazy(() => WasteRecordWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => WasteRecordUpdateWithWhereUniqueWithoutIngredienteInputSchema), z$2.lazy(() => WasteRecordUpdateWithWhereUniqueWithoutIngredienteInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => WasteRecordUpdateManyWithWhereWithoutIngredienteInputSchema), z$2.lazy(() => WasteRecordUpdateManyWithWhereWithoutIngredienteInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => WasteRecordScalarWhereInputSchema), z$2.lazy(() => WasteRecordScalarWhereInputSchema).array()]).optional()
}).strict();
var IngredientAllergenUncheckedUpdateManyWithoutIngredientNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => IngredientAllergenCreateWithoutIngredientInputSchema), z$2.lazy(() => IngredientAllergenCreateWithoutIngredientInputSchema).array(), z$2.lazy(() => IngredientAllergenUncheckedCreateWithoutIngredientInputSchema), z$2.lazy(() => IngredientAllergenUncheckedCreateWithoutIngredientInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => IngredientAllergenCreateOrConnectWithoutIngredientInputSchema), z$2.lazy(() => IngredientAllergenCreateOrConnectWithoutIngredientInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => IngredientAllergenUpsertWithWhereUniqueWithoutIngredientInputSchema), z$2.lazy(() => IngredientAllergenUpsertWithWhereUniqueWithoutIngredientInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => IngredientAllergenCreateManyIngredientInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => IngredientAllergenWhereUniqueInputSchema), z$2.lazy(() => IngredientAllergenWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => IngredientAllergenWhereUniqueInputSchema), z$2.lazy(() => IngredientAllergenWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => IngredientAllergenWhereUniqueInputSchema), z$2.lazy(() => IngredientAllergenWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => IngredientAllergenWhereUniqueInputSchema), z$2.lazy(() => IngredientAllergenWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => IngredientAllergenUpdateWithWhereUniqueWithoutIngredientInputSchema), z$2.lazy(() => IngredientAllergenUpdateWithWhereUniqueWithoutIngredientInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => IngredientAllergenUpdateManyWithWhereWithoutIngredientInputSchema), z$2.lazy(() => IngredientAllergenUpdateManyWithWhereWithoutIngredientInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => IngredientAllergenScalarWhereInputSchema), z$2.lazy(() => IngredientAllergenScalarWhereInputSchema).array()]).optional()
}).strict();
var SupplierPriceHistoryUncheckedUpdateManyWithoutIngredientNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => SupplierPriceHistoryCreateWithoutIngredientInputSchema), z$2.lazy(() => SupplierPriceHistoryCreateWithoutIngredientInputSchema).array(), z$2.lazy(() => SupplierPriceHistoryUncheckedCreateWithoutIngredientInputSchema), z$2.lazy(() => SupplierPriceHistoryUncheckedCreateWithoutIngredientInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => SupplierPriceHistoryCreateOrConnectWithoutIngredientInputSchema), z$2.lazy(() => SupplierPriceHistoryCreateOrConnectWithoutIngredientInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => SupplierPriceHistoryUpsertWithWhereUniqueWithoutIngredientInputSchema), z$2.lazy(() => SupplierPriceHistoryUpsertWithWhereUniqueWithoutIngredientInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => SupplierPriceHistoryCreateManyIngredientInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema), z$2.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema), z$2.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema), z$2.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema), z$2.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => SupplierPriceHistoryUpdateWithWhereUniqueWithoutIngredientInputSchema), z$2.lazy(() => SupplierPriceHistoryUpdateWithWhereUniqueWithoutIngredientInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => SupplierPriceHistoryUpdateManyWithWhereWithoutIngredientInputSchema), z$2.lazy(() => SupplierPriceHistoryUpdateManyWithWhereWithoutIngredientInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => SupplierPriceHistoryScalarWhereInputSchema), z$2.lazy(() => SupplierPriceHistoryScalarWhereInputSchema).array()]).optional()
}).strict();
var RecipeCreateNestedOneWithoutIngredientsInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeCreateWithoutIngredientsInputSchema), z$2.lazy(() => RecipeUncheckedCreateWithoutIngredientsInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => RecipeCreateOrConnectWithoutIngredientsInputSchema).optional(),
  connect: z$2.lazy(() => RecipeWhereUniqueInputSchema).optional()
}).strict();
var IngredientCreateNestedOneWithoutRecipeIngredientsInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => IngredientCreateWithoutRecipeIngredientsInputSchema), z$2.lazy(() => IngredientUncheckedCreateWithoutRecipeIngredientsInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => IngredientCreateOrConnectWithoutRecipeIngredientsInputSchema).optional(),
  connect: z$2.lazy(() => IngredientWhereUniqueInputSchema).optional()
}).strict();
var RecipeVersionCreateNestedOneWithoutIngredientsInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeVersionCreateWithoutIngredientsInputSchema), z$2.lazy(() => RecipeVersionUncheckedCreateWithoutIngredientsInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => RecipeVersionCreateOrConnectWithoutIngredientsInputSchema).optional(),
  connect: z$2.lazy(() => RecipeVersionWhereUniqueInputSchema).optional()
}).strict();
var RecipeUpdateOneRequiredWithoutIngredientsNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeCreateWithoutIngredientsInputSchema), z$2.lazy(() => RecipeUncheckedCreateWithoutIngredientsInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => RecipeCreateOrConnectWithoutIngredientsInputSchema).optional(),
  upsert: z$2.lazy(() => RecipeUpsertWithoutIngredientsInputSchema).optional(),
  connect: z$2.lazy(() => RecipeWhereUniqueInputSchema).optional(),
  update: z$2.union([z$2.lazy(() => RecipeUpdateToOneWithWhereWithoutIngredientsInputSchema), z$2.lazy(() => RecipeUpdateWithoutIngredientsInputSchema), z$2.lazy(() => RecipeUncheckedUpdateWithoutIngredientsInputSchema)]).optional()
}).strict();
var IngredientUpdateOneRequiredWithoutRecipeIngredientsNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => IngredientCreateWithoutRecipeIngredientsInputSchema), z$2.lazy(() => IngredientUncheckedCreateWithoutRecipeIngredientsInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => IngredientCreateOrConnectWithoutRecipeIngredientsInputSchema).optional(),
  upsert: z$2.lazy(() => IngredientUpsertWithoutRecipeIngredientsInputSchema).optional(),
  connect: z$2.lazy(() => IngredientWhereUniqueInputSchema).optional(),
  update: z$2.union([z$2.lazy(() => IngredientUpdateToOneWithWhereWithoutRecipeIngredientsInputSchema), z$2.lazy(() => IngredientUpdateWithoutRecipeIngredientsInputSchema), z$2.lazy(() => IngredientUncheckedUpdateWithoutRecipeIngredientsInputSchema)]).optional()
}).strict();
var RecipeVersionUpdateOneWithoutIngredientsNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeVersionCreateWithoutIngredientsInputSchema), z$2.lazy(() => RecipeVersionUncheckedCreateWithoutIngredientsInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => RecipeVersionCreateOrConnectWithoutIngredientsInputSchema).optional(),
  upsert: z$2.lazy(() => RecipeVersionUpsertWithoutIngredientsInputSchema).optional(),
  disconnect: z$2.union([z$2.boolean(), z$2.lazy(() => RecipeVersionWhereInputSchema)]).optional(),
  delete: z$2.union([z$2.boolean(), z$2.lazy(() => RecipeVersionWhereInputSchema)]).optional(),
  connect: z$2.lazy(() => RecipeVersionWhereUniqueInputSchema).optional(),
  update: z$2.union([z$2.lazy(() => RecipeVersionUpdateToOneWithWhereWithoutIngredientsInputSchema), z$2.lazy(() => RecipeVersionUpdateWithoutIngredientsInputSchema), z$2.lazy(() => RecipeVersionUncheckedUpdateWithoutIngredientsInputSchema)]).optional()
}).strict();
var RecipeCreateNestedOneWithoutInstructionsInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeCreateWithoutInstructionsInputSchema), z$2.lazy(() => RecipeUncheckedCreateWithoutInstructionsInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => RecipeCreateOrConnectWithoutInstructionsInputSchema).optional(),
  connect: z$2.lazy(() => RecipeWhereUniqueInputSchema).optional()
}).strict();
var RecipeVersionCreateNestedOneWithoutInstructionsInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeVersionCreateWithoutInstructionsInputSchema), z$2.lazy(() => RecipeVersionUncheckedCreateWithoutInstructionsInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => RecipeVersionCreateOrConnectWithoutInstructionsInputSchema).optional(),
  connect: z$2.lazy(() => RecipeVersionWhereUniqueInputSchema).optional()
}).strict();
var RecipeUpdateOneRequiredWithoutInstructionsNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeCreateWithoutInstructionsInputSchema), z$2.lazy(() => RecipeUncheckedCreateWithoutInstructionsInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => RecipeCreateOrConnectWithoutInstructionsInputSchema).optional(),
  upsert: z$2.lazy(() => RecipeUpsertWithoutInstructionsInputSchema).optional(),
  connect: z$2.lazy(() => RecipeWhereUniqueInputSchema).optional(),
  update: z$2.union([z$2.lazy(() => RecipeUpdateToOneWithWhereWithoutInstructionsInputSchema), z$2.lazy(() => RecipeUpdateWithoutInstructionsInputSchema), z$2.lazy(() => RecipeUncheckedUpdateWithoutInstructionsInputSchema)]).optional()
}).strict();
var RecipeVersionUpdateOneWithoutInstructionsNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeVersionCreateWithoutInstructionsInputSchema), z$2.lazy(() => RecipeVersionUncheckedCreateWithoutInstructionsInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => RecipeVersionCreateOrConnectWithoutInstructionsInputSchema).optional(),
  upsert: z$2.lazy(() => RecipeVersionUpsertWithoutInstructionsInputSchema).optional(),
  disconnect: z$2.union([z$2.boolean(), z$2.lazy(() => RecipeVersionWhereInputSchema)]).optional(),
  delete: z$2.union([z$2.boolean(), z$2.lazy(() => RecipeVersionWhereInputSchema)]).optional(),
  connect: z$2.lazy(() => RecipeVersionWhereUniqueInputSchema).optional(),
  update: z$2.union([z$2.lazy(() => RecipeVersionUpdateToOneWithWhereWithoutInstructionsInputSchema), z$2.lazy(() => RecipeVersionUpdateWithoutInstructionsInputSchema), z$2.lazy(() => RecipeVersionUncheckedUpdateWithoutInstructionsInputSchema)]).optional()
}).strict();
var RestaurantCreateNestedOneWithoutInventoryInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RestaurantCreateWithoutInventoryInputSchema), z$2.lazy(() => RestaurantUncheckedCreateWithoutInventoryInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => RestaurantCreateOrConnectWithoutInventoryInputSchema).optional(),
  connect: z$2.lazy(() => RestaurantWhereUniqueInputSchema).optional()
}).strict();
var InventoryItemCreateNestedManyWithoutInventoryInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => InventoryItemCreateWithoutInventoryInputSchema), z$2.lazy(() => InventoryItemCreateWithoutInventoryInputSchema).array(), z$2.lazy(() => InventoryItemUncheckedCreateWithoutInventoryInputSchema), z$2.lazy(() => InventoryItemUncheckedCreateWithoutInventoryInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => InventoryItemCreateOrConnectWithoutInventoryInputSchema), z$2.lazy(() => InventoryItemCreateOrConnectWithoutInventoryInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => InventoryItemCreateManyInventoryInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => InventoryItemWhereUniqueInputSchema), z$2.lazy(() => InventoryItemWhereUniqueInputSchema).array()]).optional()
}).strict();
var InventoryItemUncheckedCreateNestedManyWithoutInventoryInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => InventoryItemCreateWithoutInventoryInputSchema), z$2.lazy(() => InventoryItemCreateWithoutInventoryInputSchema).array(), z$2.lazy(() => InventoryItemUncheckedCreateWithoutInventoryInputSchema), z$2.lazy(() => InventoryItemUncheckedCreateWithoutInventoryInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => InventoryItemCreateOrConnectWithoutInventoryInputSchema), z$2.lazy(() => InventoryItemCreateOrConnectWithoutInventoryInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => InventoryItemCreateManyInventoryInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => InventoryItemWhereUniqueInputSchema), z$2.lazy(() => InventoryItemWhereUniqueInputSchema).array()]).optional()
}).strict();
var RestaurantUpdateOneRequiredWithoutInventoryNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RestaurantCreateWithoutInventoryInputSchema), z$2.lazy(() => RestaurantUncheckedCreateWithoutInventoryInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => RestaurantCreateOrConnectWithoutInventoryInputSchema).optional(),
  upsert: z$2.lazy(() => RestaurantUpsertWithoutInventoryInputSchema).optional(),
  connect: z$2.lazy(() => RestaurantWhereUniqueInputSchema).optional(),
  update: z$2.union([z$2.lazy(() => RestaurantUpdateToOneWithWhereWithoutInventoryInputSchema), z$2.lazy(() => RestaurantUpdateWithoutInventoryInputSchema), z$2.lazy(() => RestaurantUncheckedUpdateWithoutInventoryInputSchema)]).optional()
}).strict();
var InventoryItemUpdateManyWithoutInventoryNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => InventoryItemCreateWithoutInventoryInputSchema), z$2.lazy(() => InventoryItemCreateWithoutInventoryInputSchema).array(), z$2.lazy(() => InventoryItemUncheckedCreateWithoutInventoryInputSchema), z$2.lazy(() => InventoryItemUncheckedCreateWithoutInventoryInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => InventoryItemCreateOrConnectWithoutInventoryInputSchema), z$2.lazy(() => InventoryItemCreateOrConnectWithoutInventoryInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => InventoryItemUpsertWithWhereUniqueWithoutInventoryInputSchema), z$2.lazy(() => InventoryItemUpsertWithWhereUniqueWithoutInventoryInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => InventoryItemCreateManyInventoryInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => InventoryItemWhereUniqueInputSchema), z$2.lazy(() => InventoryItemWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => InventoryItemWhereUniqueInputSchema), z$2.lazy(() => InventoryItemWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => InventoryItemWhereUniqueInputSchema), z$2.lazy(() => InventoryItemWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => InventoryItemWhereUniqueInputSchema), z$2.lazy(() => InventoryItemWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => InventoryItemUpdateWithWhereUniqueWithoutInventoryInputSchema), z$2.lazy(() => InventoryItemUpdateWithWhereUniqueWithoutInventoryInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => InventoryItemUpdateManyWithWhereWithoutInventoryInputSchema), z$2.lazy(() => InventoryItemUpdateManyWithWhereWithoutInventoryInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => InventoryItemScalarWhereInputSchema), z$2.lazy(() => InventoryItemScalarWhereInputSchema).array()]).optional()
}).strict();
var InventoryItemUncheckedUpdateManyWithoutInventoryNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => InventoryItemCreateWithoutInventoryInputSchema), z$2.lazy(() => InventoryItemCreateWithoutInventoryInputSchema).array(), z$2.lazy(() => InventoryItemUncheckedCreateWithoutInventoryInputSchema), z$2.lazy(() => InventoryItemUncheckedCreateWithoutInventoryInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => InventoryItemCreateOrConnectWithoutInventoryInputSchema), z$2.lazy(() => InventoryItemCreateOrConnectWithoutInventoryInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => InventoryItemUpsertWithWhereUniqueWithoutInventoryInputSchema), z$2.lazy(() => InventoryItemUpsertWithWhereUniqueWithoutInventoryInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => InventoryItemCreateManyInventoryInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => InventoryItemWhereUniqueInputSchema), z$2.lazy(() => InventoryItemWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => InventoryItemWhereUniqueInputSchema), z$2.lazy(() => InventoryItemWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => InventoryItemWhereUniqueInputSchema), z$2.lazy(() => InventoryItemWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => InventoryItemWhereUniqueInputSchema), z$2.lazy(() => InventoryItemWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => InventoryItemUpdateWithWhereUniqueWithoutInventoryInputSchema), z$2.lazy(() => InventoryItemUpdateWithWhereUniqueWithoutInventoryInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => InventoryItemUpdateManyWithWhereWithoutInventoryInputSchema), z$2.lazy(() => InventoryItemUpdateManyWithWhereWithoutInventoryInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => InventoryItemScalarWhereInputSchema), z$2.lazy(() => InventoryItemScalarWhereInputSchema).array()]).optional()
}).strict();
var InventoryCreateNestedOneWithoutItemsInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => InventoryCreateWithoutItemsInputSchema), z$2.lazy(() => InventoryUncheckedCreateWithoutItemsInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => InventoryCreateOrConnectWithoutItemsInputSchema).optional(),
  connect: z$2.lazy(() => InventoryWhereUniqueInputSchema).optional()
}).strict();
var IngredientCreateNestedOneWithoutInventoryItemsInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => IngredientCreateWithoutInventoryItemsInputSchema), z$2.lazy(() => IngredientUncheckedCreateWithoutInventoryItemsInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => IngredientCreateOrConnectWithoutInventoryItemsInputSchema).optional(),
  connect: z$2.lazy(() => IngredientWhereUniqueInputSchema).optional()
}).strict();
var UserCreateNestedOneWithoutInventoryUpdatesInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => UserCreateWithoutInventoryUpdatesInputSchema), z$2.lazy(() => UserUncheckedCreateWithoutInventoryUpdatesInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => UserCreateOrConnectWithoutInventoryUpdatesInputSchema).optional(),
  connect: z$2.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();
var InventoryWithdrawalCreateNestedManyWithoutInventoryItemInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => InventoryWithdrawalCreateWithoutInventoryItemInputSchema), z$2.lazy(() => InventoryWithdrawalCreateWithoutInventoryItemInputSchema).array(), z$2.lazy(() => InventoryWithdrawalUncheckedCreateWithoutInventoryItemInputSchema), z$2.lazy(() => InventoryWithdrawalUncheckedCreateWithoutInventoryItemInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => InventoryWithdrawalCreateOrConnectWithoutInventoryItemInputSchema), z$2.lazy(() => InventoryWithdrawalCreateOrConnectWithoutInventoryItemInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => InventoryWithdrawalCreateManyInventoryItemInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => InventoryWithdrawalWhereUniqueInputSchema), z$2.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array()]).optional()
}).strict();
var InventoryWithdrawalUncheckedCreateNestedManyWithoutInventoryItemInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => InventoryWithdrawalCreateWithoutInventoryItemInputSchema), z$2.lazy(() => InventoryWithdrawalCreateWithoutInventoryItemInputSchema).array(), z$2.lazy(() => InventoryWithdrawalUncheckedCreateWithoutInventoryItemInputSchema), z$2.lazy(() => InventoryWithdrawalUncheckedCreateWithoutInventoryItemInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => InventoryWithdrawalCreateOrConnectWithoutInventoryItemInputSchema), z$2.lazy(() => InventoryWithdrawalCreateOrConnectWithoutInventoryItemInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => InventoryWithdrawalCreateManyInventoryItemInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => InventoryWithdrawalWhereUniqueInputSchema), z$2.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array()]).optional()
}).strict();
var InventoryUpdateOneRequiredWithoutItemsNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => InventoryCreateWithoutItemsInputSchema), z$2.lazy(() => InventoryUncheckedCreateWithoutItemsInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => InventoryCreateOrConnectWithoutItemsInputSchema).optional(),
  upsert: z$2.lazy(() => InventoryUpsertWithoutItemsInputSchema).optional(),
  connect: z$2.lazy(() => InventoryWhereUniqueInputSchema).optional(),
  update: z$2.union([z$2.lazy(() => InventoryUpdateToOneWithWhereWithoutItemsInputSchema), z$2.lazy(() => InventoryUpdateWithoutItemsInputSchema), z$2.lazy(() => InventoryUncheckedUpdateWithoutItemsInputSchema)]).optional()
}).strict();
var IngredientUpdateOneRequiredWithoutInventoryItemsNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => IngredientCreateWithoutInventoryItemsInputSchema), z$2.lazy(() => IngredientUncheckedCreateWithoutInventoryItemsInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => IngredientCreateOrConnectWithoutInventoryItemsInputSchema).optional(),
  upsert: z$2.lazy(() => IngredientUpsertWithoutInventoryItemsInputSchema).optional(),
  connect: z$2.lazy(() => IngredientWhereUniqueInputSchema).optional(),
  update: z$2.union([z$2.lazy(() => IngredientUpdateToOneWithWhereWithoutInventoryItemsInputSchema), z$2.lazy(() => IngredientUpdateWithoutInventoryItemsInputSchema), z$2.lazy(() => IngredientUncheckedUpdateWithoutInventoryItemsInputSchema)]).optional()
}).strict();
var UserUpdateOneWithoutInventoryUpdatesNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => UserCreateWithoutInventoryUpdatesInputSchema), z$2.lazy(() => UserUncheckedCreateWithoutInventoryUpdatesInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => UserCreateOrConnectWithoutInventoryUpdatesInputSchema).optional(),
  upsert: z$2.lazy(() => UserUpsertWithoutInventoryUpdatesInputSchema).optional(),
  disconnect: z$2.union([z$2.boolean(), z$2.lazy(() => UserWhereInputSchema)]).optional(),
  delete: z$2.union([z$2.boolean(), z$2.lazy(() => UserWhereInputSchema)]).optional(),
  connect: z$2.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z$2.union([z$2.lazy(() => UserUpdateToOneWithWhereWithoutInventoryUpdatesInputSchema), z$2.lazy(() => UserUpdateWithoutInventoryUpdatesInputSchema), z$2.lazy(() => UserUncheckedUpdateWithoutInventoryUpdatesInputSchema)]).optional()
}).strict();
var InventoryWithdrawalUpdateManyWithoutInventoryItemNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => InventoryWithdrawalCreateWithoutInventoryItemInputSchema), z$2.lazy(() => InventoryWithdrawalCreateWithoutInventoryItemInputSchema).array(), z$2.lazy(() => InventoryWithdrawalUncheckedCreateWithoutInventoryItemInputSchema), z$2.lazy(() => InventoryWithdrawalUncheckedCreateWithoutInventoryItemInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => InventoryWithdrawalCreateOrConnectWithoutInventoryItemInputSchema), z$2.lazy(() => InventoryWithdrawalCreateOrConnectWithoutInventoryItemInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => InventoryWithdrawalUpsertWithWhereUniqueWithoutInventoryItemInputSchema), z$2.lazy(() => InventoryWithdrawalUpsertWithWhereUniqueWithoutInventoryItemInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => InventoryWithdrawalCreateManyInventoryItemInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => InventoryWithdrawalWhereUniqueInputSchema), z$2.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => InventoryWithdrawalWhereUniqueInputSchema), z$2.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => InventoryWithdrawalWhereUniqueInputSchema), z$2.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => InventoryWithdrawalWhereUniqueInputSchema), z$2.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => InventoryWithdrawalUpdateWithWhereUniqueWithoutInventoryItemInputSchema), z$2.lazy(() => InventoryWithdrawalUpdateWithWhereUniqueWithoutInventoryItemInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => InventoryWithdrawalUpdateManyWithWhereWithoutInventoryItemInputSchema), z$2.lazy(() => InventoryWithdrawalUpdateManyWithWhereWithoutInventoryItemInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => InventoryWithdrawalScalarWhereInputSchema), z$2.lazy(() => InventoryWithdrawalScalarWhereInputSchema).array()]).optional()
}).strict();
var InventoryWithdrawalUncheckedUpdateManyWithoutInventoryItemNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => InventoryWithdrawalCreateWithoutInventoryItemInputSchema), z$2.lazy(() => InventoryWithdrawalCreateWithoutInventoryItemInputSchema).array(), z$2.lazy(() => InventoryWithdrawalUncheckedCreateWithoutInventoryItemInputSchema), z$2.lazy(() => InventoryWithdrawalUncheckedCreateWithoutInventoryItemInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => InventoryWithdrawalCreateOrConnectWithoutInventoryItemInputSchema), z$2.lazy(() => InventoryWithdrawalCreateOrConnectWithoutInventoryItemInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => InventoryWithdrawalUpsertWithWhereUniqueWithoutInventoryItemInputSchema), z$2.lazy(() => InventoryWithdrawalUpsertWithWhereUniqueWithoutInventoryItemInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => InventoryWithdrawalCreateManyInventoryItemInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => InventoryWithdrawalWhereUniqueInputSchema), z$2.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => InventoryWithdrawalWhereUniqueInputSchema), z$2.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => InventoryWithdrawalWhereUniqueInputSchema), z$2.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => InventoryWithdrawalWhereUniqueInputSchema), z$2.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => InventoryWithdrawalUpdateWithWhereUniqueWithoutInventoryItemInputSchema), z$2.lazy(() => InventoryWithdrawalUpdateWithWhereUniqueWithoutInventoryItemInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => InventoryWithdrawalUpdateManyWithWhereWithoutInventoryItemInputSchema), z$2.lazy(() => InventoryWithdrawalUpdateManyWithWhereWithoutInventoryItemInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => InventoryWithdrawalScalarWhereInputSchema), z$2.lazy(() => InventoryWithdrawalScalarWhereInputSchema).array()]).optional()
}).strict();
var RestaurantCreateNestedOneWithoutOrdersInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RestaurantCreateWithoutOrdersInputSchema), z$2.lazy(() => RestaurantUncheckedCreateWithoutOrdersInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => RestaurantCreateOrConnectWithoutOrdersInputSchema).optional(),
  connect: z$2.lazy(() => RestaurantWhereUniqueInputSchema).optional()
}).strict();
var VendorCreateNestedOneWithoutOrdersInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => VendorCreateWithoutOrdersInputSchema), z$2.lazy(() => VendorUncheckedCreateWithoutOrdersInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => VendorCreateOrConnectWithoutOrdersInputSchema).optional(),
  connect: z$2.lazy(() => VendorWhereUniqueInputSchema).optional()
}).strict();
var OrderItemCreateNestedManyWithoutOrderInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => OrderItemCreateWithoutOrderInputSchema), z$2.lazy(() => OrderItemCreateWithoutOrderInputSchema).array(), z$2.lazy(() => OrderItemUncheckedCreateWithoutOrderInputSchema), z$2.lazy(() => OrderItemUncheckedCreateWithoutOrderInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => OrderItemCreateOrConnectWithoutOrderInputSchema), z$2.lazy(() => OrderItemCreateOrConnectWithoutOrderInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => OrderItemCreateManyOrderInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => OrderItemWhereUniqueInputSchema), z$2.lazy(() => OrderItemWhereUniqueInputSchema).array()]).optional()
}).strict();
var OrderItemUncheckedCreateNestedManyWithoutOrderInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => OrderItemCreateWithoutOrderInputSchema), z$2.lazy(() => OrderItemCreateWithoutOrderInputSchema).array(), z$2.lazy(() => OrderItemUncheckedCreateWithoutOrderInputSchema), z$2.lazy(() => OrderItemUncheckedCreateWithoutOrderInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => OrderItemCreateOrConnectWithoutOrderInputSchema), z$2.lazy(() => OrderItemCreateOrConnectWithoutOrderInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => OrderItemCreateManyOrderInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => OrderItemWhereUniqueInputSchema), z$2.lazy(() => OrderItemWhereUniqueInputSchema).array()]).optional()
}).strict();
var EnumOrderStatusFieldUpdateOperationsInputSchema = z$2.object({
  set: z$2.lazy(() => OrderStatusSchema).optional()
}).strict();
var RestaurantUpdateOneRequiredWithoutOrdersNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RestaurantCreateWithoutOrdersInputSchema), z$2.lazy(() => RestaurantUncheckedCreateWithoutOrdersInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => RestaurantCreateOrConnectWithoutOrdersInputSchema).optional(),
  upsert: z$2.lazy(() => RestaurantUpsertWithoutOrdersInputSchema).optional(),
  connect: z$2.lazy(() => RestaurantWhereUniqueInputSchema).optional(),
  update: z$2.union([z$2.lazy(() => RestaurantUpdateToOneWithWhereWithoutOrdersInputSchema), z$2.lazy(() => RestaurantUpdateWithoutOrdersInputSchema), z$2.lazy(() => RestaurantUncheckedUpdateWithoutOrdersInputSchema)]).optional()
}).strict();
var VendorUpdateOneRequiredWithoutOrdersNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => VendorCreateWithoutOrdersInputSchema), z$2.lazy(() => VendorUncheckedCreateWithoutOrdersInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => VendorCreateOrConnectWithoutOrdersInputSchema).optional(),
  upsert: z$2.lazy(() => VendorUpsertWithoutOrdersInputSchema).optional(),
  connect: z$2.lazy(() => VendorWhereUniqueInputSchema).optional(),
  update: z$2.union([z$2.lazy(() => VendorUpdateToOneWithWhereWithoutOrdersInputSchema), z$2.lazy(() => VendorUpdateWithoutOrdersInputSchema), z$2.lazy(() => VendorUncheckedUpdateWithoutOrdersInputSchema)]).optional()
}).strict();
var OrderItemUpdateManyWithoutOrderNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => OrderItemCreateWithoutOrderInputSchema), z$2.lazy(() => OrderItemCreateWithoutOrderInputSchema).array(), z$2.lazy(() => OrderItemUncheckedCreateWithoutOrderInputSchema), z$2.lazy(() => OrderItemUncheckedCreateWithoutOrderInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => OrderItemCreateOrConnectWithoutOrderInputSchema), z$2.lazy(() => OrderItemCreateOrConnectWithoutOrderInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => OrderItemUpsertWithWhereUniqueWithoutOrderInputSchema), z$2.lazy(() => OrderItemUpsertWithWhereUniqueWithoutOrderInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => OrderItemCreateManyOrderInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => OrderItemWhereUniqueInputSchema), z$2.lazy(() => OrderItemWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => OrderItemWhereUniqueInputSchema), z$2.lazy(() => OrderItemWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => OrderItemWhereUniqueInputSchema), z$2.lazy(() => OrderItemWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => OrderItemWhereUniqueInputSchema), z$2.lazy(() => OrderItemWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => OrderItemUpdateWithWhereUniqueWithoutOrderInputSchema), z$2.lazy(() => OrderItemUpdateWithWhereUniqueWithoutOrderInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => OrderItemUpdateManyWithWhereWithoutOrderInputSchema), z$2.lazy(() => OrderItemUpdateManyWithWhereWithoutOrderInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => OrderItemScalarWhereInputSchema), z$2.lazy(() => OrderItemScalarWhereInputSchema).array()]).optional()
}).strict();
var OrderItemUncheckedUpdateManyWithoutOrderNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => OrderItemCreateWithoutOrderInputSchema), z$2.lazy(() => OrderItemCreateWithoutOrderInputSchema).array(), z$2.lazy(() => OrderItemUncheckedCreateWithoutOrderInputSchema), z$2.lazy(() => OrderItemUncheckedCreateWithoutOrderInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => OrderItemCreateOrConnectWithoutOrderInputSchema), z$2.lazy(() => OrderItemCreateOrConnectWithoutOrderInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => OrderItemUpsertWithWhereUniqueWithoutOrderInputSchema), z$2.lazy(() => OrderItemUpsertWithWhereUniqueWithoutOrderInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => OrderItemCreateManyOrderInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => OrderItemWhereUniqueInputSchema), z$2.lazy(() => OrderItemWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => OrderItemWhereUniqueInputSchema), z$2.lazy(() => OrderItemWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => OrderItemWhereUniqueInputSchema), z$2.lazy(() => OrderItemWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => OrderItemWhereUniqueInputSchema), z$2.lazy(() => OrderItemWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => OrderItemUpdateWithWhereUniqueWithoutOrderInputSchema), z$2.lazy(() => OrderItemUpdateWithWhereUniqueWithoutOrderInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => OrderItemUpdateManyWithWhereWithoutOrderInputSchema), z$2.lazy(() => OrderItemUpdateManyWithWhereWithoutOrderInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => OrderItemScalarWhereInputSchema), z$2.lazy(() => OrderItemScalarWhereInputSchema).array()]).optional()
}).strict();
var OrderCreateNestedOneWithoutItemsInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => OrderCreateWithoutItemsInputSchema), z$2.lazy(() => OrderUncheckedCreateWithoutItemsInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => OrderCreateOrConnectWithoutItemsInputSchema).optional(),
  connect: z$2.lazy(() => OrderWhereUniqueInputSchema).optional()
}).strict();
var IngredientCreateNestedOneWithoutOrderItemsInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => IngredientCreateWithoutOrderItemsInputSchema), z$2.lazy(() => IngredientUncheckedCreateWithoutOrderItemsInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => IngredientCreateOrConnectWithoutOrderItemsInputSchema).optional(),
  connect: z$2.lazy(() => IngredientWhereUniqueInputSchema).optional()
}).strict();
var OrderUpdateOneRequiredWithoutItemsNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => OrderCreateWithoutItemsInputSchema), z$2.lazy(() => OrderUncheckedCreateWithoutItemsInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => OrderCreateOrConnectWithoutItemsInputSchema).optional(),
  upsert: z$2.lazy(() => OrderUpsertWithoutItemsInputSchema).optional(),
  connect: z$2.lazy(() => OrderWhereUniqueInputSchema).optional(),
  update: z$2.union([z$2.lazy(() => OrderUpdateToOneWithWhereWithoutItemsInputSchema), z$2.lazy(() => OrderUpdateWithoutItemsInputSchema), z$2.lazy(() => OrderUncheckedUpdateWithoutItemsInputSchema)]).optional()
}).strict();
var IngredientUpdateOneRequiredWithoutOrderItemsNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => IngredientCreateWithoutOrderItemsInputSchema), z$2.lazy(() => IngredientUncheckedCreateWithoutOrderItemsInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => IngredientCreateOrConnectWithoutOrderItemsInputSchema).optional(),
  upsert: z$2.lazy(() => IngredientUpsertWithoutOrderItemsInputSchema).optional(),
  connect: z$2.lazy(() => IngredientWhereUniqueInputSchema).optional(),
  update: z$2.union([z$2.lazy(() => IngredientUpdateToOneWithWhereWithoutOrderItemsInputSchema), z$2.lazy(() => IngredientUpdateWithoutOrderItemsInputSchema), z$2.lazy(() => IngredientUncheckedUpdateWithoutOrderItemsInputSchema)]).optional()
}).strict();
var OrderCreateNestedManyWithoutVendorInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => OrderCreateWithoutVendorInputSchema), z$2.lazy(() => OrderCreateWithoutVendorInputSchema).array(), z$2.lazy(() => OrderUncheckedCreateWithoutVendorInputSchema), z$2.lazy(() => OrderUncheckedCreateWithoutVendorInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => OrderCreateOrConnectWithoutVendorInputSchema), z$2.lazy(() => OrderCreateOrConnectWithoutVendorInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => OrderCreateManyVendorInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => OrderWhereUniqueInputSchema), z$2.lazy(() => OrderWhereUniqueInputSchema).array()]).optional()
}).strict();
var IngredientCreateNestedManyWithoutVendorsInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => IngredientCreateWithoutVendorsInputSchema), z$2.lazy(() => IngredientCreateWithoutVendorsInputSchema).array(), z$2.lazy(() => IngredientUncheckedCreateWithoutVendorsInputSchema), z$2.lazy(() => IngredientUncheckedCreateWithoutVendorsInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => IngredientCreateOrConnectWithoutVendorsInputSchema), z$2.lazy(() => IngredientCreateOrConnectWithoutVendorsInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => IngredientWhereUniqueInputSchema), z$2.lazy(() => IngredientWhereUniqueInputSchema).array()]).optional()
}).strict();
var SupplierPriceHistoryCreateNestedManyWithoutVendorInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => SupplierPriceHistoryCreateWithoutVendorInputSchema), z$2.lazy(() => SupplierPriceHistoryCreateWithoutVendorInputSchema).array(), z$2.lazy(() => SupplierPriceHistoryUncheckedCreateWithoutVendorInputSchema), z$2.lazy(() => SupplierPriceHistoryUncheckedCreateWithoutVendorInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => SupplierPriceHistoryCreateOrConnectWithoutVendorInputSchema), z$2.lazy(() => SupplierPriceHistoryCreateOrConnectWithoutVendorInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => SupplierPriceHistoryCreateManyVendorInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema), z$2.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema).array()]).optional()
}).strict();
var OrderUncheckedCreateNestedManyWithoutVendorInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => OrderCreateWithoutVendorInputSchema), z$2.lazy(() => OrderCreateWithoutVendorInputSchema).array(), z$2.lazy(() => OrderUncheckedCreateWithoutVendorInputSchema), z$2.lazy(() => OrderUncheckedCreateWithoutVendorInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => OrderCreateOrConnectWithoutVendorInputSchema), z$2.lazy(() => OrderCreateOrConnectWithoutVendorInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => OrderCreateManyVendorInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => OrderWhereUniqueInputSchema), z$2.lazy(() => OrderWhereUniqueInputSchema).array()]).optional()
}).strict();
var IngredientUncheckedCreateNestedManyWithoutVendorsInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => IngredientCreateWithoutVendorsInputSchema), z$2.lazy(() => IngredientCreateWithoutVendorsInputSchema).array(), z$2.lazy(() => IngredientUncheckedCreateWithoutVendorsInputSchema), z$2.lazy(() => IngredientUncheckedCreateWithoutVendorsInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => IngredientCreateOrConnectWithoutVendorsInputSchema), z$2.lazy(() => IngredientCreateOrConnectWithoutVendorsInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => IngredientWhereUniqueInputSchema), z$2.lazy(() => IngredientWhereUniqueInputSchema).array()]).optional()
}).strict();
var SupplierPriceHistoryUncheckedCreateNestedManyWithoutVendorInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => SupplierPriceHistoryCreateWithoutVendorInputSchema), z$2.lazy(() => SupplierPriceHistoryCreateWithoutVendorInputSchema).array(), z$2.lazy(() => SupplierPriceHistoryUncheckedCreateWithoutVendorInputSchema), z$2.lazy(() => SupplierPriceHistoryUncheckedCreateWithoutVendorInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => SupplierPriceHistoryCreateOrConnectWithoutVendorInputSchema), z$2.lazy(() => SupplierPriceHistoryCreateOrConnectWithoutVendorInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => SupplierPriceHistoryCreateManyVendorInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema), z$2.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema).array()]).optional()
}).strict();
var OrderUpdateManyWithoutVendorNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => OrderCreateWithoutVendorInputSchema), z$2.lazy(() => OrderCreateWithoutVendorInputSchema).array(), z$2.lazy(() => OrderUncheckedCreateWithoutVendorInputSchema), z$2.lazy(() => OrderUncheckedCreateWithoutVendorInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => OrderCreateOrConnectWithoutVendorInputSchema), z$2.lazy(() => OrderCreateOrConnectWithoutVendorInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => OrderUpsertWithWhereUniqueWithoutVendorInputSchema), z$2.lazy(() => OrderUpsertWithWhereUniqueWithoutVendorInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => OrderCreateManyVendorInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => OrderWhereUniqueInputSchema), z$2.lazy(() => OrderWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => OrderWhereUniqueInputSchema), z$2.lazy(() => OrderWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => OrderWhereUniqueInputSchema), z$2.lazy(() => OrderWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => OrderWhereUniqueInputSchema), z$2.lazy(() => OrderWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => OrderUpdateWithWhereUniqueWithoutVendorInputSchema), z$2.lazy(() => OrderUpdateWithWhereUniqueWithoutVendorInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => OrderUpdateManyWithWhereWithoutVendorInputSchema), z$2.lazy(() => OrderUpdateManyWithWhereWithoutVendorInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => OrderScalarWhereInputSchema), z$2.lazy(() => OrderScalarWhereInputSchema).array()]).optional()
}).strict();
var IngredientUpdateManyWithoutVendorsNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => IngredientCreateWithoutVendorsInputSchema), z$2.lazy(() => IngredientCreateWithoutVendorsInputSchema).array(), z$2.lazy(() => IngredientUncheckedCreateWithoutVendorsInputSchema), z$2.lazy(() => IngredientUncheckedCreateWithoutVendorsInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => IngredientCreateOrConnectWithoutVendorsInputSchema), z$2.lazy(() => IngredientCreateOrConnectWithoutVendorsInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => IngredientUpsertWithWhereUniqueWithoutVendorsInputSchema), z$2.lazy(() => IngredientUpsertWithWhereUniqueWithoutVendorsInputSchema).array()]).optional(),
  set: z$2.union([z$2.lazy(() => IngredientWhereUniqueInputSchema), z$2.lazy(() => IngredientWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => IngredientWhereUniqueInputSchema), z$2.lazy(() => IngredientWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => IngredientWhereUniqueInputSchema), z$2.lazy(() => IngredientWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => IngredientWhereUniqueInputSchema), z$2.lazy(() => IngredientWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => IngredientUpdateWithWhereUniqueWithoutVendorsInputSchema), z$2.lazy(() => IngredientUpdateWithWhereUniqueWithoutVendorsInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => IngredientUpdateManyWithWhereWithoutVendorsInputSchema), z$2.lazy(() => IngredientUpdateManyWithWhereWithoutVendorsInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => IngredientScalarWhereInputSchema), z$2.lazy(() => IngredientScalarWhereInputSchema).array()]).optional()
}).strict();
var SupplierPriceHistoryUpdateManyWithoutVendorNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => SupplierPriceHistoryCreateWithoutVendorInputSchema), z$2.lazy(() => SupplierPriceHistoryCreateWithoutVendorInputSchema).array(), z$2.lazy(() => SupplierPriceHistoryUncheckedCreateWithoutVendorInputSchema), z$2.lazy(() => SupplierPriceHistoryUncheckedCreateWithoutVendorInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => SupplierPriceHistoryCreateOrConnectWithoutVendorInputSchema), z$2.lazy(() => SupplierPriceHistoryCreateOrConnectWithoutVendorInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => SupplierPriceHistoryUpsertWithWhereUniqueWithoutVendorInputSchema), z$2.lazy(() => SupplierPriceHistoryUpsertWithWhereUniqueWithoutVendorInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => SupplierPriceHistoryCreateManyVendorInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema), z$2.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema), z$2.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema), z$2.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema), z$2.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => SupplierPriceHistoryUpdateWithWhereUniqueWithoutVendorInputSchema), z$2.lazy(() => SupplierPriceHistoryUpdateWithWhereUniqueWithoutVendorInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => SupplierPriceHistoryUpdateManyWithWhereWithoutVendorInputSchema), z$2.lazy(() => SupplierPriceHistoryUpdateManyWithWhereWithoutVendorInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => SupplierPriceHistoryScalarWhereInputSchema), z$2.lazy(() => SupplierPriceHistoryScalarWhereInputSchema).array()]).optional()
}).strict();
var OrderUncheckedUpdateManyWithoutVendorNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => OrderCreateWithoutVendorInputSchema), z$2.lazy(() => OrderCreateWithoutVendorInputSchema).array(), z$2.lazy(() => OrderUncheckedCreateWithoutVendorInputSchema), z$2.lazy(() => OrderUncheckedCreateWithoutVendorInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => OrderCreateOrConnectWithoutVendorInputSchema), z$2.lazy(() => OrderCreateOrConnectWithoutVendorInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => OrderUpsertWithWhereUniqueWithoutVendorInputSchema), z$2.lazy(() => OrderUpsertWithWhereUniqueWithoutVendorInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => OrderCreateManyVendorInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => OrderWhereUniqueInputSchema), z$2.lazy(() => OrderWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => OrderWhereUniqueInputSchema), z$2.lazy(() => OrderWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => OrderWhereUniqueInputSchema), z$2.lazy(() => OrderWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => OrderWhereUniqueInputSchema), z$2.lazy(() => OrderWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => OrderUpdateWithWhereUniqueWithoutVendorInputSchema), z$2.lazy(() => OrderUpdateWithWhereUniqueWithoutVendorInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => OrderUpdateManyWithWhereWithoutVendorInputSchema), z$2.lazy(() => OrderUpdateManyWithWhereWithoutVendorInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => OrderScalarWhereInputSchema), z$2.lazy(() => OrderScalarWhereInputSchema).array()]).optional()
}).strict();
var IngredientUncheckedUpdateManyWithoutVendorsNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => IngredientCreateWithoutVendorsInputSchema), z$2.lazy(() => IngredientCreateWithoutVendorsInputSchema).array(), z$2.lazy(() => IngredientUncheckedCreateWithoutVendorsInputSchema), z$2.lazy(() => IngredientUncheckedCreateWithoutVendorsInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => IngredientCreateOrConnectWithoutVendorsInputSchema), z$2.lazy(() => IngredientCreateOrConnectWithoutVendorsInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => IngredientUpsertWithWhereUniqueWithoutVendorsInputSchema), z$2.lazy(() => IngredientUpsertWithWhereUniqueWithoutVendorsInputSchema).array()]).optional(),
  set: z$2.union([z$2.lazy(() => IngredientWhereUniqueInputSchema), z$2.lazy(() => IngredientWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => IngredientWhereUniqueInputSchema), z$2.lazy(() => IngredientWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => IngredientWhereUniqueInputSchema), z$2.lazy(() => IngredientWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => IngredientWhereUniqueInputSchema), z$2.lazy(() => IngredientWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => IngredientUpdateWithWhereUniqueWithoutVendorsInputSchema), z$2.lazy(() => IngredientUpdateWithWhereUniqueWithoutVendorsInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => IngredientUpdateManyWithWhereWithoutVendorsInputSchema), z$2.lazy(() => IngredientUpdateManyWithWhereWithoutVendorsInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => IngredientScalarWhereInputSchema), z$2.lazy(() => IngredientScalarWhereInputSchema).array()]).optional()
}).strict();
var SupplierPriceHistoryUncheckedUpdateManyWithoutVendorNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => SupplierPriceHistoryCreateWithoutVendorInputSchema), z$2.lazy(() => SupplierPriceHistoryCreateWithoutVendorInputSchema).array(), z$2.lazy(() => SupplierPriceHistoryUncheckedCreateWithoutVendorInputSchema), z$2.lazy(() => SupplierPriceHistoryUncheckedCreateWithoutVendorInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => SupplierPriceHistoryCreateOrConnectWithoutVendorInputSchema), z$2.lazy(() => SupplierPriceHistoryCreateOrConnectWithoutVendorInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => SupplierPriceHistoryUpsertWithWhereUniqueWithoutVendorInputSchema), z$2.lazy(() => SupplierPriceHistoryUpsertWithWhereUniqueWithoutVendorInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => SupplierPriceHistoryCreateManyVendorInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema), z$2.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema), z$2.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema), z$2.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema), z$2.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => SupplierPriceHistoryUpdateWithWhereUniqueWithoutVendorInputSchema), z$2.lazy(() => SupplierPriceHistoryUpdateWithWhereUniqueWithoutVendorInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => SupplierPriceHistoryUpdateManyWithWhereWithoutVendorInputSchema), z$2.lazy(() => SupplierPriceHistoryUpdateManyWithWhereWithoutVendorInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => SupplierPriceHistoryScalarWhereInputSchema), z$2.lazy(() => SupplierPriceHistoryScalarWhereInputSchema).array()]).optional()
}).strict();
var UserCreateNestedOneWithoutShiftsInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => UserCreateWithoutShiftsInputSchema), z$2.lazy(() => UserUncheckedCreateWithoutShiftsInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => UserCreateOrConnectWithoutShiftsInputSchema).optional(),
  connect: z$2.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();
var ShiftTaskCreateNestedManyWithoutShiftInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => ShiftTaskCreateWithoutShiftInputSchema), z$2.lazy(() => ShiftTaskCreateWithoutShiftInputSchema).array(), z$2.lazy(() => ShiftTaskUncheckedCreateWithoutShiftInputSchema), z$2.lazy(() => ShiftTaskUncheckedCreateWithoutShiftInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => ShiftTaskCreateOrConnectWithoutShiftInputSchema), z$2.lazy(() => ShiftTaskCreateOrConnectWithoutShiftInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => ShiftTaskCreateManyShiftInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => ShiftTaskWhereUniqueInputSchema), z$2.lazy(() => ShiftTaskWhereUniqueInputSchema).array()]).optional()
}).strict();
var ShiftTaskUncheckedCreateNestedManyWithoutShiftInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => ShiftTaskCreateWithoutShiftInputSchema), z$2.lazy(() => ShiftTaskCreateWithoutShiftInputSchema).array(), z$2.lazy(() => ShiftTaskUncheckedCreateWithoutShiftInputSchema), z$2.lazy(() => ShiftTaskUncheckedCreateWithoutShiftInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => ShiftTaskCreateOrConnectWithoutShiftInputSchema), z$2.lazy(() => ShiftTaskCreateOrConnectWithoutShiftInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => ShiftTaskCreateManyShiftInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => ShiftTaskWhereUniqueInputSchema), z$2.lazy(() => ShiftTaskWhereUniqueInputSchema).array()]).optional()
}).strict();
var EnumShiftStatusFieldUpdateOperationsInputSchema = z$2.object({
  set: z$2.lazy(() => ShiftStatusSchema).optional()
}).strict();
var UserUpdateOneRequiredWithoutShiftsNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => UserCreateWithoutShiftsInputSchema), z$2.lazy(() => UserUncheckedCreateWithoutShiftsInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => UserCreateOrConnectWithoutShiftsInputSchema).optional(),
  upsert: z$2.lazy(() => UserUpsertWithoutShiftsInputSchema).optional(),
  connect: z$2.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z$2.union([z$2.lazy(() => UserUpdateToOneWithWhereWithoutShiftsInputSchema), z$2.lazy(() => UserUpdateWithoutShiftsInputSchema), z$2.lazy(() => UserUncheckedUpdateWithoutShiftsInputSchema)]).optional()
}).strict();
var ShiftTaskUpdateManyWithoutShiftNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => ShiftTaskCreateWithoutShiftInputSchema), z$2.lazy(() => ShiftTaskCreateWithoutShiftInputSchema).array(), z$2.lazy(() => ShiftTaskUncheckedCreateWithoutShiftInputSchema), z$2.lazy(() => ShiftTaskUncheckedCreateWithoutShiftInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => ShiftTaskCreateOrConnectWithoutShiftInputSchema), z$2.lazy(() => ShiftTaskCreateOrConnectWithoutShiftInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => ShiftTaskUpsertWithWhereUniqueWithoutShiftInputSchema), z$2.lazy(() => ShiftTaskUpsertWithWhereUniqueWithoutShiftInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => ShiftTaskCreateManyShiftInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => ShiftTaskWhereUniqueInputSchema), z$2.lazy(() => ShiftTaskWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => ShiftTaskWhereUniqueInputSchema), z$2.lazy(() => ShiftTaskWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => ShiftTaskWhereUniqueInputSchema), z$2.lazy(() => ShiftTaskWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => ShiftTaskWhereUniqueInputSchema), z$2.lazy(() => ShiftTaskWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => ShiftTaskUpdateWithWhereUniqueWithoutShiftInputSchema), z$2.lazy(() => ShiftTaskUpdateWithWhereUniqueWithoutShiftInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => ShiftTaskUpdateManyWithWhereWithoutShiftInputSchema), z$2.lazy(() => ShiftTaskUpdateManyWithWhereWithoutShiftInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => ShiftTaskScalarWhereInputSchema), z$2.lazy(() => ShiftTaskScalarWhereInputSchema).array()]).optional()
}).strict();
var ShiftTaskUncheckedUpdateManyWithoutShiftNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => ShiftTaskCreateWithoutShiftInputSchema), z$2.lazy(() => ShiftTaskCreateWithoutShiftInputSchema).array(), z$2.lazy(() => ShiftTaskUncheckedCreateWithoutShiftInputSchema), z$2.lazy(() => ShiftTaskUncheckedCreateWithoutShiftInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => ShiftTaskCreateOrConnectWithoutShiftInputSchema), z$2.lazy(() => ShiftTaskCreateOrConnectWithoutShiftInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => ShiftTaskUpsertWithWhereUniqueWithoutShiftInputSchema), z$2.lazy(() => ShiftTaskUpsertWithWhereUniqueWithoutShiftInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => ShiftTaskCreateManyShiftInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => ShiftTaskWhereUniqueInputSchema), z$2.lazy(() => ShiftTaskWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => ShiftTaskWhereUniqueInputSchema), z$2.lazy(() => ShiftTaskWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => ShiftTaskWhereUniqueInputSchema), z$2.lazy(() => ShiftTaskWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => ShiftTaskWhereUniqueInputSchema), z$2.lazy(() => ShiftTaskWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => ShiftTaskUpdateWithWhereUniqueWithoutShiftInputSchema), z$2.lazy(() => ShiftTaskUpdateWithWhereUniqueWithoutShiftInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => ShiftTaskUpdateManyWithWhereWithoutShiftInputSchema), z$2.lazy(() => ShiftTaskUpdateManyWithWhereWithoutShiftInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => ShiftTaskScalarWhereInputSchema), z$2.lazy(() => ShiftTaskScalarWhereInputSchema).array()]).optional()
}).strict();
var RecipeCreateNestedManyWithoutPrepBoardsInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeCreateWithoutPrepBoardsInputSchema), z$2.lazy(() => RecipeCreateWithoutPrepBoardsInputSchema).array(), z$2.lazy(() => RecipeUncheckedCreateWithoutPrepBoardsInputSchema), z$2.lazy(() => RecipeUncheckedCreateWithoutPrepBoardsInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => RecipeCreateOrConnectWithoutPrepBoardsInputSchema), z$2.lazy(() => RecipeCreateOrConnectWithoutPrepBoardsInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => RecipeWhereUniqueInputSchema), z$2.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional()
}).strict();
var PrepItemCreateNestedManyWithoutPrepBoardInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => PrepItemCreateWithoutPrepBoardInputSchema), z$2.lazy(() => PrepItemCreateWithoutPrepBoardInputSchema).array(), z$2.lazy(() => PrepItemUncheckedCreateWithoutPrepBoardInputSchema), z$2.lazy(() => PrepItemUncheckedCreateWithoutPrepBoardInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => PrepItemCreateOrConnectWithoutPrepBoardInputSchema), z$2.lazy(() => PrepItemCreateOrConnectWithoutPrepBoardInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => PrepItemCreateManyPrepBoardInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => PrepItemWhereUniqueInputSchema), z$2.lazy(() => PrepItemWhereUniqueInputSchema).array()]).optional()
}).strict();
var RecipeUncheckedCreateNestedManyWithoutPrepBoardsInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeCreateWithoutPrepBoardsInputSchema), z$2.lazy(() => RecipeCreateWithoutPrepBoardsInputSchema).array(), z$2.lazy(() => RecipeUncheckedCreateWithoutPrepBoardsInputSchema), z$2.lazy(() => RecipeUncheckedCreateWithoutPrepBoardsInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => RecipeCreateOrConnectWithoutPrepBoardsInputSchema), z$2.lazy(() => RecipeCreateOrConnectWithoutPrepBoardsInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => RecipeWhereUniqueInputSchema), z$2.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional()
}).strict();
var PrepItemUncheckedCreateNestedManyWithoutPrepBoardInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => PrepItemCreateWithoutPrepBoardInputSchema), z$2.lazy(() => PrepItemCreateWithoutPrepBoardInputSchema).array(), z$2.lazy(() => PrepItemUncheckedCreateWithoutPrepBoardInputSchema), z$2.lazy(() => PrepItemUncheckedCreateWithoutPrepBoardInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => PrepItemCreateOrConnectWithoutPrepBoardInputSchema), z$2.lazy(() => PrepItemCreateOrConnectWithoutPrepBoardInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => PrepItemCreateManyPrepBoardInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => PrepItemWhereUniqueInputSchema), z$2.lazy(() => PrepItemWhereUniqueInputSchema).array()]).optional()
}).strict();
var EnumPrepStatusFieldUpdateOperationsInputSchema = z$2.object({
  set: z$2.lazy(() => PrepStatusSchema).optional()
}).strict();
var RecipeUpdateManyWithoutPrepBoardsNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeCreateWithoutPrepBoardsInputSchema), z$2.lazy(() => RecipeCreateWithoutPrepBoardsInputSchema).array(), z$2.lazy(() => RecipeUncheckedCreateWithoutPrepBoardsInputSchema), z$2.lazy(() => RecipeUncheckedCreateWithoutPrepBoardsInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => RecipeCreateOrConnectWithoutPrepBoardsInputSchema), z$2.lazy(() => RecipeCreateOrConnectWithoutPrepBoardsInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => RecipeUpsertWithWhereUniqueWithoutPrepBoardsInputSchema), z$2.lazy(() => RecipeUpsertWithWhereUniqueWithoutPrepBoardsInputSchema).array()]).optional(),
  set: z$2.union([z$2.lazy(() => RecipeWhereUniqueInputSchema), z$2.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => RecipeWhereUniqueInputSchema), z$2.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => RecipeWhereUniqueInputSchema), z$2.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => RecipeWhereUniqueInputSchema), z$2.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => RecipeUpdateWithWhereUniqueWithoutPrepBoardsInputSchema), z$2.lazy(() => RecipeUpdateWithWhereUniqueWithoutPrepBoardsInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => RecipeUpdateManyWithWhereWithoutPrepBoardsInputSchema), z$2.lazy(() => RecipeUpdateManyWithWhereWithoutPrepBoardsInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => RecipeScalarWhereInputSchema), z$2.lazy(() => RecipeScalarWhereInputSchema).array()]).optional()
}).strict();
var PrepItemUpdateManyWithoutPrepBoardNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => PrepItemCreateWithoutPrepBoardInputSchema), z$2.lazy(() => PrepItemCreateWithoutPrepBoardInputSchema).array(), z$2.lazy(() => PrepItemUncheckedCreateWithoutPrepBoardInputSchema), z$2.lazy(() => PrepItemUncheckedCreateWithoutPrepBoardInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => PrepItemCreateOrConnectWithoutPrepBoardInputSchema), z$2.lazy(() => PrepItemCreateOrConnectWithoutPrepBoardInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => PrepItemUpsertWithWhereUniqueWithoutPrepBoardInputSchema), z$2.lazy(() => PrepItemUpsertWithWhereUniqueWithoutPrepBoardInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => PrepItemCreateManyPrepBoardInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => PrepItemWhereUniqueInputSchema), z$2.lazy(() => PrepItemWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => PrepItemWhereUniqueInputSchema), z$2.lazy(() => PrepItemWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => PrepItemWhereUniqueInputSchema), z$2.lazy(() => PrepItemWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => PrepItemWhereUniqueInputSchema), z$2.lazy(() => PrepItemWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => PrepItemUpdateWithWhereUniqueWithoutPrepBoardInputSchema), z$2.lazy(() => PrepItemUpdateWithWhereUniqueWithoutPrepBoardInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => PrepItemUpdateManyWithWhereWithoutPrepBoardInputSchema), z$2.lazy(() => PrepItemUpdateManyWithWhereWithoutPrepBoardInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => PrepItemScalarWhereInputSchema), z$2.lazy(() => PrepItemScalarWhereInputSchema).array()]).optional()
}).strict();
var RecipeUncheckedUpdateManyWithoutPrepBoardsNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeCreateWithoutPrepBoardsInputSchema), z$2.lazy(() => RecipeCreateWithoutPrepBoardsInputSchema).array(), z$2.lazy(() => RecipeUncheckedCreateWithoutPrepBoardsInputSchema), z$2.lazy(() => RecipeUncheckedCreateWithoutPrepBoardsInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => RecipeCreateOrConnectWithoutPrepBoardsInputSchema), z$2.lazy(() => RecipeCreateOrConnectWithoutPrepBoardsInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => RecipeUpsertWithWhereUniqueWithoutPrepBoardsInputSchema), z$2.lazy(() => RecipeUpsertWithWhereUniqueWithoutPrepBoardsInputSchema).array()]).optional(),
  set: z$2.union([z$2.lazy(() => RecipeWhereUniqueInputSchema), z$2.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => RecipeWhereUniqueInputSchema), z$2.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => RecipeWhereUniqueInputSchema), z$2.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => RecipeWhereUniqueInputSchema), z$2.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => RecipeUpdateWithWhereUniqueWithoutPrepBoardsInputSchema), z$2.lazy(() => RecipeUpdateWithWhereUniqueWithoutPrepBoardsInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => RecipeUpdateManyWithWhereWithoutPrepBoardsInputSchema), z$2.lazy(() => RecipeUpdateManyWithWhereWithoutPrepBoardsInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => RecipeScalarWhereInputSchema), z$2.lazy(() => RecipeScalarWhereInputSchema).array()]).optional()
}).strict();
var PrepItemUncheckedUpdateManyWithoutPrepBoardNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => PrepItemCreateWithoutPrepBoardInputSchema), z$2.lazy(() => PrepItemCreateWithoutPrepBoardInputSchema).array(), z$2.lazy(() => PrepItemUncheckedCreateWithoutPrepBoardInputSchema), z$2.lazy(() => PrepItemUncheckedCreateWithoutPrepBoardInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => PrepItemCreateOrConnectWithoutPrepBoardInputSchema), z$2.lazy(() => PrepItemCreateOrConnectWithoutPrepBoardInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => PrepItemUpsertWithWhereUniqueWithoutPrepBoardInputSchema), z$2.lazy(() => PrepItemUpsertWithWhereUniqueWithoutPrepBoardInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => PrepItemCreateManyPrepBoardInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => PrepItemWhereUniqueInputSchema), z$2.lazy(() => PrepItemWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => PrepItemWhereUniqueInputSchema), z$2.lazy(() => PrepItemWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => PrepItemWhereUniqueInputSchema), z$2.lazy(() => PrepItemWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => PrepItemWhereUniqueInputSchema), z$2.lazy(() => PrepItemWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => PrepItemUpdateWithWhereUniqueWithoutPrepBoardInputSchema), z$2.lazy(() => PrepItemUpdateWithWhereUniqueWithoutPrepBoardInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => PrepItemUpdateManyWithWhereWithoutPrepBoardInputSchema), z$2.lazy(() => PrepItemUpdateManyWithWhereWithoutPrepBoardInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => PrepItemScalarWhereInputSchema), z$2.lazy(() => PrepItemScalarWhereInputSchema).array()]).optional()
}).strict();
var PrepBoardCreateNestedOneWithoutPrepItemsInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => PrepBoardCreateWithoutPrepItemsInputSchema), z$2.lazy(() => PrepBoardUncheckedCreateWithoutPrepItemsInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => PrepBoardCreateOrConnectWithoutPrepItemsInputSchema).optional(),
  connect: z$2.lazy(() => PrepBoardWhereUniqueInputSchema).optional()
}).strict();
var RecipeCreateNestedOneWithoutPrepItemsInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeCreateWithoutPrepItemsInputSchema), z$2.lazy(() => RecipeUncheckedCreateWithoutPrepItemsInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => RecipeCreateOrConnectWithoutPrepItemsInputSchema).optional(),
  connect: z$2.lazy(() => RecipeWhereUniqueInputSchema).optional()
}).strict();
var UserCreateNestedOneWithoutPrepItemsInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => UserCreateWithoutPrepItemsInputSchema), z$2.lazy(() => UserUncheckedCreateWithoutPrepItemsInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => UserCreateOrConnectWithoutPrepItemsInputSchema).optional(),
  connect: z$2.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();
var PrepBoardUpdateOneRequiredWithoutPrepItemsNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => PrepBoardCreateWithoutPrepItemsInputSchema), z$2.lazy(() => PrepBoardUncheckedCreateWithoutPrepItemsInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => PrepBoardCreateOrConnectWithoutPrepItemsInputSchema).optional(),
  upsert: z$2.lazy(() => PrepBoardUpsertWithoutPrepItemsInputSchema).optional(),
  connect: z$2.lazy(() => PrepBoardWhereUniqueInputSchema).optional(),
  update: z$2.union([z$2.lazy(() => PrepBoardUpdateToOneWithWhereWithoutPrepItemsInputSchema), z$2.lazy(() => PrepBoardUpdateWithoutPrepItemsInputSchema), z$2.lazy(() => PrepBoardUncheckedUpdateWithoutPrepItemsInputSchema)]).optional()
}).strict();
var RecipeUpdateOneRequiredWithoutPrepItemsNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeCreateWithoutPrepItemsInputSchema), z$2.lazy(() => RecipeUncheckedCreateWithoutPrepItemsInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => RecipeCreateOrConnectWithoutPrepItemsInputSchema).optional(),
  upsert: z$2.lazy(() => RecipeUpsertWithoutPrepItemsInputSchema).optional(),
  connect: z$2.lazy(() => RecipeWhereUniqueInputSchema).optional(),
  update: z$2.union([z$2.lazy(() => RecipeUpdateToOneWithWhereWithoutPrepItemsInputSchema), z$2.lazy(() => RecipeUpdateWithoutPrepItemsInputSchema), z$2.lazy(() => RecipeUncheckedUpdateWithoutPrepItemsInputSchema)]).optional()
}).strict();
var UserUpdateOneRequiredWithoutPrepItemsNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => UserCreateWithoutPrepItemsInputSchema), z$2.lazy(() => UserUncheckedCreateWithoutPrepItemsInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => UserCreateOrConnectWithoutPrepItemsInputSchema).optional(),
  upsert: z$2.lazy(() => UserUpsertWithoutPrepItemsInputSchema).optional(),
  connect: z$2.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z$2.union([z$2.lazy(() => UserUpdateToOneWithWhereWithoutPrepItemsInputSchema), z$2.lazy(() => UserUpdateWithoutPrepItemsInputSchema), z$2.lazy(() => UserUncheckedUpdateWithoutPrepItemsInputSchema)]).optional()
}).strict();
var UserCreateNestedOneWithoutPasswordResetsInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => UserCreateWithoutPasswordResetsInputSchema), z$2.lazy(() => UserUncheckedCreateWithoutPasswordResetsInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => UserCreateOrConnectWithoutPasswordResetsInputSchema).optional(),
  connect: z$2.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();
var UserUpdateOneRequiredWithoutPasswordResetsNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => UserCreateWithoutPasswordResetsInputSchema), z$2.lazy(() => UserUncheckedCreateWithoutPasswordResetsInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => UserCreateOrConnectWithoutPasswordResetsInputSchema).optional(),
  upsert: z$2.lazy(() => UserUpsertWithoutPasswordResetsInputSchema).optional(),
  connect: z$2.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z$2.union([z$2.lazy(() => UserUpdateToOneWithWhereWithoutPasswordResetsInputSchema), z$2.lazy(() => UserUpdateWithoutPasswordResetsInputSchema), z$2.lazy(() => UserUncheckedUpdateWithoutPasswordResetsInputSchema)]).optional()
}).strict();
var RestaurantCreateNestedOneWithoutMenusInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RestaurantCreateWithoutMenusInputSchema), z$2.lazy(() => RestaurantUncheckedCreateWithoutMenusInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => RestaurantCreateOrConnectWithoutMenusInputSchema).optional(),
  connect: z$2.lazy(() => RestaurantWhereUniqueInputSchema).optional()
}).strict();
var MenuItemCreateNestedManyWithoutMenuInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => MenuItemCreateWithoutMenuInputSchema), z$2.lazy(() => MenuItemCreateWithoutMenuInputSchema).array(), z$2.lazy(() => MenuItemUncheckedCreateWithoutMenuInputSchema), z$2.lazy(() => MenuItemUncheckedCreateWithoutMenuInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => MenuItemCreateOrConnectWithoutMenuInputSchema), z$2.lazy(() => MenuItemCreateOrConnectWithoutMenuInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => MenuItemCreateManyMenuInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => MenuItemWhereUniqueInputSchema), z$2.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional()
}).strict();
var MenuCategoryCreateNestedManyWithoutMenuInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => MenuCategoryCreateWithoutMenuInputSchema), z$2.lazy(() => MenuCategoryCreateWithoutMenuInputSchema).array(), z$2.lazy(() => MenuCategoryUncheckedCreateWithoutMenuInputSchema), z$2.lazy(() => MenuCategoryUncheckedCreateWithoutMenuInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => MenuCategoryCreateOrConnectWithoutMenuInputSchema), z$2.lazy(() => MenuCategoryCreateOrConnectWithoutMenuInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => MenuCategoryCreateManyMenuInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => MenuCategoryWhereUniqueInputSchema), z$2.lazy(() => MenuCategoryWhereUniqueInputSchema).array()]).optional()
}).strict();
var MenuItemUncheckedCreateNestedManyWithoutMenuInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => MenuItemCreateWithoutMenuInputSchema), z$2.lazy(() => MenuItemCreateWithoutMenuInputSchema).array(), z$2.lazy(() => MenuItemUncheckedCreateWithoutMenuInputSchema), z$2.lazy(() => MenuItemUncheckedCreateWithoutMenuInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => MenuItemCreateOrConnectWithoutMenuInputSchema), z$2.lazy(() => MenuItemCreateOrConnectWithoutMenuInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => MenuItemCreateManyMenuInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => MenuItemWhereUniqueInputSchema), z$2.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional()
}).strict();
var MenuCategoryUncheckedCreateNestedManyWithoutMenuInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => MenuCategoryCreateWithoutMenuInputSchema), z$2.lazy(() => MenuCategoryCreateWithoutMenuInputSchema).array(), z$2.lazy(() => MenuCategoryUncheckedCreateWithoutMenuInputSchema), z$2.lazy(() => MenuCategoryUncheckedCreateWithoutMenuInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => MenuCategoryCreateOrConnectWithoutMenuInputSchema), z$2.lazy(() => MenuCategoryCreateOrConnectWithoutMenuInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => MenuCategoryCreateManyMenuInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => MenuCategoryWhereUniqueInputSchema), z$2.lazy(() => MenuCategoryWhereUniqueInputSchema).array()]).optional()
}).strict();
var RestaurantUpdateOneRequiredWithoutMenusNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RestaurantCreateWithoutMenusInputSchema), z$2.lazy(() => RestaurantUncheckedCreateWithoutMenusInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => RestaurantCreateOrConnectWithoutMenusInputSchema).optional(),
  upsert: z$2.lazy(() => RestaurantUpsertWithoutMenusInputSchema).optional(),
  connect: z$2.lazy(() => RestaurantWhereUniqueInputSchema).optional(),
  update: z$2.union([z$2.lazy(() => RestaurantUpdateToOneWithWhereWithoutMenusInputSchema), z$2.lazy(() => RestaurantUpdateWithoutMenusInputSchema), z$2.lazy(() => RestaurantUncheckedUpdateWithoutMenusInputSchema)]).optional()
}).strict();
var MenuItemUpdateManyWithoutMenuNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => MenuItemCreateWithoutMenuInputSchema), z$2.lazy(() => MenuItemCreateWithoutMenuInputSchema).array(), z$2.lazy(() => MenuItemUncheckedCreateWithoutMenuInputSchema), z$2.lazy(() => MenuItemUncheckedCreateWithoutMenuInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => MenuItemCreateOrConnectWithoutMenuInputSchema), z$2.lazy(() => MenuItemCreateOrConnectWithoutMenuInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => MenuItemUpsertWithWhereUniqueWithoutMenuInputSchema), z$2.lazy(() => MenuItemUpsertWithWhereUniqueWithoutMenuInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => MenuItemCreateManyMenuInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => MenuItemWhereUniqueInputSchema), z$2.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => MenuItemWhereUniqueInputSchema), z$2.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => MenuItemWhereUniqueInputSchema), z$2.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => MenuItemWhereUniqueInputSchema), z$2.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => MenuItemUpdateWithWhereUniqueWithoutMenuInputSchema), z$2.lazy(() => MenuItemUpdateWithWhereUniqueWithoutMenuInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => MenuItemUpdateManyWithWhereWithoutMenuInputSchema), z$2.lazy(() => MenuItemUpdateManyWithWhereWithoutMenuInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => MenuItemScalarWhereInputSchema), z$2.lazy(() => MenuItemScalarWhereInputSchema).array()]).optional()
}).strict();
var MenuCategoryUpdateManyWithoutMenuNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => MenuCategoryCreateWithoutMenuInputSchema), z$2.lazy(() => MenuCategoryCreateWithoutMenuInputSchema).array(), z$2.lazy(() => MenuCategoryUncheckedCreateWithoutMenuInputSchema), z$2.lazy(() => MenuCategoryUncheckedCreateWithoutMenuInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => MenuCategoryCreateOrConnectWithoutMenuInputSchema), z$2.lazy(() => MenuCategoryCreateOrConnectWithoutMenuInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => MenuCategoryUpsertWithWhereUniqueWithoutMenuInputSchema), z$2.lazy(() => MenuCategoryUpsertWithWhereUniqueWithoutMenuInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => MenuCategoryCreateManyMenuInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => MenuCategoryWhereUniqueInputSchema), z$2.lazy(() => MenuCategoryWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => MenuCategoryWhereUniqueInputSchema), z$2.lazy(() => MenuCategoryWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => MenuCategoryWhereUniqueInputSchema), z$2.lazy(() => MenuCategoryWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => MenuCategoryWhereUniqueInputSchema), z$2.lazy(() => MenuCategoryWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => MenuCategoryUpdateWithWhereUniqueWithoutMenuInputSchema), z$2.lazy(() => MenuCategoryUpdateWithWhereUniqueWithoutMenuInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => MenuCategoryUpdateManyWithWhereWithoutMenuInputSchema), z$2.lazy(() => MenuCategoryUpdateManyWithWhereWithoutMenuInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => MenuCategoryScalarWhereInputSchema), z$2.lazy(() => MenuCategoryScalarWhereInputSchema).array()]).optional()
}).strict();
var MenuItemUncheckedUpdateManyWithoutMenuNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => MenuItemCreateWithoutMenuInputSchema), z$2.lazy(() => MenuItemCreateWithoutMenuInputSchema).array(), z$2.lazy(() => MenuItemUncheckedCreateWithoutMenuInputSchema), z$2.lazy(() => MenuItemUncheckedCreateWithoutMenuInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => MenuItemCreateOrConnectWithoutMenuInputSchema), z$2.lazy(() => MenuItemCreateOrConnectWithoutMenuInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => MenuItemUpsertWithWhereUniqueWithoutMenuInputSchema), z$2.lazy(() => MenuItemUpsertWithWhereUniqueWithoutMenuInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => MenuItemCreateManyMenuInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => MenuItemWhereUniqueInputSchema), z$2.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => MenuItemWhereUniqueInputSchema), z$2.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => MenuItemWhereUniqueInputSchema), z$2.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => MenuItemWhereUniqueInputSchema), z$2.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => MenuItemUpdateWithWhereUniqueWithoutMenuInputSchema), z$2.lazy(() => MenuItemUpdateWithWhereUniqueWithoutMenuInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => MenuItemUpdateManyWithWhereWithoutMenuInputSchema), z$2.lazy(() => MenuItemUpdateManyWithWhereWithoutMenuInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => MenuItemScalarWhereInputSchema), z$2.lazy(() => MenuItemScalarWhereInputSchema).array()]).optional()
}).strict();
var MenuCategoryUncheckedUpdateManyWithoutMenuNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => MenuCategoryCreateWithoutMenuInputSchema), z$2.lazy(() => MenuCategoryCreateWithoutMenuInputSchema).array(), z$2.lazy(() => MenuCategoryUncheckedCreateWithoutMenuInputSchema), z$2.lazy(() => MenuCategoryUncheckedCreateWithoutMenuInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => MenuCategoryCreateOrConnectWithoutMenuInputSchema), z$2.lazy(() => MenuCategoryCreateOrConnectWithoutMenuInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => MenuCategoryUpsertWithWhereUniqueWithoutMenuInputSchema), z$2.lazy(() => MenuCategoryUpsertWithWhereUniqueWithoutMenuInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => MenuCategoryCreateManyMenuInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => MenuCategoryWhereUniqueInputSchema), z$2.lazy(() => MenuCategoryWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => MenuCategoryWhereUniqueInputSchema), z$2.lazy(() => MenuCategoryWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => MenuCategoryWhereUniqueInputSchema), z$2.lazy(() => MenuCategoryWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => MenuCategoryWhereUniqueInputSchema), z$2.lazy(() => MenuCategoryWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => MenuCategoryUpdateWithWhereUniqueWithoutMenuInputSchema), z$2.lazy(() => MenuCategoryUpdateWithWhereUniqueWithoutMenuInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => MenuCategoryUpdateManyWithWhereWithoutMenuInputSchema), z$2.lazy(() => MenuCategoryUpdateManyWithWhereWithoutMenuInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => MenuCategoryScalarWhereInputSchema), z$2.lazy(() => MenuCategoryScalarWhereInputSchema).array()]).optional()
}).strict();
var MenuItemCreateNestedOneWithoutMenuItemRecipeInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => MenuItemCreateWithoutMenuItemRecipeInputSchema), z$2.lazy(() => MenuItemUncheckedCreateWithoutMenuItemRecipeInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => MenuItemCreateOrConnectWithoutMenuItemRecipeInputSchema).optional(),
  connect: z$2.lazy(() => MenuItemWhereUniqueInputSchema).optional()
}).strict();
var RecipeCreateNestedOneWithoutMenuItemRecipeInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeCreateWithoutMenuItemRecipeInputSchema), z$2.lazy(() => RecipeUncheckedCreateWithoutMenuItemRecipeInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => RecipeCreateOrConnectWithoutMenuItemRecipeInputSchema).optional(),
  connect: z$2.lazy(() => RecipeWhereUniqueInputSchema).optional()
}).strict();
var MenuItemUpdateOneRequiredWithoutMenuItemRecipeNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => MenuItemCreateWithoutMenuItemRecipeInputSchema), z$2.lazy(() => MenuItemUncheckedCreateWithoutMenuItemRecipeInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => MenuItemCreateOrConnectWithoutMenuItemRecipeInputSchema).optional(),
  upsert: z$2.lazy(() => MenuItemUpsertWithoutMenuItemRecipeInputSchema).optional(),
  connect: z$2.lazy(() => MenuItemWhereUniqueInputSchema).optional(),
  update: z$2.union([z$2.lazy(() => MenuItemUpdateToOneWithWhereWithoutMenuItemRecipeInputSchema), z$2.lazy(() => MenuItemUpdateWithoutMenuItemRecipeInputSchema), z$2.lazy(() => MenuItemUncheckedUpdateWithoutMenuItemRecipeInputSchema)]).optional()
}).strict();
var RecipeUpdateOneRequiredWithoutMenuItemRecipeNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeCreateWithoutMenuItemRecipeInputSchema), z$2.lazy(() => RecipeUncheckedCreateWithoutMenuItemRecipeInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => RecipeCreateOrConnectWithoutMenuItemRecipeInputSchema).optional(),
  upsert: z$2.lazy(() => RecipeUpsertWithoutMenuItemRecipeInputSchema).optional(),
  connect: z$2.lazy(() => RecipeWhereUniqueInputSchema).optional(),
  update: z$2.union([z$2.lazy(() => RecipeUpdateToOneWithWhereWithoutMenuItemRecipeInputSchema), z$2.lazy(() => RecipeUpdateWithoutMenuItemRecipeInputSchema), z$2.lazy(() => RecipeUncheckedUpdateWithoutMenuItemRecipeInputSchema)]).optional()
}).strict();
var MenuItemCreaterecipeIdsInputSchema = z$2.object({
  set: z$2.number().array()
}).strict();
var MenuItemCreaterecipeServingsAmountInputSchema = z$2.object({
  set: z$2.number().array()
}).strict();
var MenuItemCreaterecipeServingsCostInputSchema = z$2.object({
  set: z$2.number().array()
}).strict();
var MenuItemCreateallergensInputSchema = z$2.object({
  set: z$2.string().array()
}).strict();
var NutritionalInfoCreateNestedOneWithoutMenuItemInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => NutritionalInfoCreateWithoutMenuItemInputSchema), z$2.lazy(() => NutritionalInfoUncheckedCreateWithoutMenuItemInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => NutritionalInfoCreateOrConnectWithoutMenuItemInputSchema).optional(),
  connect: z$2.lazy(() => NutritionalInfoWhereUniqueInputSchema).optional()
}).strict();
var MenuCreateNestedOneWithoutMenuItemsInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => MenuCreateWithoutMenuItemsInputSchema), z$2.lazy(() => MenuUncheckedCreateWithoutMenuItemsInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => MenuCreateOrConnectWithoutMenuItemsInputSchema).optional(),
  connect: z$2.lazy(() => MenuWhereUniqueInputSchema).optional()
}).strict();
var RecipeCreateNestedManyWithoutMenuItemsInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeCreateWithoutMenuItemsInputSchema), z$2.lazy(() => RecipeCreateWithoutMenuItemsInputSchema).array(), z$2.lazy(() => RecipeUncheckedCreateWithoutMenuItemsInputSchema), z$2.lazy(() => RecipeUncheckedCreateWithoutMenuItemsInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => RecipeCreateOrConnectWithoutMenuItemsInputSchema), z$2.lazy(() => RecipeCreateOrConnectWithoutMenuItemsInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => RecipeWhereUniqueInputSchema), z$2.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional()
}).strict();
var MenuItemRecipeCreateNestedManyWithoutMenuItemInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => MenuItemRecipeCreateWithoutMenuItemInputSchema), z$2.lazy(() => MenuItemRecipeCreateWithoutMenuItemInputSchema).array(), z$2.lazy(() => MenuItemRecipeUncheckedCreateWithoutMenuItemInputSchema), z$2.lazy(() => MenuItemRecipeUncheckedCreateWithoutMenuItemInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => MenuItemRecipeCreateOrConnectWithoutMenuItemInputSchema), z$2.lazy(() => MenuItemRecipeCreateOrConnectWithoutMenuItemInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => MenuItemRecipeCreateManyMenuItemInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => MenuItemRecipeWhereUniqueInputSchema), z$2.lazy(() => MenuItemRecipeWhereUniqueInputSchema).array()]).optional()
}).strict();
var SalesTransactionsCreateNestedManyWithoutMenuItemInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => SalesTransactionsCreateWithoutMenuItemInputSchema), z$2.lazy(() => SalesTransactionsCreateWithoutMenuItemInputSchema).array(), z$2.lazy(() => SalesTransactionsUncheckedCreateWithoutMenuItemInputSchema), z$2.lazy(() => SalesTransactionsUncheckedCreateWithoutMenuItemInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => SalesTransactionsCreateOrConnectWithoutMenuItemInputSchema), z$2.lazy(() => SalesTransactionsCreateOrConnectWithoutMenuItemInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => SalesTransactionsCreateManyMenuItemInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => SalesTransactionsWhereUniqueInputSchema), z$2.lazy(() => SalesTransactionsWhereUniqueInputSchema).array()]).optional()
}).strict();
var LeftoverItemCreateNestedManyWithoutMenuItemInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => LeftoverItemCreateWithoutMenuItemInputSchema), z$2.lazy(() => LeftoverItemCreateWithoutMenuItemInputSchema).array(), z$2.lazy(() => LeftoverItemUncheckedCreateWithoutMenuItemInputSchema), z$2.lazy(() => LeftoverItemUncheckedCreateWithoutMenuItemInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => LeftoverItemCreateOrConnectWithoutMenuItemInputSchema), z$2.lazy(() => LeftoverItemCreateOrConnectWithoutMenuItemInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => LeftoverItemCreateManyMenuItemInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => LeftoverItemWhereUniqueInputSchema), z$2.lazy(() => LeftoverItemWhereUniqueInputSchema).array()]).optional()
}).strict();
var NutritionalRecommendationCreateNestedManyWithoutMenuItemInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => NutritionalRecommendationCreateWithoutMenuItemInputSchema), z$2.lazy(() => NutritionalRecommendationCreateWithoutMenuItemInputSchema).array(), z$2.lazy(() => NutritionalRecommendationUncheckedCreateWithoutMenuItemInputSchema), z$2.lazy(() => NutritionalRecommendationUncheckedCreateWithoutMenuItemInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => NutritionalRecommendationCreateOrConnectWithoutMenuItemInputSchema), z$2.lazy(() => NutritionalRecommendationCreateOrConnectWithoutMenuItemInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => NutritionalRecommendationCreateManyMenuItemInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => NutritionalRecommendationWhereUniqueInputSchema), z$2.lazy(() => NutritionalRecommendationWhereUniqueInputSchema).array()]).optional()
}).strict();
var MenuCategoryCreateNestedOneWithoutMenuItemsInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => MenuCategoryCreateWithoutMenuItemsInputSchema), z$2.lazy(() => MenuCategoryUncheckedCreateWithoutMenuItemsInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => MenuCategoryCreateOrConnectWithoutMenuItemsInputSchema).optional(),
  connect: z$2.lazy(() => MenuCategoryWhereUniqueInputSchema).optional()
}).strict();
var CustomerFeedbackCreateNestedManyWithoutMenuItemInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => CustomerFeedbackCreateWithoutMenuItemInputSchema), z$2.lazy(() => CustomerFeedbackCreateWithoutMenuItemInputSchema).array(), z$2.lazy(() => CustomerFeedbackUncheckedCreateWithoutMenuItemInputSchema), z$2.lazy(() => CustomerFeedbackUncheckedCreateWithoutMenuItemInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => CustomerFeedbackCreateOrConnectWithoutMenuItemInputSchema), z$2.lazy(() => CustomerFeedbackCreateOrConnectWithoutMenuItemInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => CustomerFeedbackCreateManyMenuItemInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => CustomerFeedbackWhereUniqueInputSchema), z$2.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array()]).optional()
}).strict();
var DietaryRestrictionCreateNestedManyWithoutMenuItemsInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => DietaryRestrictionCreateWithoutMenuItemsInputSchema), z$2.lazy(() => DietaryRestrictionCreateWithoutMenuItemsInputSchema).array(), z$2.lazy(() => DietaryRestrictionUncheckedCreateWithoutMenuItemsInputSchema), z$2.lazy(() => DietaryRestrictionUncheckedCreateWithoutMenuItemsInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => DietaryRestrictionCreateOrConnectWithoutMenuItemsInputSchema), z$2.lazy(() => DietaryRestrictionCreateOrConnectWithoutMenuItemsInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => DietaryRestrictionWhereUniqueInputSchema), z$2.lazy(() => DietaryRestrictionWhereUniqueInputSchema).array()]).optional()
}).strict();
var NutritionalInfoUncheckedCreateNestedOneWithoutMenuItemInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => NutritionalInfoCreateWithoutMenuItemInputSchema), z$2.lazy(() => NutritionalInfoUncheckedCreateWithoutMenuItemInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => NutritionalInfoCreateOrConnectWithoutMenuItemInputSchema).optional(),
  connect: z$2.lazy(() => NutritionalInfoWhereUniqueInputSchema).optional()
}).strict();
var RecipeUncheckedCreateNestedManyWithoutMenuItemsInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeCreateWithoutMenuItemsInputSchema), z$2.lazy(() => RecipeCreateWithoutMenuItemsInputSchema).array(), z$2.lazy(() => RecipeUncheckedCreateWithoutMenuItemsInputSchema), z$2.lazy(() => RecipeUncheckedCreateWithoutMenuItemsInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => RecipeCreateOrConnectWithoutMenuItemsInputSchema), z$2.lazy(() => RecipeCreateOrConnectWithoutMenuItemsInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => RecipeWhereUniqueInputSchema), z$2.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional()
}).strict();
var MenuItemRecipeUncheckedCreateNestedManyWithoutMenuItemInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => MenuItemRecipeCreateWithoutMenuItemInputSchema), z$2.lazy(() => MenuItemRecipeCreateWithoutMenuItemInputSchema).array(), z$2.lazy(() => MenuItemRecipeUncheckedCreateWithoutMenuItemInputSchema), z$2.lazy(() => MenuItemRecipeUncheckedCreateWithoutMenuItemInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => MenuItemRecipeCreateOrConnectWithoutMenuItemInputSchema), z$2.lazy(() => MenuItemRecipeCreateOrConnectWithoutMenuItemInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => MenuItemRecipeCreateManyMenuItemInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => MenuItemRecipeWhereUniqueInputSchema), z$2.lazy(() => MenuItemRecipeWhereUniqueInputSchema).array()]).optional()
}).strict();
var SalesTransactionsUncheckedCreateNestedManyWithoutMenuItemInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => SalesTransactionsCreateWithoutMenuItemInputSchema), z$2.lazy(() => SalesTransactionsCreateWithoutMenuItemInputSchema).array(), z$2.lazy(() => SalesTransactionsUncheckedCreateWithoutMenuItemInputSchema), z$2.lazy(() => SalesTransactionsUncheckedCreateWithoutMenuItemInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => SalesTransactionsCreateOrConnectWithoutMenuItemInputSchema), z$2.lazy(() => SalesTransactionsCreateOrConnectWithoutMenuItemInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => SalesTransactionsCreateManyMenuItemInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => SalesTransactionsWhereUniqueInputSchema), z$2.lazy(() => SalesTransactionsWhereUniqueInputSchema).array()]).optional()
}).strict();
var LeftoverItemUncheckedCreateNestedManyWithoutMenuItemInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => LeftoverItemCreateWithoutMenuItemInputSchema), z$2.lazy(() => LeftoverItemCreateWithoutMenuItemInputSchema).array(), z$2.lazy(() => LeftoverItemUncheckedCreateWithoutMenuItemInputSchema), z$2.lazy(() => LeftoverItemUncheckedCreateWithoutMenuItemInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => LeftoverItemCreateOrConnectWithoutMenuItemInputSchema), z$2.lazy(() => LeftoverItemCreateOrConnectWithoutMenuItemInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => LeftoverItemCreateManyMenuItemInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => LeftoverItemWhereUniqueInputSchema), z$2.lazy(() => LeftoverItemWhereUniqueInputSchema).array()]).optional()
}).strict();
var NutritionalRecommendationUncheckedCreateNestedManyWithoutMenuItemInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => NutritionalRecommendationCreateWithoutMenuItemInputSchema), z$2.lazy(() => NutritionalRecommendationCreateWithoutMenuItemInputSchema).array(), z$2.lazy(() => NutritionalRecommendationUncheckedCreateWithoutMenuItemInputSchema), z$2.lazy(() => NutritionalRecommendationUncheckedCreateWithoutMenuItemInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => NutritionalRecommendationCreateOrConnectWithoutMenuItemInputSchema), z$2.lazy(() => NutritionalRecommendationCreateOrConnectWithoutMenuItemInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => NutritionalRecommendationCreateManyMenuItemInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => NutritionalRecommendationWhereUniqueInputSchema), z$2.lazy(() => NutritionalRecommendationWhereUniqueInputSchema).array()]).optional()
}).strict();
var CustomerFeedbackUncheckedCreateNestedManyWithoutMenuItemInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => CustomerFeedbackCreateWithoutMenuItemInputSchema), z$2.lazy(() => CustomerFeedbackCreateWithoutMenuItemInputSchema).array(), z$2.lazy(() => CustomerFeedbackUncheckedCreateWithoutMenuItemInputSchema), z$2.lazy(() => CustomerFeedbackUncheckedCreateWithoutMenuItemInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => CustomerFeedbackCreateOrConnectWithoutMenuItemInputSchema), z$2.lazy(() => CustomerFeedbackCreateOrConnectWithoutMenuItemInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => CustomerFeedbackCreateManyMenuItemInputEnvelopeSchema).optional(),
  connect: z$2.union([z$2.lazy(() => CustomerFeedbackWhereUniqueInputSchema), z$2.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array()]).optional()
}).strict();
var DietaryRestrictionUncheckedCreateNestedManyWithoutMenuItemsInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => DietaryRestrictionCreateWithoutMenuItemsInputSchema), z$2.lazy(() => DietaryRestrictionCreateWithoutMenuItemsInputSchema).array(), z$2.lazy(() => DietaryRestrictionUncheckedCreateWithoutMenuItemsInputSchema), z$2.lazy(() => DietaryRestrictionUncheckedCreateWithoutMenuItemsInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => DietaryRestrictionCreateOrConnectWithoutMenuItemsInputSchema), z$2.lazy(() => DietaryRestrictionCreateOrConnectWithoutMenuItemsInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => DietaryRestrictionWhereUniqueInputSchema), z$2.lazy(() => DietaryRestrictionWhereUniqueInputSchema).array()]).optional()
}).strict();
var MenuItemUpdaterecipeIdsInputSchema = z$2.object({
  set: z$2.number().array().optional(),
  push: z$2.union([z$2.number(), z$2.number().array()]).optional()
}).strict();
var MenuItemUpdaterecipeServingsAmountInputSchema = z$2.object({
  set: z$2.number().array().optional(),
  push: z$2.union([z$2.number(), z$2.number().array()]).optional()
}).strict();
var MenuItemUpdaterecipeServingsCostInputSchema = z$2.object({
  set: z$2.number().array().optional(),
  push: z$2.union([z$2.number(), z$2.number().array()]).optional()
}).strict();
var MenuItemUpdateallergensInputSchema = z$2.object({
  set: z$2.string().array().optional(),
  push: z$2.union([z$2.string(), z$2.string().array()]).optional()
}).strict();
var NutritionalInfoUpdateOneWithoutMenuItemNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => NutritionalInfoCreateWithoutMenuItemInputSchema), z$2.lazy(() => NutritionalInfoUncheckedCreateWithoutMenuItemInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => NutritionalInfoCreateOrConnectWithoutMenuItemInputSchema).optional(),
  upsert: z$2.lazy(() => NutritionalInfoUpsertWithoutMenuItemInputSchema).optional(),
  disconnect: z$2.union([z$2.boolean(), z$2.lazy(() => NutritionalInfoWhereInputSchema)]).optional(),
  delete: z$2.union([z$2.boolean(), z$2.lazy(() => NutritionalInfoWhereInputSchema)]).optional(),
  connect: z$2.lazy(() => NutritionalInfoWhereUniqueInputSchema).optional(),
  update: z$2.union([z$2.lazy(() => NutritionalInfoUpdateToOneWithWhereWithoutMenuItemInputSchema), z$2.lazy(() => NutritionalInfoUpdateWithoutMenuItemInputSchema), z$2.lazy(() => NutritionalInfoUncheckedUpdateWithoutMenuItemInputSchema)]).optional()
}).strict();
var MenuUpdateOneRequiredWithoutMenuItemsNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => MenuCreateWithoutMenuItemsInputSchema), z$2.lazy(() => MenuUncheckedCreateWithoutMenuItemsInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => MenuCreateOrConnectWithoutMenuItemsInputSchema).optional(),
  upsert: z$2.lazy(() => MenuUpsertWithoutMenuItemsInputSchema).optional(),
  connect: z$2.lazy(() => MenuWhereUniqueInputSchema).optional(),
  update: z$2.union([z$2.lazy(() => MenuUpdateToOneWithWhereWithoutMenuItemsInputSchema), z$2.lazy(() => MenuUpdateWithoutMenuItemsInputSchema), z$2.lazy(() => MenuUncheckedUpdateWithoutMenuItemsInputSchema)]).optional()
}).strict();
var RecipeUpdateManyWithoutMenuItemsNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeCreateWithoutMenuItemsInputSchema), z$2.lazy(() => RecipeCreateWithoutMenuItemsInputSchema).array(), z$2.lazy(() => RecipeUncheckedCreateWithoutMenuItemsInputSchema), z$2.lazy(() => RecipeUncheckedCreateWithoutMenuItemsInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => RecipeCreateOrConnectWithoutMenuItemsInputSchema), z$2.lazy(() => RecipeCreateOrConnectWithoutMenuItemsInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => RecipeUpsertWithWhereUniqueWithoutMenuItemsInputSchema), z$2.lazy(() => RecipeUpsertWithWhereUniqueWithoutMenuItemsInputSchema).array()]).optional(),
  set: z$2.union([z$2.lazy(() => RecipeWhereUniqueInputSchema), z$2.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => RecipeWhereUniqueInputSchema), z$2.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => RecipeWhereUniqueInputSchema), z$2.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => RecipeWhereUniqueInputSchema), z$2.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => RecipeUpdateWithWhereUniqueWithoutMenuItemsInputSchema), z$2.lazy(() => RecipeUpdateWithWhereUniqueWithoutMenuItemsInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => RecipeUpdateManyWithWhereWithoutMenuItemsInputSchema), z$2.lazy(() => RecipeUpdateManyWithWhereWithoutMenuItemsInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => RecipeScalarWhereInputSchema), z$2.lazy(() => RecipeScalarWhereInputSchema).array()]).optional()
}).strict();
var MenuItemRecipeUpdateManyWithoutMenuItemNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => MenuItemRecipeCreateWithoutMenuItemInputSchema), z$2.lazy(() => MenuItemRecipeCreateWithoutMenuItemInputSchema).array(), z$2.lazy(() => MenuItemRecipeUncheckedCreateWithoutMenuItemInputSchema), z$2.lazy(() => MenuItemRecipeUncheckedCreateWithoutMenuItemInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => MenuItemRecipeCreateOrConnectWithoutMenuItemInputSchema), z$2.lazy(() => MenuItemRecipeCreateOrConnectWithoutMenuItemInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => MenuItemRecipeUpsertWithWhereUniqueWithoutMenuItemInputSchema), z$2.lazy(() => MenuItemRecipeUpsertWithWhereUniqueWithoutMenuItemInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => MenuItemRecipeCreateManyMenuItemInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => MenuItemRecipeWhereUniqueInputSchema), z$2.lazy(() => MenuItemRecipeWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => MenuItemRecipeWhereUniqueInputSchema), z$2.lazy(() => MenuItemRecipeWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => MenuItemRecipeWhereUniqueInputSchema), z$2.lazy(() => MenuItemRecipeWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => MenuItemRecipeWhereUniqueInputSchema), z$2.lazy(() => MenuItemRecipeWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => MenuItemRecipeUpdateWithWhereUniqueWithoutMenuItemInputSchema), z$2.lazy(() => MenuItemRecipeUpdateWithWhereUniqueWithoutMenuItemInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => MenuItemRecipeUpdateManyWithWhereWithoutMenuItemInputSchema), z$2.lazy(() => MenuItemRecipeUpdateManyWithWhereWithoutMenuItemInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => MenuItemRecipeScalarWhereInputSchema), z$2.lazy(() => MenuItemRecipeScalarWhereInputSchema).array()]).optional()
}).strict();
var SalesTransactionsUpdateManyWithoutMenuItemNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => SalesTransactionsCreateWithoutMenuItemInputSchema), z$2.lazy(() => SalesTransactionsCreateWithoutMenuItemInputSchema).array(), z$2.lazy(() => SalesTransactionsUncheckedCreateWithoutMenuItemInputSchema), z$2.lazy(() => SalesTransactionsUncheckedCreateWithoutMenuItemInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => SalesTransactionsCreateOrConnectWithoutMenuItemInputSchema), z$2.lazy(() => SalesTransactionsCreateOrConnectWithoutMenuItemInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => SalesTransactionsUpsertWithWhereUniqueWithoutMenuItemInputSchema), z$2.lazy(() => SalesTransactionsUpsertWithWhereUniqueWithoutMenuItemInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => SalesTransactionsCreateManyMenuItemInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => SalesTransactionsWhereUniqueInputSchema), z$2.lazy(() => SalesTransactionsWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => SalesTransactionsWhereUniqueInputSchema), z$2.lazy(() => SalesTransactionsWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => SalesTransactionsWhereUniqueInputSchema), z$2.lazy(() => SalesTransactionsWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => SalesTransactionsWhereUniqueInputSchema), z$2.lazy(() => SalesTransactionsWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => SalesTransactionsUpdateWithWhereUniqueWithoutMenuItemInputSchema), z$2.lazy(() => SalesTransactionsUpdateWithWhereUniqueWithoutMenuItemInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => SalesTransactionsUpdateManyWithWhereWithoutMenuItemInputSchema), z$2.lazy(() => SalesTransactionsUpdateManyWithWhereWithoutMenuItemInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => SalesTransactionsScalarWhereInputSchema), z$2.lazy(() => SalesTransactionsScalarWhereInputSchema).array()]).optional()
}).strict();
var LeftoverItemUpdateManyWithoutMenuItemNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => LeftoverItemCreateWithoutMenuItemInputSchema), z$2.lazy(() => LeftoverItemCreateWithoutMenuItemInputSchema).array(), z$2.lazy(() => LeftoverItemUncheckedCreateWithoutMenuItemInputSchema), z$2.lazy(() => LeftoverItemUncheckedCreateWithoutMenuItemInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => LeftoverItemCreateOrConnectWithoutMenuItemInputSchema), z$2.lazy(() => LeftoverItemCreateOrConnectWithoutMenuItemInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => LeftoverItemUpsertWithWhereUniqueWithoutMenuItemInputSchema), z$2.lazy(() => LeftoverItemUpsertWithWhereUniqueWithoutMenuItemInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => LeftoverItemCreateManyMenuItemInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => LeftoverItemWhereUniqueInputSchema), z$2.lazy(() => LeftoverItemWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => LeftoverItemWhereUniqueInputSchema), z$2.lazy(() => LeftoverItemWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => LeftoverItemWhereUniqueInputSchema), z$2.lazy(() => LeftoverItemWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => LeftoverItemWhereUniqueInputSchema), z$2.lazy(() => LeftoverItemWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => LeftoverItemUpdateWithWhereUniqueWithoutMenuItemInputSchema), z$2.lazy(() => LeftoverItemUpdateWithWhereUniqueWithoutMenuItemInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => LeftoverItemUpdateManyWithWhereWithoutMenuItemInputSchema), z$2.lazy(() => LeftoverItemUpdateManyWithWhereWithoutMenuItemInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => LeftoverItemScalarWhereInputSchema), z$2.lazy(() => LeftoverItemScalarWhereInputSchema).array()]).optional()
}).strict();
var NutritionalRecommendationUpdateManyWithoutMenuItemNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => NutritionalRecommendationCreateWithoutMenuItemInputSchema), z$2.lazy(() => NutritionalRecommendationCreateWithoutMenuItemInputSchema).array(), z$2.lazy(() => NutritionalRecommendationUncheckedCreateWithoutMenuItemInputSchema), z$2.lazy(() => NutritionalRecommendationUncheckedCreateWithoutMenuItemInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => NutritionalRecommendationCreateOrConnectWithoutMenuItemInputSchema), z$2.lazy(() => NutritionalRecommendationCreateOrConnectWithoutMenuItemInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => NutritionalRecommendationUpsertWithWhereUniqueWithoutMenuItemInputSchema), z$2.lazy(() => NutritionalRecommendationUpsertWithWhereUniqueWithoutMenuItemInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => NutritionalRecommendationCreateManyMenuItemInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => NutritionalRecommendationWhereUniqueInputSchema), z$2.lazy(() => NutritionalRecommendationWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => NutritionalRecommendationWhereUniqueInputSchema), z$2.lazy(() => NutritionalRecommendationWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => NutritionalRecommendationWhereUniqueInputSchema), z$2.lazy(() => NutritionalRecommendationWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => NutritionalRecommendationWhereUniqueInputSchema), z$2.lazy(() => NutritionalRecommendationWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => NutritionalRecommendationUpdateWithWhereUniqueWithoutMenuItemInputSchema), z$2.lazy(() => NutritionalRecommendationUpdateWithWhereUniqueWithoutMenuItemInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => NutritionalRecommendationUpdateManyWithWhereWithoutMenuItemInputSchema), z$2.lazy(() => NutritionalRecommendationUpdateManyWithWhereWithoutMenuItemInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => NutritionalRecommendationScalarWhereInputSchema), z$2.lazy(() => NutritionalRecommendationScalarWhereInputSchema).array()]).optional()
}).strict();
var MenuCategoryUpdateOneWithoutMenuItemsNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => MenuCategoryCreateWithoutMenuItemsInputSchema), z$2.lazy(() => MenuCategoryUncheckedCreateWithoutMenuItemsInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => MenuCategoryCreateOrConnectWithoutMenuItemsInputSchema).optional(),
  upsert: z$2.lazy(() => MenuCategoryUpsertWithoutMenuItemsInputSchema).optional(),
  disconnect: z$2.union([z$2.boolean(), z$2.lazy(() => MenuCategoryWhereInputSchema)]).optional(),
  delete: z$2.union([z$2.boolean(), z$2.lazy(() => MenuCategoryWhereInputSchema)]).optional(),
  connect: z$2.lazy(() => MenuCategoryWhereUniqueInputSchema).optional(),
  update: z$2.union([z$2.lazy(() => MenuCategoryUpdateToOneWithWhereWithoutMenuItemsInputSchema), z$2.lazy(() => MenuCategoryUpdateWithoutMenuItemsInputSchema), z$2.lazy(() => MenuCategoryUncheckedUpdateWithoutMenuItemsInputSchema)]).optional()
}).strict();
var CustomerFeedbackUpdateManyWithoutMenuItemNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => CustomerFeedbackCreateWithoutMenuItemInputSchema), z$2.lazy(() => CustomerFeedbackCreateWithoutMenuItemInputSchema).array(), z$2.lazy(() => CustomerFeedbackUncheckedCreateWithoutMenuItemInputSchema), z$2.lazy(() => CustomerFeedbackUncheckedCreateWithoutMenuItemInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => CustomerFeedbackCreateOrConnectWithoutMenuItemInputSchema), z$2.lazy(() => CustomerFeedbackCreateOrConnectWithoutMenuItemInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => CustomerFeedbackUpsertWithWhereUniqueWithoutMenuItemInputSchema), z$2.lazy(() => CustomerFeedbackUpsertWithWhereUniqueWithoutMenuItemInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => CustomerFeedbackCreateManyMenuItemInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => CustomerFeedbackWhereUniqueInputSchema), z$2.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => CustomerFeedbackWhereUniqueInputSchema), z$2.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => CustomerFeedbackWhereUniqueInputSchema), z$2.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => CustomerFeedbackWhereUniqueInputSchema), z$2.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => CustomerFeedbackUpdateWithWhereUniqueWithoutMenuItemInputSchema), z$2.lazy(() => CustomerFeedbackUpdateWithWhereUniqueWithoutMenuItemInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => CustomerFeedbackUpdateManyWithWhereWithoutMenuItemInputSchema), z$2.lazy(() => CustomerFeedbackUpdateManyWithWhereWithoutMenuItemInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => CustomerFeedbackScalarWhereInputSchema), z$2.lazy(() => CustomerFeedbackScalarWhereInputSchema).array()]).optional()
}).strict();
var DietaryRestrictionUpdateManyWithoutMenuItemsNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => DietaryRestrictionCreateWithoutMenuItemsInputSchema), z$2.lazy(() => DietaryRestrictionCreateWithoutMenuItemsInputSchema).array(), z$2.lazy(() => DietaryRestrictionUncheckedCreateWithoutMenuItemsInputSchema), z$2.lazy(() => DietaryRestrictionUncheckedCreateWithoutMenuItemsInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => DietaryRestrictionCreateOrConnectWithoutMenuItemsInputSchema), z$2.lazy(() => DietaryRestrictionCreateOrConnectWithoutMenuItemsInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => DietaryRestrictionUpsertWithWhereUniqueWithoutMenuItemsInputSchema), z$2.lazy(() => DietaryRestrictionUpsertWithWhereUniqueWithoutMenuItemsInputSchema).array()]).optional(),
  set: z$2.union([z$2.lazy(() => DietaryRestrictionWhereUniqueInputSchema), z$2.lazy(() => DietaryRestrictionWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => DietaryRestrictionWhereUniqueInputSchema), z$2.lazy(() => DietaryRestrictionWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => DietaryRestrictionWhereUniqueInputSchema), z$2.lazy(() => DietaryRestrictionWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => DietaryRestrictionWhereUniqueInputSchema), z$2.lazy(() => DietaryRestrictionWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => DietaryRestrictionUpdateWithWhereUniqueWithoutMenuItemsInputSchema), z$2.lazy(() => DietaryRestrictionUpdateWithWhereUniqueWithoutMenuItemsInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => DietaryRestrictionUpdateManyWithWhereWithoutMenuItemsInputSchema), z$2.lazy(() => DietaryRestrictionUpdateManyWithWhereWithoutMenuItemsInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => DietaryRestrictionScalarWhereInputSchema), z$2.lazy(() => DietaryRestrictionScalarWhereInputSchema).array()]).optional()
}).strict();
var NutritionalInfoUncheckedUpdateOneWithoutMenuItemNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => NutritionalInfoCreateWithoutMenuItemInputSchema), z$2.lazy(() => NutritionalInfoUncheckedCreateWithoutMenuItemInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => NutritionalInfoCreateOrConnectWithoutMenuItemInputSchema).optional(),
  upsert: z$2.lazy(() => NutritionalInfoUpsertWithoutMenuItemInputSchema).optional(),
  disconnect: z$2.union([z$2.boolean(), z$2.lazy(() => NutritionalInfoWhereInputSchema)]).optional(),
  delete: z$2.union([z$2.boolean(), z$2.lazy(() => NutritionalInfoWhereInputSchema)]).optional(),
  connect: z$2.lazy(() => NutritionalInfoWhereUniqueInputSchema).optional(),
  update: z$2.union([z$2.lazy(() => NutritionalInfoUpdateToOneWithWhereWithoutMenuItemInputSchema), z$2.lazy(() => NutritionalInfoUpdateWithoutMenuItemInputSchema), z$2.lazy(() => NutritionalInfoUncheckedUpdateWithoutMenuItemInputSchema)]).optional()
}).strict();
var RecipeUncheckedUpdateManyWithoutMenuItemsNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeCreateWithoutMenuItemsInputSchema), z$2.lazy(() => RecipeCreateWithoutMenuItemsInputSchema).array(), z$2.lazy(() => RecipeUncheckedCreateWithoutMenuItemsInputSchema), z$2.lazy(() => RecipeUncheckedCreateWithoutMenuItemsInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => RecipeCreateOrConnectWithoutMenuItemsInputSchema), z$2.lazy(() => RecipeCreateOrConnectWithoutMenuItemsInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => RecipeUpsertWithWhereUniqueWithoutMenuItemsInputSchema), z$2.lazy(() => RecipeUpsertWithWhereUniqueWithoutMenuItemsInputSchema).array()]).optional(),
  set: z$2.union([z$2.lazy(() => RecipeWhereUniqueInputSchema), z$2.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => RecipeWhereUniqueInputSchema), z$2.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => RecipeWhereUniqueInputSchema), z$2.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => RecipeWhereUniqueInputSchema), z$2.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => RecipeUpdateWithWhereUniqueWithoutMenuItemsInputSchema), z$2.lazy(() => RecipeUpdateWithWhereUniqueWithoutMenuItemsInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => RecipeUpdateManyWithWhereWithoutMenuItemsInputSchema), z$2.lazy(() => RecipeUpdateManyWithWhereWithoutMenuItemsInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => RecipeScalarWhereInputSchema), z$2.lazy(() => RecipeScalarWhereInputSchema).array()]).optional()
}).strict();
var MenuItemRecipeUncheckedUpdateManyWithoutMenuItemNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => MenuItemRecipeCreateWithoutMenuItemInputSchema), z$2.lazy(() => MenuItemRecipeCreateWithoutMenuItemInputSchema).array(), z$2.lazy(() => MenuItemRecipeUncheckedCreateWithoutMenuItemInputSchema), z$2.lazy(() => MenuItemRecipeUncheckedCreateWithoutMenuItemInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => MenuItemRecipeCreateOrConnectWithoutMenuItemInputSchema), z$2.lazy(() => MenuItemRecipeCreateOrConnectWithoutMenuItemInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => MenuItemRecipeUpsertWithWhereUniqueWithoutMenuItemInputSchema), z$2.lazy(() => MenuItemRecipeUpsertWithWhereUniqueWithoutMenuItemInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => MenuItemRecipeCreateManyMenuItemInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => MenuItemRecipeWhereUniqueInputSchema), z$2.lazy(() => MenuItemRecipeWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => MenuItemRecipeWhereUniqueInputSchema), z$2.lazy(() => MenuItemRecipeWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => MenuItemRecipeWhereUniqueInputSchema), z$2.lazy(() => MenuItemRecipeWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => MenuItemRecipeWhereUniqueInputSchema), z$2.lazy(() => MenuItemRecipeWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => MenuItemRecipeUpdateWithWhereUniqueWithoutMenuItemInputSchema), z$2.lazy(() => MenuItemRecipeUpdateWithWhereUniqueWithoutMenuItemInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => MenuItemRecipeUpdateManyWithWhereWithoutMenuItemInputSchema), z$2.lazy(() => MenuItemRecipeUpdateManyWithWhereWithoutMenuItemInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => MenuItemRecipeScalarWhereInputSchema), z$2.lazy(() => MenuItemRecipeScalarWhereInputSchema).array()]).optional()
}).strict();
var SalesTransactionsUncheckedUpdateManyWithoutMenuItemNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => SalesTransactionsCreateWithoutMenuItemInputSchema), z$2.lazy(() => SalesTransactionsCreateWithoutMenuItemInputSchema).array(), z$2.lazy(() => SalesTransactionsUncheckedCreateWithoutMenuItemInputSchema), z$2.lazy(() => SalesTransactionsUncheckedCreateWithoutMenuItemInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => SalesTransactionsCreateOrConnectWithoutMenuItemInputSchema), z$2.lazy(() => SalesTransactionsCreateOrConnectWithoutMenuItemInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => SalesTransactionsUpsertWithWhereUniqueWithoutMenuItemInputSchema), z$2.lazy(() => SalesTransactionsUpsertWithWhereUniqueWithoutMenuItemInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => SalesTransactionsCreateManyMenuItemInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => SalesTransactionsWhereUniqueInputSchema), z$2.lazy(() => SalesTransactionsWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => SalesTransactionsWhereUniqueInputSchema), z$2.lazy(() => SalesTransactionsWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => SalesTransactionsWhereUniqueInputSchema), z$2.lazy(() => SalesTransactionsWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => SalesTransactionsWhereUniqueInputSchema), z$2.lazy(() => SalesTransactionsWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => SalesTransactionsUpdateWithWhereUniqueWithoutMenuItemInputSchema), z$2.lazy(() => SalesTransactionsUpdateWithWhereUniqueWithoutMenuItemInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => SalesTransactionsUpdateManyWithWhereWithoutMenuItemInputSchema), z$2.lazy(() => SalesTransactionsUpdateManyWithWhereWithoutMenuItemInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => SalesTransactionsScalarWhereInputSchema), z$2.lazy(() => SalesTransactionsScalarWhereInputSchema).array()]).optional()
}).strict();
var LeftoverItemUncheckedUpdateManyWithoutMenuItemNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => LeftoverItemCreateWithoutMenuItemInputSchema), z$2.lazy(() => LeftoverItemCreateWithoutMenuItemInputSchema).array(), z$2.lazy(() => LeftoverItemUncheckedCreateWithoutMenuItemInputSchema), z$2.lazy(() => LeftoverItemUncheckedCreateWithoutMenuItemInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => LeftoverItemCreateOrConnectWithoutMenuItemInputSchema), z$2.lazy(() => LeftoverItemCreateOrConnectWithoutMenuItemInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => LeftoverItemUpsertWithWhereUniqueWithoutMenuItemInputSchema), z$2.lazy(() => LeftoverItemUpsertWithWhereUniqueWithoutMenuItemInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => LeftoverItemCreateManyMenuItemInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => LeftoverItemWhereUniqueInputSchema), z$2.lazy(() => LeftoverItemWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => LeftoverItemWhereUniqueInputSchema), z$2.lazy(() => LeftoverItemWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => LeftoverItemWhereUniqueInputSchema), z$2.lazy(() => LeftoverItemWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => LeftoverItemWhereUniqueInputSchema), z$2.lazy(() => LeftoverItemWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => LeftoverItemUpdateWithWhereUniqueWithoutMenuItemInputSchema), z$2.lazy(() => LeftoverItemUpdateWithWhereUniqueWithoutMenuItemInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => LeftoverItemUpdateManyWithWhereWithoutMenuItemInputSchema), z$2.lazy(() => LeftoverItemUpdateManyWithWhereWithoutMenuItemInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => LeftoverItemScalarWhereInputSchema), z$2.lazy(() => LeftoverItemScalarWhereInputSchema).array()]).optional()
}).strict();
var NutritionalRecommendationUncheckedUpdateManyWithoutMenuItemNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => NutritionalRecommendationCreateWithoutMenuItemInputSchema), z$2.lazy(() => NutritionalRecommendationCreateWithoutMenuItemInputSchema).array(), z$2.lazy(() => NutritionalRecommendationUncheckedCreateWithoutMenuItemInputSchema), z$2.lazy(() => NutritionalRecommendationUncheckedCreateWithoutMenuItemInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => NutritionalRecommendationCreateOrConnectWithoutMenuItemInputSchema), z$2.lazy(() => NutritionalRecommendationCreateOrConnectWithoutMenuItemInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => NutritionalRecommendationUpsertWithWhereUniqueWithoutMenuItemInputSchema), z$2.lazy(() => NutritionalRecommendationUpsertWithWhereUniqueWithoutMenuItemInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => NutritionalRecommendationCreateManyMenuItemInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => NutritionalRecommendationWhereUniqueInputSchema), z$2.lazy(() => NutritionalRecommendationWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => NutritionalRecommendationWhereUniqueInputSchema), z$2.lazy(() => NutritionalRecommendationWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => NutritionalRecommendationWhereUniqueInputSchema), z$2.lazy(() => NutritionalRecommendationWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => NutritionalRecommendationWhereUniqueInputSchema), z$2.lazy(() => NutritionalRecommendationWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => NutritionalRecommendationUpdateWithWhereUniqueWithoutMenuItemInputSchema), z$2.lazy(() => NutritionalRecommendationUpdateWithWhereUniqueWithoutMenuItemInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => NutritionalRecommendationUpdateManyWithWhereWithoutMenuItemInputSchema), z$2.lazy(() => NutritionalRecommendationUpdateManyWithWhereWithoutMenuItemInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => NutritionalRecommendationScalarWhereInputSchema), z$2.lazy(() => NutritionalRecommendationScalarWhereInputSchema).array()]).optional()
}).strict();
var CustomerFeedbackUncheckedUpdateManyWithoutMenuItemNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => CustomerFeedbackCreateWithoutMenuItemInputSchema), z$2.lazy(() => CustomerFeedbackCreateWithoutMenuItemInputSchema).array(), z$2.lazy(() => CustomerFeedbackUncheckedCreateWithoutMenuItemInputSchema), z$2.lazy(() => CustomerFeedbackUncheckedCreateWithoutMenuItemInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => CustomerFeedbackCreateOrConnectWithoutMenuItemInputSchema), z$2.lazy(() => CustomerFeedbackCreateOrConnectWithoutMenuItemInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => CustomerFeedbackUpsertWithWhereUniqueWithoutMenuItemInputSchema), z$2.lazy(() => CustomerFeedbackUpsertWithWhereUniqueWithoutMenuItemInputSchema).array()]).optional(),
  createMany: z$2.lazy(() => CustomerFeedbackCreateManyMenuItemInputEnvelopeSchema).optional(),
  set: z$2.union([z$2.lazy(() => CustomerFeedbackWhereUniqueInputSchema), z$2.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => CustomerFeedbackWhereUniqueInputSchema), z$2.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => CustomerFeedbackWhereUniqueInputSchema), z$2.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => CustomerFeedbackWhereUniqueInputSchema), z$2.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => CustomerFeedbackUpdateWithWhereUniqueWithoutMenuItemInputSchema), z$2.lazy(() => CustomerFeedbackUpdateWithWhereUniqueWithoutMenuItemInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => CustomerFeedbackUpdateManyWithWhereWithoutMenuItemInputSchema), z$2.lazy(() => CustomerFeedbackUpdateManyWithWhereWithoutMenuItemInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => CustomerFeedbackScalarWhereInputSchema), z$2.lazy(() => CustomerFeedbackScalarWhereInputSchema).array()]).optional()
}).strict();
var DietaryRestrictionUncheckedUpdateManyWithoutMenuItemsNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => DietaryRestrictionCreateWithoutMenuItemsInputSchema), z$2.lazy(() => DietaryRestrictionCreateWithoutMenuItemsInputSchema).array(), z$2.lazy(() => DietaryRestrictionUncheckedCreateWithoutMenuItemsInputSchema), z$2.lazy(() => DietaryRestrictionUncheckedCreateWithoutMenuItemsInputSchema).array()]).optional(),
  connectOrCreate: z$2.union([z$2.lazy(() => DietaryRestrictionCreateOrConnectWithoutMenuItemsInputSchema), z$2.lazy(() => DietaryRestrictionCreateOrConnectWithoutMenuItemsInputSchema).array()]).optional(),
  upsert: z$2.union([z$2.lazy(() => DietaryRestrictionUpsertWithWhereUniqueWithoutMenuItemsInputSchema), z$2.lazy(() => DietaryRestrictionUpsertWithWhereUniqueWithoutMenuItemsInputSchema).array()]).optional(),
  set: z$2.union([z$2.lazy(() => DietaryRestrictionWhereUniqueInputSchema), z$2.lazy(() => DietaryRestrictionWhereUniqueInputSchema).array()]).optional(),
  disconnect: z$2.union([z$2.lazy(() => DietaryRestrictionWhereUniqueInputSchema), z$2.lazy(() => DietaryRestrictionWhereUniqueInputSchema).array()]).optional(),
  delete: z$2.union([z$2.lazy(() => DietaryRestrictionWhereUniqueInputSchema), z$2.lazy(() => DietaryRestrictionWhereUniqueInputSchema).array()]).optional(),
  connect: z$2.union([z$2.lazy(() => DietaryRestrictionWhereUniqueInputSchema), z$2.lazy(() => DietaryRestrictionWhereUniqueInputSchema).array()]).optional(),
  update: z$2.union([z$2.lazy(() => DietaryRestrictionUpdateWithWhereUniqueWithoutMenuItemsInputSchema), z$2.lazy(() => DietaryRestrictionUpdateWithWhereUniqueWithoutMenuItemsInputSchema).array()]).optional(),
  updateMany: z$2.union([z$2.lazy(() => DietaryRestrictionUpdateManyWithWhereWithoutMenuItemsInputSchema), z$2.lazy(() => DietaryRestrictionUpdateManyWithWhereWithoutMenuItemsInputSchema).array()]).optional(),
  deleteMany: z$2.union([z$2.lazy(() => DietaryRestrictionScalarWhereInputSchema), z$2.lazy(() => DietaryRestrictionScalarWhereInputSchema).array()]).optional()
}).strict();
var MenuItemCreateNestedOneWithoutNutritionalInfoInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => MenuItemCreateWithoutNutritionalInfoInputSchema), z$2.lazy(() => MenuItemUncheckedCreateWithoutNutritionalInfoInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => MenuItemCreateOrConnectWithoutNutritionalInfoInputSchema).optional(),
  connect: z$2.lazy(() => MenuItemWhereUniqueInputSchema).optional()
}).strict();
var MenuItemUpdateOneWithoutNutritionalInfoNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => MenuItemCreateWithoutNutritionalInfoInputSchema), z$2.lazy(() => MenuItemUncheckedCreateWithoutNutritionalInfoInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => MenuItemCreateOrConnectWithoutNutritionalInfoInputSchema).optional(),
  upsert: z$2.lazy(() => MenuItemUpsertWithoutNutritionalInfoInputSchema).optional(),
  disconnect: z$2.union([z$2.boolean(), z$2.lazy(() => MenuItemWhereInputSchema)]).optional(),
  delete: z$2.union([z$2.boolean(), z$2.lazy(() => MenuItemWhereInputSchema)]).optional(),
  connect: z$2.lazy(() => MenuItemWhereUniqueInputSchema).optional(),
  update: z$2.union([z$2.lazy(() => MenuItemUpdateToOneWithWhereWithoutNutritionalInfoInputSchema), z$2.lazy(() => MenuItemUpdateWithoutNutritionalInfoInputSchema), z$2.lazy(() => MenuItemUncheckedUpdateWithoutNutritionalInfoInputSchema)]).optional()
}).strict();
var RecipeCreateNestedOneWithoutFoodCostHistoryInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeCreateWithoutFoodCostHistoryInputSchema), z$2.lazy(() => RecipeUncheckedCreateWithoutFoodCostHistoryInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => RecipeCreateOrConnectWithoutFoodCostHistoryInputSchema).optional(),
  connect: z$2.lazy(() => RecipeWhereUniqueInputSchema).optional()
}).strict();
var RecipeUpdateOneRequiredWithoutFoodCostHistoryNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeCreateWithoutFoodCostHistoryInputSchema), z$2.lazy(() => RecipeUncheckedCreateWithoutFoodCostHistoryInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => RecipeCreateOrConnectWithoutFoodCostHistoryInputSchema).optional(),
  upsert: z$2.lazy(() => RecipeUpsertWithoutFoodCostHistoryInputSchema).optional(),
  connect: z$2.lazy(() => RecipeWhereUniqueInputSchema).optional(),
  update: z$2.union([z$2.lazy(() => RecipeUpdateToOneWithWhereWithoutFoodCostHistoryInputSchema), z$2.lazy(() => RecipeUpdateWithoutFoodCostHistoryInputSchema), z$2.lazy(() => RecipeUncheckedUpdateWithoutFoodCostHistoryInputSchema)]).optional()
}).strict();
var RecipeCreateNestedOneWithoutPrepHistoryInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeCreateWithoutPrepHistoryInputSchema), z$2.lazy(() => RecipeUncheckedCreateWithoutPrepHistoryInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => RecipeCreateOrConnectWithoutPrepHistoryInputSchema).optional(),
  connect: z$2.lazy(() => RecipeWhereUniqueInputSchema).optional()
}).strict();
var RecipeUpdateOneRequiredWithoutPrepHistoryNestedInputSchema = z$2.object({
  create: z$2.union([z$2.lazy(() => RecipeCreateWithoutPrepHistoryInputSchema), z$2.lazy(() => RecipeUncheckedCreateWithoutPrepHistoryInputSchema)]).optional(),
  connectOrCreate: z$2.lazy(() => RecipeCreateOrConnectWithoutPrepHistoryInputSchema).optional(),
  upsert: z$2.lazy(() => RecipeUpsertWithoutPrepHistoryInputSchema).optional(),
  connect: z$2.lazy(() => RecipeWhereUniqueInputSchema).optional(),
  update: z$2.union([z$2.lazy(() => RecipeUpdateToOneWithWhereWithoutPrepHistoryInputSchema), z$2.lazy(() => RecipeUpdateWithoutPrepHistoryInputSchema), z$2.lazy(() => RecipeUncheckedUpdateWithoutPrepHistoryInputSchema)]).optional()
}).strict();
var NestedIntFilterSchema = z$2.object({
  equals: z$2.number().optional(),
  in: z$2.number().array().optional(),
  notIn: z$2.number().array().optional(),
  lt: z$2.number().optional(),
  lte: z$2.number().optional(),
  gt: z$2.number().optional(),
  gte: z$2.number().optional(),
  not: z$2.union([z$2.number(), z$2.lazy(() => NestedIntFilterSchema)]).optional()
}).strict();
var NestedStringNullableFilterSchema = z$2.object({
  equals: z$2.string().optional().nullable(),
  in: z$2.string().array().optional().nullable(),
  notIn: z$2.string().array().optional().nullable(),
  lt: z$2.string().optional(),
  lte: z$2.string().optional(),
  gt: z$2.string().optional(),
  gte: z$2.string().optional(),
  contains: z$2.string().optional(),
  startsWith: z$2.string().optional(),
  endsWith: z$2.string().optional(),
  not: z$2.union([z$2.string(), z$2.lazy(() => NestedStringNullableFilterSchema)]).optional().nullable()
}).strict();
var NestedFloatFilterSchema = z$2.object({
  equals: z$2.number().optional(),
  in: z$2.number().array().optional(),
  notIn: z$2.number().array().optional(),
  lt: z$2.number().optional(),
  lte: z$2.number().optional(),
  gt: z$2.number().optional(),
  gte: z$2.number().optional(),
  not: z$2.union([z$2.number(), z$2.lazy(() => NestedFloatFilterSchema)]).optional()
}).strict();
var NestedDateTimeFilterSchema = z$2.object({
  equals: z$2.coerce.date().optional(),
  in: z$2.coerce.date().array().optional(),
  notIn: z$2.coerce.date().array().optional(),
  lt: z$2.coerce.date().optional(),
  lte: z$2.coerce.date().optional(),
  gt: z$2.coerce.date().optional(),
  gte: z$2.coerce.date().optional(),
  not: z$2.union([z$2.coerce.date(), z$2.lazy(() => NestedDateTimeFilterSchema)]).optional()
}).strict();
var NestedIntWithAggregatesFilterSchema = z$2.object({
  equals: z$2.number().optional(),
  in: z$2.number().array().optional(),
  notIn: z$2.number().array().optional(),
  lt: z$2.number().optional(),
  lte: z$2.number().optional(),
  gt: z$2.number().optional(),
  gte: z$2.number().optional(),
  not: z$2.union([z$2.number(), z$2.lazy(() => NestedIntWithAggregatesFilterSchema)]).optional(),
  _count: z$2.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z$2.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z$2.lazy(() => NestedIntFilterSchema).optional(),
  _min: z$2.lazy(() => NestedIntFilterSchema).optional(),
  _max: z$2.lazy(() => NestedIntFilterSchema).optional()
}).strict();
var NestedStringNullableWithAggregatesFilterSchema = z$2.object({
  equals: z$2.string().optional().nullable(),
  in: z$2.string().array().optional().nullable(),
  notIn: z$2.string().array().optional().nullable(),
  lt: z$2.string().optional(),
  lte: z$2.string().optional(),
  gt: z$2.string().optional(),
  gte: z$2.string().optional(),
  contains: z$2.string().optional(),
  startsWith: z$2.string().optional(),
  endsWith: z$2.string().optional(),
  not: z$2.union([z$2.string(), z$2.lazy(() => NestedStringNullableWithAggregatesFilterSchema)]).optional().nullable(),
  _count: z$2.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z$2.lazy(() => NestedStringNullableFilterSchema).optional(),
  _max: z$2.lazy(() => NestedStringNullableFilterSchema).optional()
}).strict();
var NestedIntNullableFilterSchema = z$2.object({
  equals: z$2.number().optional().nullable(),
  in: z$2.number().array().optional().nullable(),
  notIn: z$2.number().array().optional().nullable(),
  lt: z$2.number().optional(),
  lte: z$2.number().optional(),
  gt: z$2.number().optional(),
  gte: z$2.number().optional(),
  not: z$2.union([z$2.number(), z$2.lazy(() => NestedIntNullableFilterSchema)]).optional().nullable()
}).strict();
var NestedFloatWithAggregatesFilterSchema = z$2.object({
  equals: z$2.number().optional(),
  in: z$2.number().array().optional(),
  notIn: z$2.number().array().optional(),
  lt: z$2.number().optional(),
  lte: z$2.number().optional(),
  gt: z$2.number().optional(),
  gte: z$2.number().optional(),
  not: z$2.union([z$2.number(), z$2.lazy(() => NestedFloatWithAggregatesFilterSchema)]).optional(),
  _count: z$2.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z$2.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z$2.lazy(() => NestedFloatFilterSchema).optional(),
  _min: z$2.lazy(() => NestedFloatFilterSchema).optional(),
  _max: z$2.lazy(() => NestedFloatFilterSchema).optional()
}).strict();
var NestedDateTimeWithAggregatesFilterSchema = z$2.object({
  equals: z$2.coerce.date().optional(),
  in: z$2.coerce.date().array().optional(),
  notIn: z$2.coerce.date().array().optional(),
  lt: z$2.coerce.date().optional(),
  lte: z$2.coerce.date().optional(),
  gt: z$2.coerce.date().optional(),
  gte: z$2.coerce.date().optional(),
  not: z$2.union([z$2.coerce.date(), z$2.lazy(() => NestedDateTimeWithAggregatesFilterSchema)]).optional(),
  _count: z$2.lazy(() => NestedIntFilterSchema).optional(),
  _min: z$2.lazy(() => NestedDateTimeFilterSchema).optional(),
  _max: z$2.lazy(() => NestedDateTimeFilterSchema).optional()
}).strict();
var NestedStringFilterSchema = z$2.object({
  equals: z$2.string().optional(),
  in: z$2.string().array().optional(),
  notIn: z$2.string().array().optional(),
  lt: z$2.string().optional(),
  lte: z$2.string().optional(),
  gt: z$2.string().optional(),
  gte: z$2.string().optional(),
  contains: z$2.string().optional(),
  startsWith: z$2.string().optional(),
  endsWith: z$2.string().optional(),
  not: z$2.union([z$2.string(), z$2.lazy(() => NestedStringFilterSchema)]).optional()
}).strict();
var NestedBoolFilterSchema = z$2.object({
  equals: z$2.boolean().optional(),
  not: z$2.union([z$2.boolean(), z$2.lazy(() => NestedBoolFilterSchema)]).optional()
}).strict();
var NestedStringWithAggregatesFilterSchema = z$2.object({
  equals: z$2.string().optional(),
  in: z$2.string().array().optional(),
  notIn: z$2.string().array().optional(),
  lt: z$2.string().optional(),
  lte: z$2.string().optional(),
  gt: z$2.string().optional(),
  gte: z$2.string().optional(),
  contains: z$2.string().optional(),
  startsWith: z$2.string().optional(),
  endsWith: z$2.string().optional(),
  not: z$2.union([z$2.string(), z$2.lazy(() => NestedStringWithAggregatesFilterSchema)]).optional(),
  _count: z$2.lazy(() => NestedIntFilterSchema).optional(),
  _min: z$2.lazy(() => NestedStringFilterSchema).optional(),
  _max: z$2.lazy(() => NestedStringFilterSchema).optional()
}).strict();
var NestedBoolWithAggregatesFilterSchema = z$2.object({
  equals: z$2.boolean().optional(),
  not: z$2.union([z$2.boolean(), z$2.lazy(() => NestedBoolWithAggregatesFilterSchema)]).optional(),
  _count: z$2.lazy(() => NestedIntFilterSchema).optional(),
  _min: z$2.lazy(() => NestedBoolFilterSchema).optional(),
  _max: z$2.lazy(() => NestedBoolFilterSchema).optional()
}).strict();
var NestedDateTimeNullableFilterSchema = z$2.object({
  equals: z$2.coerce.date().optional().nullable(),
  in: z$2.coerce.date().array().optional().nullable(),
  notIn: z$2.coerce.date().array().optional().nullable(),
  lt: z$2.coerce.date().optional(),
  lte: z$2.coerce.date().optional(),
  gt: z$2.coerce.date().optional(),
  gte: z$2.coerce.date().optional(),
  not: z$2.union([z$2.coerce.date(), z$2.lazy(() => NestedDateTimeNullableFilterSchema)]).optional().nullable()
}).strict();
var NestedIntNullableWithAggregatesFilterSchema = z$2.object({
  equals: z$2.number().optional().nullable(),
  in: z$2.number().array().optional().nullable(),
  notIn: z$2.number().array().optional().nullable(),
  lt: z$2.number().optional(),
  lte: z$2.number().optional(),
  gt: z$2.number().optional(),
  gte: z$2.number().optional(),
  not: z$2.union([z$2.number(), z$2.lazy(() => NestedIntNullableWithAggregatesFilterSchema)]).optional().nullable(),
  _count: z$2.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z$2.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z$2.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z$2.lazy(() => NestedIntNullableFilterSchema).optional(),
  _max: z$2.lazy(() => NestedIntNullableFilterSchema).optional()
}).strict();
var NestedFloatNullableFilterSchema = z$2.object({
  equals: z$2.number().optional().nullable(),
  in: z$2.number().array().optional().nullable(),
  notIn: z$2.number().array().optional().nullable(),
  lt: z$2.number().optional(),
  lte: z$2.number().optional(),
  gt: z$2.number().optional(),
  gte: z$2.number().optional(),
  not: z$2.union([z$2.number(), z$2.lazy(() => NestedFloatNullableFilterSchema)]).optional().nullable()
}).strict();
var NestedDateTimeNullableWithAggregatesFilterSchema = z$2.object({
  equals: z$2.coerce.date().optional().nullable(),
  in: z$2.coerce.date().array().optional().nullable(),
  notIn: z$2.coerce.date().array().optional().nullable(),
  lt: z$2.coerce.date().optional(),
  lte: z$2.coerce.date().optional(),
  gt: z$2.coerce.date().optional(),
  gte: z$2.coerce.date().optional(),
  not: z$2.union([z$2.coerce.date(), z$2.lazy(() => NestedDateTimeNullableWithAggregatesFilterSchema)]).optional().nullable(),
  _count: z$2.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z$2.lazy(() => NestedDateTimeNullableFilterSchema).optional(),
  _max: z$2.lazy(() => NestedDateTimeNullableFilterSchema).optional()
}).strict();
var NestedEnumEquipmentStatusFilterSchema = z$2.object({
  equals: z$2.lazy(() => EquipmentStatusSchema).optional(),
  in: z$2.lazy(() => EquipmentStatusSchema).array().optional(),
  notIn: z$2.lazy(() => EquipmentStatusSchema).array().optional(),
  not: z$2.union([z$2.lazy(() => EquipmentStatusSchema), z$2.lazy(() => NestedEnumEquipmentStatusFilterSchema)]).optional()
}).strict();
var NestedEnumEquipmentStatusWithAggregatesFilterSchema = z$2.object({
  equals: z$2.lazy(() => EquipmentStatusSchema).optional(),
  in: z$2.lazy(() => EquipmentStatusSchema).array().optional(),
  notIn: z$2.lazy(() => EquipmentStatusSchema).array().optional(),
  not: z$2.union([z$2.lazy(() => EquipmentStatusSchema), z$2.lazy(() => NestedEnumEquipmentStatusWithAggregatesFilterSchema)]).optional(),
  _count: z$2.lazy(() => NestedIntFilterSchema).optional(),
  _min: z$2.lazy(() => NestedEnumEquipmentStatusFilterSchema).optional(),
  _max: z$2.lazy(() => NestedEnumEquipmentStatusFilterSchema).optional()
}).strict();
var NestedEnumMaintenanceTypeFilterSchema = z$2.object({
  equals: z$2.lazy(() => MaintenanceTypeSchema).optional(),
  in: z$2.lazy(() => MaintenanceTypeSchema).array().optional(),
  notIn: z$2.lazy(() => MaintenanceTypeSchema).array().optional(),
  not: z$2.union([z$2.lazy(() => MaintenanceTypeSchema), z$2.lazy(() => NestedEnumMaintenanceTypeFilterSchema)]).optional()
}).strict();
var NestedEnumMaintenanceTypeWithAggregatesFilterSchema = z$2.object({
  equals: z$2.lazy(() => MaintenanceTypeSchema).optional(),
  in: z$2.lazy(() => MaintenanceTypeSchema).array().optional(),
  notIn: z$2.lazy(() => MaintenanceTypeSchema).array().optional(),
  not: z$2.union([z$2.lazy(() => MaintenanceTypeSchema), z$2.lazy(() => NestedEnumMaintenanceTypeWithAggregatesFilterSchema)]).optional(),
  _count: z$2.lazy(() => NestedIntFilterSchema).optional(),
  _min: z$2.lazy(() => NestedEnumMaintenanceTypeFilterSchema).optional(),
  _max: z$2.lazy(() => NestedEnumMaintenanceTypeFilterSchema).optional()
}).strict();
var NestedFloatNullableWithAggregatesFilterSchema = z$2.object({
  equals: z$2.number().optional().nullable(),
  in: z$2.number().array().optional().nullable(),
  notIn: z$2.number().array().optional().nullable(),
  lt: z$2.number().optional(),
  lte: z$2.number().optional(),
  gt: z$2.number().optional(),
  gte: z$2.number().optional(),
  not: z$2.union([z$2.number(), z$2.lazy(() => NestedFloatNullableWithAggregatesFilterSchema)]).optional().nullable(),
  _count: z$2.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z$2.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z$2.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _min: z$2.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _max: z$2.lazy(() => NestedFloatNullableFilterSchema).optional()
}).strict();
var NestedEnumChecklistFrequencyFilterSchema = z$2.object({
  equals: z$2.lazy(() => ChecklistFrequencySchema).optional(),
  in: z$2.lazy(() => ChecklistFrequencySchema).array().optional(),
  notIn: z$2.lazy(() => ChecklistFrequencySchema).array().optional(),
  not: z$2.union([z$2.lazy(() => ChecklistFrequencySchema), z$2.lazy(() => NestedEnumChecklistFrequencyFilterSchema)]).optional()
}).strict();
var NestedEnumChecklistFrequencyWithAggregatesFilterSchema = z$2.object({
  equals: z$2.lazy(() => ChecklistFrequencySchema).optional(),
  in: z$2.lazy(() => ChecklistFrequencySchema).array().optional(),
  notIn: z$2.lazy(() => ChecklistFrequencySchema).array().optional(),
  not: z$2.union([z$2.lazy(() => ChecklistFrequencySchema), z$2.lazy(() => NestedEnumChecklistFrequencyWithAggregatesFilterSchema)]).optional(),
  _count: z$2.lazy(() => NestedIntFilterSchema).optional(),
  _min: z$2.lazy(() => NestedEnumChecklistFrequencyFilterSchema).optional(),
  _max: z$2.lazy(() => NestedEnumChecklistFrequencyFilterSchema).optional()
}).strict();
var NestedEnumChecklistItemTypeFilterSchema = z$2.object({
  equals: z$2.lazy(() => ChecklistItemTypeSchema).optional(),
  in: z$2.lazy(() => ChecklistItemTypeSchema).array().optional(),
  notIn: z$2.lazy(() => ChecklistItemTypeSchema).array().optional(),
  not: z$2.union([z$2.lazy(() => ChecklistItemTypeSchema), z$2.lazy(() => NestedEnumChecklistItemTypeFilterSchema)]).optional()
}).strict();
var NestedEnumChecklistItemTypeWithAggregatesFilterSchema = z$2.object({
  equals: z$2.lazy(() => ChecklistItemTypeSchema).optional(),
  in: z$2.lazy(() => ChecklistItemTypeSchema).array().optional(),
  notIn: z$2.lazy(() => ChecklistItemTypeSchema).array().optional(),
  not: z$2.union([z$2.lazy(() => ChecklistItemTypeSchema), z$2.lazy(() => NestedEnumChecklistItemTypeWithAggregatesFilterSchema)]).optional(),
  _count: z$2.lazy(() => NestedIntFilterSchema).optional(),
  _min: z$2.lazy(() => NestedEnumChecklistItemTypeFilterSchema).optional(),
  _max: z$2.lazy(() => NestedEnumChecklistItemTypeFilterSchema).optional()
}).strict();
var NestedEnumChecklistStatusFilterSchema = z$2.object({
  equals: z$2.lazy(() => ChecklistStatusSchema).optional(),
  in: z$2.lazy(() => ChecklistStatusSchema).array().optional(),
  notIn: z$2.lazy(() => ChecklistStatusSchema).array().optional(),
  not: z$2.union([z$2.lazy(() => ChecklistStatusSchema), z$2.lazy(() => NestedEnumChecklistStatusFilterSchema)]).optional()
}).strict();
var NestedEnumChecklistStatusWithAggregatesFilterSchema = z$2.object({
  equals: z$2.lazy(() => ChecklistStatusSchema).optional(),
  in: z$2.lazy(() => ChecklistStatusSchema).array().optional(),
  notIn: z$2.lazy(() => ChecklistStatusSchema).array().optional(),
  not: z$2.union([z$2.lazy(() => ChecklistStatusSchema), z$2.lazy(() => NestedEnumChecklistStatusWithAggregatesFilterSchema)]).optional(),
  _count: z$2.lazy(() => NestedIntFilterSchema).optional(),
  _min: z$2.lazy(() => NestedEnumChecklistStatusFilterSchema).optional(),
  _max: z$2.lazy(() => NestedEnumChecklistStatusFilterSchema).optional()
}).strict();
var NestedEnumFeedbackSourceFilterSchema = z$2.object({
  equals: z$2.lazy(() => FeedbackSourceSchema).optional(),
  in: z$2.lazy(() => FeedbackSourceSchema).array().optional(),
  notIn: z$2.lazy(() => FeedbackSourceSchema).array().optional(),
  not: z$2.union([z$2.lazy(() => FeedbackSourceSchema), z$2.lazy(() => NestedEnumFeedbackSourceFilterSchema)]).optional()
}).strict();
var NestedEnumFeedbackStatusFilterSchema = z$2.object({
  equals: z$2.lazy(() => FeedbackStatusSchema).optional(),
  in: z$2.lazy(() => FeedbackStatusSchema).array().optional(),
  notIn: z$2.lazy(() => FeedbackStatusSchema).array().optional(),
  not: z$2.union([z$2.lazy(() => FeedbackStatusSchema), z$2.lazy(() => NestedEnumFeedbackStatusFilterSchema)]).optional()
}).strict();
var NestedEnumFeedbackSourceWithAggregatesFilterSchema = z$2.object({
  equals: z$2.lazy(() => FeedbackSourceSchema).optional(),
  in: z$2.lazy(() => FeedbackSourceSchema).array().optional(),
  notIn: z$2.lazy(() => FeedbackSourceSchema).array().optional(),
  not: z$2.union([z$2.lazy(() => FeedbackSourceSchema), z$2.lazy(() => NestedEnumFeedbackSourceWithAggregatesFilterSchema)]).optional(),
  _count: z$2.lazy(() => NestedIntFilterSchema).optional(),
  _min: z$2.lazy(() => NestedEnumFeedbackSourceFilterSchema).optional(),
  _max: z$2.lazy(() => NestedEnumFeedbackSourceFilterSchema).optional()
}).strict();
var NestedEnumFeedbackStatusWithAggregatesFilterSchema = z$2.object({
  equals: z$2.lazy(() => FeedbackStatusSchema).optional(),
  in: z$2.lazy(() => FeedbackStatusSchema).array().optional(),
  notIn: z$2.lazy(() => FeedbackStatusSchema).array().optional(),
  not: z$2.union([z$2.lazy(() => FeedbackStatusSchema), z$2.lazy(() => NestedEnumFeedbackStatusWithAggregatesFilterSchema)]).optional(),
  _count: z$2.lazy(() => NestedIntFilterSchema).optional(),
  _min: z$2.lazy(() => NestedEnumFeedbackStatusFilterSchema).optional(),
  _max: z$2.lazy(() => NestedEnumFeedbackStatusFilterSchema).optional()
}).strict();
var NestedEnumTaskTypeFilterSchema = z$2.object({
  equals: z$2.lazy(() => TaskTypeSchema).optional(),
  in: z$2.lazy(() => TaskTypeSchema).array().optional(),
  notIn: z$2.lazy(() => TaskTypeSchema).array().optional(),
  not: z$2.union([z$2.lazy(() => TaskTypeSchema), z$2.lazy(() => NestedEnumTaskTypeFilterSchema)]).optional()
}).strict();
var NestedEnumTaskTypeWithAggregatesFilterSchema = z$2.object({
  equals: z$2.lazy(() => TaskTypeSchema).optional(),
  in: z$2.lazy(() => TaskTypeSchema).array().optional(),
  notIn: z$2.lazy(() => TaskTypeSchema).array().optional(),
  not: z$2.union([z$2.lazy(() => TaskTypeSchema), z$2.lazy(() => NestedEnumTaskTypeWithAggregatesFilterSchema)]).optional(),
  _count: z$2.lazy(() => NestedIntFilterSchema).optional(),
  _min: z$2.lazy(() => NestedEnumTaskTypeFilterSchema).optional(),
  _max: z$2.lazy(() => NestedEnumTaskTypeFilterSchema).optional()
}).strict();
var NestedEnumDayOfWeekFilterSchema = z$2.object({
  equals: z$2.lazy(() => DayOfWeekSchema).optional(),
  in: z$2.lazy(() => DayOfWeekSchema).array().optional(),
  notIn: z$2.lazy(() => DayOfWeekSchema).array().optional(),
  not: z$2.union([z$2.lazy(() => DayOfWeekSchema), z$2.lazy(() => NestedEnumDayOfWeekFilterSchema)]).optional()
}).strict();
var NestedEnumDayOfWeekWithAggregatesFilterSchema = z$2.object({
  equals: z$2.lazy(() => DayOfWeekSchema).optional(),
  in: z$2.lazy(() => DayOfWeekSchema).array().optional(),
  notIn: z$2.lazy(() => DayOfWeekSchema).array().optional(),
  not: z$2.union([z$2.lazy(() => DayOfWeekSchema), z$2.lazy(() => NestedEnumDayOfWeekWithAggregatesFilterSchema)]).optional(),
  _count: z$2.lazy(() => NestedIntFilterSchema).optional(),
  _min: z$2.lazy(() => NestedEnumDayOfWeekFilterSchema).optional(),
  _max: z$2.lazy(() => NestedEnumDayOfWeekFilterSchema).optional()
}).strict();
var NestedEnumConstraintTypeFilterSchema = z$2.object({
  equals: z$2.lazy(() => ConstraintTypeSchema).optional(),
  in: z$2.lazy(() => ConstraintTypeSchema).array().optional(),
  notIn: z$2.lazy(() => ConstraintTypeSchema).array().optional(),
  not: z$2.union([z$2.lazy(() => ConstraintTypeSchema), z$2.lazy(() => NestedEnumConstraintTypeFilterSchema)]).optional()
}).strict();
var NestedEnumConstraintTypeWithAggregatesFilterSchema = z$2.object({
  equals: z$2.lazy(() => ConstraintTypeSchema).optional(),
  in: z$2.lazy(() => ConstraintTypeSchema).array().optional(),
  notIn: z$2.lazy(() => ConstraintTypeSchema).array().optional(),
  not: z$2.union([z$2.lazy(() => ConstraintTypeSchema), z$2.lazy(() => NestedEnumConstraintTypeWithAggregatesFilterSchema)]).optional(),
  _count: z$2.lazy(() => NestedIntFilterSchema).optional(),
  _min: z$2.lazy(() => NestedEnumConstraintTypeFilterSchema).optional(),
  _max: z$2.lazy(() => NestedEnumConstraintTypeFilterSchema).optional()
}).strict();
var NestedEnumUserRoleFilterSchema = z$2.object({
  equals: z$2.lazy(() => UserRoleSchema).optional(),
  in: z$2.lazy(() => UserRoleSchema).array().optional(),
  notIn: z$2.lazy(() => UserRoleSchema).array().optional(),
  not: z$2.union([z$2.lazy(() => UserRoleSchema), z$2.lazy(() => NestedEnumUserRoleFilterSchema)]).optional()
}).strict();
var NestedEnumUserRoleWithAggregatesFilterSchema = z$2.object({
  equals: z$2.lazy(() => UserRoleSchema).optional(),
  in: z$2.lazy(() => UserRoleSchema).array().optional(),
  notIn: z$2.lazy(() => UserRoleSchema).array().optional(),
  not: z$2.union([z$2.lazy(() => UserRoleSchema), z$2.lazy(() => NestedEnumUserRoleWithAggregatesFilterSchema)]).optional(),
  _count: z$2.lazy(() => NestedIntFilterSchema).optional(),
  _min: z$2.lazy(() => NestedEnumUserRoleFilterSchema).optional(),
  _max: z$2.lazy(() => NestedEnumUserRoleFilterSchema).optional()
}).strict();
var NestedEnumOrderStatusFilterSchema = z$2.object({
  equals: z$2.lazy(() => OrderStatusSchema).optional(),
  in: z$2.lazy(() => OrderStatusSchema).array().optional(),
  notIn: z$2.lazy(() => OrderStatusSchema).array().optional(),
  not: z$2.union([z$2.lazy(() => OrderStatusSchema), z$2.lazy(() => NestedEnumOrderStatusFilterSchema)]).optional()
}).strict();
var NestedEnumOrderStatusWithAggregatesFilterSchema = z$2.object({
  equals: z$2.lazy(() => OrderStatusSchema).optional(),
  in: z$2.lazy(() => OrderStatusSchema).array().optional(),
  notIn: z$2.lazy(() => OrderStatusSchema).array().optional(),
  not: z$2.union([z$2.lazy(() => OrderStatusSchema), z$2.lazy(() => NestedEnumOrderStatusWithAggregatesFilterSchema)]).optional(),
  _count: z$2.lazy(() => NestedIntFilterSchema).optional(),
  _min: z$2.lazy(() => NestedEnumOrderStatusFilterSchema).optional(),
  _max: z$2.lazy(() => NestedEnumOrderStatusFilterSchema).optional()
}).strict();
var NestedEnumShiftStatusFilterSchema = z$2.object({
  equals: z$2.lazy(() => ShiftStatusSchema).optional(),
  in: z$2.lazy(() => ShiftStatusSchema).array().optional(),
  notIn: z$2.lazy(() => ShiftStatusSchema).array().optional(),
  not: z$2.union([z$2.lazy(() => ShiftStatusSchema), z$2.lazy(() => NestedEnumShiftStatusFilterSchema)]).optional()
}).strict();
var NestedEnumShiftStatusWithAggregatesFilterSchema = z$2.object({
  equals: z$2.lazy(() => ShiftStatusSchema).optional(),
  in: z$2.lazy(() => ShiftStatusSchema).array().optional(),
  notIn: z$2.lazy(() => ShiftStatusSchema).array().optional(),
  not: z$2.union([z$2.lazy(() => ShiftStatusSchema), z$2.lazy(() => NestedEnumShiftStatusWithAggregatesFilterSchema)]).optional(),
  _count: z$2.lazy(() => NestedIntFilterSchema).optional(),
  _min: z$2.lazy(() => NestedEnumShiftStatusFilterSchema).optional(),
  _max: z$2.lazy(() => NestedEnumShiftStatusFilterSchema).optional()
}).strict();
var NestedEnumPrepStatusFilterSchema = z$2.object({
  equals: z$2.lazy(() => PrepStatusSchema).optional(),
  in: z$2.lazy(() => PrepStatusSchema).array().optional(),
  notIn: z$2.lazy(() => PrepStatusSchema).array().optional(),
  not: z$2.union([z$2.lazy(() => PrepStatusSchema), z$2.lazy(() => NestedEnumPrepStatusFilterSchema)]).optional()
}).strict();
var NestedEnumPrepStatusWithAggregatesFilterSchema = z$2.object({
  equals: z$2.lazy(() => PrepStatusSchema).optional(),
  in: z$2.lazy(() => PrepStatusSchema).array().optional(),
  notIn: z$2.lazy(() => PrepStatusSchema).array().optional(),
  not: z$2.union([z$2.lazy(() => PrepStatusSchema), z$2.lazy(() => NestedEnumPrepStatusWithAggregatesFilterSchema)]).optional(),
  _count: z$2.lazy(() => NestedIntFilterSchema).optional(),
  _min: z$2.lazy(() => NestedEnumPrepStatusFilterSchema).optional(),
  _max: z$2.lazy(() => NestedEnumPrepStatusFilterSchema).optional()
}).strict();
var RestaurantCreateWithoutSalesTransactionsInputSchema = z$2.object({
  name: z$2.string(),
  imageUrl: z$2.string().optional().nullable(),
  address: z$2.string(),
  city: z$2.string(),
  zipCode: z$2.string(),
  state: z$2.string(),
  owner: z$2.string(),
  foodCost: z$2.number().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  isDeleted: z$2.boolean().optional(),
  deleted: z$2.coerce.date().optional().nullable(),
  organization: z$2.lazy(() => OrganizationCreateNestedOneWithoutRestaurantsInputSchema).optional(),
  users: z$2.lazy(() => UserCreateNestedManyWithoutRestaurantInputSchema).optional(),
  cookbooks: z$2.lazy(() => CookBookCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: z$2.lazy(() => InventoryCreateNestedOneWithoutRestaurantInputSchema).optional(),
  orders: z$2.lazy(() => OrderCreateNestedManyWithoutRestaurantInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: z$2.lazy(() => MenuCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipment: z$2.lazy(() => EquipmentCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklist: z$2.lazy(() => QualityChecklistCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qustomerFeedback: z$2.lazy(() => CustomerFeedbackCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();
var RestaurantUncheckedCreateWithoutSalesTransactionsInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  imageUrl: z$2.string().optional().nullable(),
  address: z$2.string(),
  city: z$2.string(),
  zipCode: z$2.string(),
  state: z$2.string(),
  owner: z$2.string(),
  organizationId: z$2.number().int().optional().nullable(),
  foodCost: z$2.number().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  isDeleted: z$2.boolean().optional(),
  deleted: z$2.coerce.date().optional().nullable(),
  users: z$2.lazy(() => UserUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  cookbooks: z$2.lazy(() => CookBookUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: z$2.lazy(() => InventoryUncheckedCreateNestedOneWithoutRestaurantInputSchema).optional(),
  orders: z$2.lazy(() => OrderUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: z$2.lazy(() => MenuUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipment: z$2.lazy(() => EquipmentUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklist: z$2.lazy(() => QualityChecklistUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qustomerFeedback: z$2.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();
var RestaurantCreateOrConnectWithoutSalesTransactionsInputSchema = z$2.object({
  where: z$2.lazy(() => RestaurantWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => RestaurantCreateWithoutSalesTransactionsInputSchema), z$2.lazy(() => RestaurantUncheckedCreateWithoutSalesTransactionsInputSchema)])
}).strict();
var MenuItemCreateWithoutSalesTransactionsInputSchema = z$2.object({
  name: z$2.string(),
  description: z$2.string().optional().nullable(),
  price: z$2.number(),
  foodCost: z$2.number(),
  recipeIds: z$2.union([z$2.lazy(() => MenuItemCreaterecipeIdsInputSchema), z$2.number().int().array()]).optional(),
  recipeServingsAmount: z$2.union([z$2.lazy(() => MenuItemCreaterecipeServingsAmountInputSchema), z$2.number().array()]).optional(),
  recipeServingsCost: z$2.union([z$2.lazy(() => MenuItemCreaterecipeServingsCostInputSchema), z$2.number().array()]).optional(),
  allergens: z$2.union([z$2.lazy(() => MenuItemCreateallergensInputSchema), z$2.string().array()]).optional(),
  nutritionalInfoId: z$2.number().int().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  nutritionalInfo: z$2.lazy(() => NutritionalInfoCreateNestedOneWithoutMenuItemInputSchema).optional(),
  menu: z$2.lazy(() => MenuCreateNestedOneWithoutMenuItemsInputSchema),
  recipes: z$2.lazy(() => RecipeCreateNestedManyWithoutMenuItemsInputSchema).optional(),
  menuItemRecipe: z$2.lazy(() => MenuItemRecipeCreateNestedManyWithoutMenuItemInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemCreateNestedManyWithoutMenuItemInputSchema).optional(),
  nutritionalRecommendation: z$2.lazy(() => NutritionalRecommendationCreateNestedManyWithoutMenuItemInputSchema).optional(),
  category: z$2.lazy(() => MenuCategoryCreateNestedOneWithoutMenuItemsInputSchema).optional(),
  feedback: z$2.lazy(() => CustomerFeedbackCreateNestedManyWithoutMenuItemInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionCreateNestedManyWithoutMenuItemsInputSchema).optional()
}).strict();
var MenuItemUncheckedCreateWithoutSalesTransactionsInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  description: z$2.string().optional().nullable(),
  price: z$2.number(),
  foodCost: z$2.number(),
  recipeIds: z$2.union([z$2.lazy(() => MenuItemCreaterecipeIdsInputSchema), z$2.number().int().array()]).optional(),
  recipeServingsAmount: z$2.union([z$2.lazy(() => MenuItemCreaterecipeServingsAmountInputSchema), z$2.number().array()]).optional(),
  recipeServingsCost: z$2.union([z$2.lazy(() => MenuItemCreaterecipeServingsCostInputSchema), z$2.number().array()]).optional(),
  allergens: z$2.union([z$2.lazy(() => MenuItemCreateallergensInputSchema), z$2.string().array()]).optional(),
  nutritionalInfoId: z$2.number().int().optional().nullable(),
  menuId: z$2.number().int(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  categoryId: z$2.number().int().optional().nullable(),
  nutritionalInfo: z$2.lazy(() => NutritionalInfoUncheckedCreateNestedOneWithoutMenuItemInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeUncheckedCreateNestedManyWithoutMenuItemsInputSchema).optional(),
  menuItemRecipe: z$2.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  nutritionalRecommendation: z$2.lazy(() => NutritionalRecommendationUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  feedback: z$2.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutMenuItemsInputSchema).optional()
}).strict();
var MenuItemCreateOrConnectWithoutSalesTransactionsInputSchema = z$2.object({
  where: z$2.lazy(() => MenuItemWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => MenuItemCreateWithoutSalesTransactionsInputSchema), z$2.lazy(() => MenuItemUncheckedCreateWithoutSalesTransactionsInputSchema)])
}).strict();
var RestaurantUpsertWithoutSalesTransactionsInputSchema = z$2.object({
  update: z$2.union([z$2.lazy(() => RestaurantUpdateWithoutSalesTransactionsInputSchema), z$2.lazy(() => RestaurantUncheckedUpdateWithoutSalesTransactionsInputSchema)]),
  create: z$2.union([z$2.lazy(() => RestaurantCreateWithoutSalesTransactionsInputSchema), z$2.lazy(() => RestaurantUncheckedCreateWithoutSalesTransactionsInputSchema)]),
  where: z$2.lazy(() => RestaurantWhereInputSchema).optional()
}).strict();
var RestaurantUpdateToOneWithWhereWithoutSalesTransactionsInputSchema = z$2.object({
  where: z$2.lazy(() => RestaurantWhereInputSchema).optional(),
  data: z$2.union([z$2.lazy(() => RestaurantUpdateWithoutSalesTransactionsInputSchema), z$2.lazy(() => RestaurantUncheckedUpdateWithoutSalesTransactionsInputSchema)])
}).strict();
var RestaurantUpdateWithoutSalesTransactionsInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  address: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  city: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  zipCode: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  state: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  owner: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  isDeleted: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  deleted: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  organization: z$2.lazy(() => OrganizationUpdateOneWithoutRestaurantsNestedInputSchema).optional(),
  users: z$2.lazy(() => UserUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  cookbooks: z$2.lazy(() => CookBookUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: z$2.lazy(() => InventoryUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  orders: z$2.lazy(() => OrderUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: z$2.lazy(() => MenuUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipment: z$2.lazy(() => EquipmentUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklist: z$2.lazy(() => QualityChecklistUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qustomerFeedback: z$2.lazy(() => CustomerFeedbackUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();
var RestaurantUncheckedUpdateWithoutSalesTransactionsInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  address: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  city: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  zipCode: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  state: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  owner: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  organizationId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  isDeleted: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  deleted: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  users: z$2.lazy(() => UserUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  cookbooks: z$2.lazy(() => CookBookUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: z$2.lazy(() => InventoryUncheckedUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  orders: z$2.lazy(() => OrderUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: z$2.lazy(() => MenuUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipment: z$2.lazy(() => EquipmentUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklist: z$2.lazy(() => QualityChecklistUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qustomerFeedback: z$2.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();
var MenuItemUpsertWithoutSalesTransactionsInputSchema = z$2.object({
  update: z$2.union([z$2.lazy(() => MenuItemUpdateWithoutSalesTransactionsInputSchema), z$2.lazy(() => MenuItemUncheckedUpdateWithoutSalesTransactionsInputSchema)]),
  create: z$2.union([z$2.lazy(() => MenuItemCreateWithoutSalesTransactionsInputSchema), z$2.lazy(() => MenuItemUncheckedCreateWithoutSalesTransactionsInputSchema)]),
  where: z$2.lazy(() => MenuItemWhereInputSchema).optional()
}).strict();
var MenuItemUpdateToOneWithWhereWithoutSalesTransactionsInputSchema = z$2.object({
  where: z$2.lazy(() => MenuItemWhereInputSchema).optional(),
  data: z$2.union([z$2.lazy(() => MenuItemUpdateWithoutSalesTransactionsInputSchema), z$2.lazy(() => MenuItemUncheckedUpdateWithoutSalesTransactionsInputSchema)])
}).strict();
var MenuItemUpdateWithoutSalesTransactionsInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipeIds: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeIdsInputSchema), z$2.number().int().array()]).optional(),
  recipeServingsAmount: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema), z$2.number().array()]).optional(),
  recipeServingsCost: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema), z$2.number().array()]).optional(),
  allergens: z$2.union([z$2.lazy(() => MenuItemUpdateallergensInputSchema), z$2.string().array()]).optional(),
  nutritionalInfoId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  nutritionalInfo: z$2.lazy(() => NutritionalInfoUpdateOneWithoutMenuItemNestedInputSchema).optional(),
  menu: z$2.lazy(() => MenuUpdateOneRequiredWithoutMenuItemsNestedInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeUpdateManyWithoutMenuItemsNestedInputSchema).optional(),
  menuItemRecipe: z$2.lazy(() => MenuItemRecipeUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  nutritionalRecommendation: z$2.lazy(() => NutritionalRecommendationUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  category: z$2.lazy(() => MenuCategoryUpdateOneWithoutMenuItemsNestedInputSchema).optional(),
  feedback: z$2.lazy(() => CustomerFeedbackUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionUpdateManyWithoutMenuItemsNestedInputSchema).optional()
}).strict();
var MenuItemUncheckedUpdateWithoutSalesTransactionsInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipeIds: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeIdsInputSchema), z$2.number().int().array()]).optional(),
  recipeServingsAmount: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema), z$2.number().array()]).optional(),
  recipeServingsCost: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema), z$2.number().array()]).optional(),
  allergens: z$2.union([z$2.lazy(() => MenuItemUpdateallergensInputSchema), z$2.string().array()]).optional(),
  nutritionalInfoId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  menuId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  categoryId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  nutritionalInfo: z$2.lazy(() => NutritionalInfoUncheckedUpdateOneWithoutMenuItemNestedInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeUncheckedUpdateManyWithoutMenuItemsNestedInputSchema).optional(),
  menuItemRecipe: z$2.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  nutritionalRecommendation: z$2.lazy(() => NutritionalRecommendationUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  feedback: z$2.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutMenuItemsNestedInputSchema).optional()
}).strict();
var MenuCreateWithoutMenuCategoryInputSchema = z$2.object({
  name: z$2.string(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  restaurant: z$2.lazy(() => RestaurantCreateNestedOneWithoutMenusInputSchema),
  menuItems: z$2.lazy(() => MenuItemCreateNestedManyWithoutMenuInputSchema).optional()
}).strict();
var MenuUncheckedCreateWithoutMenuCategoryInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  restaurantId: z$2.number().int(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  menuItems: z$2.lazy(() => MenuItemUncheckedCreateNestedManyWithoutMenuInputSchema).optional()
}).strict();
var MenuCreateOrConnectWithoutMenuCategoryInputSchema = z$2.object({
  where: z$2.lazy(() => MenuWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => MenuCreateWithoutMenuCategoryInputSchema), z$2.lazy(() => MenuUncheckedCreateWithoutMenuCategoryInputSchema)])
}).strict();
var MenuItemCreateWithoutCategoryInputSchema = z$2.object({
  name: z$2.string(),
  description: z$2.string().optional().nullable(),
  price: z$2.number(),
  foodCost: z$2.number(),
  recipeIds: z$2.union([z$2.lazy(() => MenuItemCreaterecipeIdsInputSchema), z$2.number().int().array()]).optional(),
  recipeServingsAmount: z$2.union([z$2.lazy(() => MenuItemCreaterecipeServingsAmountInputSchema), z$2.number().array()]).optional(),
  recipeServingsCost: z$2.union([z$2.lazy(() => MenuItemCreaterecipeServingsCostInputSchema), z$2.number().array()]).optional(),
  allergens: z$2.union([z$2.lazy(() => MenuItemCreateallergensInputSchema), z$2.string().array()]).optional(),
  nutritionalInfoId: z$2.number().int().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  nutritionalInfo: z$2.lazy(() => NutritionalInfoCreateNestedOneWithoutMenuItemInputSchema).optional(),
  menu: z$2.lazy(() => MenuCreateNestedOneWithoutMenuItemsInputSchema),
  recipes: z$2.lazy(() => RecipeCreateNestedManyWithoutMenuItemsInputSchema).optional(),
  menuItemRecipe: z$2.lazy(() => MenuItemRecipeCreateNestedManyWithoutMenuItemInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsCreateNestedManyWithoutMenuItemInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemCreateNestedManyWithoutMenuItemInputSchema).optional(),
  nutritionalRecommendation: z$2.lazy(() => NutritionalRecommendationCreateNestedManyWithoutMenuItemInputSchema).optional(),
  feedback: z$2.lazy(() => CustomerFeedbackCreateNestedManyWithoutMenuItemInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionCreateNestedManyWithoutMenuItemsInputSchema).optional()
}).strict();
var MenuItemUncheckedCreateWithoutCategoryInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  description: z$2.string().optional().nullable(),
  price: z$2.number(),
  foodCost: z$2.number(),
  recipeIds: z$2.union([z$2.lazy(() => MenuItemCreaterecipeIdsInputSchema), z$2.number().int().array()]).optional(),
  recipeServingsAmount: z$2.union([z$2.lazy(() => MenuItemCreaterecipeServingsAmountInputSchema), z$2.number().array()]).optional(),
  recipeServingsCost: z$2.union([z$2.lazy(() => MenuItemCreaterecipeServingsCostInputSchema), z$2.number().array()]).optional(),
  allergens: z$2.union([z$2.lazy(() => MenuItemCreateallergensInputSchema), z$2.string().array()]).optional(),
  nutritionalInfoId: z$2.number().int().optional().nullable(),
  menuId: z$2.number().int(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  nutritionalInfo: z$2.lazy(() => NutritionalInfoUncheckedCreateNestedOneWithoutMenuItemInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeUncheckedCreateNestedManyWithoutMenuItemsInputSchema).optional(),
  menuItemRecipe: z$2.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  nutritionalRecommendation: z$2.lazy(() => NutritionalRecommendationUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  feedback: z$2.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutMenuItemsInputSchema).optional()
}).strict();
var MenuItemCreateOrConnectWithoutCategoryInputSchema = z$2.object({
  where: z$2.lazy(() => MenuItemWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => MenuItemCreateWithoutCategoryInputSchema), z$2.lazy(() => MenuItemUncheckedCreateWithoutCategoryInputSchema)])
}).strict();
var MenuItemCreateManyCategoryInputEnvelopeSchema = z$2.object({
  data: z$2.union([z$2.lazy(() => MenuItemCreateManyCategoryInputSchema), z$2.lazy(() => MenuItemCreateManyCategoryInputSchema).array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var MenuUpsertWithoutMenuCategoryInputSchema = z$2.object({
  update: z$2.union([z$2.lazy(() => MenuUpdateWithoutMenuCategoryInputSchema), z$2.lazy(() => MenuUncheckedUpdateWithoutMenuCategoryInputSchema)]),
  create: z$2.union([z$2.lazy(() => MenuCreateWithoutMenuCategoryInputSchema), z$2.lazy(() => MenuUncheckedCreateWithoutMenuCategoryInputSchema)]),
  where: z$2.lazy(() => MenuWhereInputSchema).optional()
}).strict();
var MenuUpdateToOneWithWhereWithoutMenuCategoryInputSchema = z$2.object({
  where: z$2.lazy(() => MenuWhereInputSchema).optional(),
  data: z$2.union([z$2.lazy(() => MenuUpdateWithoutMenuCategoryInputSchema), z$2.lazy(() => MenuUncheckedUpdateWithoutMenuCategoryInputSchema)])
}).strict();
var MenuUpdateWithoutMenuCategoryInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: z$2.lazy(() => RestaurantUpdateOneRequiredWithoutMenusNestedInputSchema).optional(),
  menuItems: z$2.lazy(() => MenuItemUpdateManyWithoutMenuNestedInputSchema).optional()
}).strict();
var MenuUncheckedUpdateWithoutMenuCategoryInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  menuItems: z$2.lazy(() => MenuItemUncheckedUpdateManyWithoutMenuNestedInputSchema).optional()
}).strict();
var MenuItemUpsertWithWhereUniqueWithoutCategoryInputSchema = z$2.object({
  where: z$2.lazy(() => MenuItemWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => MenuItemUpdateWithoutCategoryInputSchema), z$2.lazy(() => MenuItemUncheckedUpdateWithoutCategoryInputSchema)]),
  create: z$2.union([z$2.lazy(() => MenuItemCreateWithoutCategoryInputSchema), z$2.lazy(() => MenuItemUncheckedCreateWithoutCategoryInputSchema)])
}).strict();
var MenuItemUpdateWithWhereUniqueWithoutCategoryInputSchema = z$2.object({
  where: z$2.lazy(() => MenuItemWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => MenuItemUpdateWithoutCategoryInputSchema), z$2.lazy(() => MenuItemUncheckedUpdateWithoutCategoryInputSchema)])
}).strict();
var MenuItemUpdateManyWithWhereWithoutCategoryInputSchema = z$2.object({
  where: z$2.lazy(() => MenuItemScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => MenuItemUpdateManyMutationInputSchema), z$2.lazy(() => MenuItemUncheckedUpdateManyWithoutCategoryInputSchema)])
}).strict();
var MenuItemScalarWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => MenuItemScalarWhereInputSchema), z$2.lazy(() => MenuItemScalarWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => MenuItemScalarWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => MenuItemScalarWhereInputSchema), z$2.lazy(() => MenuItemScalarWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  name: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  description: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  price: z$2.union([z$2.lazy(() => FloatFilterSchema), z$2.number()]).optional(),
  foodCost: z$2.union([z$2.lazy(() => FloatFilterSchema), z$2.number()]).optional(),
  recipeIds: z$2.lazy(() => IntNullableListFilterSchema).optional(),
  recipeServingsAmount: z$2.lazy(() => FloatNullableListFilterSchema).optional(),
  recipeServingsCost: z$2.lazy(() => FloatNullableListFilterSchema).optional(),
  allergens: z$2.lazy(() => StringNullableListFilterSchema).optional(),
  nutritionalInfoId: z$2.union([z$2.lazy(() => IntNullableFilterSchema), z$2.number()]).optional().nullable(),
  menuId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  categoryId: z$2.union([z$2.lazy(() => IntNullableFilterSchema), z$2.number()]).optional().nullable()
}).strict();
var RecipeCreateWithoutVersionsInputSchema = z$2.object({
  name: z$2.string(),
  imageUrl: z$2.union([z$2.lazy(() => RecipeCreateimageUrlInputSchema), z$2.string().array()]).optional(),
  description: z$2.string().optional().nullable(),
  servings: z$2.number().int(),
  cookTime: z$2.number().int(),
  prepTime: z$2.number().int(),
  frequency: z$2.number().int().optional().nullable(),
  foodCost: z$2.number().optional().nullable(),
  isDeleted: z$2.boolean().optional(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  restaurant: z$2.lazy(() => RestaurantCreateNestedOneWithoutRecipesInputSchema),
  cookBook: z$2.lazy(() => CookBookCreateNestedOneWithoutRecipesInputSchema),
  ingredients: z$2.lazy(() => RecipeIngredientCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z$2.lazy(() => MenuItemCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: z$2.lazy(() => FoodCostHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: z$2.lazy(() => PrepHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z$2.lazy(() => PrepBoardCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  MenuItemRecipe: z$2.lazy(() => MenuItemRecipeCreateNestedManyWithoutRecipeInputSchema).optional(),
  ProductionPlanItem: z$2.lazy(() => ProductionPlanItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z$2.lazy(() => RecipeTagCreateNestedManyWithoutRecipesInputSchema).optional(),
  equipment: z$2.lazy(() => RecipeEquipmentCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionCreateNestedManyWithoutRecipesInputSchema).optional()
}).strict();
var RecipeUncheckedCreateWithoutVersionsInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  imageUrl: z$2.union([z$2.lazy(() => RecipeCreateimageUrlInputSchema), z$2.string().array()]).optional(),
  description: z$2.string().optional().nullable(),
  servings: z$2.number().int(),
  cookTime: z$2.number().int(),
  prepTime: z$2.number().int(),
  frequency: z$2.number().int().optional().nullable(),
  restaurantId: z$2.number().int(),
  cookBookId: z$2.number().int(),
  foodCost: z$2.number().optional().nullable(),
  isDeleted: z$2.boolean().optional(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  ingredients: z$2.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z$2.lazy(() => MenuItemUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: z$2.lazy(() => FoodCostHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: z$2.lazy(() => PrepHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z$2.lazy(() => PrepBoardUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  MenuItemRecipe: z$2.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  ProductionPlanItem: z$2.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z$2.lazy(() => RecipeTagUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  equipment: z$2.lazy(() => RecipeEquipmentUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutRecipesInputSchema).optional()
}).strict();
var RecipeCreateOrConnectWithoutVersionsInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => RecipeCreateWithoutVersionsInputSchema), z$2.lazy(() => RecipeUncheckedCreateWithoutVersionsInputSchema)])
}).strict();
var RecipeIngredientCreateWithoutRecipeVersionInputSchema = z$2.object({
  quantity: z$2.number(),
  unit: z$2.string(),
  joinAt: z$2.coerce.date().optional(),
  recipe: z$2.lazy(() => RecipeCreateNestedOneWithoutIngredientsInputSchema),
  ingredient: z$2.lazy(() => IngredientCreateNestedOneWithoutRecipeIngredientsInputSchema)
}).strict();
var RecipeIngredientUncheckedCreateWithoutRecipeVersionInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  recipeId: z$2.number().int(),
  ingredientId: z$2.number().int(),
  quantity: z$2.number(),
  unit: z$2.string(),
  joinAt: z$2.coerce.date().optional()
}).strict();
var RecipeIngredientCreateOrConnectWithoutRecipeVersionInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeIngredientWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => RecipeIngredientCreateWithoutRecipeVersionInputSchema), z$2.lazy(() => RecipeIngredientUncheckedCreateWithoutRecipeVersionInputSchema)])
}).strict();
var RecipeIngredientCreateManyRecipeVersionInputEnvelopeSchema = z$2.object({
  data: z$2.union([z$2.lazy(() => RecipeIngredientCreateManyRecipeVersionInputSchema), z$2.lazy(() => RecipeIngredientCreateManyRecipeVersionInputSchema).array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var RecipeInstructionCreateWithoutRecipeVersionInputSchema = z$2.object({
  stepNumber: z$2.number().int(),
  instruction: z$2.string(),
  imageUrl: z$2.string().optional().nullable(),
  recipe: z$2.lazy(() => RecipeCreateNestedOneWithoutInstructionsInputSchema)
}).strict();
var RecipeInstructionUncheckedCreateWithoutRecipeVersionInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  recipeId: z$2.number().int(),
  stepNumber: z$2.number().int(),
  instruction: z$2.string(),
  imageUrl: z$2.string().optional().nullable()
}).strict();
var RecipeInstructionCreateOrConnectWithoutRecipeVersionInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeInstructionWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => RecipeInstructionCreateWithoutRecipeVersionInputSchema), z$2.lazy(() => RecipeInstructionUncheckedCreateWithoutRecipeVersionInputSchema)])
}).strict();
var RecipeInstructionCreateManyRecipeVersionInputEnvelopeSchema = z$2.object({
  data: z$2.union([z$2.lazy(() => RecipeInstructionCreateManyRecipeVersionInputSchema), z$2.lazy(() => RecipeInstructionCreateManyRecipeVersionInputSchema).array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var UserCreateWithoutRecipeVersionsCreatedInputSchema = z$2.object({
  email: z$2.string(),
  sub: z$2.number().int().optional().nullable(),
  passwordHash: z$2.string(),
  firstName: z$2.string(),
  lastName: z$2.string(),
  profileImage: z$2.string().optional().nullable(),
  verified: z$2.boolean().optional(),
  role: z$2.lazy(() => UserRoleSchema),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  organization: z$2.lazy(() => OrganizationCreateNestedOneWithoutUsersInputSchema).optional(),
  restaurant: z$2.lazy(() => RestaurantCreateNestedOneWithoutUsersInputSchema).optional(),
  shifts: z$2.lazy(() => ShiftCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: z$2.lazy(() => InventoryItemCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: z$2.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: z$2.lazy(() => PasswordResetCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItem: z$2.lazy(() => ProductionPlanItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: z$2.lazy(() => AvailabilityCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraint: z$2.lazy(() => SchedulingConstraintCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedback: z$2.lazy(() => CustomerFeedbackCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsApproved: z$2.lazy(() => RecipeVersionCreateNestedManyWithoutApprovedByInputSchema).optional()
}).strict();
var UserUncheckedCreateWithoutRecipeVersionsCreatedInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  email: z$2.string(),
  sub: z$2.number().int().optional().nullable(),
  passwordHash: z$2.string(),
  firstName: z$2.string(),
  lastName: z$2.string(),
  profileImage: z$2.string().optional().nullable(),
  verified: z$2.boolean().optional(),
  role: z$2.lazy(() => UserRoleSchema),
  organizationId: z$2.number().int().optional().nullable(),
  restaurantId: z$2.number().int().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  shifts: z$2.lazy(() => ShiftUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: z$2.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: z$2.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: z$2.lazy(() => PasswordResetUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItem: z$2.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: z$2.lazy(() => AvailabilityUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraint: z$2.lazy(() => SchedulingConstraintUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteUncheckedCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedback: z$2.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsApproved: z$2.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutApprovedByInputSchema).optional()
}).strict();
var UserCreateOrConnectWithoutRecipeVersionsCreatedInputSchema = z$2.object({
  where: z$2.lazy(() => UserWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => UserCreateWithoutRecipeVersionsCreatedInputSchema), z$2.lazy(() => UserUncheckedCreateWithoutRecipeVersionsCreatedInputSchema)])
}).strict();
var UserCreateWithoutRecipeVersionsApprovedInputSchema = z$2.object({
  email: z$2.string(),
  sub: z$2.number().int().optional().nullable(),
  passwordHash: z$2.string(),
  firstName: z$2.string(),
  lastName: z$2.string(),
  profileImage: z$2.string().optional().nullable(),
  verified: z$2.boolean().optional(),
  role: z$2.lazy(() => UserRoleSchema),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  organization: z$2.lazy(() => OrganizationCreateNestedOneWithoutUsersInputSchema).optional(),
  restaurant: z$2.lazy(() => RestaurantCreateNestedOneWithoutUsersInputSchema).optional(),
  shifts: z$2.lazy(() => ShiftCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: z$2.lazy(() => InventoryItemCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: z$2.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: z$2.lazy(() => PasswordResetCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItem: z$2.lazy(() => ProductionPlanItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: z$2.lazy(() => AvailabilityCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraint: z$2.lazy(() => SchedulingConstraintCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedback: z$2.lazy(() => CustomerFeedbackCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: z$2.lazy(() => RecipeVersionCreateNestedManyWithoutCreatedByInputSchema).optional()
}).strict();
var UserUncheckedCreateWithoutRecipeVersionsApprovedInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  email: z$2.string(),
  sub: z$2.number().int().optional().nullable(),
  passwordHash: z$2.string(),
  firstName: z$2.string(),
  lastName: z$2.string(),
  profileImage: z$2.string().optional().nullable(),
  verified: z$2.boolean().optional(),
  role: z$2.lazy(() => UserRoleSchema),
  organizationId: z$2.number().int().optional().nullable(),
  restaurantId: z$2.number().int().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  shifts: z$2.lazy(() => ShiftUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: z$2.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: z$2.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: z$2.lazy(() => PasswordResetUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItem: z$2.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: z$2.lazy(() => AvailabilityUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraint: z$2.lazy(() => SchedulingConstraintUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteUncheckedCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedback: z$2.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: z$2.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional()
}).strict();
var UserCreateOrConnectWithoutRecipeVersionsApprovedInputSchema = z$2.object({
  where: z$2.lazy(() => UserWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => UserCreateWithoutRecipeVersionsApprovedInputSchema), z$2.lazy(() => UserUncheckedCreateWithoutRecipeVersionsApprovedInputSchema)])
}).strict();
var RecipeUpsertWithoutVersionsInputSchema = z$2.object({
  update: z$2.union([z$2.lazy(() => RecipeUpdateWithoutVersionsInputSchema), z$2.lazy(() => RecipeUncheckedUpdateWithoutVersionsInputSchema)]),
  create: z$2.union([z$2.lazy(() => RecipeCreateWithoutVersionsInputSchema), z$2.lazy(() => RecipeUncheckedCreateWithoutVersionsInputSchema)]),
  where: z$2.lazy(() => RecipeWhereInputSchema).optional()
}).strict();
var RecipeUpdateToOneWithWhereWithoutVersionsInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeWhereInputSchema).optional(),
  data: z$2.union([z$2.lazy(() => RecipeUpdateWithoutVersionsInputSchema), z$2.lazy(() => RecipeUncheckedUpdateWithoutVersionsInputSchema)])
}).strict();
var RecipeUpdateWithoutVersionsInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.lazy(() => RecipeUpdateimageUrlInputSchema), z$2.string().array()]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: z$2.lazy(() => RestaurantUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  cookBook: z$2.lazy(() => CookBookUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  ingredients: z$2.lazy(() => RecipeIngredientUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z$2.lazy(() => MenuItemUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: z$2.lazy(() => FoodCostHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: z$2.lazy(() => PrepHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z$2.lazy(() => PrepBoardUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  MenuItemRecipe: z$2.lazy(() => MenuItemRecipeUpdateManyWithoutRecipeNestedInputSchema).optional(),
  ProductionPlanItem: z$2.lazy(() => ProductionPlanItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z$2.lazy(() => RecipeTagUpdateManyWithoutRecipesNestedInputSchema).optional(),
  equipment: z$2.lazy(() => RecipeEquipmentUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionUpdateManyWithoutRecipesNestedInputSchema).optional()
}).strict();
var RecipeUncheckedUpdateWithoutVersionsInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.lazy(() => RecipeUpdateimageUrlInputSchema), z$2.string().array()]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookBookId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  ingredients: z$2.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z$2.lazy(() => MenuItemUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: z$2.lazy(() => FoodCostHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: z$2.lazy(() => PrepHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z$2.lazy(() => PrepBoardUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  MenuItemRecipe: z$2.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  ProductionPlanItem: z$2.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z$2.lazy(() => RecipeTagUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  equipment: z$2.lazy(() => RecipeEquipmentUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional()
}).strict();
var RecipeIngredientUpsertWithWhereUniqueWithoutRecipeVersionInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeIngredientWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => RecipeIngredientUpdateWithoutRecipeVersionInputSchema), z$2.lazy(() => RecipeIngredientUncheckedUpdateWithoutRecipeVersionInputSchema)]),
  create: z$2.union([z$2.lazy(() => RecipeIngredientCreateWithoutRecipeVersionInputSchema), z$2.lazy(() => RecipeIngredientUncheckedCreateWithoutRecipeVersionInputSchema)])
}).strict();
var RecipeIngredientUpdateWithWhereUniqueWithoutRecipeVersionInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeIngredientWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => RecipeIngredientUpdateWithoutRecipeVersionInputSchema), z$2.lazy(() => RecipeIngredientUncheckedUpdateWithoutRecipeVersionInputSchema)])
}).strict();
var RecipeIngredientUpdateManyWithWhereWithoutRecipeVersionInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeIngredientScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => RecipeIngredientUpdateManyMutationInputSchema), z$2.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutRecipeVersionInputSchema)])
}).strict();
var RecipeIngredientScalarWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => RecipeIngredientScalarWhereInputSchema), z$2.lazy(() => RecipeIngredientScalarWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => RecipeIngredientScalarWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => RecipeIngredientScalarWhereInputSchema), z$2.lazy(() => RecipeIngredientScalarWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  recipeId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  ingredientId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  quantity: z$2.union([z$2.lazy(() => FloatFilterSchema), z$2.number()]).optional(),
  unit: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  joinAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  recipeVersionId: z$2.union([z$2.lazy(() => IntNullableFilterSchema), z$2.number()]).optional().nullable()
}).strict();
var RecipeInstructionUpsertWithWhereUniqueWithoutRecipeVersionInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeInstructionWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => RecipeInstructionUpdateWithoutRecipeVersionInputSchema), z$2.lazy(() => RecipeInstructionUncheckedUpdateWithoutRecipeVersionInputSchema)]),
  create: z$2.union([z$2.lazy(() => RecipeInstructionCreateWithoutRecipeVersionInputSchema), z$2.lazy(() => RecipeInstructionUncheckedCreateWithoutRecipeVersionInputSchema)])
}).strict();
var RecipeInstructionUpdateWithWhereUniqueWithoutRecipeVersionInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeInstructionWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => RecipeInstructionUpdateWithoutRecipeVersionInputSchema), z$2.lazy(() => RecipeInstructionUncheckedUpdateWithoutRecipeVersionInputSchema)])
}).strict();
var RecipeInstructionUpdateManyWithWhereWithoutRecipeVersionInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeInstructionScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => RecipeInstructionUpdateManyMutationInputSchema), z$2.lazy(() => RecipeInstructionUncheckedUpdateManyWithoutRecipeVersionInputSchema)])
}).strict();
var RecipeInstructionScalarWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => RecipeInstructionScalarWhereInputSchema), z$2.lazy(() => RecipeInstructionScalarWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => RecipeInstructionScalarWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => RecipeInstructionScalarWhereInputSchema), z$2.lazy(() => RecipeInstructionScalarWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  recipeId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  stepNumber: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  instruction: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  imageUrl: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  recipeVersionId: z$2.union([z$2.lazy(() => IntNullableFilterSchema), z$2.number()]).optional().nullable()
}).strict();
var UserUpsertWithoutRecipeVersionsCreatedInputSchema = z$2.object({
  update: z$2.union([z$2.lazy(() => UserUpdateWithoutRecipeVersionsCreatedInputSchema), z$2.lazy(() => UserUncheckedUpdateWithoutRecipeVersionsCreatedInputSchema)]),
  create: z$2.union([z$2.lazy(() => UserCreateWithoutRecipeVersionsCreatedInputSchema), z$2.lazy(() => UserUncheckedCreateWithoutRecipeVersionsCreatedInputSchema)]),
  where: z$2.lazy(() => UserWhereInputSchema).optional()
}).strict();
var UserUpdateToOneWithWhereWithoutRecipeVersionsCreatedInputSchema = z$2.object({
  where: z$2.lazy(() => UserWhereInputSchema).optional(),
  data: z$2.union([z$2.lazy(() => UserUpdateWithoutRecipeVersionsCreatedInputSchema), z$2.lazy(() => UserUncheckedUpdateWithoutRecipeVersionsCreatedInputSchema)])
}).strict();
var UserUpdateWithoutRecipeVersionsCreatedInputSchema = z$2.object({
  email: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: z$2.union([z$2.lazy(() => UserRoleSchema), z$2.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  organization: z$2.lazy(() => OrganizationUpdateOneWithoutUsersNestedInputSchema).optional(),
  restaurant: z$2.lazy(() => RestaurantUpdateOneWithoutUsersNestedInputSchema).optional(),
  shifts: z$2.lazy(() => ShiftUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: z$2.lazy(() => InventoryItemUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: z$2.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: z$2.lazy(() => PasswordResetUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItem: z$2.lazy(() => ProductionPlanItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: z$2.lazy(() => AvailabilityUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraint: z$2.lazy(() => SchedulingConstraintUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedback: z$2.lazy(() => CustomerFeedbackUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsApproved: z$2.lazy(() => RecipeVersionUpdateManyWithoutApprovedByNestedInputSchema).optional()
}).strict();
var UserUncheckedUpdateWithoutRecipeVersionsCreatedInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  email: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: z$2.union([z$2.lazy(() => UserRoleSchema), z$2.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  organizationId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  shifts: z$2.lazy(() => ShiftUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: z$2.lazy(() => InventoryItemUncheckedUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: z$2.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: z$2.lazy(() => PasswordResetUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItem: z$2.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: z$2.lazy(() => AvailabilityUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraint: z$2.lazy(() => SchedulingConstraintUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteUncheckedUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedback: z$2.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsApproved: z$2.lazy(() => RecipeVersionUncheckedUpdateManyWithoutApprovedByNestedInputSchema).optional()
}).strict();
var UserUpsertWithoutRecipeVersionsApprovedInputSchema = z$2.object({
  update: z$2.union([z$2.lazy(() => UserUpdateWithoutRecipeVersionsApprovedInputSchema), z$2.lazy(() => UserUncheckedUpdateWithoutRecipeVersionsApprovedInputSchema)]),
  create: z$2.union([z$2.lazy(() => UserCreateWithoutRecipeVersionsApprovedInputSchema), z$2.lazy(() => UserUncheckedCreateWithoutRecipeVersionsApprovedInputSchema)]),
  where: z$2.lazy(() => UserWhereInputSchema).optional()
}).strict();
var UserUpdateToOneWithWhereWithoutRecipeVersionsApprovedInputSchema = z$2.object({
  where: z$2.lazy(() => UserWhereInputSchema).optional(),
  data: z$2.union([z$2.lazy(() => UserUpdateWithoutRecipeVersionsApprovedInputSchema), z$2.lazy(() => UserUncheckedUpdateWithoutRecipeVersionsApprovedInputSchema)])
}).strict();
var UserUpdateWithoutRecipeVersionsApprovedInputSchema = z$2.object({
  email: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: z$2.union([z$2.lazy(() => UserRoleSchema), z$2.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  organization: z$2.lazy(() => OrganizationUpdateOneWithoutUsersNestedInputSchema).optional(),
  restaurant: z$2.lazy(() => RestaurantUpdateOneWithoutUsersNestedInputSchema).optional(),
  shifts: z$2.lazy(() => ShiftUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: z$2.lazy(() => InventoryItemUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: z$2.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: z$2.lazy(() => PasswordResetUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItem: z$2.lazy(() => ProductionPlanItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: z$2.lazy(() => AvailabilityUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraint: z$2.lazy(() => SchedulingConstraintUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedback: z$2.lazy(() => CustomerFeedbackUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: z$2.lazy(() => RecipeVersionUpdateManyWithoutCreatedByNestedInputSchema).optional()
}).strict();
var UserUncheckedUpdateWithoutRecipeVersionsApprovedInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  email: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: z$2.union([z$2.lazy(() => UserRoleSchema), z$2.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  organizationId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  shifts: z$2.lazy(() => ShiftUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: z$2.lazy(() => InventoryItemUncheckedUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: z$2.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: z$2.lazy(() => PasswordResetUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItem: z$2.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: z$2.lazy(() => AvailabilityUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraint: z$2.lazy(() => SchedulingConstraintUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteUncheckedUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedback: z$2.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: z$2.lazy(() => RecipeVersionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional()
}).strict();
var RestaurantCreateWithoutEquipmentInputSchema = z$2.object({
  name: z$2.string(),
  imageUrl: z$2.string().optional().nullable(),
  address: z$2.string(),
  city: z$2.string(),
  zipCode: z$2.string(),
  state: z$2.string(),
  owner: z$2.string(),
  foodCost: z$2.number().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  isDeleted: z$2.boolean().optional(),
  deleted: z$2.coerce.date().optional().nullable(),
  organization: z$2.lazy(() => OrganizationCreateNestedOneWithoutRestaurantsInputSchema).optional(),
  users: z$2.lazy(() => UserCreateNestedManyWithoutRestaurantInputSchema).optional(),
  cookbooks: z$2.lazy(() => CookBookCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: z$2.lazy(() => InventoryCreateNestedOneWithoutRestaurantInputSchema).optional(),
  orders: z$2.lazy(() => OrderCreateNestedManyWithoutRestaurantInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: z$2.lazy(() => MenuCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklist: z$2.lazy(() => QualityChecklistCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qustomerFeedback: z$2.lazy(() => CustomerFeedbackCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();
var RestaurantUncheckedCreateWithoutEquipmentInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  imageUrl: z$2.string().optional().nullable(),
  address: z$2.string(),
  city: z$2.string(),
  zipCode: z$2.string(),
  state: z$2.string(),
  owner: z$2.string(),
  organizationId: z$2.number().int().optional().nullable(),
  foodCost: z$2.number().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  isDeleted: z$2.boolean().optional(),
  deleted: z$2.coerce.date().optional().nullable(),
  users: z$2.lazy(() => UserUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  cookbooks: z$2.lazy(() => CookBookUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: z$2.lazy(() => InventoryUncheckedCreateNestedOneWithoutRestaurantInputSchema).optional(),
  orders: z$2.lazy(() => OrderUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: z$2.lazy(() => MenuUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklist: z$2.lazy(() => QualityChecklistUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qustomerFeedback: z$2.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();
var RestaurantCreateOrConnectWithoutEquipmentInputSchema = z$2.object({
  where: z$2.lazy(() => RestaurantWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => RestaurantCreateWithoutEquipmentInputSchema), z$2.lazy(() => RestaurantUncheckedCreateWithoutEquipmentInputSchema)])
}).strict();
var RecipeEquipmentCreateWithoutEquipmentInputSchema = z$2.object({
  notes: z$2.string().optional().nullable(),
  recipe: z$2.lazy(() => RecipeCreateNestedOneWithoutEquipmentInputSchema)
}).strict();
var RecipeEquipmentUncheckedCreateWithoutEquipmentInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  recipeId: z$2.number().int(),
  notes: z$2.string().optional().nullable()
}).strict();
var RecipeEquipmentCreateOrConnectWithoutEquipmentInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeEquipmentWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => RecipeEquipmentCreateWithoutEquipmentInputSchema), z$2.lazy(() => RecipeEquipmentUncheckedCreateWithoutEquipmentInputSchema)])
}).strict();
var RecipeEquipmentCreateManyEquipmentInputEnvelopeSchema = z$2.object({
  data: z$2.union([z$2.lazy(() => RecipeEquipmentCreateManyEquipmentInputSchema), z$2.lazy(() => RecipeEquipmentCreateManyEquipmentInputSchema).array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var MaintenanceLogCreateWithoutEquipmentInputSchema = z$2.object({
  date: z$2.coerce.date(),
  type: z$2.lazy(() => MaintenanceTypeSchema),
  description: z$2.string(),
  cost: z$2.number().optional().nullable(),
  performedBy: z$2.string(),
  notes: z$2.string().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var MaintenanceLogUncheckedCreateWithoutEquipmentInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  date: z$2.coerce.date(),
  type: z$2.lazy(() => MaintenanceTypeSchema),
  description: z$2.string(),
  cost: z$2.number().optional().nullable(),
  performedBy: z$2.string(),
  notes: z$2.string().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var MaintenanceLogCreateOrConnectWithoutEquipmentInputSchema = z$2.object({
  where: z$2.lazy(() => MaintenanceLogWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => MaintenanceLogCreateWithoutEquipmentInputSchema), z$2.lazy(() => MaintenanceLogUncheckedCreateWithoutEquipmentInputSchema)])
}).strict();
var MaintenanceLogCreateManyEquipmentInputEnvelopeSchema = z$2.object({
  data: z$2.union([z$2.lazy(() => MaintenanceLogCreateManyEquipmentInputSchema), z$2.lazy(() => MaintenanceLogCreateManyEquipmentInputSchema).array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var RestaurantUpsertWithoutEquipmentInputSchema = z$2.object({
  update: z$2.union([z$2.lazy(() => RestaurantUpdateWithoutEquipmentInputSchema), z$2.lazy(() => RestaurantUncheckedUpdateWithoutEquipmentInputSchema)]),
  create: z$2.union([z$2.lazy(() => RestaurantCreateWithoutEquipmentInputSchema), z$2.lazy(() => RestaurantUncheckedCreateWithoutEquipmentInputSchema)]),
  where: z$2.lazy(() => RestaurantWhereInputSchema).optional()
}).strict();
var RestaurantUpdateToOneWithWhereWithoutEquipmentInputSchema = z$2.object({
  where: z$2.lazy(() => RestaurantWhereInputSchema).optional(),
  data: z$2.union([z$2.lazy(() => RestaurantUpdateWithoutEquipmentInputSchema), z$2.lazy(() => RestaurantUncheckedUpdateWithoutEquipmentInputSchema)])
}).strict();
var RestaurantUpdateWithoutEquipmentInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  address: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  city: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  zipCode: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  state: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  owner: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  isDeleted: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  deleted: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  organization: z$2.lazy(() => OrganizationUpdateOneWithoutRestaurantsNestedInputSchema).optional(),
  users: z$2.lazy(() => UserUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  cookbooks: z$2.lazy(() => CookBookUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: z$2.lazy(() => InventoryUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  orders: z$2.lazy(() => OrderUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: z$2.lazy(() => MenuUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklist: z$2.lazy(() => QualityChecklistUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qustomerFeedback: z$2.lazy(() => CustomerFeedbackUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();
var RestaurantUncheckedUpdateWithoutEquipmentInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  address: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  city: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  zipCode: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  state: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  owner: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  organizationId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  isDeleted: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  deleted: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  users: z$2.lazy(() => UserUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  cookbooks: z$2.lazy(() => CookBookUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: z$2.lazy(() => InventoryUncheckedUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  orders: z$2.lazy(() => OrderUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: z$2.lazy(() => MenuUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklist: z$2.lazy(() => QualityChecklistUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qustomerFeedback: z$2.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();
var RecipeEquipmentUpsertWithWhereUniqueWithoutEquipmentInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeEquipmentWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => RecipeEquipmentUpdateWithoutEquipmentInputSchema), z$2.lazy(() => RecipeEquipmentUncheckedUpdateWithoutEquipmentInputSchema)]),
  create: z$2.union([z$2.lazy(() => RecipeEquipmentCreateWithoutEquipmentInputSchema), z$2.lazy(() => RecipeEquipmentUncheckedCreateWithoutEquipmentInputSchema)])
}).strict();
var RecipeEquipmentUpdateWithWhereUniqueWithoutEquipmentInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeEquipmentWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => RecipeEquipmentUpdateWithoutEquipmentInputSchema), z$2.lazy(() => RecipeEquipmentUncheckedUpdateWithoutEquipmentInputSchema)])
}).strict();
var RecipeEquipmentUpdateManyWithWhereWithoutEquipmentInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeEquipmentScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => RecipeEquipmentUpdateManyMutationInputSchema), z$2.lazy(() => RecipeEquipmentUncheckedUpdateManyWithoutEquipmentInputSchema)])
}).strict();
var RecipeEquipmentScalarWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => RecipeEquipmentScalarWhereInputSchema), z$2.lazy(() => RecipeEquipmentScalarWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => RecipeEquipmentScalarWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => RecipeEquipmentScalarWhereInputSchema), z$2.lazy(() => RecipeEquipmentScalarWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  recipeId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  equipmentId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  notes: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable()
}).strict();
var MaintenanceLogUpsertWithWhereUniqueWithoutEquipmentInputSchema = z$2.object({
  where: z$2.lazy(() => MaintenanceLogWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => MaintenanceLogUpdateWithoutEquipmentInputSchema), z$2.lazy(() => MaintenanceLogUncheckedUpdateWithoutEquipmentInputSchema)]),
  create: z$2.union([z$2.lazy(() => MaintenanceLogCreateWithoutEquipmentInputSchema), z$2.lazy(() => MaintenanceLogUncheckedCreateWithoutEquipmentInputSchema)])
}).strict();
var MaintenanceLogUpdateWithWhereUniqueWithoutEquipmentInputSchema = z$2.object({
  where: z$2.lazy(() => MaintenanceLogWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => MaintenanceLogUpdateWithoutEquipmentInputSchema), z$2.lazy(() => MaintenanceLogUncheckedUpdateWithoutEquipmentInputSchema)])
}).strict();
var MaintenanceLogUpdateManyWithWhereWithoutEquipmentInputSchema = z$2.object({
  where: z$2.lazy(() => MaintenanceLogScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => MaintenanceLogUpdateManyMutationInputSchema), z$2.lazy(() => MaintenanceLogUncheckedUpdateManyWithoutEquipmentInputSchema)])
}).strict();
var MaintenanceLogScalarWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => MaintenanceLogScalarWhereInputSchema), z$2.lazy(() => MaintenanceLogScalarWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => MaintenanceLogScalarWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => MaintenanceLogScalarWhereInputSchema), z$2.lazy(() => MaintenanceLogScalarWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  equipmentId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  date: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  type: z$2.union([z$2.lazy(() => EnumMaintenanceTypeFilterSchema), z$2.lazy(() => MaintenanceTypeSchema)]).optional(),
  description: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  cost: z$2.union([z$2.lazy(() => FloatNullableFilterSchema), z$2.number()]).optional().nullable(),
  performedBy: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  notes: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional()
}).strict();
var RecipeCreateWithoutEquipmentInputSchema = z$2.object({
  name: z$2.string(),
  imageUrl: z$2.union([z$2.lazy(() => RecipeCreateimageUrlInputSchema), z$2.string().array()]).optional(),
  description: z$2.string().optional().nullable(),
  servings: z$2.number().int(),
  cookTime: z$2.number().int(),
  prepTime: z$2.number().int(),
  frequency: z$2.number().int().optional().nullable(),
  foodCost: z$2.number().optional().nullable(),
  isDeleted: z$2.boolean().optional(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  restaurant: z$2.lazy(() => RestaurantCreateNestedOneWithoutRecipesInputSchema),
  cookBook: z$2.lazy(() => CookBookCreateNestedOneWithoutRecipesInputSchema),
  ingredients: z$2.lazy(() => RecipeIngredientCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z$2.lazy(() => MenuItemCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: z$2.lazy(() => FoodCostHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: z$2.lazy(() => PrepHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z$2.lazy(() => PrepBoardCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  MenuItemRecipe: z$2.lazy(() => MenuItemRecipeCreateNestedManyWithoutRecipeInputSchema).optional(),
  ProductionPlanItem: z$2.lazy(() => ProductionPlanItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z$2.lazy(() => RecipeTagCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: z$2.lazy(() => RecipeVersionCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionCreateNestedManyWithoutRecipesInputSchema).optional()
}).strict();
var RecipeUncheckedCreateWithoutEquipmentInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  imageUrl: z$2.union([z$2.lazy(() => RecipeCreateimageUrlInputSchema), z$2.string().array()]).optional(),
  description: z$2.string().optional().nullable(),
  servings: z$2.number().int(),
  cookTime: z$2.number().int(),
  prepTime: z$2.number().int(),
  frequency: z$2.number().int().optional().nullable(),
  restaurantId: z$2.number().int(),
  cookBookId: z$2.number().int(),
  foodCost: z$2.number().optional().nullable(),
  isDeleted: z$2.boolean().optional(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  ingredients: z$2.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z$2.lazy(() => MenuItemUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: z$2.lazy(() => FoodCostHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: z$2.lazy(() => PrepHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z$2.lazy(() => PrepBoardUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  MenuItemRecipe: z$2.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  ProductionPlanItem: z$2.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z$2.lazy(() => RecipeTagUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: z$2.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutRecipesInputSchema).optional()
}).strict();
var RecipeCreateOrConnectWithoutEquipmentInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => RecipeCreateWithoutEquipmentInputSchema), z$2.lazy(() => RecipeUncheckedCreateWithoutEquipmentInputSchema)])
}).strict();
var EquipmentCreateWithoutRecipesInputSchema = z$2.object({
  name: z$2.string(),
  description: z$2.string().optional().nullable(),
  model: z$2.string().optional().nullable(),
  serialNumber: z$2.string().optional().nullable(),
  purchaseDate: z$2.coerce.date().optional().nullable(),
  lastMaintenance: z$2.coerce.date().optional().nullable(),
  nextMaintenance: z$2.coerce.date().optional().nullable(),
  status: z$2.lazy(() => EquipmentStatusSchema).optional(),
  location: z$2.string().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  restaurant: z$2.lazy(() => RestaurantCreateNestedOneWithoutEquipmentInputSchema),
  maintenanceLogs: z$2.lazy(() => MaintenanceLogCreateNestedManyWithoutEquipmentInputSchema).optional()
}).strict();
var EquipmentUncheckedCreateWithoutRecipesInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  description: z$2.string().optional().nullable(),
  model: z$2.string().optional().nullable(),
  serialNumber: z$2.string().optional().nullable(),
  purchaseDate: z$2.coerce.date().optional().nullable(),
  lastMaintenance: z$2.coerce.date().optional().nullable(),
  nextMaintenance: z$2.coerce.date().optional().nullable(),
  status: z$2.lazy(() => EquipmentStatusSchema).optional(),
  location: z$2.string().optional().nullable(),
  restaurantId: z$2.number().int(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  maintenanceLogs: z$2.lazy(() => MaintenanceLogUncheckedCreateNestedManyWithoutEquipmentInputSchema).optional()
}).strict();
var EquipmentCreateOrConnectWithoutRecipesInputSchema = z$2.object({
  where: z$2.lazy(() => EquipmentWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => EquipmentCreateWithoutRecipesInputSchema), z$2.lazy(() => EquipmentUncheckedCreateWithoutRecipesInputSchema)])
}).strict();
var RecipeUpsertWithoutEquipmentInputSchema = z$2.object({
  update: z$2.union([z$2.lazy(() => RecipeUpdateWithoutEquipmentInputSchema), z$2.lazy(() => RecipeUncheckedUpdateWithoutEquipmentInputSchema)]),
  create: z$2.union([z$2.lazy(() => RecipeCreateWithoutEquipmentInputSchema), z$2.lazy(() => RecipeUncheckedCreateWithoutEquipmentInputSchema)]),
  where: z$2.lazy(() => RecipeWhereInputSchema).optional()
}).strict();
var RecipeUpdateToOneWithWhereWithoutEquipmentInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeWhereInputSchema).optional(),
  data: z$2.union([z$2.lazy(() => RecipeUpdateWithoutEquipmentInputSchema), z$2.lazy(() => RecipeUncheckedUpdateWithoutEquipmentInputSchema)])
}).strict();
var RecipeUpdateWithoutEquipmentInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.lazy(() => RecipeUpdateimageUrlInputSchema), z$2.string().array()]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: z$2.lazy(() => RestaurantUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  cookBook: z$2.lazy(() => CookBookUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  ingredients: z$2.lazy(() => RecipeIngredientUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z$2.lazy(() => MenuItemUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: z$2.lazy(() => FoodCostHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: z$2.lazy(() => PrepHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z$2.lazy(() => PrepBoardUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  MenuItemRecipe: z$2.lazy(() => MenuItemRecipeUpdateManyWithoutRecipeNestedInputSchema).optional(),
  ProductionPlanItem: z$2.lazy(() => ProductionPlanItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z$2.lazy(() => RecipeTagUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: z$2.lazy(() => RecipeVersionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionUpdateManyWithoutRecipesNestedInputSchema).optional()
}).strict();
var RecipeUncheckedUpdateWithoutEquipmentInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.lazy(() => RecipeUpdateimageUrlInputSchema), z$2.string().array()]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookBookId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  ingredients: z$2.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z$2.lazy(() => MenuItemUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: z$2.lazy(() => FoodCostHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: z$2.lazy(() => PrepHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z$2.lazy(() => PrepBoardUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  MenuItemRecipe: z$2.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  ProductionPlanItem: z$2.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z$2.lazy(() => RecipeTagUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: z$2.lazy(() => RecipeVersionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional()
}).strict();
var EquipmentUpsertWithoutRecipesInputSchema = z$2.object({
  update: z$2.union([z$2.lazy(() => EquipmentUpdateWithoutRecipesInputSchema), z$2.lazy(() => EquipmentUncheckedUpdateWithoutRecipesInputSchema)]),
  create: z$2.union([z$2.lazy(() => EquipmentCreateWithoutRecipesInputSchema), z$2.lazy(() => EquipmentUncheckedCreateWithoutRecipesInputSchema)]),
  where: z$2.lazy(() => EquipmentWhereInputSchema).optional()
}).strict();
var EquipmentUpdateToOneWithWhereWithoutRecipesInputSchema = z$2.object({
  where: z$2.lazy(() => EquipmentWhereInputSchema).optional(),
  data: z$2.union([z$2.lazy(() => EquipmentUpdateWithoutRecipesInputSchema), z$2.lazy(() => EquipmentUncheckedUpdateWithoutRecipesInputSchema)])
}).strict();
var EquipmentUpdateWithoutRecipesInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  model: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  serialNumber: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  purchaseDate: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  lastMaintenance: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  nextMaintenance: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  status: z$2.union([z$2.lazy(() => EquipmentStatusSchema), z$2.lazy(() => EnumEquipmentStatusFieldUpdateOperationsInputSchema)]).optional(),
  location: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: z$2.lazy(() => RestaurantUpdateOneRequiredWithoutEquipmentNestedInputSchema).optional(),
  maintenanceLogs: z$2.lazy(() => MaintenanceLogUpdateManyWithoutEquipmentNestedInputSchema).optional()
}).strict();
var EquipmentUncheckedUpdateWithoutRecipesInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  model: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  serialNumber: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  purchaseDate: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  lastMaintenance: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  nextMaintenance: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  status: z$2.union([z$2.lazy(() => EquipmentStatusSchema), z$2.lazy(() => EnumEquipmentStatusFieldUpdateOperationsInputSchema)]).optional(),
  location: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  maintenanceLogs: z$2.lazy(() => MaintenanceLogUncheckedUpdateManyWithoutEquipmentNestedInputSchema).optional()
}).strict();
var EquipmentCreateWithoutMaintenanceLogsInputSchema = z$2.object({
  name: z$2.string(),
  description: z$2.string().optional().nullable(),
  model: z$2.string().optional().nullable(),
  serialNumber: z$2.string().optional().nullable(),
  purchaseDate: z$2.coerce.date().optional().nullable(),
  lastMaintenance: z$2.coerce.date().optional().nullable(),
  nextMaintenance: z$2.coerce.date().optional().nullable(),
  status: z$2.lazy(() => EquipmentStatusSchema).optional(),
  location: z$2.string().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  restaurant: z$2.lazy(() => RestaurantCreateNestedOneWithoutEquipmentInputSchema),
  recipes: z$2.lazy(() => RecipeEquipmentCreateNestedManyWithoutEquipmentInputSchema).optional()
}).strict();
var EquipmentUncheckedCreateWithoutMaintenanceLogsInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  description: z$2.string().optional().nullable(),
  model: z$2.string().optional().nullable(),
  serialNumber: z$2.string().optional().nullable(),
  purchaseDate: z$2.coerce.date().optional().nullable(),
  lastMaintenance: z$2.coerce.date().optional().nullable(),
  nextMaintenance: z$2.coerce.date().optional().nullable(),
  status: z$2.lazy(() => EquipmentStatusSchema).optional(),
  location: z$2.string().optional().nullable(),
  restaurantId: z$2.number().int(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  recipes: z$2.lazy(() => RecipeEquipmentUncheckedCreateNestedManyWithoutEquipmentInputSchema).optional()
}).strict();
var EquipmentCreateOrConnectWithoutMaintenanceLogsInputSchema = z$2.object({
  where: z$2.lazy(() => EquipmentWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => EquipmentCreateWithoutMaintenanceLogsInputSchema), z$2.lazy(() => EquipmentUncheckedCreateWithoutMaintenanceLogsInputSchema)])
}).strict();
var EquipmentUpsertWithoutMaintenanceLogsInputSchema = z$2.object({
  update: z$2.union([z$2.lazy(() => EquipmentUpdateWithoutMaintenanceLogsInputSchema), z$2.lazy(() => EquipmentUncheckedUpdateWithoutMaintenanceLogsInputSchema)]),
  create: z$2.union([z$2.lazy(() => EquipmentCreateWithoutMaintenanceLogsInputSchema), z$2.lazy(() => EquipmentUncheckedCreateWithoutMaintenanceLogsInputSchema)]),
  where: z$2.lazy(() => EquipmentWhereInputSchema).optional()
}).strict();
var EquipmentUpdateToOneWithWhereWithoutMaintenanceLogsInputSchema = z$2.object({
  where: z$2.lazy(() => EquipmentWhereInputSchema).optional(),
  data: z$2.union([z$2.lazy(() => EquipmentUpdateWithoutMaintenanceLogsInputSchema), z$2.lazy(() => EquipmentUncheckedUpdateWithoutMaintenanceLogsInputSchema)])
}).strict();
var EquipmentUpdateWithoutMaintenanceLogsInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  model: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  serialNumber: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  purchaseDate: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  lastMaintenance: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  nextMaintenance: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  status: z$2.union([z$2.lazy(() => EquipmentStatusSchema), z$2.lazy(() => EnumEquipmentStatusFieldUpdateOperationsInputSchema)]).optional(),
  location: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: z$2.lazy(() => RestaurantUpdateOneRequiredWithoutEquipmentNestedInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeEquipmentUpdateManyWithoutEquipmentNestedInputSchema).optional()
}).strict();
var EquipmentUncheckedUpdateWithoutMaintenanceLogsInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  model: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  serialNumber: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  purchaseDate: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  lastMaintenance: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  nextMaintenance: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  status: z$2.union([z$2.lazy(() => EquipmentStatusSchema), z$2.lazy(() => EnumEquipmentStatusFieldUpdateOperationsInputSchema)]).optional(),
  location: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  recipes: z$2.lazy(() => RecipeEquipmentUncheckedUpdateManyWithoutEquipmentNestedInputSchema).optional()
}).strict();
var RestaurantCreateWithoutQualityChecklistInputSchema = z$2.object({
  name: z$2.string(),
  imageUrl: z$2.string().optional().nullable(),
  address: z$2.string(),
  city: z$2.string(),
  zipCode: z$2.string(),
  state: z$2.string(),
  owner: z$2.string(),
  foodCost: z$2.number().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  isDeleted: z$2.boolean().optional(),
  deleted: z$2.coerce.date().optional().nullable(),
  organization: z$2.lazy(() => OrganizationCreateNestedOneWithoutRestaurantsInputSchema).optional(),
  users: z$2.lazy(() => UserCreateNestedManyWithoutRestaurantInputSchema).optional(),
  cookbooks: z$2.lazy(() => CookBookCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: z$2.lazy(() => InventoryCreateNestedOneWithoutRestaurantInputSchema).optional(),
  orders: z$2.lazy(() => OrderCreateNestedManyWithoutRestaurantInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: z$2.lazy(() => MenuCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipment: z$2.lazy(() => EquipmentCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qustomerFeedback: z$2.lazy(() => CustomerFeedbackCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();
var RestaurantUncheckedCreateWithoutQualityChecklistInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  imageUrl: z$2.string().optional().nullable(),
  address: z$2.string(),
  city: z$2.string(),
  zipCode: z$2.string(),
  state: z$2.string(),
  owner: z$2.string(),
  organizationId: z$2.number().int().optional().nullable(),
  foodCost: z$2.number().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  isDeleted: z$2.boolean().optional(),
  deleted: z$2.coerce.date().optional().nullable(),
  users: z$2.lazy(() => UserUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  cookbooks: z$2.lazy(() => CookBookUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: z$2.lazy(() => InventoryUncheckedCreateNestedOneWithoutRestaurantInputSchema).optional(),
  orders: z$2.lazy(() => OrderUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: z$2.lazy(() => MenuUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipment: z$2.lazy(() => EquipmentUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qustomerFeedback: z$2.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();
var RestaurantCreateOrConnectWithoutQualityChecklistInputSchema = z$2.object({
  where: z$2.lazy(() => RestaurantWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => RestaurantCreateWithoutQualityChecklistInputSchema), z$2.lazy(() => RestaurantUncheckedCreateWithoutQualityChecklistInputSchema)])
}).strict();
var ChecklistItemCreateWithoutChecklistInputSchema = z$2.object({
  description: z$2.string(),
  order: z$2.number().int(),
  type: z$2.lazy(() => ChecklistItemTypeSchema),
  requiredPhotos: z$2.boolean().optional(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  completions: z$2.lazy(() => ChecklistItemCompleteCreateNestedManyWithoutChecklistItemInputSchema).optional()
}).strict();
var ChecklistItemUncheckedCreateWithoutChecklistInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  description: z$2.string(),
  order: z$2.number().int(),
  type: z$2.lazy(() => ChecklistItemTypeSchema),
  requiredPhotos: z$2.boolean().optional(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  completions: z$2.lazy(() => ChecklistItemCompleteUncheckedCreateNestedManyWithoutChecklistItemInputSchema).optional()
}).strict();
var ChecklistItemCreateOrConnectWithoutChecklistInputSchema = z$2.object({
  where: z$2.lazy(() => ChecklistItemWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => ChecklistItemCreateWithoutChecklistInputSchema), z$2.lazy(() => ChecklistItemUncheckedCreateWithoutChecklistInputSchema)])
}).strict();
var ChecklistItemCreateManyChecklistInputEnvelopeSchema = z$2.object({
  data: z$2.union([z$2.lazy(() => ChecklistItemCreateManyChecklistInputSchema), z$2.lazy(() => ChecklistItemCreateManyChecklistInputSchema).array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var ChecklistCompleteCreateWithoutChecklistInputSchema = z$2.object({
  date: z$2.coerce.date(),
  notes: z$2.string().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  completedBy: z$2.lazy(() => UserCreateNestedOneWithoutChecklistCompleteInputSchema),
  items: z$2.lazy(() => ChecklistItemCompleteCreateNestedManyWithoutChecklistCompleteInputSchema).optional()
}).strict();
var ChecklistCompleteUncheckedCreateWithoutChecklistInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  completedById: z$2.number().int(),
  date: z$2.coerce.date(),
  notes: z$2.string().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  items: z$2.lazy(() => ChecklistItemCompleteUncheckedCreateNestedManyWithoutChecklistCompleteInputSchema).optional()
}).strict();
var ChecklistCompleteCreateOrConnectWithoutChecklistInputSchema = z$2.object({
  where: z$2.lazy(() => ChecklistCompleteWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => ChecklistCompleteCreateWithoutChecklistInputSchema), z$2.lazy(() => ChecklistCompleteUncheckedCreateWithoutChecklistInputSchema)])
}).strict();
var ChecklistCompleteCreateManyChecklistInputEnvelopeSchema = z$2.object({
  data: z$2.union([z$2.lazy(() => ChecklistCompleteCreateManyChecklistInputSchema), z$2.lazy(() => ChecklistCompleteCreateManyChecklistInputSchema).array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var RestaurantUpsertWithoutQualityChecklistInputSchema = z$2.object({
  update: z$2.union([z$2.lazy(() => RestaurantUpdateWithoutQualityChecklistInputSchema), z$2.lazy(() => RestaurantUncheckedUpdateWithoutQualityChecklistInputSchema)]),
  create: z$2.union([z$2.lazy(() => RestaurantCreateWithoutQualityChecklistInputSchema), z$2.lazy(() => RestaurantUncheckedCreateWithoutQualityChecklistInputSchema)]),
  where: z$2.lazy(() => RestaurantWhereInputSchema).optional()
}).strict();
var RestaurantUpdateToOneWithWhereWithoutQualityChecklistInputSchema = z$2.object({
  where: z$2.lazy(() => RestaurantWhereInputSchema).optional(),
  data: z$2.union([z$2.lazy(() => RestaurantUpdateWithoutQualityChecklistInputSchema), z$2.lazy(() => RestaurantUncheckedUpdateWithoutQualityChecklistInputSchema)])
}).strict();
var RestaurantUpdateWithoutQualityChecklistInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  address: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  city: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  zipCode: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  state: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  owner: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  isDeleted: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  deleted: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  organization: z$2.lazy(() => OrganizationUpdateOneWithoutRestaurantsNestedInputSchema).optional(),
  users: z$2.lazy(() => UserUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  cookbooks: z$2.lazy(() => CookBookUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: z$2.lazy(() => InventoryUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  orders: z$2.lazy(() => OrderUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: z$2.lazy(() => MenuUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipment: z$2.lazy(() => EquipmentUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qustomerFeedback: z$2.lazy(() => CustomerFeedbackUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();
var RestaurantUncheckedUpdateWithoutQualityChecklistInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  address: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  city: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  zipCode: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  state: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  owner: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  organizationId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  isDeleted: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  deleted: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  users: z$2.lazy(() => UserUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  cookbooks: z$2.lazy(() => CookBookUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: z$2.lazy(() => InventoryUncheckedUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  orders: z$2.lazy(() => OrderUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: z$2.lazy(() => MenuUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipment: z$2.lazy(() => EquipmentUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qustomerFeedback: z$2.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();
var ChecklistItemUpsertWithWhereUniqueWithoutChecklistInputSchema = z$2.object({
  where: z$2.lazy(() => ChecklistItemWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => ChecklistItemUpdateWithoutChecklistInputSchema), z$2.lazy(() => ChecklistItemUncheckedUpdateWithoutChecklistInputSchema)]),
  create: z$2.union([z$2.lazy(() => ChecklistItemCreateWithoutChecklistInputSchema), z$2.lazy(() => ChecklistItemUncheckedCreateWithoutChecklistInputSchema)])
}).strict();
var ChecklistItemUpdateWithWhereUniqueWithoutChecklistInputSchema = z$2.object({
  where: z$2.lazy(() => ChecklistItemWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => ChecklistItemUpdateWithoutChecklistInputSchema), z$2.lazy(() => ChecklistItemUncheckedUpdateWithoutChecklistInputSchema)])
}).strict();
var ChecklistItemUpdateManyWithWhereWithoutChecklistInputSchema = z$2.object({
  where: z$2.lazy(() => ChecklistItemScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => ChecklistItemUpdateManyMutationInputSchema), z$2.lazy(() => ChecklistItemUncheckedUpdateManyWithoutChecklistInputSchema)])
}).strict();
var ChecklistItemScalarWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => ChecklistItemScalarWhereInputSchema), z$2.lazy(() => ChecklistItemScalarWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => ChecklistItemScalarWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => ChecklistItemScalarWhereInputSchema), z$2.lazy(() => ChecklistItemScalarWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  checklistId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  description: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  order: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  type: z$2.union([z$2.lazy(() => EnumChecklistItemTypeFilterSchema), z$2.lazy(() => ChecklistItemTypeSchema)]).optional(),
  requiredPhotos: z$2.union([z$2.lazy(() => BoolFilterSchema), z$2.boolean()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional()
}).strict();
var ChecklistCompleteUpsertWithWhereUniqueWithoutChecklistInputSchema = z$2.object({
  where: z$2.lazy(() => ChecklistCompleteWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => ChecklistCompleteUpdateWithoutChecklistInputSchema), z$2.lazy(() => ChecklistCompleteUncheckedUpdateWithoutChecklistInputSchema)]),
  create: z$2.union([z$2.lazy(() => ChecklistCompleteCreateWithoutChecklistInputSchema), z$2.lazy(() => ChecklistCompleteUncheckedCreateWithoutChecklistInputSchema)])
}).strict();
var ChecklistCompleteUpdateWithWhereUniqueWithoutChecklistInputSchema = z$2.object({
  where: z$2.lazy(() => ChecklistCompleteWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => ChecklistCompleteUpdateWithoutChecklistInputSchema), z$2.lazy(() => ChecklistCompleteUncheckedUpdateWithoutChecklistInputSchema)])
}).strict();
var ChecklistCompleteUpdateManyWithWhereWithoutChecklistInputSchema = z$2.object({
  where: z$2.lazy(() => ChecklistCompleteScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => ChecklistCompleteUpdateManyMutationInputSchema), z$2.lazy(() => ChecklistCompleteUncheckedUpdateManyWithoutChecklistInputSchema)])
}).strict();
var ChecklistCompleteScalarWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => ChecklistCompleteScalarWhereInputSchema), z$2.lazy(() => ChecklistCompleteScalarWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => ChecklistCompleteScalarWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => ChecklistCompleteScalarWhereInputSchema), z$2.lazy(() => ChecklistCompleteScalarWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  checklistId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  completedById: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  date: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  notes: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional()
}).strict();
var QualityChecklistCreateWithoutItemsInputSchema = z$2.object({
  name: z$2.string(),
  description: z$2.string().optional().nullable(),
  frequency: z$2.lazy(() => ChecklistFrequencySchema).optional(),
  isActive: z$2.boolean().optional(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  restaurant: z$2.lazy(() => RestaurantCreateNestedOneWithoutQualityChecklistInputSchema),
  completions: z$2.lazy(() => ChecklistCompleteCreateNestedManyWithoutChecklistInputSchema).optional()
}).strict();
var QualityChecklistUncheckedCreateWithoutItemsInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  description: z$2.string().optional().nullable(),
  restaurantId: z$2.number().int(),
  frequency: z$2.lazy(() => ChecklistFrequencySchema).optional(),
  isActive: z$2.boolean().optional(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  completions: z$2.lazy(() => ChecklistCompleteUncheckedCreateNestedManyWithoutChecklistInputSchema).optional()
}).strict();
var QualityChecklistCreateOrConnectWithoutItemsInputSchema = z$2.object({
  where: z$2.lazy(() => QualityChecklistWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => QualityChecklistCreateWithoutItemsInputSchema), z$2.lazy(() => QualityChecklistUncheckedCreateWithoutItemsInputSchema)])
}).strict();
var ChecklistItemCompleteCreateWithoutChecklistItemInputSchema = z$2.object({
  status: z$2.lazy(() => ChecklistStatusSchema),
  notes: z$2.string().optional().nullable(),
  photoUrls: z$2.union([z$2.lazy(() => ChecklistItemCompleteCreatephotoUrlsInputSchema), z$2.string().array()]).optional(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteCreateNestedOneWithoutItemsInputSchema)
}).strict();
var ChecklistItemCompleteUncheckedCreateWithoutChecklistItemInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  checklistCompleteId: z$2.number().int(),
  status: z$2.lazy(() => ChecklistStatusSchema),
  notes: z$2.string().optional().nullable(),
  photoUrls: z$2.union([z$2.lazy(() => ChecklistItemCompleteCreatephotoUrlsInputSchema), z$2.string().array()]).optional(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var ChecklistItemCompleteCreateOrConnectWithoutChecklistItemInputSchema = z$2.object({
  where: z$2.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => ChecklistItemCompleteCreateWithoutChecklistItemInputSchema), z$2.lazy(() => ChecklistItemCompleteUncheckedCreateWithoutChecklistItemInputSchema)])
}).strict();
var ChecklistItemCompleteCreateManyChecklistItemInputEnvelopeSchema = z$2.object({
  data: z$2.union([z$2.lazy(() => ChecklistItemCompleteCreateManyChecklistItemInputSchema), z$2.lazy(() => ChecklistItemCompleteCreateManyChecklistItemInputSchema).array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var QualityChecklistUpsertWithoutItemsInputSchema = z$2.object({
  update: z$2.union([z$2.lazy(() => QualityChecklistUpdateWithoutItemsInputSchema), z$2.lazy(() => QualityChecklistUncheckedUpdateWithoutItemsInputSchema)]),
  create: z$2.union([z$2.lazy(() => QualityChecklistCreateWithoutItemsInputSchema), z$2.lazy(() => QualityChecklistUncheckedCreateWithoutItemsInputSchema)]),
  where: z$2.lazy(() => QualityChecklistWhereInputSchema).optional()
}).strict();
var QualityChecklistUpdateToOneWithWhereWithoutItemsInputSchema = z$2.object({
  where: z$2.lazy(() => QualityChecklistWhereInputSchema).optional(),
  data: z$2.union([z$2.lazy(() => QualityChecklistUpdateWithoutItemsInputSchema), z$2.lazy(() => QualityChecklistUncheckedUpdateWithoutItemsInputSchema)])
}).strict();
var QualityChecklistUpdateWithoutItemsInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  frequency: z$2.union([z$2.lazy(() => ChecklistFrequencySchema), z$2.lazy(() => EnumChecklistFrequencyFieldUpdateOperationsInputSchema)]).optional(),
  isActive: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: z$2.lazy(() => RestaurantUpdateOneRequiredWithoutQualityChecklistNestedInputSchema).optional(),
  completions: z$2.lazy(() => ChecklistCompleteUpdateManyWithoutChecklistNestedInputSchema).optional()
}).strict();
var QualityChecklistUncheckedUpdateWithoutItemsInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: z$2.union([z$2.lazy(() => ChecklistFrequencySchema), z$2.lazy(() => EnumChecklistFrequencyFieldUpdateOperationsInputSchema)]).optional(),
  isActive: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  completions: z$2.lazy(() => ChecklistCompleteUncheckedUpdateManyWithoutChecklistNestedInputSchema).optional()
}).strict();
var ChecklistItemCompleteUpsertWithWhereUniqueWithoutChecklistItemInputSchema = z$2.object({
  where: z$2.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => ChecklistItemCompleteUpdateWithoutChecklistItemInputSchema), z$2.lazy(() => ChecklistItemCompleteUncheckedUpdateWithoutChecklistItemInputSchema)]),
  create: z$2.union([z$2.lazy(() => ChecklistItemCompleteCreateWithoutChecklistItemInputSchema), z$2.lazy(() => ChecklistItemCompleteUncheckedCreateWithoutChecklistItemInputSchema)])
}).strict();
var ChecklistItemCompleteUpdateWithWhereUniqueWithoutChecklistItemInputSchema = z$2.object({
  where: z$2.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => ChecklistItemCompleteUpdateWithoutChecklistItemInputSchema), z$2.lazy(() => ChecklistItemCompleteUncheckedUpdateWithoutChecklistItemInputSchema)])
}).strict();
var ChecklistItemCompleteUpdateManyWithWhereWithoutChecklistItemInputSchema = z$2.object({
  where: z$2.lazy(() => ChecklistItemCompleteScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => ChecklistItemCompleteUpdateManyMutationInputSchema), z$2.lazy(() => ChecklistItemCompleteUncheckedUpdateManyWithoutChecklistItemInputSchema)])
}).strict();
var ChecklistItemCompleteScalarWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => ChecklistItemCompleteScalarWhereInputSchema), z$2.lazy(() => ChecklistItemCompleteScalarWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => ChecklistItemCompleteScalarWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => ChecklistItemCompleteScalarWhereInputSchema), z$2.lazy(() => ChecklistItemCompleteScalarWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  checklistCompleteId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  checklistItemId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  status: z$2.union([z$2.lazy(() => EnumChecklistStatusFilterSchema), z$2.lazy(() => ChecklistStatusSchema)]).optional(),
  notes: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  photoUrls: z$2.lazy(() => StringNullableListFilterSchema).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional()
}).strict();
var QualityChecklistCreateWithoutCompletionsInputSchema = z$2.object({
  name: z$2.string(),
  description: z$2.string().optional().nullable(),
  frequency: z$2.lazy(() => ChecklistFrequencySchema).optional(),
  isActive: z$2.boolean().optional(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  restaurant: z$2.lazy(() => RestaurantCreateNestedOneWithoutQualityChecklistInputSchema),
  items: z$2.lazy(() => ChecklistItemCreateNestedManyWithoutChecklistInputSchema).optional()
}).strict();
var QualityChecklistUncheckedCreateWithoutCompletionsInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  description: z$2.string().optional().nullable(),
  restaurantId: z$2.number().int(),
  frequency: z$2.lazy(() => ChecklistFrequencySchema).optional(),
  isActive: z$2.boolean().optional(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  items: z$2.lazy(() => ChecklistItemUncheckedCreateNestedManyWithoutChecklistInputSchema).optional()
}).strict();
var QualityChecklistCreateOrConnectWithoutCompletionsInputSchema = z$2.object({
  where: z$2.lazy(() => QualityChecklistWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => QualityChecklistCreateWithoutCompletionsInputSchema), z$2.lazy(() => QualityChecklistUncheckedCreateWithoutCompletionsInputSchema)])
}).strict();
var UserCreateWithoutChecklistCompleteInputSchema = z$2.object({
  email: z$2.string(),
  sub: z$2.number().int().optional().nullable(),
  passwordHash: z$2.string(),
  firstName: z$2.string(),
  lastName: z$2.string(),
  profileImage: z$2.string().optional().nullable(),
  verified: z$2.boolean().optional(),
  role: z$2.lazy(() => UserRoleSchema),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  organization: z$2.lazy(() => OrganizationCreateNestedOneWithoutUsersInputSchema).optional(),
  restaurant: z$2.lazy(() => RestaurantCreateNestedOneWithoutUsersInputSchema).optional(),
  shifts: z$2.lazy(() => ShiftCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: z$2.lazy(() => InventoryItemCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: z$2.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: z$2.lazy(() => PasswordResetCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItem: z$2.lazy(() => ProductionPlanItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: z$2.lazy(() => AvailabilityCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraint: z$2.lazy(() => SchedulingConstraintCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalCreateNestedManyWithoutCreatedByInputSchema).optional(),
  customerFeedback: z$2.lazy(() => CustomerFeedbackCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: z$2.lazy(() => RecipeVersionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: z$2.lazy(() => RecipeVersionCreateNestedManyWithoutApprovedByInputSchema).optional()
}).strict();
var UserUncheckedCreateWithoutChecklistCompleteInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  email: z$2.string(),
  sub: z$2.number().int().optional().nullable(),
  passwordHash: z$2.string(),
  firstName: z$2.string(),
  lastName: z$2.string(),
  profileImage: z$2.string().optional().nullable(),
  verified: z$2.boolean().optional(),
  role: z$2.lazy(() => UserRoleSchema),
  organizationId: z$2.number().int().optional().nullable(),
  restaurantId: z$2.number().int().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  shifts: z$2.lazy(() => ShiftUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: z$2.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: z$2.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: z$2.lazy(() => PasswordResetUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItem: z$2.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: z$2.lazy(() => AvailabilityUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraint: z$2.lazy(() => SchedulingConstraintUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  customerFeedback: z$2.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: z$2.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: z$2.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutApprovedByInputSchema).optional()
}).strict();
var UserCreateOrConnectWithoutChecklistCompleteInputSchema = z$2.object({
  where: z$2.lazy(() => UserWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => UserCreateWithoutChecklistCompleteInputSchema), z$2.lazy(() => UserUncheckedCreateWithoutChecklistCompleteInputSchema)])
}).strict();
var ChecklistItemCompleteCreateWithoutChecklistCompleteInputSchema = z$2.object({
  status: z$2.lazy(() => ChecklistStatusSchema),
  notes: z$2.string().optional().nullable(),
  photoUrls: z$2.union([z$2.lazy(() => ChecklistItemCompleteCreatephotoUrlsInputSchema), z$2.string().array()]).optional(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  checklistItem: z$2.lazy(() => ChecklistItemCreateNestedOneWithoutCompletionsInputSchema)
}).strict();
var ChecklistItemCompleteUncheckedCreateWithoutChecklistCompleteInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  checklistItemId: z$2.number().int(),
  status: z$2.lazy(() => ChecklistStatusSchema),
  notes: z$2.string().optional().nullable(),
  photoUrls: z$2.union([z$2.lazy(() => ChecklistItemCompleteCreatephotoUrlsInputSchema), z$2.string().array()]).optional(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var ChecklistItemCompleteCreateOrConnectWithoutChecklistCompleteInputSchema = z$2.object({
  where: z$2.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => ChecklistItemCompleteCreateWithoutChecklistCompleteInputSchema), z$2.lazy(() => ChecklistItemCompleteUncheckedCreateWithoutChecklistCompleteInputSchema)])
}).strict();
var ChecklistItemCompleteCreateManyChecklistCompleteInputEnvelopeSchema = z$2.object({
  data: z$2.union([z$2.lazy(() => ChecklistItemCompleteCreateManyChecklistCompleteInputSchema), z$2.lazy(() => ChecklistItemCompleteCreateManyChecklistCompleteInputSchema).array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var QualityChecklistUpsertWithoutCompletionsInputSchema = z$2.object({
  update: z$2.union([z$2.lazy(() => QualityChecklistUpdateWithoutCompletionsInputSchema), z$2.lazy(() => QualityChecklistUncheckedUpdateWithoutCompletionsInputSchema)]),
  create: z$2.union([z$2.lazy(() => QualityChecklistCreateWithoutCompletionsInputSchema), z$2.lazy(() => QualityChecklistUncheckedCreateWithoutCompletionsInputSchema)]),
  where: z$2.lazy(() => QualityChecklistWhereInputSchema).optional()
}).strict();
var QualityChecklistUpdateToOneWithWhereWithoutCompletionsInputSchema = z$2.object({
  where: z$2.lazy(() => QualityChecklistWhereInputSchema).optional(),
  data: z$2.union([z$2.lazy(() => QualityChecklistUpdateWithoutCompletionsInputSchema), z$2.lazy(() => QualityChecklistUncheckedUpdateWithoutCompletionsInputSchema)])
}).strict();
var QualityChecklistUpdateWithoutCompletionsInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  frequency: z$2.union([z$2.lazy(() => ChecklistFrequencySchema), z$2.lazy(() => EnumChecklistFrequencyFieldUpdateOperationsInputSchema)]).optional(),
  isActive: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: z$2.lazy(() => RestaurantUpdateOneRequiredWithoutQualityChecklistNestedInputSchema).optional(),
  items: z$2.lazy(() => ChecklistItemUpdateManyWithoutChecklistNestedInputSchema).optional()
}).strict();
var QualityChecklistUncheckedUpdateWithoutCompletionsInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: z$2.union([z$2.lazy(() => ChecklistFrequencySchema), z$2.lazy(() => EnumChecklistFrequencyFieldUpdateOperationsInputSchema)]).optional(),
  isActive: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  items: z$2.lazy(() => ChecklistItemUncheckedUpdateManyWithoutChecklistNestedInputSchema).optional()
}).strict();
var UserUpsertWithoutChecklistCompleteInputSchema = z$2.object({
  update: z$2.union([z$2.lazy(() => UserUpdateWithoutChecklistCompleteInputSchema), z$2.lazy(() => UserUncheckedUpdateWithoutChecklistCompleteInputSchema)]),
  create: z$2.union([z$2.lazy(() => UserCreateWithoutChecklistCompleteInputSchema), z$2.lazy(() => UserUncheckedCreateWithoutChecklistCompleteInputSchema)]),
  where: z$2.lazy(() => UserWhereInputSchema).optional()
}).strict();
var UserUpdateToOneWithWhereWithoutChecklistCompleteInputSchema = z$2.object({
  where: z$2.lazy(() => UserWhereInputSchema).optional(),
  data: z$2.union([z$2.lazy(() => UserUpdateWithoutChecklistCompleteInputSchema), z$2.lazy(() => UserUncheckedUpdateWithoutChecklistCompleteInputSchema)])
}).strict();
var UserUpdateWithoutChecklistCompleteInputSchema = z$2.object({
  email: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: z$2.union([z$2.lazy(() => UserRoleSchema), z$2.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  organization: z$2.lazy(() => OrganizationUpdateOneWithoutUsersNestedInputSchema).optional(),
  restaurant: z$2.lazy(() => RestaurantUpdateOneWithoutUsersNestedInputSchema).optional(),
  shifts: z$2.lazy(() => ShiftUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: z$2.lazy(() => InventoryItemUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: z$2.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: z$2.lazy(() => PasswordResetUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItem: z$2.lazy(() => ProductionPlanItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: z$2.lazy(() => AvailabilityUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraint: z$2.lazy(() => SchedulingConstraintUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  customerFeedback: z$2.lazy(() => CustomerFeedbackUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: z$2.lazy(() => RecipeVersionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: z$2.lazy(() => RecipeVersionUpdateManyWithoutApprovedByNestedInputSchema).optional()
}).strict();
var UserUncheckedUpdateWithoutChecklistCompleteInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  email: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: z$2.union([z$2.lazy(() => UserRoleSchema), z$2.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  organizationId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  shifts: z$2.lazy(() => ShiftUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: z$2.lazy(() => InventoryItemUncheckedUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: z$2.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: z$2.lazy(() => PasswordResetUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItem: z$2.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: z$2.lazy(() => AvailabilityUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraint: z$2.lazy(() => SchedulingConstraintUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  customerFeedback: z$2.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: z$2.lazy(() => RecipeVersionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: z$2.lazy(() => RecipeVersionUncheckedUpdateManyWithoutApprovedByNestedInputSchema).optional()
}).strict();
var ChecklistItemCompleteUpsertWithWhereUniqueWithoutChecklistCompleteInputSchema = z$2.object({
  where: z$2.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => ChecklistItemCompleteUpdateWithoutChecklistCompleteInputSchema), z$2.lazy(() => ChecklistItemCompleteUncheckedUpdateWithoutChecklistCompleteInputSchema)]),
  create: z$2.union([z$2.lazy(() => ChecklistItemCompleteCreateWithoutChecklistCompleteInputSchema), z$2.lazy(() => ChecklistItemCompleteUncheckedCreateWithoutChecklistCompleteInputSchema)])
}).strict();
var ChecklistItemCompleteUpdateWithWhereUniqueWithoutChecklistCompleteInputSchema = z$2.object({
  where: z$2.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => ChecklistItemCompleteUpdateWithoutChecklistCompleteInputSchema), z$2.lazy(() => ChecklistItemCompleteUncheckedUpdateWithoutChecklistCompleteInputSchema)])
}).strict();
var ChecklistItemCompleteUpdateManyWithWhereWithoutChecklistCompleteInputSchema = z$2.object({
  where: z$2.lazy(() => ChecklistItemCompleteScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => ChecklistItemCompleteUpdateManyMutationInputSchema), z$2.lazy(() => ChecklistItemCompleteUncheckedUpdateManyWithoutChecklistCompleteInputSchema)])
}).strict();
var ChecklistCompleteCreateWithoutItemsInputSchema = z$2.object({
  date: z$2.coerce.date(),
  notes: z$2.string().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  checklist: z$2.lazy(() => QualityChecklistCreateNestedOneWithoutCompletionsInputSchema),
  completedBy: z$2.lazy(() => UserCreateNestedOneWithoutChecklistCompleteInputSchema)
}).strict();
var ChecklistCompleteUncheckedCreateWithoutItemsInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  checklistId: z$2.number().int(),
  completedById: z$2.number().int(),
  date: z$2.coerce.date(),
  notes: z$2.string().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var ChecklistCompleteCreateOrConnectWithoutItemsInputSchema = z$2.object({
  where: z$2.lazy(() => ChecklistCompleteWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => ChecklistCompleteCreateWithoutItemsInputSchema), z$2.lazy(() => ChecklistCompleteUncheckedCreateWithoutItemsInputSchema)])
}).strict();
var ChecklistItemCreateWithoutCompletionsInputSchema = z$2.object({
  description: z$2.string(),
  order: z$2.number().int(),
  type: z$2.lazy(() => ChecklistItemTypeSchema),
  requiredPhotos: z$2.boolean().optional(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  checklist: z$2.lazy(() => QualityChecklistCreateNestedOneWithoutItemsInputSchema)
}).strict();
var ChecklistItemUncheckedCreateWithoutCompletionsInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  checklistId: z$2.number().int(),
  description: z$2.string(),
  order: z$2.number().int(),
  type: z$2.lazy(() => ChecklistItemTypeSchema),
  requiredPhotos: z$2.boolean().optional(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var ChecklistItemCreateOrConnectWithoutCompletionsInputSchema = z$2.object({
  where: z$2.lazy(() => ChecklistItemWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => ChecklistItemCreateWithoutCompletionsInputSchema), z$2.lazy(() => ChecklistItemUncheckedCreateWithoutCompletionsInputSchema)])
}).strict();
var ChecklistCompleteUpsertWithoutItemsInputSchema = z$2.object({
  update: z$2.union([z$2.lazy(() => ChecklistCompleteUpdateWithoutItemsInputSchema), z$2.lazy(() => ChecklistCompleteUncheckedUpdateWithoutItemsInputSchema)]),
  create: z$2.union([z$2.lazy(() => ChecklistCompleteCreateWithoutItemsInputSchema), z$2.lazy(() => ChecklistCompleteUncheckedCreateWithoutItemsInputSchema)]),
  where: z$2.lazy(() => ChecklistCompleteWhereInputSchema).optional()
}).strict();
var ChecklistCompleteUpdateToOneWithWhereWithoutItemsInputSchema = z$2.object({
  where: z$2.lazy(() => ChecklistCompleteWhereInputSchema).optional(),
  data: z$2.union([z$2.lazy(() => ChecklistCompleteUpdateWithoutItemsInputSchema), z$2.lazy(() => ChecklistCompleteUncheckedUpdateWithoutItemsInputSchema)])
}).strict();
var ChecklistCompleteUpdateWithoutItemsInputSchema = z$2.object({
  date: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  notes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  checklist: z$2.lazy(() => QualityChecklistUpdateOneRequiredWithoutCompletionsNestedInputSchema).optional(),
  completedBy: z$2.lazy(() => UserUpdateOneRequiredWithoutChecklistCompleteNestedInputSchema).optional()
}).strict();
var ChecklistCompleteUncheckedUpdateWithoutItemsInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  checklistId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  completedById: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  notes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var ChecklistItemUpsertWithoutCompletionsInputSchema = z$2.object({
  update: z$2.union([z$2.lazy(() => ChecklistItemUpdateWithoutCompletionsInputSchema), z$2.lazy(() => ChecklistItemUncheckedUpdateWithoutCompletionsInputSchema)]),
  create: z$2.union([z$2.lazy(() => ChecklistItemCreateWithoutCompletionsInputSchema), z$2.lazy(() => ChecklistItemUncheckedCreateWithoutCompletionsInputSchema)]),
  where: z$2.lazy(() => ChecklistItemWhereInputSchema).optional()
}).strict();
var ChecklistItemUpdateToOneWithWhereWithoutCompletionsInputSchema = z$2.object({
  where: z$2.lazy(() => ChecklistItemWhereInputSchema).optional(),
  data: z$2.union([z$2.lazy(() => ChecklistItemUpdateWithoutCompletionsInputSchema), z$2.lazy(() => ChecklistItemUncheckedUpdateWithoutCompletionsInputSchema)])
}).strict();
var ChecklistItemUpdateWithoutCompletionsInputSchema = z$2.object({
  description: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  order: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  type: z$2.union([z$2.lazy(() => ChecklistItemTypeSchema), z$2.lazy(() => EnumChecklistItemTypeFieldUpdateOperationsInputSchema)]).optional(),
  requiredPhotos: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  checklist: z$2.lazy(() => QualityChecklistUpdateOneRequiredWithoutItemsNestedInputSchema).optional()
}).strict();
var ChecklistItemUncheckedUpdateWithoutCompletionsInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  checklistId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  order: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  type: z$2.union([z$2.lazy(() => ChecklistItemTypeSchema), z$2.lazy(() => EnumChecklistItemTypeFieldUpdateOperationsInputSchema)]).optional(),
  requiredPhotos: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var VendorCreateWithoutSupplierPriceHistoryInputSchema = z$2.object({
  name: z$2.string(),
  contact: z$2.string(),
  email: z$2.string(),
  phone: z$2.string(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  orders: z$2.lazy(() => OrderCreateNestedManyWithoutVendorInputSchema).optional(),
  ingredients: z$2.lazy(() => IngredientCreateNestedManyWithoutVendorsInputSchema).optional()
}).strict();
var VendorUncheckedCreateWithoutSupplierPriceHistoryInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  contact: z$2.string(),
  email: z$2.string(),
  phone: z$2.string(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  orders: z$2.lazy(() => OrderUncheckedCreateNestedManyWithoutVendorInputSchema).optional(),
  ingredients: z$2.lazy(() => IngredientUncheckedCreateNestedManyWithoutVendorsInputSchema).optional()
}).strict();
var VendorCreateOrConnectWithoutSupplierPriceHistoryInputSchema = z$2.object({
  where: z$2.lazy(() => VendorWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => VendorCreateWithoutSupplierPriceHistoryInputSchema), z$2.lazy(() => VendorUncheckedCreateWithoutSupplierPriceHistoryInputSchema)])
}).strict();
var IngredientCreateWithoutSupplierPriceHistoryInputSchema = z$2.object({
  name: z$2.string(),
  category: z$2.string(),
  price: z$2.number(),
  recipeIngredients: z$2.lazy(() => RecipeIngredientCreateNestedManyWithoutIngredientInputSchema).optional(),
  inventoryItems: z$2.lazy(() => InventoryItemCreateNestedManyWithoutIngredientInputSchema).optional(),
  orderItems: z$2.lazy(() => OrderItemCreateNestedManyWithoutIngredientInputSchema).optional(),
  vendors: z$2.lazy(() => VendorCreateNestedManyWithoutIngredientsInputSchema).optional(),
  WasteRecord: z$2.lazy(() => WasteRecordCreateNestedManyWithoutIngredienteInputSchema).optional(),
  IngredientAllergen: z$2.lazy(() => IngredientAllergenCreateNestedManyWithoutIngredientInputSchema).optional(),
  DietaryRestriction: z$2.lazy(() => DietaryRestrictionCreateNestedOneWithoutIngredientsInputSchema).optional()
}).strict();
var IngredientUncheckedCreateWithoutSupplierPriceHistoryInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  category: z$2.string(),
  price: z$2.number(),
  dietaryRestrictionId: z$2.number().int().optional().nullable(),
  recipeIngredients: z$2.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  inventoryItems: z$2.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  orderItems: z$2.lazy(() => OrderItemUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  vendors: z$2.lazy(() => VendorUncheckedCreateNestedManyWithoutIngredientsInputSchema).optional(),
  WasteRecord: z$2.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutIngredienteInputSchema).optional(),
  IngredientAllergen: z$2.lazy(() => IngredientAllergenUncheckedCreateNestedManyWithoutIngredientInputSchema).optional()
}).strict();
var IngredientCreateOrConnectWithoutSupplierPriceHistoryInputSchema = z$2.object({
  where: z$2.lazy(() => IngredientWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => IngredientCreateWithoutSupplierPriceHistoryInputSchema), z$2.lazy(() => IngredientUncheckedCreateWithoutSupplierPriceHistoryInputSchema)])
}).strict();
var VendorUpsertWithoutSupplierPriceHistoryInputSchema = z$2.object({
  update: z$2.union([z$2.lazy(() => VendorUpdateWithoutSupplierPriceHistoryInputSchema), z$2.lazy(() => VendorUncheckedUpdateWithoutSupplierPriceHistoryInputSchema)]),
  create: z$2.union([z$2.lazy(() => VendorCreateWithoutSupplierPriceHistoryInputSchema), z$2.lazy(() => VendorUncheckedCreateWithoutSupplierPriceHistoryInputSchema)]),
  where: z$2.lazy(() => VendorWhereInputSchema).optional()
}).strict();
var VendorUpdateToOneWithWhereWithoutSupplierPriceHistoryInputSchema = z$2.object({
  where: z$2.lazy(() => VendorWhereInputSchema).optional(),
  data: z$2.union([z$2.lazy(() => VendorUpdateWithoutSupplierPriceHistoryInputSchema), z$2.lazy(() => VendorUncheckedUpdateWithoutSupplierPriceHistoryInputSchema)])
}).strict();
var VendorUpdateWithoutSupplierPriceHistoryInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  contact: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  email: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  phone: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  orders: z$2.lazy(() => OrderUpdateManyWithoutVendorNestedInputSchema).optional(),
  ingredients: z$2.lazy(() => IngredientUpdateManyWithoutVendorsNestedInputSchema).optional()
}).strict();
var VendorUncheckedUpdateWithoutSupplierPriceHistoryInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  contact: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  email: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  phone: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  orders: z$2.lazy(() => OrderUncheckedUpdateManyWithoutVendorNestedInputSchema).optional(),
  ingredients: z$2.lazy(() => IngredientUncheckedUpdateManyWithoutVendorsNestedInputSchema).optional()
}).strict();
var IngredientUpsertWithoutSupplierPriceHistoryInputSchema = z$2.object({
  update: z$2.union([z$2.lazy(() => IngredientUpdateWithoutSupplierPriceHistoryInputSchema), z$2.lazy(() => IngredientUncheckedUpdateWithoutSupplierPriceHistoryInputSchema)]),
  create: z$2.union([z$2.lazy(() => IngredientCreateWithoutSupplierPriceHistoryInputSchema), z$2.lazy(() => IngredientUncheckedCreateWithoutSupplierPriceHistoryInputSchema)]),
  where: z$2.lazy(() => IngredientWhereInputSchema).optional()
}).strict();
var IngredientUpdateToOneWithWhereWithoutSupplierPriceHistoryInputSchema = z$2.object({
  where: z$2.lazy(() => IngredientWhereInputSchema).optional(),
  data: z$2.union([z$2.lazy(() => IngredientUpdateWithoutSupplierPriceHistoryInputSchema), z$2.lazy(() => IngredientUncheckedUpdateWithoutSupplierPriceHistoryInputSchema)])
}).strict();
var IngredientUpdateWithoutSupplierPriceHistoryInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  category: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipeIngredients: z$2.lazy(() => RecipeIngredientUpdateManyWithoutIngredientNestedInputSchema).optional(),
  inventoryItems: z$2.lazy(() => InventoryItemUpdateManyWithoutIngredientNestedInputSchema).optional(),
  orderItems: z$2.lazy(() => OrderItemUpdateManyWithoutIngredientNestedInputSchema).optional(),
  vendors: z$2.lazy(() => VendorUpdateManyWithoutIngredientsNestedInputSchema).optional(),
  WasteRecord: z$2.lazy(() => WasteRecordUpdateManyWithoutIngredienteNestedInputSchema).optional(),
  IngredientAllergen: z$2.lazy(() => IngredientAllergenUpdateManyWithoutIngredientNestedInputSchema).optional(),
  DietaryRestriction: z$2.lazy(() => DietaryRestrictionUpdateOneWithoutIngredientsNestedInputSchema).optional()
}).strict();
var IngredientUncheckedUpdateWithoutSupplierPriceHistoryInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  category: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  dietaryRestrictionId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  recipeIngredients: z$2.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  inventoryItems: z$2.lazy(() => InventoryItemUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  orderItems: z$2.lazy(() => OrderItemUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  vendors: z$2.lazy(() => VendorUncheckedUpdateManyWithoutIngredientsNestedInputSchema).optional(),
  WasteRecord: z$2.lazy(() => WasteRecordUncheckedUpdateManyWithoutIngredienteNestedInputSchema).optional(),
  IngredientAllergen: z$2.lazy(() => IngredientAllergenUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional()
}).strict();
var RestaurantCreateWithoutQustomerFeedbackInputSchema = z$2.object({
  name: z$2.string(),
  imageUrl: z$2.string().optional().nullable(),
  address: z$2.string(),
  city: z$2.string(),
  zipCode: z$2.string(),
  state: z$2.string(),
  owner: z$2.string(),
  foodCost: z$2.number().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  isDeleted: z$2.boolean().optional(),
  deleted: z$2.coerce.date().optional().nullable(),
  organization: z$2.lazy(() => OrganizationCreateNestedOneWithoutRestaurantsInputSchema).optional(),
  users: z$2.lazy(() => UserCreateNestedManyWithoutRestaurantInputSchema).optional(),
  cookbooks: z$2.lazy(() => CookBookCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: z$2.lazy(() => InventoryCreateNestedOneWithoutRestaurantInputSchema).optional(),
  orders: z$2.lazy(() => OrderCreateNestedManyWithoutRestaurantInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: z$2.lazy(() => MenuCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipment: z$2.lazy(() => EquipmentCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklist: z$2.lazy(() => QualityChecklistCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();
var RestaurantUncheckedCreateWithoutQustomerFeedbackInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  imageUrl: z$2.string().optional().nullable(),
  address: z$2.string(),
  city: z$2.string(),
  zipCode: z$2.string(),
  state: z$2.string(),
  owner: z$2.string(),
  organizationId: z$2.number().int().optional().nullable(),
  foodCost: z$2.number().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  isDeleted: z$2.boolean().optional(),
  deleted: z$2.coerce.date().optional().nullable(),
  users: z$2.lazy(() => UserUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  cookbooks: z$2.lazy(() => CookBookUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: z$2.lazy(() => InventoryUncheckedCreateNestedOneWithoutRestaurantInputSchema).optional(),
  orders: z$2.lazy(() => OrderUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: z$2.lazy(() => MenuUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipment: z$2.lazy(() => EquipmentUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklist: z$2.lazy(() => QualityChecklistUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();
var RestaurantCreateOrConnectWithoutQustomerFeedbackInputSchema = z$2.object({
  where: z$2.lazy(() => RestaurantWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => RestaurantCreateWithoutQustomerFeedbackInputSchema), z$2.lazy(() => RestaurantUncheckedCreateWithoutQustomerFeedbackInputSchema)])
}).strict();
var MenuItemCreateWithoutFeedbackInputSchema = z$2.object({
  name: z$2.string(),
  description: z$2.string().optional().nullable(),
  price: z$2.number(),
  foodCost: z$2.number(),
  recipeIds: z$2.union([z$2.lazy(() => MenuItemCreaterecipeIdsInputSchema), z$2.number().int().array()]).optional(),
  recipeServingsAmount: z$2.union([z$2.lazy(() => MenuItemCreaterecipeServingsAmountInputSchema), z$2.number().array()]).optional(),
  recipeServingsCost: z$2.union([z$2.lazy(() => MenuItemCreaterecipeServingsCostInputSchema), z$2.number().array()]).optional(),
  allergens: z$2.union([z$2.lazy(() => MenuItemCreateallergensInputSchema), z$2.string().array()]).optional(),
  nutritionalInfoId: z$2.number().int().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  nutritionalInfo: z$2.lazy(() => NutritionalInfoCreateNestedOneWithoutMenuItemInputSchema).optional(),
  menu: z$2.lazy(() => MenuCreateNestedOneWithoutMenuItemsInputSchema),
  recipes: z$2.lazy(() => RecipeCreateNestedManyWithoutMenuItemsInputSchema).optional(),
  menuItemRecipe: z$2.lazy(() => MenuItemRecipeCreateNestedManyWithoutMenuItemInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsCreateNestedManyWithoutMenuItemInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemCreateNestedManyWithoutMenuItemInputSchema).optional(),
  nutritionalRecommendation: z$2.lazy(() => NutritionalRecommendationCreateNestedManyWithoutMenuItemInputSchema).optional(),
  category: z$2.lazy(() => MenuCategoryCreateNestedOneWithoutMenuItemsInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionCreateNestedManyWithoutMenuItemsInputSchema).optional()
}).strict();
var MenuItemUncheckedCreateWithoutFeedbackInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  description: z$2.string().optional().nullable(),
  price: z$2.number(),
  foodCost: z$2.number(),
  recipeIds: z$2.union([z$2.lazy(() => MenuItemCreaterecipeIdsInputSchema), z$2.number().int().array()]).optional(),
  recipeServingsAmount: z$2.union([z$2.lazy(() => MenuItemCreaterecipeServingsAmountInputSchema), z$2.number().array()]).optional(),
  recipeServingsCost: z$2.union([z$2.lazy(() => MenuItemCreaterecipeServingsCostInputSchema), z$2.number().array()]).optional(),
  allergens: z$2.union([z$2.lazy(() => MenuItemCreateallergensInputSchema), z$2.string().array()]).optional(),
  nutritionalInfoId: z$2.number().int().optional().nullable(),
  menuId: z$2.number().int(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  categoryId: z$2.number().int().optional().nullable(),
  nutritionalInfo: z$2.lazy(() => NutritionalInfoUncheckedCreateNestedOneWithoutMenuItemInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeUncheckedCreateNestedManyWithoutMenuItemsInputSchema).optional(),
  menuItemRecipe: z$2.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  nutritionalRecommendation: z$2.lazy(() => NutritionalRecommendationUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutMenuItemsInputSchema).optional()
}).strict();
var MenuItemCreateOrConnectWithoutFeedbackInputSchema = z$2.object({
  where: z$2.lazy(() => MenuItemWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => MenuItemCreateWithoutFeedbackInputSchema), z$2.lazy(() => MenuItemUncheckedCreateWithoutFeedbackInputSchema)])
}).strict();
var UserCreateWithoutCustomerFeedbackInputSchema = z$2.object({
  email: z$2.string(),
  sub: z$2.number().int().optional().nullable(),
  passwordHash: z$2.string(),
  firstName: z$2.string(),
  lastName: z$2.string(),
  profileImage: z$2.string().optional().nullable(),
  verified: z$2.boolean().optional(),
  role: z$2.lazy(() => UserRoleSchema),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  organization: z$2.lazy(() => OrganizationCreateNestedOneWithoutUsersInputSchema).optional(),
  restaurant: z$2.lazy(() => RestaurantCreateNestedOneWithoutUsersInputSchema).optional(),
  shifts: z$2.lazy(() => ShiftCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: z$2.lazy(() => InventoryItemCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: z$2.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: z$2.lazy(() => PasswordResetCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItem: z$2.lazy(() => ProductionPlanItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: z$2.lazy(() => AvailabilityCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraint: z$2.lazy(() => SchedulingConstraintCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteCreateNestedManyWithoutCompletedByInputSchema).optional(),
  recipeVersionsCreated: z$2.lazy(() => RecipeVersionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: z$2.lazy(() => RecipeVersionCreateNestedManyWithoutApprovedByInputSchema).optional()
}).strict();
var UserUncheckedCreateWithoutCustomerFeedbackInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  email: z$2.string(),
  sub: z$2.number().int().optional().nullable(),
  passwordHash: z$2.string(),
  firstName: z$2.string(),
  lastName: z$2.string(),
  profileImage: z$2.string().optional().nullable(),
  verified: z$2.boolean().optional(),
  role: z$2.lazy(() => UserRoleSchema),
  organizationId: z$2.number().int().optional().nullable(),
  restaurantId: z$2.number().int().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  shifts: z$2.lazy(() => ShiftUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: z$2.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: z$2.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: z$2.lazy(() => PasswordResetUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItem: z$2.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: z$2.lazy(() => AvailabilityUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraint: z$2.lazy(() => SchedulingConstraintUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteUncheckedCreateNestedManyWithoutCompletedByInputSchema).optional(),
  recipeVersionsCreated: z$2.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: z$2.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutApprovedByInputSchema).optional()
}).strict();
var UserCreateOrConnectWithoutCustomerFeedbackInputSchema = z$2.object({
  where: z$2.lazy(() => UserWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => UserCreateWithoutCustomerFeedbackInputSchema), z$2.lazy(() => UserUncheckedCreateWithoutCustomerFeedbackInputSchema)])
}).strict();
var RestaurantUpsertWithoutQustomerFeedbackInputSchema = z$2.object({
  update: z$2.union([z$2.lazy(() => RestaurantUpdateWithoutQustomerFeedbackInputSchema), z$2.lazy(() => RestaurantUncheckedUpdateWithoutQustomerFeedbackInputSchema)]),
  create: z$2.union([z$2.lazy(() => RestaurantCreateWithoutQustomerFeedbackInputSchema), z$2.lazy(() => RestaurantUncheckedCreateWithoutQustomerFeedbackInputSchema)]),
  where: z$2.lazy(() => RestaurantWhereInputSchema).optional()
}).strict();
var RestaurantUpdateToOneWithWhereWithoutQustomerFeedbackInputSchema = z$2.object({
  where: z$2.lazy(() => RestaurantWhereInputSchema).optional(),
  data: z$2.union([z$2.lazy(() => RestaurantUpdateWithoutQustomerFeedbackInputSchema), z$2.lazy(() => RestaurantUncheckedUpdateWithoutQustomerFeedbackInputSchema)])
}).strict();
var RestaurantUpdateWithoutQustomerFeedbackInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  address: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  city: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  zipCode: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  state: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  owner: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  isDeleted: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  deleted: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  organization: z$2.lazy(() => OrganizationUpdateOneWithoutRestaurantsNestedInputSchema).optional(),
  users: z$2.lazy(() => UserUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  cookbooks: z$2.lazy(() => CookBookUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: z$2.lazy(() => InventoryUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  orders: z$2.lazy(() => OrderUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: z$2.lazy(() => MenuUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipment: z$2.lazy(() => EquipmentUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklist: z$2.lazy(() => QualityChecklistUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();
var RestaurantUncheckedUpdateWithoutQustomerFeedbackInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  address: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  city: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  zipCode: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  state: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  owner: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  organizationId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  isDeleted: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  deleted: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  users: z$2.lazy(() => UserUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  cookbooks: z$2.lazy(() => CookBookUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: z$2.lazy(() => InventoryUncheckedUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  orders: z$2.lazy(() => OrderUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: z$2.lazy(() => MenuUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipment: z$2.lazy(() => EquipmentUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklist: z$2.lazy(() => QualityChecklistUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();
var MenuItemUpsertWithoutFeedbackInputSchema = z$2.object({
  update: z$2.union([z$2.lazy(() => MenuItemUpdateWithoutFeedbackInputSchema), z$2.lazy(() => MenuItemUncheckedUpdateWithoutFeedbackInputSchema)]),
  create: z$2.union([z$2.lazy(() => MenuItemCreateWithoutFeedbackInputSchema), z$2.lazy(() => MenuItemUncheckedCreateWithoutFeedbackInputSchema)]),
  where: z$2.lazy(() => MenuItemWhereInputSchema).optional()
}).strict();
var MenuItemUpdateToOneWithWhereWithoutFeedbackInputSchema = z$2.object({
  where: z$2.lazy(() => MenuItemWhereInputSchema).optional(),
  data: z$2.union([z$2.lazy(() => MenuItemUpdateWithoutFeedbackInputSchema), z$2.lazy(() => MenuItemUncheckedUpdateWithoutFeedbackInputSchema)])
}).strict();
var MenuItemUpdateWithoutFeedbackInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipeIds: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeIdsInputSchema), z$2.number().int().array()]).optional(),
  recipeServingsAmount: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema), z$2.number().array()]).optional(),
  recipeServingsCost: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema), z$2.number().array()]).optional(),
  allergens: z$2.union([z$2.lazy(() => MenuItemUpdateallergensInputSchema), z$2.string().array()]).optional(),
  nutritionalInfoId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  nutritionalInfo: z$2.lazy(() => NutritionalInfoUpdateOneWithoutMenuItemNestedInputSchema).optional(),
  menu: z$2.lazy(() => MenuUpdateOneRequiredWithoutMenuItemsNestedInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeUpdateManyWithoutMenuItemsNestedInputSchema).optional(),
  menuItemRecipe: z$2.lazy(() => MenuItemRecipeUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  nutritionalRecommendation: z$2.lazy(() => NutritionalRecommendationUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  category: z$2.lazy(() => MenuCategoryUpdateOneWithoutMenuItemsNestedInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionUpdateManyWithoutMenuItemsNestedInputSchema).optional()
}).strict();
var MenuItemUncheckedUpdateWithoutFeedbackInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipeIds: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeIdsInputSchema), z$2.number().int().array()]).optional(),
  recipeServingsAmount: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema), z$2.number().array()]).optional(),
  recipeServingsCost: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema), z$2.number().array()]).optional(),
  allergens: z$2.union([z$2.lazy(() => MenuItemUpdateallergensInputSchema), z$2.string().array()]).optional(),
  nutritionalInfoId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  menuId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  categoryId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  nutritionalInfo: z$2.lazy(() => NutritionalInfoUncheckedUpdateOneWithoutMenuItemNestedInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeUncheckedUpdateManyWithoutMenuItemsNestedInputSchema).optional(),
  menuItemRecipe: z$2.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  nutritionalRecommendation: z$2.lazy(() => NutritionalRecommendationUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutMenuItemsNestedInputSchema).optional()
}).strict();
var UserUpsertWithoutCustomerFeedbackInputSchema = z$2.object({
  update: z$2.union([z$2.lazy(() => UserUpdateWithoutCustomerFeedbackInputSchema), z$2.lazy(() => UserUncheckedUpdateWithoutCustomerFeedbackInputSchema)]),
  create: z$2.union([z$2.lazy(() => UserCreateWithoutCustomerFeedbackInputSchema), z$2.lazy(() => UserUncheckedCreateWithoutCustomerFeedbackInputSchema)]),
  where: z$2.lazy(() => UserWhereInputSchema).optional()
}).strict();
var UserUpdateToOneWithWhereWithoutCustomerFeedbackInputSchema = z$2.object({
  where: z$2.lazy(() => UserWhereInputSchema).optional(),
  data: z$2.union([z$2.lazy(() => UserUpdateWithoutCustomerFeedbackInputSchema), z$2.lazy(() => UserUncheckedUpdateWithoutCustomerFeedbackInputSchema)])
}).strict();
var UserUpdateWithoutCustomerFeedbackInputSchema = z$2.object({
  email: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: z$2.union([z$2.lazy(() => UserRoleSchema), z$2.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  organization: z$2.lazy(() => OrganizationUpdateOneWithoutUsersNestedInputSchema).optional(),
  restaurant: z$2.lazy(() => RestaurantUpdateOneWithoutUsersNestedInputSchema).optional(),
  shifts: z$2.lazy(() => ShiftUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: z$2.lazy(() => InventoryItemUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: z$2.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: z$2.lazy(() => PasswordResetUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItem: z$2.lazy(() => ProductionPlanItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: z$2.lazy(() => AvailabilityUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraint: z$2.lazy(() => SchedulingConstraintUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  recipeVersionsCreated: z$2.lazy(() => RecipeVersionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: z$2.lazy(() => RecipeVersionUpdateManyWithoutApprovedByNestedInputSchema).optional()
}).strict();
var UserUncheckedUpdateWithoutCustomerFeedbackInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  email: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: z$2.union([z$2.lazy(() => UserRoleSchema), z$2.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  organizationId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  shifts: z$2.lazy(() => ShiftUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: z$2.lazy(() => InventoryItemUncheckedUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: z$2.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: z$2.lazy(() => PasswordResetUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItem: z$2.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: z$2.lazy(() => AvailabilityUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraint: z$2.lazy(() => SchedulingConstraintUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteUncheckedUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  recipeVersionsCreated: z$2.lazy(() => RecipeVersionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: z$2.lazy(() => RecipeVersionUncheckedUpdateManyWithoutApprovedByNestedInputSchema).optional()
}).strict();
var MenuItemCreateWithoutDietaryRestrictionsInputSchema = z$2.object({
  name: z$2.string(),
  description: z$2.string().optional().nullable(),
  price: z$2.number(),
  foodCost: z$2.number(),
  recipeIds: z$2.union([z$2.lazy(() => MenuItemCreaterecipeIdsInputSchema), z$2.number().int().array()]).optional(),
  recipeServingsAmount: z$2.union([z$2.lazy(() => MenuItemCreaterecipeServingsAmountInputSchema), z$2.number().array()]).optional(),
  recipeServingsCost: z$2.union([z$2.lazy(() => MenuItemCreaterecipeServingsCostInputSchema), z$2.number().array()]).optional(),
  allergens: z$2.union([z$2.lazy(() => MenuItemCreateallergensInputSchema), z$2.string().array()]).optional(),
  nutritionalInfoId: z$2.number().int().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  nutritionalInfo: z$2.lazy(() => NutritionalInfoCreateNestedOneWithoutMenuItemInputSchema).optional(),
  menu: z$2.lazy(() => MenuCreateNestedOneWithoutMenuItemsInputSchema),
  recipes: z$2.lazy(() => RecipeCreateNestedManyWithoutMenuItemsInputSchema).optional(),
  menuItemRecipe: z$2.lazy(() => MenuItemRecipeCreateNestedManyWithoutMenuItemInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsCreateNestedManyWithoutMenuItemInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemCreateNestedManyWithoutMenuItemInputSchema).optional(),
  nutritionalRecommendation: z$2.lazy(() => NutritionalRecommendationCreateNestedManyWithoutMenuItemInputSchema).optional(),
  category: z$2.lazy(() => MenuCategoryCreateNestedOneWithoutMenuItemsInputSchema).optional(),
  feedback: z$2.lazy(() => CustomerFeedbackCreateNestedManyWithoutMenuItemInputSchema).optional()
}).strict();
var MenuItemUncheckedCreateWithoutDietaryRestrictionsInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  description: z$2.string().optional().nullable(),
  price: z$2.number(),
  foodCost: z$2.number(),
  recipeIds: z$2.union([z$2.lazy(() => MenuItemCreaterecipeIdsInputSchema), z$2.number().int().array()]).optional(),
  recipeServingsAmount: z$2.union([z$2.lazy(() => MenuItemCreaterecipeServingsAmountInputSchema), z$2.number().array()]).optional(),
  recipeServingsCost: z$2.union([z$2.lazy(() => MenuItemCreaterecipeServingsCostInputSchema), z$2.number().array()]).optional(),
  allergens: z$2.union([z$2.lazy(() => MenuItemCreateallergensInputSchema), z$2.string().array()]).optional(),
  nutritionalInfoId: z$2.number().int().optional().nullable(),
  menuId: z$2.number().int(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  categoryId: z$2.number().int().optional().nullable(),
  nutritionalInfo: z$2.lazy(() => NutritionalInfoUncheckedCreateNestedOneWithoutMenuItemInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeUncheckedCreateNestedManyWithoutMenuItemsInputSchema).optional(),
  menuItemRecipe: z$2.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  nutritionalRecommendation: z$2.lazy(() => NutritionalRecommendationUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  feedback: z$2.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional()
}).strict();
var MenuItemCreateOrConnectWithoutDietaryRestrictionsInputSchema = z$2.object({
  where: z$2.lazy(() => MenuItemWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => MenuItemCreateWithoutDietaryRestrictionsInputSchema), z$2.lazy(() => MenuItemUncheckedCreateWithoutDietaryRestrictionsInputSchema)])
}).strict();
var RecipeCreateWithoutDietaryRestrictionsInputSchema = z$2.object({
  name: z$2.string(),
  imageUrl: z$2.union([z$2.lazy(() => RecipeCreateimageUrlInputSchema), z$2.string().array()]).optional(),
  description: z$2.string().optional().nullable(),
  servings: z$2.number().int(),
  cookTime: z$2.number().int(),
  prepTime: z$2.number().int(),
  frequency: z$2.number().int().optional().nullable(),
  foodCost: z$2.number().optional().nullable(),
  isDeleted: z$2.boolean().optional(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  restaurant: z$2.lazy(() => RestaurantCreateNestedOneWithoutRecipesInputSchema),
  cookBook: z$2.lazy(() => CookBookCreateNestedOneWithoutRecipesInputSchema),
  ingredients: z$2.lazy(() => RecipeIngredientCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z$2.lazy(() => MenuItemCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: z$2.lazy(() => FoodCostHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: z$2.lazy(() => PrepHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z$2.lazy(() => PrepBoardCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  MenuItemRecipe: z$2.lazy(() => MenuItemRecipeCreateNestedManyWithoutRecipeInputSchema).optional(),
  ProductionPlanItem: z$2.lazy(() => ProductionPlanItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z$2.lazy(() => RecipeTagCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: z$2.lazy(() => RecipeVersionCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipment: z$2.lazy(() => RecipeEquipmentCreateNestedManyWithoutRecipeInputSchema).optional()
}).strict();
var RecipeUncheckedCreateWithoutDietaryRestrictionsInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  imageUrl: z$2.union([z$2.lazy(() => RecipeCreateimageUrlInputSchema), z$2.string().array()]).optional(),
  description: z$2.string().optional().nullable(),
  servings: z$2.number().int(),
  cookTime: z$2.number().int(),
  prepTime: z$2.number().int(),
  frequency: z$2.number().int().optional().nullable(),
  restaurantId: z$2.number().int(),
  cookBookId: z$2.number().int(),
  foodCost: z$2.number().optional().nullable(),
  isDeleted: z$2.boolean().optional(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  ingredients: z$2.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z$2.lazy(() => MenuItemUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: z$2.lazy(() => FoodCostHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: z$2.lazy(() => PrepHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z$2.lazy(() => PrepBoardUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  MenuItemRecipe: z$2.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  ProductionPlanItem: z$2.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z$2.lazy(() => RecipeTagUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: z$2.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipment: z$2.lazy(() => RecipeEquipmentUncheckedCreateNestedManyWithoutRecipeInputSchema).optional()
}).strict();
var RecipeCreateOrConnectWithoutDietaryRestrictionsInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => RecipeCreateWithoutDietaryRestrictionsInputSchema), z$2.lazy(() => RecipeUncheckedCreateWithoutDietaryRestrictionsInputSchema)])
}).strict();
var IngredientCreateWithoutDietaryRestrictionInputSchema = z$2.object({
  name: z$2.string(),
  category: z$2.string(),
  price: z$2.number(),
  recipeIngredients: z$2.lazy(() => RecipeIngredientCreateNestedManyWithoutIngredientInputSchema).optional(),
  inventoryItems: z$2.lazy(() => InventoryItemCreateNestedManyWithoutIngredientInputSchema).optional(),
  orderItems: z$2.lazy(() => OrderItemCreateNestedManyWithoutIngredientInputSchema).optional(),
  vendors: z$2.lazy(() => VendorCreateNestedManyWithoutIngredientsInputSchema).optional(),
  WasteRecord: z$2.lazy(() => WasteRecordCreateNestedManyWithoutIngredienteInputSchema).optional(),
  IngredientAllergen: z$2.lazy(() => IngredientAllergenCreateNestedManyWithoutIngredientInputSchema).optional(),
  SupplierPriceHistory: z$2.lazy(() => SupplierPriceHistoryCreateNestedManyWithoutIngredientInputSchema).optional()
}).strict();
var IngredientUncheckedCreateWithoutDietaryRestrictionInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  category: z$2.string(),
  price: z$2.number(),
  recipeIngredients: z$2.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  inventoryItems: z$2.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  orderItems: z$2.lazy(() => OrderItemUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  vendors: z$2.lazy(() => VendorUncheckedCreateNestedManyWithoutIngredientsInputSchema).optional(),
  WasteRecord: z$2.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutIngredienteInputSchema).optional(),
  IngredientAllergen: z$2.lazy(() => IngredientAllergenUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  SupplierPriceHistory: z$2.lazy(() => SupplierPriceHistoryUncheckedCreateNestedManyWithoutIngredientInputSchema).optional()
}).strict();
var IngredientCreateOrConnectWithoutDietaryRestrictionInputSchema = z$2.object({
  where: z$2.lazy(() => IngredientWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => IngredientCreateWithoutDietaryRestrictionInputSchema), z$2.lazy(() => IngredientUncheckedCreateWithoutDietaryRestrictionInputSchema)])
}).strict();
var IngredientCreateManyDietaryRestrictionInputEnvelopeSchema = z$2.object({
  data: z$2.union([z$2.lazy(() => IngredientCreateManyDietaryRestrictionInputSchema), z$2.lazy(() => IngredientCreateManyDietaryRestrictionInputSchema).array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var MenuItemUpsertWithWhereUniqueWithoutDietaryRestrictionsInputSchema = z$2.object({
  where: z$2.lazy(() => MenuItemWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => MenuItemUpdateWithoutDietaryRestrictionsInputSchema), z$2.lazy(() => MenuItemUncheckedUpdateWithoutDietaryRestrictionsInputSchema)]),
  create: z$2.union([z$2.lazy(() => MenuItemCreateWithoutDietaryRestrictionsInputSchema), z$2.lazy(() => MenuItemUncheckedCreateWithoutDietaryRestrictionsInputSchema)])
}).strict();
var MenuItemUpdateWithWhereUniqueWithoutDietaryRestrictionsInputSchema = z$2.object({
  where: z$2.lazy(() => MenuItemWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => MenuItemUpdateWithoutDietaryRestrictionsInputSchema), z$2.lazy(() => MenuItemUncheckedUpdateWithoutDietaryRestrictionsInputSchema)])
}).strict();
var MenuItemUpdateManyWithWhereWithoutDietaryRestrictionsInputSchema = z$2.object({
  where: z$2.lazy(() => MenuItemScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => MenuItemUpdateManyMutationInputSchema), z$2.lazy(() => MenuItemUncheckedUpdateManyWithoutDietaryRestrictionsInputSchema)])
}).strict();
var RecipeUpsertWithWhereUniqueWithoutDietaryRestrictionsInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => RecipeUpdateWithoutDietaryRestrictionsInputSchema), z$2.lazy(() => RecipeUncheckedUpdateWithoutDietaryRestrictionsInputSchema)]),
  create: z$2.union([z$2.lazy(() => RecipeCreateWithoutDietaryRestrictionsInputSchema), z$2.lazy(() => RecipeUncheckedCreateWithoutDietaryRestrictionsInputSchema)])
}).strict();
var RecipeUpdateWithWhereUniqueWithoutDietaryRestrictionsInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => RecipeUpdateWithoutDietaryRestrictionsInputSchema), z$2.lazy(() => RecipeUncheckedUpdateWithoutDietaryRestrictionsInputSchema)])
}).strict();
var RecipeUpdateManyWithWhereWithoutDietaryRestrictionsInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => RecipeUpdateManyMutationInputSchema), z$2.lazy(() => RecipeUncheckedUpdateManyWithoutDietaryRestrictionsInputSchema)])
}).strict();
var RecipeScalarWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => RecipeScalarWhereInputSchema), z$2.lazy(() => RecipeScalarWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => RecipeScalarWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => RecipeScalarWhereInputSchema), z$2.lazy(() => RecipeScalarWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  name: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  imageUrl: z$2.lazy(() => StringNullableListFilterSchema).optional(),
  description: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  servings: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  cookTime: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  prepTime: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  frequency: z$2.union([z$2.lazy(() => IntNullableFilterSchema), z$2.number()]).optional().nullable(),
  restaurantId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  cookBookId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  foodCost: z$2.union([z$2.lazy(() => FloatNullableFilterSchema), z$2.number()]).optional().nullable(),
  isDeleted: z$2.union([z$2.lazy(() => BoolFilterSchema), z$2.boolean()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional()
}).strict();
var IngredientUpsertWithWhereUniqueWithoutDietaryRestrictionInputSchema = z$2.object({
  where: z$2.lazy(() => IngredientWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => IngredientUpdateWithoutDietaryRestrictionInputSchema), z$2.lazy(() => IngredientUncheckedUpdateWithoutDietaryRestrictionInputSchema)]),
  create: z$2.union([z$2.lazy(() => IngredientCreateWithoutDietaryRestrictionInputSchema), z$2.lazy(() => IngredientUncheckedCreateWithoutDietaryRestrictionInputSchema)])
}).strict();
var IngredientUpdateWithWhereUniqueWithoutDietaryRestrictionInputSchema = z$2.object({
  where: z$2.lazy(() => IngredientWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => IngredientUpdateWithoutDietaryRestrictionInputSchema), z$2.lazy(() => IngredientUncheckedUpdateWithoutDietaryRestrictionInputSchema)])
}).strict();
var IngredientUpdateManyWithWhereWithoutDietaryRestrictionInputSchema = z$2.object({
  where: z$2.lazy(() => IngredientScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => IngredientUpdateManyMutationInputSchema), z$2.lazy(() => IngredientUncheckedUpdateManyWithoutDietaryRestrictionInputSchema)])
}).strict();
var IngredientScalarWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => IngredientScalarWhereInputSchema), z$2.lazy(() => IngredientScalarWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => IngredientScalarWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => IngredientScalarWhereInputSchema), z$2.lazy(() => IngredientScalarWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  name: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  category: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  price: z$2.union([z$2.lazy(() => FloatFilterSchema), z$2.number()]).optional(),
  dietaryRestrictionId: z$2.union([z$2.lazy(() => IntNullableFilterSchema), z$2.number()]).optional().nullable()
}).strict();
var RecipeCreateWithoutTagsInputSchema = z$2.object({
  name: z$2.string(),
  imageUrl: z$2.union([z$2.lazy(() => RecipeCreateimageUrlInputSchema), z$2.string().array()]).optional(),
  description: z$2.string().optional().nullable(),
  servings: z$2.number().int(),
  cookTime: z$2.number().int(),
  prepTime: z$2.number().int(),
  frequency: z$2.number().int().optional().nullable(),
  foodCost: z$2.number().optional().nullable(),
  isDeleted: z$2.boolean().optional(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  restaurant: z$2.lazy(() => RestaurantCreateNestedOneWithoutRecipesInputSchema),
  cookBook: z$2.lazy(() => CookBookCreateNestedOneWithoutRecipesInputSchema),
  ingredients: z$2.lazy(() => RecipeIngredientCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z$2.lazy(() => MenuItemCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: z$2.lazy(() => FoodCostHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: z$2.lazy(() => PrepHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z$2.lazy(() => PrepBoardCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  MenuItemRecipe: z$2.lazy(() => MenuItemRecipeCreateNestedManyWithoutRecipeInputSchema).optional(),
  ProductionPlanItem: z$2.lazy(() => ProductionPlanItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalCreateNestedManyWithoutRecipeInputSchema).optional(),
  versions: z$2.lazy(() => RecipeVersionCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipment: z$2.lazy(() => RecipeEquipmentCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionCreateNestedManyWithoutRecipesInputSchema).optional()
}).strict();
var RecipeUncheckedCreateWithoutTagsInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  imageUrl: z$2.union([z$2.lazy(() => RecipeCreateimageUrlInputSchema), z$2.string().array()]).optional(),
  description: z$2.string().optional().nullable(),
  servings: z$2.number().int(),
  cookTime: z$2.number().int(),
  prepTime: z$2.number().int(),
  frequency: z$2.number().int().optional().nullable(),
  restaurantId: z$2.number().int(),
  cookBookId: z$2.number().int(),
  foodCost: z$2.number().optional().nullable(),
  isDeleted: z$2.boolean().optional(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  ingredients: z$2.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z$2.lazy(() => MenuItemUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: z$2.lazy(() => FoodCostHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: z$2.lazy(() => PrepHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z$2.lazy(() => PrepBoardUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  MenuItemRecipe: z$2.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  ProductionPlanItem: z$2.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  versions: z$2.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipment: z$2.lazy(() => RecipeEquipmentUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutRecipesInputSchema).optional()
}).strict();
var RecipeCreateOrConnectWithoutTagsInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => RecipeCreateWithoutTagsInputSchema), z$2.lazy(() => RecipeUncheckedCreateWithoutTagsInputSchema)])
}).strict();
var RecipeUpsertWithWhereUniqueWithoutTagsInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => RecipeUpdateWithoutTagsInputSchema), z$2.lazy(() => RecipeUncheckedUpdateWithoutTagsInputSchema)]),
  create: z$2.union([z$2.lazy(() => RecipeCreateWithoutTagsInputSchema), z$2.lazy(() => RecipeUncheckedCreateWithoutTagsInputSchema)])
}).strict();
var RecipeUpdateWithWhereUniqueWithoutTagsInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => RecipeUpdateWithoutTagsInputSchema), z$2.lazy(() => RecipeUncheckedUpdateWithoutTagsInputSchema)])
}).strict();
var RecipeUpdateManyWithWhereWithoutTagsInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => RecipeUpdateManyMutationInputSchema), z$2.lazy(() => RecipeUncheckedUpdateManyWithoutTagsInputSchema)])
}).strict();
var RestaurantCreateWithoutLeftoverItemInputSchema = z$2.object({
  name: z$2.string(),
  imageUrl: z$2.string().optional().nullable(),
  address: z$2.string(),
  city: z$2.string(),
  zipCode: z$2.string(),
  state: z$2.string(),
  owner: z$2.string(),
  foodCost: z$2.number().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  isDeleted: z$2.boolean().optional(),
  deleted: z$2.coerce.date().optional().nullable(),
  organization: z$2.lazy(() => OrganizationCreateNestedOneWithoutRestaurantsInputSchema).optional(),
  users: z$2.lazy(() => UserCreateNestedManyWithoutRestaurantInputSchema).optional(),
  cookbooks: z$2.lazy(() => CookBookCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: z$2.lazy(() => InventoryCreateNestedOneWithoutRestaurantInputSchema).optional(),
  orders: z$2.lazy(() => OrderCreateNestedManyWithoutRestaurantInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: z$2.lazy(() => MenuCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipment: z$2.lazy(() => EquipmentCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklist: z$2.lazy(() => QualityChecklistCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qustomerFeedback: z$2.lazy(() => CustomerFeedbackCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();
var RestaurantUncheckedCreateWithoutLeftoverItemInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  imageUrl: z$2.string().optional().nullable(),
  address: z$2.string(),
  city: z$2.string(),
  zipCode: z$2.string(),
  state: z$2.string(),
  owner: z$2.string(),
  organizationId: z$2.number().int().optional().nullable(),
  foodCost: z$2.number().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  isDeleted: z$2.boolean().optional(),
  deleted: z$2.coerce.date().optional().nullable(),
  users: z$2.lazy(() => UserUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  cookbooks: z$2.lazy(() => CookBookUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: z$2.lazy(() => InventoryUncheckedCreateNestedOneWithoutRestaurantInputSchema).optional(),
  orders: z$2.lazy(() => OrderUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: z$2.lazy(() => MenuUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipment: z$2.lazy(() => EquipmentUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklist: z$2.lazy(() => QualityChecklistUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qustomerFeedback: z$2.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();
var RestaurantCreateOrConnectWithoutLeftoverItemInputSchema = z$2.object({
  where: z$2.lazy(() => RestaurantWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => RestaurantCreateWithoutLeftoverItemInputSchema), z$2.lazy(() => RestaurantUncheckedCreateWithoutLeftoverItemInputSchema)])
}).strict();
var MenuItemCreateWithoutLeftoverItemInputSchema = z$2.object({
  name: z$2.string(),
  description: z$2.string().optional().nullable(),
  price: z$2.number(),
  foodCost: z$2.number(),
  recipeIds: z$2.union([z$2.lazy(() => MenuItemCreaterecipeIdsInputSchema), z$2.number().int().array()]).optional(),
  recipeServingsAmount: z$2.union([z$2.lazy(() => MenuItemCreaterecipeServingsAmountInputSchema), z$2.number().array()]).optional(),
  recipeServingsCost: z$2.union([z$2.lazy(() => MenuItemCreaterecipeServingsCostInputSchema), z$2.number().array()]).optional(),
  allergens: z$2.union([z$2.lazy(() => MenuItemCreateallergensInputSchema), z$2.string().array()]).optional(),
  nutritionalInfoId: z$2.number().int().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  nutritionalInfo: z$2.lazy(() => NutritionalInfoCreateNestedOneWithoutMenuItemInputSchema).optional(),
  menu: z$2.lazy(() => MenuCreateNestedOneWithoutMenuItemsInputSchema),
  recipes: z$2.lazy(() => RecipeCreateNestedManyWithoutMenuItemsInputSchema).optional(),
  menuItemRecipe: z$2.lazy(() => MenuItemRecipeCreateNestedManyWithoutMenuItemInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsCreateNestedManyWithoutMenuItemInputSchema).optional(),
  nutritionalRecommendation: z$2.lazy(() => NutritionalRecommendationCreateNestedManyWithoutMenuItemInputSchema).optional(),
  category: z$2.lazy(() => MenuCategoryCreateNestedOneWithoutMenuItemsInputSchema).optional(),
  feedback: z$2.lazy(() => CustomerFeedbackCreateNestedManyWithoutMenuItemInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionCreateNestedManyWithoutMenuItemsInputSchema).optional()
}).strict();
var MenuItemUncheckedCreateWithoutLeftoverItemInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  description: z$2.string().optional().nullable(),
  price: z$2.number(),
  foodCost: z$2.number(),
  recipeIds: z$2.union([z$2.lazy(() => MenuItemCreaterecipeIdsInputSchema), z$2.number().int().array()]).optional(),
  recipeServingsAmount: z$2.union([z$2.lazy(() => MenuItemCreaterecipeServingsAmountInputSchema), z$2.number().array()]).optional(),
  recipeServingsCost: z$2.union([z$2.lazy(() => MenuItemCreaterecipeServingsCostInputSchema), z$2.number().array()]).optional(),
  allergens: z$2.union([z$2.lazy(() => MenuItemCreateallergensInputSchema), z$2.string().array()]).optional(),
  nutritionalInfoId: z$2.number().int().optional().nullable(),
  menuId: z$2.number().int(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  categoryId: z$2.number().int().optional().nullable(),
  nutritionalInfo: z$2.lazy(() => NutritionalInfoUncheckedCreateNestedOneWithoutMenuItemInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeUncheckedCreateNestedManyWithoutMenuItemsInputSchema).optional(),
  menuItemRecipe: z$2.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  nutritionalRecommendation: z$2.lazy(() => NutritionalRecommendationUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  feedback: z$2.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutMenuItemsInputSchema).optional()
}).strict();
var MenuItemCreateOrConnectWithoutLeftoverItemInputSchema = z$2.object({
  where: z$2.lazy(() => MenuItemWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => MenuItemCreateWithoutLeftoverItemInputSchema), z$2.lazy(() => MenuItemUncheckedCreateWithoutLeftoverItemInputSchema)])
}).strict();
var UserCreateWithoutLeftoverItemInputSchema = z$2.object({
  email: z$2.string(),
  sub: z$2.number().int().optional().nullable(),
  passwordHash: z$2.string(),
  firstName: z$2.string(),
  lastName: z$2.string(),
  profileImage: z$2.string().optional().nullable(),
  verified: z$2.boolean().optional(),
  role: z$2.lazy(() => UserRoleSchema),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  organization: z$2.lazy(() => OrganizationCreateNestedOneWithoutUsersInputSchema).optional(),
  restaurant: z$2.lazy(() => RestaurantCreateNestedOneWithoutUsersInputSchema).optional(),
  shifts: z$2.lazy(() => ShiftCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: z$2.lazy(() => InventoryItemCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: z$2.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: z$2.lazy(() => PasswordResetCreateNestedManyWithoutUserInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItem: z$2.lazy(() => ProductionPlanItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: z$2.lazy(() => AvailabilityCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraint: z$2.lazy(() => SchedulingConstraintCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedback: z$2.lazy(() => CustomerFeedbackCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: z$2.lazy(() => RecipeVersionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: z$2.lazy(() => RecipeVersionCreateNestedManyWithoutApprovedByInputSchema).optional()
}).strict();
var UserUncheckedCreateWithoutLeftoverItemInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  email: z$2.string(),
  sub: z$2.number().int().optional().nullable(),
  passwordHash: z$2.string(),
  firstName: z$2.string(),
  lastName: z$2.string(),
  profileImage: z$2.string().optional().nullable(),
  verified: z$2.boolean().optional(),
  role: z$2.lazy(() => UserRoleSchema),
  organizationId: z$2.number().int().optional().nullable(),
  restaurantId: z$2.number().int().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  shifts: z$2.lazy(() => ShiftUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: z$2.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: z$2.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: z$2.lazy(() => PasswordResetUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItem: z$2.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: z$2.lazy(() => AvailabilityUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraint: z$2.lazy(() => SchedulingConstraintUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteUncheckedCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedback: z$2.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: z$2.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: z$2.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutApprovedByInputSchema).optional()
}).strict();
var UserCreateOrConnectWithoutLeftoverItemInputSchema = z$2.object({
  where: z$2.lazy(() => UserWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => UserCreateWithoutLeftoverItemInputSchema), z$2.lazy(() => UserUncheckedCreateWithoutLeftoverItemInputSchema)])
}).strict();
var RestaurantUpsertWithoutLeftoverItemInputSchema = z$2.object({
  update: z$2.union([z$2.lazy(() => RestaurantUpdateWithoutLeftoverItemInputSchema), z$2.lazy(() => RestaurantUncheckedUpdateWithoutLeftoverItemInputSchema)]),
  create: z$2.union([z$2.lazy(() => RestaurantCreateWithoutLeftoverItemInputSchema), z$2.lazy(() => RestaurantUncheckedCreateWithoutLeftoverItemInputSchema)]),
  where: z$2.lazy(() => RestaurantWhereInputSchema).optional()
}).strict();
var RestaurantUpdateToOneWithWhereWithoutLeftoverItemInputSchema = z$2.object({
  where: z$2.lazy(() => RestaurantWhereInputSchema).optional(),
  data: z$2.union([z$2.lazy(() => RestaurantUpdateWithoutLeftoverItemInputSchema), z$2.lazy(() => RestaurantUncheckedUpdateWithoutLeftoverItemInputSchema)])
}).strict();
var RestaurantUpdateWithoutLeftoverItemInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  address: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  city: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  zipCode: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  state: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  owner: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  isDeleted: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  deleted: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  organization: z$2.lazy(() => OrganizationUpdateOneWithoutRestaurantsNestedInputSchema).optional(),
  users: z$2.lazy(() => UserUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  cookbooks: z$2.lazy(() => CookBookUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: z$2.lazy(() => InventoryUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  orders: z$2.lazy(() => OrderUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: z$2.lazy(() => MenuUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipment: z$2.lazy(() => EquipmentUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklist: z$2.lazy(() => QualityChecklistUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qustomerFeedback: z$2.lazy(() => CustomerFeedbackUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();
var RestaurantUncheckedUpdateWithoutLeftoverItemInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  address: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  city: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  zipCode: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  state: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  owner: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  organizationId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  isDeleted: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  deleted: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  users: z$2.lazy(() => UserUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  cookbooks: z$2.lazy(() => CookBookUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: z$2.lazy(() => InventoryUncheckedUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  orders: z$2.lazy(() => OrderUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: z$2.lazy(() => MenuUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipment: z$2.lazy(() => EquipmentUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklist: z$2.lazy(() => QualityChecklistUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qustomerFeedback: z$2.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();
var MenuItemUpsertWithoutLeftoverItemInputSchema = z$2.object({
  update: z$2.union([z$2.lazy(() => MenuItemUpdateWithoutLeftoverItemInputSchema), z$2.lazy(() => MenuItemUncheckedUpdateWithoutLeftoverItemInputSchema)]),
  create: z$2.union([z$2.lazy(() => MenuItemCreateWithoutLeftoverItemInputSchema), z$2.lazy(() => MenuItemUncheckedCreateWithoutLeftoverItemInputSchema)]),
  where: z$2.lazy(() => MenuItemWhereInputSchema).optional()
}).strict();
var MenuItemUpdateToOneWithWhereWithoutLeftoverItemInputSchema = z$2.object({
  where: z$2.lazy(() => MenuItemWhereInputSchema).optional(),
  data: z$2.union([z$2.lazy(() => MenuItemUpdateWithoutLeftoverItemInputSchema), z$2.lazy(() => MenuItemUncheckedUpdateWithoutLeftoverItemInputSchema)])
}).strict();
var MenuItemUpdateWithoutLeftoverItemInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipeIds: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeIdsInputSchema), z$2.number().int().array()]).optional(),
  recipeServingsAmount: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema), z$2.number().array()]).optional(),
  recipeServingsCost: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema), z$2.number().array()]).optional(),
  allergens: z$2.union([z$2.lazy(() => MenuItemUpdateallergensInputSchema), z$2.string().array()]).optional(),
  nutritionalInfoId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  nutritionalInfo: z$2.lazy(() => NutritionalInfoUpdateOneWithoutMenuItemNestedInputSchema).optional(),
  menu: z$2.lazy(() => MenuUpdateOneRequiredWithoutMenuItemsNestedInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeUpdateManyWithoutMenuItemsNestedInputSchema).optional(),
  menuItemRecipe: z$2.lazy(() => MenuItemRecipeUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  nutritionalRecommendation: z$2.lazy(() => NutritionalRecommendationUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  category: z$2.lazy(() => MenuCategoryUpdateOneWithoutMenuItemsNestedInputSchema).optional(),
  feedback: z$2.lazy(() => CustomerFeedbackUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionUpdateManyWithoutMenuItemsNestedInputSchema).optional()
}).strict();
var MenuItemUncheckedUpdateWithoutLeftoverItemInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipeIds: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeIdsInputSchema), z$2.number().int().array()]).optional(),
  recipeServingsAmount: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema), z$2.number().array()]).optional(),
  recipeServingsCost: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema), z$2.number().array()]).optional(),
  allergens: z$2.union([z$2.lazy(() => MenuItemUpdateallergensInputSchema), z$2.string().array()]).optional(),
  nutritionalInfoId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  menuId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  categoryId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  nutritionalInfo: z$2.lazy(() => NutritionalInfoUncheckedUpdateOneWithoutMenuItemNestedInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeUncheckedUpdateManyWithoutMenuItemsNestedInputSchema).optional(),
  menuItemRecipe: z$2.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  nutritionalRecommendation: z$2.lazy(() => NutritionalRecommendationUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  feedback: z$2.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutMenuItemsNestedInputSchema).optional()
}).strict();
var UserUpsertWithoutLeftoverItemInputSchema = z$2.object({
  update: z$2.union([z$2.lazy(() => UserUpdateWithoutLeftoverItemInputSchema), z$2.lazy(() => UserUncheckedUpdateWithoutLeftoverItemInputSchema)]),
  create: z$2.union([z$2.lazy(() => UserCreateWithoutLeftoverItemInputSchema), z$2.lazy(() => UserUncheckedCreateWithoutLeftoverItemInputSchema)]),
  where: z$2.lazy(() => UserWhereInputSchema).optional()
}).strict();
var UserUpdateToOneWithWhereWithoutLeftoverItemInputSchema = z$2.object({
  where: z$2.lazy(() => UserWhereInputSchema).optional(),
  data: z$2.union([z$2.lazy(() => UserUpdateWithoutLeftoverItemInputSchema), z$2.lazy(() => UserUncheckedUpdateWithoutLeftoverItemInputSchema)])
}).strict();
var UserUpdateWithoutLeftoverItemInputSchema = z$2.object({
  email: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: z$2.union([z$2.lazy(() => UserRoleSchema), z$2.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  organization: z$2.lazy(() => OrganizationUpdateOneWithoutUsersNestedInputSchema).optional(),
  restaurant: z$2.lazy(() => RestaurantUpdateOneWithoutUsersNestedInputSchema).optional(),
  shifts: z$2.lazy(() => ShiftUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: z$2.lazy(() => InventoryItemUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: z$2.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: z$2.lazy(() => PasswordResetUpdateManyWithoutUserNestedInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItem: z$2.lazy(() => ProductionPlanItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: z$2.lazy(() => AvailabilityUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraint: z$2.lazy(() => SchedulingConstraintUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedback: z$2.lazy(() => CustomerFeedbackUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: z$2.lazy(() => RecipeVersionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: z$2.lazy(() => RecipeVersionUpdateManyWithoutApprovedByNestedInputSchema).optional()
}).strict();
var UserUncheckedUpdateWithoutLeftoverItemInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  email: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: z$2.union([z$2.lazy(() => UserRoleSchema), z$2.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  organizationId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  shifts: z$2.lazy(() => ShiftUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: z$2.lazy(() => InventoryItemUncheckedUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: z$2.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: z$2.lazy(() => PasswordResetUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItem: z$2.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: z$2.lazy(() => AvailabilityUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraint: z$2.lazy(() => SchedulingConstraintUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteUncheckedUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedback: z$2.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: z$2.lazy(() => RecipeVersionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: z$2.lazy(() => RecipeVersionUncheckedUpdateManyWithoutApprovedByNestedInputSchema).optional()
}).strict();
var RestaurantCreateWithoutWasteRecordInputSchema = z$2.object({
  name: z$2.string(),
  imageUrl: z$2.string().optional().nullable(),
  address: z$2.string(),
  city: z$2.string(),
  zipCode: z$2.string(),
  state: z$2.string(),
  owner: z$2.string(),
  foodCost: z$2.number().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  isDeleted: z$2.boolean().optional(),
  deleted: z$2.coerce.date().optional().nullable(),
  organization: z$2.lazy(() => OrganizationCreateNestedOneWithoutRestaurantsInputSchema).optional(),
  users: z$2.lazy(() => UserCreateNestedManyWithoutRestaurantInputSchema).optional(),
  cookbooks: z$2.lazy(() => CookBookCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: z$2.lazy(() => InventoryCreateNestedOneWithoutRestaurantInputSchema).optional(),
  orders: z$2.lazy(() => OrderCreateNestedManyWithoutRestaurantInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: z$2.lazy(() => MenuCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipment: z$2.lazy(() => EquipmentCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklist: z$2.lazy(() => QualityChecklistCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qustomerFeedback: z$2.lazy(() => CustomerFeedbackCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();
var RestaurantUncheckedCreateWithoutWasteRecordInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  imageUrl: z$2.string().optional().nullable(),
  address: z$2.string(),
  city: z$2.string(),
  zipCode: z$2.string(),
  state: z$2.string(),
  owner: z$2.string(),
  organizationId: z$2.number().int().optional().nullable(),
  foodCost: z$2.number().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  isDeleted: z$2.boolean().optional(),
  deleted: z$2.coerce.date().optional().nullable(),
  users: z$2.lazy(() => UserUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  cookbooks: z$2.lazy(() => CookBookUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: z$2.lazy(() => InventoryUncheckedCreateNestedOneWithoutRestaurantInputSchema).optional(),
  orders: z$2.lazy(() => OrderUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: z$2.lazy(() => MenuUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipment: z$2.lazy(() => EquipmentUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklist: z$2.lazy(() => QualityChecklistUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qustomerFeedback: z$2.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();
var RestaurantCreateOrConnectWithoutWasteRecordInputSchema = z$2.object({
  where: z$2.lazy(() => RestaurantWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => RestaurantCreateWithoutWasteRecordInputSchema), z$2.lazy(() => RestaurantUncheckedCreateWithoutWasteRecordInputSchema)])
}).strict();
var IngredientCreateWithoutWasteRecordInputSchema = z$2.object({
  name: z$2.string(),
  category: z$2.string(),
  price: z$2.number(),
  recipeIngredients: z$2.lazy(() => RecipeIngredientCreateNestedManyWithoutIngredientInputSchema).optional(),
  inventoryItems: z$2.lazy(() => InventoryItemCreateNestedManyWithoutIngredientInputSchema).optional(),
  orderItems: z$2.lazy(() => OrderItemCreateNestedManyWithoutIngredientInputSchema).optional(),
  vendors: z$2.lazy(() => VendorCreateNestedManyWithoutIngredientsInputSchema).optional(),
  IngredientAllergen: z$2.lazy(() => IngredientAllergenCreateNestedManyWithoutIngredientInputSchema).optional(),
  SupplierPriceHistory: z$2.lazy(() => SupplierPriceHistoryCreateNestedManyWithoutIngredientInputSchema).optional(),
  DietaryRestriction: z$2.lazy(() => DietaryRestrictionCreateNestedOneWithoutIngredientsInputSchema).optional()
}).strict();
var IngredientUncheckedCreateWithoutWasteRecordInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  category: z$2.string(),
  price: z$2.number(),
  dietaryRestrictionId: z$2.number().int().optional().nullable(),
  recipeIngredients: z$2.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  inventoryItems: z$2.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  orderItems: z$2.lazy(() => OrderItemUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  vendors: z$2.lazy(() => VendorUncheckedCreateNestedManyWithoutIngredientsInputSchema).optional(),
  IngredientAllergen: z$2.lazy(() => IngredientAllergenUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  SupplierPriceHistory: z$2.lazy(() => SupplierPriceHistoryUncheckedCreateNestedManyWithoutIngredientInputSchema).optional()
}).strict();
var IngredientCreateOrConnectWithoutWasteRecordInputSchema = z$2.object({
  where: z$2.lazy(() => IngredientWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => IngredientCreateWithoutWasteRecordInputSchema), z$2.lazy(() => IngredientUncheckedCreateWithoutWasteRecordInputSchema)])
}).strict();
var UserCreateWithoutWasteRecordInputSchema = z$2.object({
  email: z$2.string(),
  sub: z$2.number().int().optional().nullable(),
  passwordHash: z$2.string(),
  firstName: z$2.string(),
  lastName: z$2.string(),
  profileImage: z$2.string().optional().nullable(),
  verified: z$2.boolean().optional(),
  role: z$2.lazy(() => UserRoleSchema),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  organization: z$2.lazy(() => OrganizationCreateNestedOneWithoutUsersInputSchema).optional(),
  restaurant: z$2.lazy(() => RestaurantCreateNestedOneWithoutUsersInputSchema).optional(),
  shifts: z$2.lazy(() => ShiftCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: z$2.lazy(() => InventoryItemCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: z$2.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: z$2.lazy(() => PasswordResetCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItem: z$2.lazy(() => ProductionPlanItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: z$2.lazy(() => AvailabilityCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraint: z$2.lazy(() => SchedulingConstraintCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedback: z$2.lazy(() => CustomerFeedbackCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: z$2.lazy(() => RecipeVersionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: z$2.lazy(() => RecipeVersionCreateNestedManyWithoutApprovedByInputSchema).optional()
}).strict();
var UserUncheckedCreateWithoutWasteRecordInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  email: z$2.string(),
  sub: z$2.number().int().optional().nullable(),
  passwordHash: z$2.string(),
  firstName: z$2.string(),
  lastName: z$2.string(),
  profileImage: z$2.string().optional().nullable(),
  verified: z$2.boolean().optional(),
  role: z$2.lazy(() => UserRoleSchema),
  organizationId: z$2.number().int().optional().nullable(),
  restaurantId: z$2.number().int().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  shifts: z$2.lazy(() => ShiftUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: z$2.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: z$2.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: z$2.lazy(() => PasswordResetUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItem: z$2.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: z$2.lazy(() => AvailabilityUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraint: z$2.lazy(() => SchedulingConstraintUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteUncheckedCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedback: z$2.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: z$2.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: z$2.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutApprovedByInputSchema).optional()
}).strict();
var UserCreateOrConnectWithoutWasteRecordInputSchema = z$2.object({
  where: z$2.lazy(() => UserWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => UserCreateWithoutWasteRecordInputSchema), z$2.lazy(() => UserUncheckedCreateWithoutWasteRecordInputSchema)])
}).strict();
var RestaurantUpsertWithoutWasteRecordInputSchema = z$2.object({
  update: z$2.union([z$2.lazy(() => RestaurantUpdateWithoutWasteRecordInputSchema), z$2.lazy(() => RestaurantUncheckedUpdateWithoutWasteRecordInputSchema)]),
  create: z$2.union([z$2.lazy(() => RestaurantCreateWithoutWasteRecordInputSchema), z$2.lazy(() => RestaurantUncheckedCreateWithoutWasteRecordInputSchema)]),
  where: z$2.lazy(() => RestaurantWhereInputSchema).optional()
}).strict();
var RestaurantUpdateToOneWithWhereWithoutWasteRecordInputSchema = z$2.object({
  where: z$2.lazy(() => RestaurantWhereInputSchema).optional(),
  data: z$2.union([z$2.lazy(() => RestaurantUpdateWithoutWasteRecordInputSchema), z$2.lazy(() => RestaurantUncheckedUpdateWithoutWasteRecordInputSchema)])
}).strict();
var RestaurantUpdateWithoutWasteRecordInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  address: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  city: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  zipCode: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  state: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  owner: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  isDeleted: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  deleted: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  organization: z$2.lazy(() => OrganizationUpdateOneWithoutRestaurantsNestedInputSchema).optional(),
  users: z$2.lazy(() => UserUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  cookbooks: z$2.lazy(() => CookBookUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: z$2.lazy(() => InventoryUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  orders: z$2.lazy(() => OrderUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: z$2.lazy(() => MenuUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipment: z$2.lazy(() => EquipmentUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklist: z$2.lazy(() => QualityChecklistUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qustomerFeedback: z$2.lazy(() => CustomerFeedbackUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();
var RestaurantUncheckedUpdateWithoutWasteRecordInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  address: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  city: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  zipCode: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  state: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  owner: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  organizationId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  isDeleted: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  deleted: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  users: z$2.lazy(() => UserUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  cookbooks: z$2.lazy(() => CookBookUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: z$2.lazy(() => InventoryUncheckedUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  orders: z$2.lazy(() => OrderUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: z$2.lazy(() => MenuUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipment: z$2.lazy(() => EquipmentUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklist: z$2.lazy(() => QualityChecklistUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qustomerFeedback: z$2.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();
var IngredientUpsertWithoutWasteRecordInputSchema = z$2.object({
  update: z$2.union([z$2.lazy(() => IngredientUpdateWithoutWasteRecordInputSchema), z$2.lazy(() => IngredientUncheckedUpdateWithoutWasteRecordInputSchema)]),
  create: z$2.union([z$2.lazy(() => IngredientCreateWithoutWasteRecordInputSchema), z$2.lazy(() => IngredientUncheckedCreateWithoutWasteRecordInputSchema)]),
  where: z$2.lazy(() => IngredientWhereInputSchema).optional()
}).strict();
var IngredientUpdateToOneWithWhereWithoutWasteRecordInputSchema = z$2.object({
  where: z$2.lazy(() => IngredientWhereInputSchema).optional(),
  data: z$2.union([z$2.lazy(() => IngredientUpdateWithoutWasteRecordInputSchema), z$2.lazy(() => IngredientUncheckedUpdateWithoutWasteRecordInputSchema)])
}).strict();
var IngredientUpdateWithoutWasteRecordInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  category: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipeIngredients: z$2.lazy(() => RecipeIngredientUpdateManyWithoutIngredientNestedInputSchema).optional(),
  inventoryItems: z$2.lazy(() => InventoryItemUpdateManyWithoutIngredientNestedInputSchema).optional(),
  orderItems: z$2.lazy(() => OrderItemUpdateManyWithoutIngredientNestedInputSchema).optional(),
  vendors: z$2.lazy(() => VendorUpdateManyWithoutIngredientsNestedInputSchema).optional(),
  IngredientAllergen: z$2.lazy(() => IngredientAllergenUpdateManyWithoutIngredientNestedInputSchema).optional(),
  SupplierPriceHistory: z$2.lazy(() => SupplierPriceHistoryUpdateManyWithoutIngredientNestedInputSchema).optional(),
  DietaryRestriction: z$2.lazy(() => DietaryRestrictionUpdateOneWithoutIngredientsNestedInputSchema).optional()
}).strict();
var IngredientUncheckedUpdateWithoutWasteRecordInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  category: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  dietaryRestrictionId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  recipeIngredients: z$2.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  inventoryItems: z$2.lazy(() => InventoryItemUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  orderItems: z$2.lazy(() => OrderItemUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  vendors: z$2.lazy(() => VendorUncheckedUpdateManyWithoutIngredientsNestedInputSchema).optional(),
  IngredientAllergen: z$2.lazy(() => IngredientAllergenUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  SupplierPriceHistory: z$2.lazy(() => SupplierPriceHistoryUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional()
}).strict();
var UserUpsertWithoutWasteRecordInputSchema = z$2.object({
  update: z$2.union([z$2.lazy(() => UserUpdateWithoutWasteRecordInputSchema), z$2.lazy(() => UserUncheckedUpdateWithoutWasteRecordInputSchema)]),
  create: z$2.union([z$2.lazy(() => UserCreateWithoutWasteRecordInputSchema), z$2.lazy(() => UserUncheckedCreateWithoutWasteRecordInputSchema)]),
  where: z$2.lazy(() => UserWhereInputSchema).optional()
}).strict();
var UserUpdateToOneWithWhereWithoutWasteRecordInputSchema = z$2.object({
  where: z$2.lazy(() => UserWhereInputSchema).optional(),
  data: z$2.union([z$2.lazy(() => UserUpdateWithoutWasteRecordInputSchema), z$2.lazy(() => UserUncheckedUpdateWithoutWasteRecordInputSchema)])
}).strict();
var UserUpdateWithoutWasteRecordInputSchema = z$2.object({
  email: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: z$2.union([z$2.lazy(() => UserRoleSchema), z$2.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  organization: z$2.lazy(() => OrganizationUpdateOneWithoutUsersNestedInputSchema).optional(),
  restaurant: z$2.lazy(() => RestaurantUpdateOneWithoutUsersNestedInputSchema).optional(),
  shifts: z$2.lazy(() => ShiftUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: z$2.lazy(() => InventoryItemUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: z$2.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: z$2.lazy(() => PasswordResetUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItem: z$2.lazy(() => ProductionPlanItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: z$2.lazy(() => AvailabilityUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraint: z$2.lazy(() => SchedulingConstraintUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedback: z$2.lazy(() => CustomerFeedbackUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: z$2.lazy(() => RecipeVersionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: z$2.lazy(() => RecipeVersionUpdateManyWithoutApprovedByNestedInputSchema).optional()
}).strict();
var UserUncheckedUpdateWithoutWasteRecordInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  email: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: z$2.union([z$2.lazy(() => UserRoleSchema), z$2.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  organizationId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  shifts: z$2.lazy(() => ShiftUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: z$2.lazy(() => InventoryItemUncheckedUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: z$2.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: z$2.lazy(() => PasswordResetUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItem: z$2.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: z$2.lazy(() => AvailabilityUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraint: z$2.lazy(() => SchedulingConstraintUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteUncheckedUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedback: z$2.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: z$2.lazy(() => RecipeVersionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: z$2.lazy(() => RecipeVersionUncheckedUpdateManyWithoutApprovedByNestedInputSchema).optional()
}).strict();
var RestaurantCreateWithoutProductionPlanInputSchema = z$2.object({
  name: z$2.string(),
  imageUrl: z$2.string().optional().nullable(),
  address: z$2.string(),
  city: z$2.string(),
  zipCode: z$2.string(),
  state: z$2.string(),
  owner: z$2.string(),
  foodCost: z$2.number().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  isDeleted: z$2.boolean().optional(),
  deleted: z$2.coerce.date().optional().nullable(),
  organization: z$2.lazy(() => OrganizationCreateNestedOneWithoutRestaurantsInputSchema).optional(),
  users: z$2.lazy(() => UserCreateNestedManyWithoutRestaurantInputSchema).optional(),
  cookbooks: z$2.lazy(() => CookBookCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: z$2.lazy(() => InventoryCreateNestedOneWithoutRestaurantInputSchema).optional(),
  orders: z$2.lazy(() => OrderCreateNestedManyWithoutRestaurantInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: z$2.lazy(() => MenuCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipment: z$2.lazy(() => EquipmentCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklist: z$2.lazy(() => QualityChecklistCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qustomerFeedback: z$2.lazy(() => CustomerFeedbackCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();
var RestaurantUncheckedCreateWithoutProductionPlanInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  imageUrl: z$2.string().optional().nullable(),
  address: z$2.string(),
  city: z$2.string(),
  zipCode: z$2.string(),
  state: z$2.string(),
  owner: z$2.string(),
  organizationId: z$2.number().int().optional().nullable(),
  foodCost: z$2.number().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  isDeleted: z$2.boolean().optional(),
  deleted: z$2.coerce.date().optional().nullable(),
  users: z$2.lazy(() => UserUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  cookbooks: z$2.lazy(() => CookBookUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: z$2.lazy(() => InventoryUncheckedCreateNestedOneWithoutRestaurantInputSchema).optional(),
  orders: z$2.lazy(() => OrderUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: z$2.lazy(() => MenuUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipment: z$2.lazy(() => EquipmentUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklist: z$2.lazy(() => QualityChecklistUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qustomerFeedback: z$2.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();
var RestaurantCreateOrConnectWithoutProductionPlanInputSchema = z$2.object({
  where: z$2.lazy(() => RestaurantWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => RestaurantCreateWithoutProductionPlanInputSchema), z$2.lazy(() => RestaurantUncheckedCreateWithoutProductionPlanInputSchema)])
}).strict();
var UserCreateWithoutProductionPlanInputSchema = z$2.object({
  email: z$2.string(),
  sub: z$2.number().int().optional().nullable(),
  passwordHash: z$2.string(),
  firstName: z$2.string(),
  lastName: z$2.string(),
  profileImage: z$2.string().optional().nullable(),
  verified: z$2.boolean().optional(),
  role: z$2.lazy(() => UserRoleSchema),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  organization: z$2.lazy(() => OrganizationCreateNestedOneWithoutUsersInputSchema).optional(),
  restaurant: z$2.lazy(() => RestaurantCreateNestedOneWithoutUsersInputSchema).optional(),
  shifts: z$2.lazy(() => ShiftCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: z$2.lazy(() => InventoryItemCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: z$2.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: z$2.lazy(() => PasswordResetCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlanItem: z$2.lazy(() => ProductionPlanItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: z$2.lazy(() => AvailabilityCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraint: z$2.lazy(() => SchedulingConstraintCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedback: z$2.lazy(() => CustomerFeedbackCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: z$2.lazy(() => RecipeVersionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: z$2.lazy(() => RecipeVersionCreateNestedManyWithoutApprovedByInputSchema).optional()
}).strict();
var UserUncheckedCreateWithoutProductionPlanInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  email: z$2.string(),
  sub: z$2.number().int().optional().nullable(),
  passwordHash: z$2.string(),
  firstName: z$2.string(),
  lastName: z$2.string(),
  profileImage: z$2.string().optional().nullable(),
  verified: z$2.boolean().optional(),
  role: z$2.lazy(() => UserRoleSchema),
  organizationId: z$2.number().int().optional().nullable(),
  restaurantId: z$2.number().int().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  shifts: z$2.lazy(() => ShiftUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: z$2.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: z$2.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: z$2.lazy(() => PasswordResetUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlanItem: z$2.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: z$2.lazy(() => AvailabilityUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraint: z$2.lazy(() => SchedulingConstraintUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteUncheckedCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedback: z$2.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: z$2.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: z$2.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutApprovedByInputSchema).optional()
}).strict();
var UserCreateOrConnectWithoutProductionPlanInputSchema = z$2.object({
  where: z$2.lazy(() => UserWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => UserCreateWithoutProductionPlanInputSchema), z$2.lazy(() => UserUncheckedCreateWithoutProductionPlanInputSchema)])
}).strict();
var ProductionPlanItemCreateWithoutProductionPlanInputSchema = z$2.object({
  quantity: z$2.number().int(),
  unit: z$2.string(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  recipe: z$2.lazy(() => RecipeCreateNestedOneWithoutProductionPlanItemInputSchema),
  assignedTo: z$2.lazy(() => UserCreateNestedOneWithoutProductionPlanItemInputSchema).optional()
}).strict();
var ProductionPlanItemUncheckedCreateWithoutProductionPlanInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  recipeId: z$2.number().int(),
  quantity: z$2.number().int(),
  unit: z$2.string(),
  assignedToId: z$2.number().int().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var ProductionPlanItemCreateOrConnectWithoutProductionPlanInputSchema = z$2.object({
  where: z$2.lazy(() => ProductionPlanItemWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => ProductionPlanItemCreateWithoutProductionPlanInputSchema), z$2.lazy(() => ProductionPlanItemUncheckedCreateWithoutProductionPlanInputSchema)])
}).strict();
var ProductionPlanItemCreateManyProductionPlanInputEnvelopeSchema = z$2.object({
  data: z$2.union([z$2.lazy(() => ProductionPlanItemCreateManyProductionPlanInputSchema), z$2.lazy(() => ProductionPlanItemCreateManyProductionPlanInputSchema).array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var RestaurantUpsertWithoutProductionPlanInputSchema = z$2.object({
  update: z$2.union([z$2.lazy(() => RestaurantUpdateWithoutProductionPlanInputSchema), z$2.lazy(() => RestaurantUncheckedUpdateWithoutProductionPlanInputSchema)]),
  create: z$2.union([z$2.lazy(() => RestaurantCreateWithoutProductionPlanInputSchema), z$2.lazy(() => RestaurantUncheckedCreateWithoutProductionPlanInputSchema)]),
  where: z$2.lazy(() => RestaurantWhereInputSchema).optional()
}).strict();
var RestaurantUpdateToOneWithWhereWithoutProductionPlanInputSchema = z$2.object({
  where: z$2.lazy(() => RestaurantWhereInputSchema).optional(),
  data: z$2.union([z$2.lazy(() => RestaurantUpdateWithoutProductionPlanInputSchema), z$2.lazy(() => RestaurantUncheckedUpdateWithoutProductionPlanInputSchema)])
}).strict();
var RestaurantUpdateWithoutProductionPlanInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  address: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  city: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  zipCode: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  state: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  owner: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  isDeleted: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  deleted: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  organization: z$2.lazy(() => OrganizationUpdateOneWithoutRestaurantsNestedInputSchema).optional(),
  users: z$2.lazy(() => UserUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  cookbooks: z$2.lazy(() => CookBookUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: z$2.lazy(() => InventoryUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  orders: z$2.lazy(() => OrderUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: z$2.lazy(() => MenuUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipment: z$2.lazy(() => EquipmentUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklist: z$2.lazy(() => QualityChecklistUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qustomerFeedback: z$2.lazy(() => CustomerFeedbackUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();
var RestaurantUncheckedUpdateWithoutProductionPlanInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  address: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  city: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  zipCode: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  state: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  owner: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  organizationId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  isDeleted: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  deleted: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  users: z$2.lazy(() => UserUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  cookbooks: z$2.lazy(() => CookBookUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: z$2.lazy(() => InventoryUncheckedUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  orders: z$2.lazy(() => OrderUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: z$2.lazy(() => MenuUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipment: z$2.lazy(() => EquipmentUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklist: z$2.lazy(() => QualityChecklistUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qustomerFeedback: z$2.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();
var UserUpsertWithoutProductionPlanInputSchema = z$2.object({
  update: z$2.union([z$2.lazy(() => UserUpdateWithoutProductionPlanInputSchema), z$2.lazy(() => UserUncheckedUpdateWithoutProductionPlanInputSchema)]),
  create: z$2.union([z$2.lazy(() => UserCreateWithoutProductionPlanInputSchema), z$2.lazy(() => UserUncheckedCreateWithoutProductionPlanInputSchema)]),
  where: z$2.lazy(() => UserWhereInputSchema).optional()
}).strict();
var UserUpdateToOneWithWhereWithoutProductionPlanInputSchema = z$2.object({
  where: z$2.lazy(() => UserWhereInputSchema).optional(),
  data: z$2.union([z$2.lazy(() => UserUpdateWithoutProductionPlanInputSchema), z$2.lazy(() => UserUncheckedUpdateWithoutProductionPlanInputSchema)])
}).strict();
var UserUpdateWithoutProductionPlanInputSchema = z$2.object({
  email: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: z$2.union([z$2.lazy(() => UserRoleSchema), z$2.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  organization: z$2.lazy(() => OrganizationUpdateOneWithoutUsersNestedInputSchema).optional(),
  restaurant: z$2.lazy(() => RestaurantUpdateOneWithoutUsersNestedInputSchema).optional(),
  shifts: z$2.lazy(() => ShiftUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: z$2.lazy(() => InventoryItemUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: z$2.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: z$2.lazy(() => PasswordResetUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlanItem: z$2.lazy(() => ProductionPlanItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: z$2.lazy(() => AvailabilityUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraint: z$2.lazy(() => SchedulingConstraintUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedback: z$2.lazy(() => CustomerFeedbackUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: z$2.lazy(() => RecipeVersionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: z$2.lazy(() => RecipeVersionUpdateManyWithoutApprovedByNestedInputSchema).optional()
}).strict();
var UserUncheckedUpdateWithoutProductionPlanInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  email: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: z$2.union([z$2.lazy(() => UserRoleSchema), z$2.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  organizationId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  shifts: z$2.lazy(() => ShiftUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: z$2.lazy(() => InventoryItemUncheckedUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: z$2.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: z$2.lazy(() => PasswordResetUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlanItem: z$2.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: z$2.lazy(() => AvailabilityUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraint: z$2.lazy(() => SchedulingConstraintUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteUncheckedUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedback: z$2.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: z$2.lazy(() => RecipeVersionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: z$2.lazy(() => RecipeVersionUncheckedUpdateManyWithoutApprovedByNestedInputSchema).optional()
}).strict();
var ProductionPlanItemUpsertWithWhereUniqueWithoutProductionPlanInputSchema = z$2.object({
  where: z$2.lazy(() => ProductionPlanItemWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => ProductionPlanItemUpdateWithoutProductionPlanInputSchema), z$2.lazy(() => ProductionPlanItemUncheckedUpdateWithoutProductionPlanInputSchema)]),
  create: z$2.union([z$2.lazy(() => ProductionPlanItemCreateWithoutProductionPlanInputSchema), z$2.lazy(() => ProductionPlanItemUncheckedCreateWithoutProductionPlanInputSchema)])
}).strict();
var ProductionPlanItemUpdateWithWhereUniqueWithoutProductionPlanInputSchema = z$2.object({
  where: z$2.lazy(() => ProductionPlanItemWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => ProductionPlanItemUpdateWithoutProductionPlanInputSchema), z$2.lazy(() => ProductionPlanItemUncheckedUpdateWithoutProductionPlanInputSchema)])
}).strict();
var ProductionPlanItemUpdateManyWithWhereWithoutProductionPlanInputSchema = z$2.object({
  where: z$2.lazy(() => ProductionPlanItemScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => ProductionPlanItemUpdateManyMutationInputSchema), z$2.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutProductionPlanInputSchema)])
}).strict();
var ProductionPlanItemScalarWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => ProductionPlanItemScalarWhereInputSchema), z$2.lazy(() => ProductionPlanItemScalarWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => ProductionPlanItemScalarWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => ProductionPlanItemScalarWhereInputSchema), z$2.lazy(() => ProductionPlanItemScalarWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  productionPlanId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  recipeId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  quantity: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  unit: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  assignedToId: z$2.union([z$2.lazy(() => IntNullableFilterSchema), z$2.number()]).optional().nullable(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional()
}).strict();
var ProductionPlanCreateWithoutItemsInputSchema = z$2.object({
  date: z$2.coerce.date(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  restaurant: z$2.lazy(() => RestaurantCreateNestedOneWithoutProductionPlanInputSchema),
  createdBy: z$2.lazy(() => UserCreateNestedOneWithoutProductionPlanInputSchema)
}).strict();
var ProductionPlanUncheckedCreateWithoutItemsInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  restaurantId: z$2.number().int(),
  date: z$2.coerce.date(),
  createdById: z$2.number().int(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var ProductionPlanCreateOrConnectWithoutItemsInputSchema = z$2.object({
  where: z$2.lazy(() => ProductionPlanWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => ProductionPlanCreateWithoutItemsInputSchema), z$2.lazy(() => ProductionPlanUncheckedCreateWithoutItemsInputSchema)])
}).strict();
var RecipeCreateWithoutProductionPlanItemInputSchema = z$2.object({
  name: z$2.string(),
  imageUrl: z$2.union([z$2.lazy(() => RecipeCreateimageUrlInputSchema), z$2.string().array()]).optional(),
  description: z$2.string().optional().nullable(),
  servings: z$2.number().int(),
  cookTime: z$2.number().int(),
  prepTime: z$2.number().int(),
  frequency: z$2.number().int().optional().nullable(),
  foodCost: z$2.number().optional().nullable(),
  isDeleted: z$2.boolean().optional(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  restaurant: z$2.lazy(() => RestaurantCreateNestedOneWithoutRecipesInputSchema),
  cookBook: z$2.lazy(() => CookBookCreateNestedOneWithoutRecipesInputSchema),
  ingredients: z$2.lazy(() => RecipeIngredientCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z$2.lazy(() => MenuItemCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: z$2.lazy(() => FoodCostHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: z$2.lazy(() => PrepHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z$2.lazy(() => PrepBoardCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  MenuItemRecipe: z$2.lazy(() => MenuItemRecipeCreateNestedManyWithoutRecipeInputSchema).optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z$2.lazy(() => RecipeTagCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: z$2.lazy(() => RecipeVersionCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipment: z$2.lazy(() => RecipeEquipmentCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionCreateNestedManyWithoutRecipesInputSchema).optional()
}).strict();
var RecipeUncheckedCreateWithoutProductionPlanItemInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  imageUrl: z$2.union([z$2.lazy(() => RecipeCreateimageUrlInputSchema), z$2.string().array()]).optional(),
  description: z$2.string().optional().nullable(),
  servings: z$2.number().int(),
  cookTime: z$2.number().int(),
  prepTime: z$2.number().int(),
  frequency: z$2.number().int().optional().nullable(),
  restaurantId: z$2.number().int(),
  cookBookId: z$2.number().int(),
  foodCost: z$2.number().optional().nullable(),
  isDeleted: z$2.boolean().optional(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  ingredients: z$2.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z$2.lazy(() => MenuItemUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: z$2.lazy(() => FoodCostHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: z$2.lazy(() => PrepHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z$2.lazy(() => PrepBoardUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  MenuItemRecipe: z$2.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z$2.lazy(() => RecipeTagUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: z$2.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipment: z$2.lazy(() => RecipeEquipmentUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutRecipesInputSchema).optional()
}).strict();
var RecipeCreateOrConnectWithoutProductionPlanItemInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => RecipeCreateWithoutProductionPlanItemInputSchema), z$2.lazy(() => RecipeUncheckedCreateWithoutProductionPlanItemInputSchema)])
}).strict();
var UserCreateWithoutProductionPlanItemInputSchema = z$2.object({
  email: z$2.string(),
  sub: z$2.number().int().optional().nullable(),
  passwordHash: z$2.string(),
  firstName: z$2.string(),
  lastName: z$2.string(),
  profileImage: z$2.string().optional().nullable(),
  verified: z$2.boolean().optional(),
  role: z$2.lazy(() => UserRoleSchema),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  organization: z$2.lazy(() => OrganizationCreateNestedOneWithoutUsersInputSchema).optional(),
  restaurant: z$2.lazy(() => RestaurantCreateNestedOneWithoutUsersInputSchema).optional(),
  shifts: z$2.lazy(() => ShiftCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: z$2.lazy(() => InventoryItemCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: z$2.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: z$2.lazy(() => PasswordResetCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanCreateNestedManyWithoutCreatedByInputSchema).optional(),
  availability: z$2.lazy(() => AvailabilityCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraint: z$2.lazy(() => SchedulingConstraintCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedback: z$2.lazy(() => CustomerFeedbackCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: z$2.lazy(() => RecipeVersionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: z$2.lazy(() => RecipeVersionCreateNestedManyWithoutApprovedByInputSchema).optional()
}).strict();
var UserUncheckedCreateWithoutProductionPlanItemInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  email: z$2.string(),
  sub: z$2.number().int().optional().nullable(),
  passwordHash: z$2.string(),
  firstName: z$2.string(),
  lastName: z$2.string(),
  profileImage: z$2.string().optional().nullable(),
  verified: z$2.boolean().optional(),
  role: z$2.lazy(() => UserRoleSchema),
  organizationId: z$2.number().int().optional().nullable(),
  restaurantId: z$2.number().int().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  shifts: z$2.lazy(() => ShiftUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: z$2.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: z$2.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: z$2.lazy(() => PasswordResetUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  availability: z$2.lazy(() => AvailabilityUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraint: z$2.lazy(() => SchedulingConstraintUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteUncheckedCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedback: z$2.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: z$2.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: z$2.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutApprovedByInputSchema).optional()
}).strict();
var UserCreateOrConnectWithoutProductionPlanItemInputSchema = z$2.object({
  where: z$2.lazy(() => UserWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => UserCreateWithoutProductionPlanItemInputSchema), z$2.lazy(() => UserUncheckedCreateWithoutProductionPlanItemInputSchema)])
}).strict();
var ProductionPlanUpsertWithoutItemsInputSchema = z$2.object({
  update: z$2.union([z$2.lazy(() => ProductionPlanUpdateWithoutItemsInputSchema), z$2.lazy(() => ProductionPlanUncheckedUpdateWithoutItemsInputSchema)]),
  create: z$2.union([z$2.lazy(() => ProductionPlanCreateWithoutItemsInputSchema), z$2.lazy(() => ProductionPlanUncheckedCreateWithoutItemsInputSchema)]),
  where: z$2.lazy(() => ProductionPlanWhereInputSchema).optional()
}).strict();
var ProductionPlanUpdateToOneWithWhereWithoutItemsInputSchema = z$2.object({
  where: z$2.lazy(() => ProductionPlanWhereInputSchema).optional(),
  data: z$2.union([z$2.lazy(() => ProductionPlanUpdateWithoutItemsInputSchema), z$2.lazy(() => ProductionPlanUncheckedUpdateWithoutItemsInputSchema)])
}).strict();
var ProductionPlanUpdateWithoutItemsInputSchema = z$2.object({
  date: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: z$2.lazy(() => RestaurantUpdateOneRequiredWithoutProductionPlanNestedInputSchema).optional(),
  createdBy: z$2.lazy(() => UserUpdateOneRequiredWithoutProductionPlanNestedInputSchema).optional()
}).strict();
var ProductionPlanUncheckedUpdateWithoutItemsInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdById: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var RecipeUpsertWithoutProductionPlanItemInputSchema = z$2.object({
  update: z$2.union([z$2.lazy(() => RecipeUpdateWithoutProductionPlanItemInputSchema), z$2.lazy(() => RecipeUncheckedUpdateWithoutProductionPlanItemInputSchema)]),
  create: z$2.union([z$2.lazy(() => RecipeCreateWithoutProductionPlanItemInputSchema), z$2.lazy(() => RecipeUncheckedCreateWithoutProductionPlanItemInputSchema)]),
  where: z$2.lazy(() => RecipeWhereInputSchema).optional()
}).strict();
var RecipeUpdateToOneWithWhereWithoutProductionPlanItemInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeWhereInputSchema).optional(),
  data: z$2.union([z$2.lazy(() => RecipeUpdateWithoutProductionPlanItemInputSchema), z$2.lazy(() => RecipeUncheckedUpdateWithoutProductionPlanItemInputSchema)])
}).strict();
var RecipeUpdateWithoutProductionPlanItemInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.lazy(() => RecipeUpdateimageUrlInputSchema), z$2.string().array()]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: z$2.lazy(() => RestaurantUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  cookBook: z$2.lazy(() => CookBookUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  ingredients: z$2.lazy(() => RecipeIngredientUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z$2.lazy(() => MenuItemUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: z$2.lazy(() => FoodCostHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: z$2.lazy(() => PrepHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z$2.lazy(() => PrepBoardUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  MenuItemRecipe: z$2.lazy(() => MenuItemRecipeUpdateManyWithoutRecipeNestedInputSchema).optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z$2.lazy(() => RecipeTagUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: z$2.lazy(() => RecipeVersionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipment: z$2.lazy(() => RecipeEquipmentUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionUpdateManyWithoutRecipesNestedInputSchema).optional()
}).strict();
var RecipeUncheckedUpdateWithoutProductionPlanItemInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.lazy(() => RecipeUpdateimageUrlInputSchema), z$2.string().array()]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookBookId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  ingredients: z$2.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z$2.lazy(() => MenuItemUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: z$2.lazy(() => FoodCostHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: z$2.lazy(() => PrepHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z$2.lazy(() => PrepBoardUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  MenuItemRecipe: z$2.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z$2.lazy(() => RecipeTagUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: z$2.lazy(() => RecipeVersionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipment: z$2.lazy(() => RecipeEquipmentUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional()
}).strict();
var UserUpsertWithoutProductionPlanItemInputSchema = z$2.object({
  update: z$2.union([z$2.lazy(() => UserUpdateWithoutProductionPlanItemInputSchema), z$2.lazy(() => UserUncheckedUpdateWithoutProductionPlanItemInputSchema)]),
  create: z$2.union([z$2.lazy(() => UserCreateWithoutProductionPlanItemInputSchema), z$2.lazy(() => UserUncheckedCreateWithoutProductionPlanItemInputSchema)]),
  where: z$2.lazy(() => UserWhereInputSchema).optional()
}).strict();
var UserUpdateToOneWithWhereWithoutProductionPlanItemInputSchema = z$2.object({
  where: z$2.lazy(() => UserWhereInputSchema).optional(),
  data: z$2.union([z$2.lazy(() => UserUpdateWithoutProductionPlanItemInputSchema), z$2.lazy(() => UserUncheckedUpdateWithoutProductionPlanItemInputSchema)])
}).strict();
var UserUpdateWithoutProductionPlanItemInputSchema = z$2.object({
  email: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: z$2.union([z$2.lazy(() => UserRoleSchema), z$2.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  organization: z$2.lazy(() => OrganizationUpdateOneWithoutUsersNestedInputSchema).optional(),
  restaurant: z$2.lazy(() => RestaurantUpdateOneWithoutUsersNestedInputSchema).optional(),
  shifts: z$2.lazy(() => ShiftUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: z$2.lazy(() => InventoryItemUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: z$2.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: z$2.lazy(() => PasswordResetUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  availability: z$2.lazy(() => AvailabilityUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraint: z$2.lazy(() => SchedulingConstraintUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedback: z$2.lazy(() => CustomerFeedbackUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: z$2.lazy(() => RecipeVersionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: z$2.lazy(() => RecipeVersionUpdateManyWithoutApprovedByNestedInputSchema).optional()
}).strict();
var UserUncheckedUpdateWithoutProductionPlanItemInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  email: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: z$2.union([z$2.lazy(() => UserRoleSchema), z$2.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  organizationId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  shifts: z$2.lazy(() => ShiftUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: z$2.lazy(() => InventoryItemUncheckedUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: z$2.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: z$2.lazy(() => PasswordResetUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  availability: z$2.lazy(() => AvailabilityUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraint: z$2.lazy(() => SchedulingConstraintUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteUncheckedUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedback: z$2.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: z$2.lazy(() => RecipeVersionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: z$2.lazy(() => RecipeVersionUncheckedUpdateManyWithoutApprovedByNestedInputSchema).optional()
}).strict();
var ShiftCreateWithoutShiftTaskInputSchema = z$2.object({
  startTime: z$2.coerce.date(),
  endTime: z$2.coerce.date(),
  status: z$2.lazy(() => ShiftStatusSchema),
  user: z$2.lazy(() => UserCreateNestedOneWithoutShiftsInputSchema)
}).strict();
var ShiftUncheckedCreateWithoutShiftTaskInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  userId: z$2.number().int(),
  startTime: z$2.coerce.date(),
  endTime: z$2.coerce.date(),
  status: z$2.lazy(() => ShiftStatusSchema)
}).strict();
var ShiftCreateOrConnectWithoutShiftTaskInputSchema = z$2.object({
  where: z$2.lazy(() => ShiftWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => ShiftCreateWithoutShiftTaskInputSchema), z$2.lazy(() => ShiftUncheckedCreateWithoutShiftTaskInputSchema)])
}).strict();
var ShiftUpsertWithoutShiftTaskInputSchema = z$2.object({
  update: z$2.union([z$2.lazy(() => ShiftUpdateWithoutShiftTaskInputSchema), z$2.lazy(() => ShiftUncheckedUpdateWithoutShiftTaskInputSchema)]),
  create: z$2.union([z$2.lazy(() => ShiftCreateWithoutShiftTaskInputSchema), z$2.lazy(() => ShiftUncheckedCreateWithoutShiftTaskInputSchema)]),
  where: z$2.lazy(() => ShiftWhereInputSchema).optional()
}).strict();
var ShiftUpdateToOneWithWhereWithoutShiftTaskInputSchema = z$2.object({
  where: z$2.lazy(() => ShiftWhereInputSchema).optional(),
  data: z$2.union([z$2.lazy(() => ShiftUpdateWithoutShiftTaskInputSchema), z$2.lazy(() => ShiftUncheckedUpdateWithoutShiftTaskInputSchema)])
}).strict();
var ShiftUpdateWithoutShiftTaskInputSchema = z$2.object({
  startTime: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endTime: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  status: z$2.union([z$2.lazy(() => ShiftStatusSchema), z$2.lazy(() => EnumShiftStatusFieldUpdateOperationsInputSchema)]).optional(),
  user: z$2.lazy(() => UserUpdateOneRequiredWithoutShiftsNestedInputSchema).optional()
}).strict();
var ShiftUncheckedUpdateWithoutShiftTaskInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  userId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  startTime: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endTime: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  status: z$2.union([z$2.lazy(() => ShiftStatusSchema), z$2.lazy(() => EnumShiftStatusFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var UserCreateWithoutAvailabilityInputSchema = z$2.object({
  email: z$2.string(),
  sub: z$2.number().int().optional().nullable(),
  passwordHash: z$2.string(),
  firstName: z$2.string(),
  lastName: z$2.string(),
  profileImage: z$2.string().optional().nullable(),
  verified: z$2.boolean().optional(),
  role: z$2.lazy(() => UserRoleSchema),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  organization: z$2.lazy(() => OrganizationCreateNestedOneWithoutUsersInputSchema).optional(),
  restaurant: z$2.lazy(() => RestaurantCreateNestedOneWithoutUsersInputSchema).optional(),
  shifts: z$2.lazy(() => ShiftCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: z$2.lazy(() => InventoryItemCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: z$2.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: z$2.lazy(() => PasswordResetCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItem: z$2.lazy(() => ProductionPlanItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  schedulingConstraint: z$2.lazy(() => SchedulingConstraintCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedback: z$2.lazy(() => CustomerFeedbackCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: z$2.lazy(() => RecipeVersionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: z$2.lazy(() => RecipeVersionCreateNestedManyWithoutApprovedByInputSchema).optional()
}).strict();
var UserUncheckedCreateWithoutAvailabilityInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  email: z$2.string(),
  sub: z$2.number().int().optional().nullable(),
  passwordHash: z$2.string(),
  firstName: z$2.string(),
  lastName: z$2.string(),
  profileImage: z$2.string().optional().nullable(),
  verified: z$2.boolean().optional(),
  role: z$2.lazy(() => UserRoleSchema),
  organizationId: z$2.number().int().optional().nullable(),
  restaurantId: z$2.number().int().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  shifts: z$2.lazy(() => ShiftUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: z$2.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: z$2.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: z$2.lazy(() => PasswordResetUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItem: z$2.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  schedulingConstraint: z$2.lazy(() => SchedulingConstraintUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteUncheckedCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedback: z$2.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: z$2.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: z$2.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutApprovedByInputSchema).optional()
}).strict();
var UserCreateOrConnectWithoutAvailabilityInputSchema = z$2.object({
  where: z$2.lazy(() => UserWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => UserCreateWithoutAvailabilityInputSchema), z$2.lazy(() => UserUncheckedCreateWithoutAvailabilityInputSchema)])
}).strict();
var UserUpsertWithoutAvailabilityInputSchema = z$2.object({
  update: z$2.union([z$2.lazy(() => UserUpdateWithoutAvailabilityInputSchema), z$2.lazy(() => UserUncheckedUpdateWithoutAvailabilityInputSchema)]),
  create: z$2.union([z$2.lazy(() => UserCreateWithoutAvailabilityInputSchema), z$2.lazy(() => UserUncheckedCreateWithoutAvailabilityInputSchema)]),
  where: z$2.lazy(() => UserWhereInputSchema).optional()
}).strict();
var UserUpdateToOneWithWhereWithoutAvailabilityInputSchema = z$2.object({
  where: z$2.lazy(() => UserWhereInputSchema).optional(),
  data: z$2.union([z$2.lazy(() => UserUpdateWithoutAvailabilityInputSchema), z$2.lazy(() => UserUncheckedUpdateWithoutAvailabilityInputSchema)])
}).strict();
var UserUpdateWithoutAvailabilityInputSchema = z$2.object({
  email: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: z$2.union([z$2.lazy(() => UserRoleSchema), z$2.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  organization: z$2.lazy(() => OrganizationUpdateOneWithoutUsersNestedInputSchema).optional(),
  restaurant: z$2.lazy(() => RestaurantUpdateOneWithoutUsersNestedInputSchema).optional(),
  shifts: z$2.lazy(() => ShiftUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: z$2.lazy(() => InventoryItemUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: z$2.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: z$2.lazy(() => PasswordResetUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItem: z$2.lazy(() => ProductionPlanItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  schedulingConstraint: z$2.lazy(() => SchedulingConstraintUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedback: z$2.lazy(() => CustomerFeedbackUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: z$2.lazy(() => RecipeVersionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: z$2.lazy(() => RecipeVersionUpdateManyWithoutApprovedByNestedInputSchema).optional()
}).strict();
var UserUncheckedUpdateWithoutAvailabilityInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  email: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: z$2.union([z$2.lazy(() => UserRoleSchema), z$2.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  organizationId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  shifts: z$2.lazy(() => ShiftUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: z$2.lazy(() => InventoryItemUncheckedUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: z$2.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: z$2.lazy(() => PasswordResetUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItem: z$2.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  schedulingConstraint: z$2.lazy(() => SchedulingConstraintUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteUncheckedUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedback: z$2.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: z$2.lazy(() => RecipeVersionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: z$2.lazy(() => RecipeVersionUncheckedUpdateManyWithoutApprovedByNestedInputSchema).optional()
}).strict();
var UserCreateWithoutSchedulingConstraintInputSchema = z$2.object({
  email: z$2.string(),
  sub: z$2.number().int().optional().nullable(),
  passwordHash: z$2.string(),
  firstName: z$2.string(),
  lastName: z$2.string(),
  profileImage: z$2.string().optional().nullable(),
  verified: z$2.boolean().optional(),
  role: z$2.lazy(() => UserRoleSchema),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  organization: z$2.lazy(() => OrganizationCreateNestedOneWithoutUsersInputSchema).optional(),
  restaurant: z$2.lazy(() => RestaurantCreateNestedOneWithoutUsersInputSchema).optional(),
  shifts: z$2.lazy(() => ShiftCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: z$2.lazy(() => InventoryItemCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: z$2.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: z$2.lazy(() => PasswordResetCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItem: z$2.lazy(() => ProductionPlanItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: z$2.lazy(() => AvailabilityCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedback: z$2.lazy(() => CustomerFeedbackCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: z$2.lazy(() => RecipeVersionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: z$2.lazy(() => RecipeVersionCreateNestedManyWithoutApprovedByInputSchema).optional()
}).strict();
var UserUncheckedCreateWithoutSchedulingConstraintInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  email: z$2.string(),
  sub: z$2.number().int().optional().nullable(),
  passwordHash: z$2.string(),
  firstName: z$2.string(),
  lastName: z$2.string(),
  profileImage: z$2.string().optional().nullable(),
  verified: z$2.boolean().optional(),
  role: z$2.lazy(() => UserRoleSchema),
  organizationId: z$2.number().int().optional().nullable(),
  restaurantId: z$2.number().int().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  shifts: z$2.lazy(() => ShiftUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: z$2.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: z$2.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: z$2.lazy(() => PasswordResetUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItem: z$2.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: z$2.lazy(() => AvailabilityUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteUncheckedCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedback: z$2.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: z$2.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: z$2.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutApprovedByInputSchema).optional()
}).strict();
var UserCreateOrConnectWithoutSchedulingConstraintInputSchema = z$2.object({
  where: z$2.lazy(() => UserWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => UserCreateWithoutSchedulingConstraintInputSchema), z$2.lazy(() => UserUncheckedCreateWithoutSchedulingConstraintInputSchema)])
}).strict();
var UserUpsertWithoutSchedulingConstraintInputSchema = z$2.object({
  update: z$2.union([z$2.lazy(() => UserUpdateWithoutSchedulingConstraintInputSchema), z$2.lazy(() => UserUncheckedUpdateWithoutSchedulingConstraintInputSchema)]),
  create: z$2.union([z$2.lazy(() => UserCreateWithoutSchedulingConstraintInputSchema), z$2.lazy(() => UserUncheckedCreateWithoutSchedulingConstraintInputSchema)]),
  where: z$2.lazy(() => UserWhereInputSchema).optional()
}).strict();
var UserUpdateToOneWithWhereWithoutSchedulingConstraintInputSchema = z$2.object({
  where: z$2.lazy(() => UserWhereInputSchema).optional(),
  data: z$2.union([z$2.lazy(() => UserUpdateWithoutSchedulingConstraintInputSchema), z$2.lazy(() => UserUncheckedUpdateWithoutSchedulingConstraintInputSchema)])
}).strict();
var UserUpdateWithoutSchedulingConstraintInputSchema = z$2.object({
  email: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: z$2.union([z$2.lazy(() => UserRoleSchema), z$2.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  organization: z$2.lazy(() => OrganizationUpdateOneWithoutUsersNestedInputSchema).optional(),
  restaurant: z$2.lazy(() => RestaurantUpdateOneWithoutUsersNestedInputSchema).optional(),
  shifts: z$2.lazy(() => ShiftUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: z$2.lazy(() => InventoryItemUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: z$2.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: z$2.lazy(() => PasswordResetUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItem: z$2.lazy(() => ProductionPlanItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: z$2.lazy(() => AvailabilityUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedback: z$2.lazy(() => CustomerFeedbackUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: z$2.lazy(() => RecipeVersionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: z$2.lazy(() => RecipeVersionUpdateManyWithoutApprovedByNestedInputSchema).optional()
}).strict();
var UserUncheckedUpdateWithoutSchedulingConstraintInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  email: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: z$2.union([z$2.lazy(() => UserRoleSchema), z$2.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  organizationId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  shifts: z$2.lazy(() => ShiftUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: z$2.lazy(() => InventoryItemUncheckedUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: z$2.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: z$2.lazy(() => PasswordResetUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItem: z$2.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: z$2.lazy(() => AvailabilityUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteUncheckedUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedback: z$2.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: z$2.lazy(() => RecipeVersionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: z$2.lazy(() => RecipeVersionUncheckedUpdateManyWithoutApprovedByNestedInputSchema).optional()
}).strict();
var InventoryItemCreateWithoutInventoryWithdrawalInputSchema = z$2.object({
  quantity: z$2.number(),
  unit: z$2.string(),
  minQuantity: z$2.number(),
  restockThreshold: z$2.number(),
  lastUpdated: z$2.coerce.date().optional(),
  inventory: z$2.lazy(() => InventoryCreateNestedOneWithoutItemsInputSchema),
  ingredient: z$2.lazy(() => IngredientCreateNestedOneWithoutInventoryItemsInputSchema),
  lastUpdatedBy: z$2.lazy(() => UserCreateNestedOneWithoutInventoryUpdatesInputSchema).optional()
}).strict();
var InventoryItemUncheckedCreateWithoutInventoryWithdrawalInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  inventoryId: z$2.number().int(),
  ingredientId: z$2.number().int(),
  quantity: z$2.number(),
  unit: z$2.string(),
  minQuantity: z$2.number(),
  restockThreshold: z$2.number(),
  lastUpdatedById: z$2.number().int().optional().nullable(),
  lastUpdated: z$2.coerce.date().optional()
}).strict();
var InventoryItemCreateOrConnectWithoutInventoryWithdrawalInputSchema = z$2.object({
  where: z$2.lazy(() => InventoryItemWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => InventoryItemCreateWithoutInventoryWithdrawalInputSchema), z$2.lazy(() => InventoryItemUncheckedCreateWithoutInventoryWithdrawalInputSchema)])
}).strict();
var RecipeCreateWithoutInventoryWithdrawalInputSchema = z$2.object({
  name: z$2.string(),
  imageUrl: z$2.union([z$2.lazy(() => RecipeCreateimageUrlInputSchema), z$2.string().array()]).optional(),
  description: z$2.string().optional().nullable(),
  servings: z$2.number().int(),
  cookTime: z$2.number().int(),
  prepTime: z$2.number().int(),
  frequency: z$2.number().int().optional().nullable(),
  foodCost: z$2.number().optional().nullable(),
  isDeleted: z$2.boolean().optional(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  restaurant: z$2.lazy(() => RestaurantCreateNestedOneWithoutRecipesInputSchema),
  cookBook: z$2.lazy(() => CookBookCreateNestedOneWithoutRecipesInputSchema),
  ingredients: z$2.lazy(() => RecipeIngredientCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z$2.lazy(() => MenuItemCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: z$2.lazy(() => FoodCostHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: z$2.lazy(() => PrepHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z$2.lazy(() => PrepBoardCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  MenuItemRecipe: z$2.lazy(() => MenuItemRecipeCreateNestedManyWithoutRecipeInputSchema).optional(),
  ProductionPlanItem: z$2.lazy(() => ProductionPlanItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z$2.lazy(() => RecipeTagCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: z$2.lazy(() => RecipeVersionCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipment: z$2.lazy(() => RecipeEquipmentCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionCreateNestedManyWithoutRecipesInputSchema).optional()
}).strict();
var RecipeUncheckedCreateWithoutInventoryWithdrawalInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  imageUrl: z$2.union([z$2.lazy(() => RecipeCreateimageUrlInputSchema), z$2.string().array()]).optional(),
  description: z$2.string().optional().nullable(),
  servings: z$2.number().int(),
  cookTime: z$2.number().int(),
  prepTime: z$2.number().int(),
  frequency: z$2.number().int().optional().nullable(),
  restaurantId: z$2.number().int(),
  cookBookId: z$2.number().int(),
  foodCost: z$2.number().optional().nullable(),
  isDeleted: z$2.boolean().optional(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  ingredients: z$2.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z$2.lazy(() => MenuItemUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: z$2.lazy(() => FoodCostHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: z$2.lazy(() => PrepHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z$2.lazy(() => PrepBoardUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  MenuItemRecipe: z$2.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  ProductionPlanItem: z$2.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z$2.lazy(() => RecipeTagUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: z$2.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipment: z$2.lazy(() => RecipeEquipmentUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutRecipesInputSchema).optional()
}).strict();
var RecipeCreateOrConnectWithoutInventoryWithdrawalInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => RecipeCreateWithoutInventoryWithdrawalInputSchema), z$2.lazy(() => RecipeUncheckedCreateWithoutInventoryWithdrawalInputSchema)])
}).strict();
var UserCreateWithoutInventoryWithdrawalInputSchema = z$2.object({
  email: z$2.string(),
  sub: z$2.number().int().optional().nullable(),
  passwordHash: z$2.string(),
  firstName: z$2.string(),
  lastName: z$2.string(),
  profileImage: z$2.string().optional().nullable(),
  verified: z$2.boolean().optional(),
  role: z$2.lazy(() => UserRoleSchema),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  organization: z$2.lazy(() => OrganizationCreateNestedOneWithoutUsersInputSchema).optional(),
  restaurant: z$2.lazy(() => RestaurantCreateNestedOneWithoutUsersInputSchema).optional(),
  shifts: z$2.lazy(() => ShiftCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: z$2.lazy(() => InventoryItemCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: z$2.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: z$2.lazy(() => PasswordResetCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItem: z$2.lazy(() => ProductionPlanItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: z$2.lazy(() => AvailabilityCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraint: z$2.lazy(() => SchedulingConstraintCreateNestedManyWithoutUserInputSchema).optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedback: z$2.lazy(() => CustomerFeedbackCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: z$2.lazy(() => RecipeVersionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: z$2.lazy(() => RecipeVersionCreateNestedManyWithoutApprovedByInputSchema).optional()
}).strict();
var UserUncheckedCreateWithoutInventoryWithdrawalInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  email: z$2.string(),
  sub: z$2.number().int().optional().nullable(),
  passwordHash: z$2.string(),
  firstName: z$2.string(),
  lastName: z$2.string(),
  profileImage: z$2.string().optional().nullable(),
  verified: z$2.boolean().optional(),
  role: z$2.lazy(() => UserRoleSchema),
  organizationId: z$2.number().int().optional().nullable(),
  restaurantId: z$2.number().int().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  shifts: z$2.lazy(() => ShiftUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: z$2.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: z$2.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: z$2.lazy(() => PasswordResetUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItem: z$2.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: z$2.lazy(() => AvailabilityUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraint: z$2.lazy(() => SchedulingConstraintUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteUncheckedCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedback: z$2.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: z$2.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: z$2.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutApprovedByInputSchema).optional()
}).strict();
var UserCreateOrConnectWithoutInventoryWithdrawalInputSchema = z$2.object({
  where: z$2.lazy(() => UserWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => UserCreateWithoutInventoryWithdrawalInputSchema), z$2.lazy(() => UserUncheckedCreateWithoutInventoryWithdrawalInputSchema)])
}).strict();
var InventoryItemUpsertWithoutInventoryWithdrawalInputSchema = z$2.object({
  update: z$2.union([z$2.lazy(() => InventoryItemUpdateWithoutInventoryWithdrawalInputSchema), z$2.lazy(() => InventoryItemUncheckedUpdateWithoutInventoryWithdrawalInputSchema)]),
  create: z$2.union([z$2.lazy(() => InventoryItemCreateWithoutInventoryWithdrawalInputSchema), z$2.lazy(() => InventoryItemUncheckedCreateWithoutInventoryWithdrawalInputSchema)]),
  where: z$2.lazy(() => InventoryItemWhereInputSchema).optional()
}).strict();
var InventoryItemUpdateToOneWithWhereWithoutInventoryWithdrawalInputSchema = z$2.object({
  where: z$2.lazy(() => InventoryItemWhereInputSchema).optional(),
  data: z$2.union([z$2.lazy(() => InventoryItemUpdateWithoutInventoryWithdrawalInputSchema), z$2.lazy(() => InventoryItemUncheckedUpdateWithoutInventoryWithdrawalInputSchema)])
}).strict();
var InventoryItemUpdateWithoutInventoryWithdrawalInputSchema = z$2.object({
  quantity: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  minQuantity: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  restockThreshold: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  lastUpdated: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  inventory: z$2.lazy(() => InventoryUpdateOneRequiredWithoutItemsNestedInputSchema).optional(),
  ingredient: z$2.lazy(() => IngredientUpdateOneRequiredWithoutInventoryItemsNestedInputSchema).optional(),
  lastUpdatedBy: z$2.lazy(() => UserUpdateOneWithoutInventoryUpdatesNestedInputSchema).optional()
}).strict();
var InventoryItemUncheckedUpdateWithoutInventoryWithdrawalInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  inventoryId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  ingredientId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  minQuantity: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  restockThreshold: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  lastUpdatedById: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  lastUpdated: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var RecipeUpsertWithoutInventoryWithdrawalInputSchema = z$2.object({
  update: z$2.union([z$2.lazy(() => RecipeUpdateWithoutInventoryWithdrawalInputSchema), z$2.lazy(() => RecipeUncheckedUpdateWithoutInventoryWithdrawalInputSchema)]),
  create: z$2.union([z$2.lazy(() => RecipeCreateWithoutInventoryWithdrawalInputSchema), z$2.lazy(() => RecipeUncheckedCreateWithoutInventoryWithdrawalInputSchema)]),
  where: z$2.lazy(() => RecipeWhereInputSchema).optional()
}).strict();
var RecipeUpdateToOneWithWhereWithoutInventoryWithdrawalInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeWhereInputSchema).optional(),
  data: z$2.union([z$2.lazy(() => RecipeUpdateWithoutInventoryWithdrawalInputSchema), z$2.lazy(() => RecipeUncheckedUpdateWithoutInventoryWithdrawalInputSchema)])
}).strict();
var RecipeUpdateWithoutInventoryWithdrawalInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.lazy(() => RecipeUpdateimageUrlInputSchema), z$2.string().array()]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: z$2.lazy(() => RestaurantUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  cookBook: z$2.lazy(() => CookBookUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  ingredients: z$2.lazy(() => RecipeIngredientUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z$2.lazy(() => MenuItemUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: z$2.lazy(() => FoodCostHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: z$2.lazy(() => PrepHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z$2.lazy(() => PrepBoardUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  MenuItemRecipe: z$2.lazy(() => MenuItemRecipeUpdateManyWithoutRecipeNestedInputSchema).optional(),
  ProductionPlanItem: z$2.lazy(() => ProductionPlanItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z$2.lazy(() => RecipeTagUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: z$2.lazy(() => RecipeVersionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipment: z$2.lazy(() => RecipeEquipmentUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionUpdateManyWithoutRecipesNestedInputSchema).optional()
}).strict();
var RecipeUncheckedUpdateWithoutInventoryWithdrawalInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.lazy(() => RecipeUpdateimageUrlInputSchema), z$2.string().array()]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookBookId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  ingredients: z$2.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z$2.lazy(() => MenuItemUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: z$2.lazy(() => FoodCostHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: z$2.lazy(() => PrepHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z$2.lazy(() => PrepBoardUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  MenuItemRecipe: z$2.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  ProductionPlanItem: z$2.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z$2.lazy(() => RecipeTagUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: z$2.lazy(() => RecipeVersionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipment: z$2.lazy(() => RecipeEquipmentUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional()
}).strict();
var UserUpsertWithoutInventoryWithdrawalInputSchema = z$2.object({
  update: z$2.union([z$2.lazy(() => UserUpdateWithoutInventoryWithdrawalInputSchema), z$2.lazy(() => UserUncheckedUpdateWithoutInventoryWithdrawalInputSchema)]),
  create: z$2.union([z$2.lazy(() => UserCreateWithoutInventoryWithdrawalInputSchema), z$2.lazy(() => UserUncheckedCreateWithoutInventoryWithdrawalInputSchema)]),
  where: z$2.lazy(() => UserWhereInputSchema).optional()
}).strict();
var UserUpdateToOneWithWhereWithoutInventoryWithdrawalInputSchema = z$2.object({
  where: z$2.lazy(() => UserWhereInputSchema).optional(),
  data: z$2.union([z$2.lazy(() => UserUpdateWithoutInventoryWithdrawalInputSchema), z$2.lazy(() => UserUncheckedUpdateWithoutInventoryWithdrawalInputSchema)])
}).strict();
var UserUpdateWithoutInventoryWithdrawalInputSchema = z$2.object({
  email: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: z$2.union([z$2.lazy(() => UserRoleSchema), z$2.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  organization: z$2.lazy(() => OrganizationUpdateOneWithoutUsersNestedInputSchema).optional(),
  restaurant: z$2.lazy(() => RestaurantUpdateOneWithoutUsersNestedInputSchema).optional(),
  shifts: z$2.lazy(() => ShiftUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: z$2.lazy(() => InventoryItemUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: z$2.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: z$2.lazy(() => PasswordResetUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItem: z$2.lazy(() => ProductionPlanItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: z$2.lazy(() => AvailabilityUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraint: z$2.lazy(() => SchedulingConstraintUpdateManyWithoutUserNestedInputSchema).optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedback: z$2.lazy(() => CustomerFeedbackUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: z$2.lazy(() => RecipeVersionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: z$2.lazy(() => RecipeVersionUpdateManyWithoutApprovedByNestedInputSchema).optional()
}).strict();
var UserUncheckedUpdateWithoutInventoryWithdrawalInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  email: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: z$2.union([z$2.lazy(() => UserRoleSchema), z$2.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  organizationId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  shifts: z$2.lazy(() => ShiftUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: z$2.lazy(() => InventoryItemUncheckedUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: z$2.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: z$2.lazy(() => PasswordResetUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItem: z$2.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: z$2.lazy(() => AvailabilityUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraint: z$2.lazy(() => SchedulingConstraintUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteUncheckedUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedback: z$2.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: z$2.lazy(() => RecipeVersionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: z$2.lazy(() => RecipeVersionUncheckedUpdateManyWithoutApprovedByNestedInputSchema).optional()
}).strict();
var IngredientAllergenCreateWithoutAllergenInputSchema = z$2.object({
  ingredient: z$2.lazy(() => IngredientCreateNestedOneWithoutIngredientAllergenInputSchema)
}).strict();
var IngredientAllergenUncheckedCreateWithoutAllergenInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  ingredientId: z$2.number().int()
}).strict();
var IngredientAllergenCreateOrConnectWithoutAllergenInputSchema = z$2.object({
  where: z$2.lazy(() => IngredientAllergenWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => IngredientAllergenCreateWithoutAllergenInputSchema), z$2.lazy(() => IngredientAllergenUncheckedCreateWithoutAllergenInputSchema)])
}).strict();
var IngredientAllergenCreateManyAllergenInputEnvelopeSchema = z$2.object({
  data: z$2.union([z$2.lazy(() => IngredientAllergenCreateManyAllergenInputSchema), z$2.lazy(() => IngredientAllergenCreateManyAllergenInputSchema).array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var IngredientAllergenUpsertWithWhereUniqueWithoutAllergenInputSchema = z$2.object({
  where: z$2.lazy(() => IngredientAllergenWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => IngredientAllergenUpdateWithoutAllergenInputSchema), z$2.lazy(() => IngredientAllergenUncheckedUpdateWithoutAllergenInputSchema)]),
  create: z$2.union([z$2.lazy(() => IngredientAllergenCreateWithoutAllergenInputSchema), z$2.lazy(() => IngredientAllergenUncheckedCreateWithoutAllergenInputSchema)])
}).strict();
var IngredientAllergenUpdateWithWhereUniqueWithoutAllergenInputSchema = z$2.object({
  where: z$2.lazy(() => IngredientAllergenWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => IngredientAllergenUpdateWithoutAllergenInputSchema), z$2.lazy(() => IngredientAllergenUncheckedUpdateWithoutAllergenInputSchema)])
}).strict();
var IngredientAllergenUpdateManyWithWhereWithoutAllergenInputSchema = z$2.object({
  where: z$2.lazy(() => IngredientAllergenScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => IngredientAllergenUpdateManyMutationInputSchema), z$2.lazy(() => IngredientAllergenUncheckedUpdateManyWithoutAllergenInputSchema)])
}).strict();
var IngredientAllergenScalarWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => IngredientAllergenScalarWhereInputSchema), z$2.lazy(() => IngredientAllergenScalarWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => IngredientAllergenScalarWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => IngredientAllergenScalarWhereInputSchema), z$2.lazy(() => IngredientAllergenScalarWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  ingredientId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  allergenId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional()
}).strict();
var IngredientCreateWithoutIngredientAllergenInputSchema = z$2.object({
  name: z$2.string(),
  category: z$2.string(),
  price: z$2.number(),
  recipeIngredients: z$2.lazy(() => RecipeIngredientCreateNestedManyWithoutIngredientInputSchema).optional(),
  inventoryItems: z$2.lazy(() => InventoryItemCreateNestedManyWithoutIngredientInputSchema).optional(),
  orderItems: z$2.lazy(() => OrderItemCreateNestedManyWithoutIngredientInputSchema).optional(),
  vendors: z$2.lazy(() => VendorCreateNestedManyWithoutIngredientsInputSchema).optional(),
  WasteRecord: z$2.lazy(() => WasteRecordCreateNestedManyWithoutIngredienteInputSchema).optional(),
  SupplierPriceHistory: z$2.lazy(() => SupplierPriceHistoryCreateNestedManyWithoutIngredientInputSchema).optional(),
  DietaryRestriction: z$2.lazy(() => DietaryRestrictionCreateNestedOneWithoutIngredientsInputSchema).optional()
}).strict();
var IngredientUncheckedCreateWithoutIngredientAllergenInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  category: z$2.string(),
  price: z$2.number(),
  dietaryRestrictionId: z$2.number().int().optional().nullable(),
  recipeIngredients: z$2.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  inventoryItems: z$2.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  orderItems: z$2.lazy(() => OrderItemUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  vendors: z$2.lazy(() => VendorUncheckedCreateNestedManyWithoutIngredientsInputSchema).optional(),
  WasteRecord: z$2.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutIngredienteInputSchema).optional(),
  SupplierPriceHistory: z$2.lazy(() => SupplierPriceHistoryUncheckedCreateNestedManyWithoutIngredientInputSchema).optional()
}).strict();
var IngredientCreateOrConnectWithoutIngredientAllergenInputSchema = z$2.object({
  where: z$2.lazy(() => IngredientWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => IngredientCreateWithoutIngredientAllergenInputSchema), z$2.lazy(() => IngredientUncheckedCreateWithoutIngredientAllergenInputSchema)])
}).strict();
var AllergenCreateWithoutIngredientsInputSchema = z$2.object({
  name: z$2.string(),
  description: z$2.string().optional().nullable()
}).strict();
var AllergenUncheckedCreateWithoutIngredientsInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  description: z$2.string().optional().nullable()
}).strict();
var AllergenCreateOrConnectWithoutIngredientsInputSchema = z$2.object({
  where: z$2.lazy(() => AllergenWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => AllergenCreateWithoutIngredientsInputSchema), z$2.lazy(() => AllergenUncheckedCreateWithoutIngredientsInputSchema)])
}).strict();
var IngredientUpsertWithoutIngredientAllergenInputSchema = z$2.object({
  update: z$2.union([z$2.lazy(() => IngredientUpdateWithoutIngredientAllergenInputSchema), z$2.lazy(() => IngredientUncheckedUpdateWithoutIngredientAllergenInputSchema)]),
  create: z$2.union([z$2.lazy(() => IngredientCreateWithoutIngredientAllergenInputSchema), z$2.lazy(() => IngredientUncheckedCreateWithoutIngredientAllergenInputSchema)]),
  where: z$2.lazy(() => IngredientWhereInputSchema).optional()
}).strict();
var IngredientUpdateToOneWithWhereWithoutIngredientAllergenInputSchema = z$2.object({
  where: z$2.lazy(() => IngredientWhereInputSchema).optional(),
  data: z$2.union([z$2.lazy(() => IngredientUpdateWithoutIngredientAllergenInputSchema), z$2.lazy(() => IngredientUncheckedUpdateWithoutIngredientAllergenInputSchema)])
}).strict();
var IngredientUpdateWithoutIngredientAllergenInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  category: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipeIngredients: z$2.lazy(() => RecipeIngredientUpdateManyWithoutIngredientNestedInputSchema).optional(),
  inventoryItems: z$2.lazy(() => InventoryItemUpdateManyWithoutIngredientNestedInputSchema).optional(),
  orderItems: z$2.lazy(() => OrderItemUpdateManyWithoutIngredientNestedInputSchema).optional(),
  vendors: z$2.lazy(() => VendorUpdateManyWithoutIngredientsNestedInputSchema).optional(),
  WasteRecord: z$2.lazy(() => WasteRecordUpdateManyWithoutIngredienteNestedInputSchema).optional(),
  SupplierPriceHistory: z$2.lazy(() => SupplierPriceHistoryUpdateManyWithoutIngredientNestedInputSchema).optional(),
  DietaryRestriction: z$2.lazy(() => DietaryRestrictionUpdateOneWithoutIngredientsNestedInputSchema).optional()
}).strict();
var IngredientUncheckedUpdateWithoutIngredientAllergenInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  category: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  dietaryRestrictionId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  recipeIngredients: z$2.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  inventoryItems: z$2.lazy(() => InventoryItemUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  orderItems: z$2.lazy(() => OrderItemUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  vendors: z$2.lazy(() => VendorUncheckedUpdateManyWithoutIngredientsNestedInputSchema).optional(),
  WasteRecord: z$2.lazy(() => WasteRecordUncheckedUpdateManyWithoutIngredienteNestedInputSchema).optional(),
  SupplierPriceHistory: z$2.lazy(() => SupplierPriceHistoryUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional()
}).strict();
var AllergenUpsertWithoutIngredientsInputSchema = z$2.object({
  update: z$2.union([z$2.lazy(() => AllergenUpdateWithoutIngredientsInputSchema), z$2.lazy(() => AllergenUncheckedUpdateWithoutIngredientsInputSchema)]),
  create: z$2.union([z$2.lazy(() => AllergenCreateWithoutIngredientsInputSchema), z$2.lazy(() => AllergenUncheckedCreateWithoutIngredientsInputSchema)]),
  where: z$2.lazy(() => AllergenWhereInputSchema).optional()
}).strict();
var AllergenUpdateToOneWithWhereWithoutIngredientsInputSchema = z$2.object({
  where: z$2.lazy(() => AllergenWhereInputSchema).optional(),
  data: z$2.union([z$2.lazy(() => AllergenUpdateWithoutIngredientsInputSchema), z$2.lazy(() => AllergenUncheckedUpdateWithoutIngredientsInputSchema)])
}).strict();
var AllergenUpdateWithoutIngredientsInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable()
}).strict();
var AllergenUncheckedUpdateWithoutIngredientsInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable()
}).strict();
var MenuItemCreateWithoutNutritionalRecommendationInputSchema = z$2.object({
  name: z$2.string(),
  description: z$2.string().optional().nullable(),
  price: z$2.number(),
  foodCost: z$2.number(),
  recipeIds: z$2.union([z$2.lazy(() => MenuItemCreaterecipeIdsInputSchema), z$2.number().int().array()]).optional(),
  recipeServingsAmount: z$2.union([z$2.lazy(() => MenuItemCreaterecipeServingsAmountInputSchema), z$2.number().array()]).optional(),
  recipeServingsCost: z$2.union([z$2.lazy(() => MenuItemCreaterecipeServingsCostInputSchema), z$2.number().array()]).optional(),
  allergens: z$2.union([z$2.lazy(() => MenuItemCreateallergensInputSchema), z$2.string().array()]).optional(),
  nutritionalInfoId: z$2.number().int().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  nutritionalInfo: z$2.lazy(() => NutritionalInfoCreateNestedOneWithoutMenuItemInputSchema).optional(),
  menu: z$2.lazy(() => MenuCreateNestedOneWithoutMenuItemsInputSchema),
  recipes: z$2.lazy(() => RecipeCreateNestedManyWithoutMenuItemsInputSchema).optional(),
  menuItemRecipe: z$2.lazy(() => MenuItemRecipeCreateNestedManyWithoutMenuItemInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsCreateNestedManyWithoutMenuItemInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemCreateNestedManyWithoutMenuItemInputSchema).optional(),
  category: z$2.lazy(() => MenuCategoryCreateNestedOneWithoutMenuItemsInputSchema).optional(),
  feedback: z$2.lazy(() => CustomerFeedbackCreateNestedManyWithoutMenuItemInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionCreateNestedManyWithoutMenuItemsInputSchema).optional()
}).strict();
var MenuItemUncheckedCreateWithoutNutritionalRecommendationInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  description: z$2.string().optional().nullable(),
  price: z$2.number(),
  foodCost: z$2.number(),
  recipeIds: z$2.union([z$2.lazy(() => MenuItemCreaterecipeIdsInputSchema), z$2.number().int().array()]).optional(),
  recipeServingsAmount: z$2.union([z$2.lazy(() => MenuItemCreaterecipeServingsAmountInputSchema), z$2.number().array()]).optional(),
  recipeServingsCost: z$2.union([z$2.lazy(() => MenuItemCreaterecipeServingsCostInputSchema), z$2.number().array()]).optional(),
  allergens: z$2.union([z$2.lazy(() => MenuItemCreateallergensInputSchema), z$2.string().array()]).optional(),
  nutritionalInfoId: z$2.number().int().optional().nullable(),
  menuId: z$2.number().int(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  categoryId: z$2.number().int().optional().nullable(),
  nutritionalInfo: z$2.lazy(() => NutritionalInfoUncheckedCreateNestedOneWithoutMenuItemInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeUncheckedCreateNestedManyWithoutMenuItemsInputSchema).optional(),
  menuItemRecipe: z$2.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  feedback: z$2.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutMenuItemsInputSchema).optional()
}).strict();
var MenuItemCreateOrConnectWithoutNutritionalRecommendationInputSchema = z$2.object({
  where: z$2.lazy(() => MenuItemWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => MenuItemCreateWithoutNutritionalRecommendationInputSchema), z$2.lazy(() => MenuItemUncheckedCreateWithoutNutritionalRecommendationInputSchema)])
}).strict();
var MenuItemUpsertWithoutNutritionalRecommendationInputSchema = z$2.object({
  update: z$2.union([z$2.lazy(() => MenuItemUpdateWithoutNutritionalRecommendationInputSchema), z$2.lazy(() => MenuItemUncheckedUpdateWithoutNutritionalRecommendationInputSchema)]),
  create: z$2.union([z$2.lazy(() => MenuItemCreateWithoutNutritionalRecommendationInputSchema), z$2.lazy(() => MenuItemUncheckedCreateWithoutNutritionalRecommendationInputSchema)]),
  where: z$2.lazy(() => MenuItemWhereInputSchema).optional()
}).strict();
var MenuItemUpdateToOneWithWhereWithoutNutritionalRecommendationInputSchema = z$2.object({
  where: z$2.lazy(() => MenuItemWhereInputSchema).optional(),
  data: z$2.union([z$2.lazy(() => MenuItemUpdateWithoutNutritionalRecommendationInputSchema), z$2.lazy(() => MenuItemUncheckedUpdateWithoutNutritionalRecommendationInputSchema)])
}).strict();
var MenuItemUpdateWithoutNutritionalRecommendationInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipeIds: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeIdsInputSchema), z$2.number().int().array()]).optional(),
  recipeServingsAmount: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema), z$2.number().array()]).optional(),
  recipeServingsCost: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema), z$2.number().array()]).optional(),
  allergens: z$2.union([z$2.lazy(() => MenuItemUpdateallergensInputSchema), z$2.string().array()]).optional(),
  nutritionalInfoId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  nutritionalInfo: z$2.lazy(() => NutritionalInfoUpdateOneWithoutMenuItemNestedInputSchema).optional(),
  menu: z$2.lazy(() => MenuUpdateOneRequiredWithoutMenuItemsNestedInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeUpdateManyWithoutMenuItemsNestedInputSchema).optional(),
  menuItemRecipe: z$2.lazy(() => MenuItemRecipeUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  category: z$2.lazy(() => MenuCategoryUpdateOneWithoutMenuItemsNestedInputSchema).optional(),
  feedback: z$2.lazy(() => CustomerFeedbackUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionUpdateManyWithoutMenuItemsNestedInputSchema).optional()
}).strict();
var MenuItemUncheckedUpdateWithoutNutritionalRecommendationInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipeIds: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeIdsInputSchema), z$2.number().int().array()]).optional(),
  recipeServingsAmount: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema), z$2.number().array()]).optional(),
  recipeServingsCost: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema), z$2.number().array()]).optional(),
  allergens: z$2.union([z$2.lazy(() => MenuItemUpdateallergensInputSchema), z$2.string().array()]).optional(),
  nutritionalInfoId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  menuId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  categoryId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  nutritionalInfo: z$2.lazy(() => NutritionalInfoUncheckedUpdateOneWithoutMenuItemNestedInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeUncheckedUpdateManyWithoutMenuItemsNestedInputSchema).optional(),
  menuItemRecipe: z$2.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  feedback: z$2.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutMenuItemsNestedInputSchema).optional()
}).strict();
var RestaurantCreateWithoutOrganizationInputSchema = z$2.object({
  name: z$2.string(),
  imageUrl: z$2.string().optional().nullable(),
  address: z$2.string(),
  city: z$2.string(),
  zipCode: z$2.string(),
  state: z$2.string(),
  owner: z$2.string(),
  foodCost: z$2.number().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  isDeleted: z$2.boolean().optional(),
  deleted: z$2.coerce.date().optional().nullable(),
  users: z$2.lazy(() => UserCreateNestedManyWithoutRestaurantInputSchema).optional(),
  cookbooks: z$2.lazy(() => CookBookCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: z$2.lazy(() => InventoryCreateNestedOneWithoutRestaurantInputSchema).optional(),
  orders: z$2.lazy(() => OrderCreateNestedManyWithoutRestaurantInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: z$2.lazy(() => MenuCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipment: z$2.lazy(() => EquipmentCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklist: z$2.lazy(() => QualityChecklistCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qustomerFeedback: z$2.lazy(() => CustomerFeedbackCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();
var RestaurantUncheckedCreateWithoutOrganizationInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  imageUrl: z$2.string().optional().nullable(),
  address: z$2.string(),
  city: z$2.string(),
  zipCode: z$2.string(),
  state: z$2.string(),
  owner: z$2.string(),
  foodCost: z$2.number().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  isDeleted: z$2.boolean().optional(),
  deleted: z$2.coerce.date().optional().nullable(),
  users: z$2.lazy(() => UserUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  cookbooks: z$2.lazy(() => CookBookUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: z$2.lazy(() => InventoryUncheckedCreateNestedOneWithoutRestaurantInputSchema).optional(),
  orders: z$2.lazy(() => OrderUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: z$2.lazy(() => MenuUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipment: z$2.lazy(() => EquipmentUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklist: z$2.lazy(() => QualityChecklistUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qustomerFeedback: z$2.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();
var RestaurantCreateOrConnectWithoutOrganizationInputSchema = z$2.object({
  where: z$2.lazy(() => RestaurantWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => RestaurantCreateWithoutOrganizationInputSchema), z$2.lazy(() => RestaurantUncheckedCreateWithoutOrganizationInputSchema)])
}).strict();
var RestaurantCreateManyOrganizationInputEnvelopeSchema = z$2.object({
  data: z$2.union([z$2.lazy(() => RestaurantCreateManyOrganizationInputSchema), z$2.lazy(() => RestaurantCreateManyOrganizationInputSchema).array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var UserCreateWithoutOrganizationInputSchema = z$2.object({
  email: z$2.string(),
  sub: z$2.number().int().optional().nullable(),
  passwordHash: z$2.string(),
  firstName: z$2.string(),
  lastName: z$2.string(),
  profileImage: z$2.string().optional().nullable(),
  verified: z$2.boolean().optional(),
  role: z$2.lazy(() => UserRoleSchema),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  restaurant: z$2.lazy(() => RestaurantCreateNestedOneWithoutUsersInputSchema).optional(),
  shifts: z$2.lazy(() => ShiftCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: z$2.lazy(() => InventoryItemCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: z$2.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: z$2.lazy(() => PasswordResetCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItem: z$2.lazy(() => ProductionPlanItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: z$2.lazy(() => AvailabilityCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraint: z$2.lazy(() => SchedulingConstraintCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedback: z$2.lazy(() => CustomerFeedbackCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: z$2.lazy(() => RecipeVersionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: z$2.lazy(() => RecipeVersionCreateNestedManyWithoutApprovedByInputSchema).optional()
}).strict();
var UserUncheckedCreateWithoutOrganizationInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  email: z$2.string(),
  sub: z$2.number().int().optional().nullable(),
  passwordHash: z$2.string(),
  firstName: z$2.string(),
  lastName: z$2.string(),
  profileImage: z$2.string().optional().nullable(),
  verified: z$2.boolean().optional(),
  role: z$2.lazy(() => UserRoleSchema),
  restaurantId: z$2.number().int().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  shifts: z$2.lazy(() => ShiftUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: z$2.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: z$2.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: z$2.lazy(() => PasswordResetUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItem: z$2.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: z$2.lazy(() => AvailabilityUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraint: z$2.lazy(() => SchedulingConstraintUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteUncheckedCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedback: z$2.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: z$2.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: z$2.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutApprovedByInputSchema).optional()
}).strict();
var UserCreateOrConnectWithoutOrganizationInputSchema = z$2.object({
  where: z$2.lazy(() => UserWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => UserCreateWithoutOrganizationInputSchema), z$2.lazy(() => UserUncheckedCreateWithoutOrganizationInputSchema)])
}).strict();
var UserCreateManyOrganizationInputEnvelopeSchema = z$2.object({
  data: z$2.union([z$2.lazy(() => UserCreateManyOrganizationInputSchema), z$2.lazy(() => UserCreateManyOrganizationInputSchema).array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var RestaurantUpsertWithWhereUniqueWithoutOrganizationInputSchema = z$2.object({
  where: z$2.lazy(() => RestaurantWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => RestaurantUpdateWithoutOrganizationInputSchema), z$2.lazy(() => RestaurantUncheckedUpdateWithoutOrganizationInputSchema)]),
  create: z$2.union([z$2.lazy(() => RestaurantCreateWithoutOrganizationInputSchema), z$2.lazy(() => RestaurantUncheckedCreateWithoutOrganizationInputSchema)])
}).strict();
var RestaurantUpdateWithWhereUniqueWithoutOrganizationInputSchema = z$2.object({
  where: z$2.lazy(() => RestaurantWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => RestaurantUpdateWithoutOrganizationInputSchema), z$2.lazy(() => RestaurantUncheckedUpdateWithoutOrganizationInputSchema)])
}).strict();
var RestaurantUpdateManyWithWhereWithoutOrganizationInputSchema = z$2.object({
  where: z$2.lazy(() => RestaurantScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => RestaurantUpdateManyMutationInputSchema), z$2.lazy(() => RestaurantUncheckedUpdateManyWithoutOrganizationInputSchema)])
}).strict();
var RestaurantScalarWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => RestaurantScalarWhereInputSchema), z$2.lazy(() => RestaurantScalarWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => RestaurantScalarWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => RestaurantScalarWhereInputSchema), z$2.lazy(() => RestaurantScalarWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  name: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  imageUrl: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  address: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  city: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  zipCode: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  state: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  owner: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  organizationId: z$2.union([z$2.lazy(() => IntNullableFilterSchema), z$2.number()]).optional().nullable(),
  foodCost: z$2.union([z$2.lazy(() => FloatNullableFilterSchema), z$2.number()]).optional().nullable(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  isDeleted: z$2.union([z$2.lazy(() => BoolFilterSchema), z$2.boolean()]).optional(),
  deleted: z$2.union([z$2.lazy(() => DateTimeNullableFilterSchema), z$2.coerce.date()]).optional().nullable()
}).strict();
var UserUpsertWithWhereUniqueWithoutOrganizationInputSchema = z$2.object({
  where: z$2.lazy(() => UserWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => UserUpdateWithoutOrganizationInputSchema), z$2.lazy(() => UserUncheckedUpdateWithoutOrganizationInputSchema)]),
  create: z$2.union([z$2.lazy(() => UserCreateWithoutOrganizationInputSchema), z$2.lazy(() => UserUncheckedCreateWithoutOrganizationInputSchema)])
}).strict();
var UserUpdateWithWhereUniqueWithoutOrganizationInputSchema = z$2.object({
  where: z$2.lazy(() => UserWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => UserUpdateWithoutOrganizationInputSchema), z$2.lazy(() => UserUncheckedUpdateWithoutOrganizationInputSchema)])
}).strict();
var UserUpdateManyWithWhereWithoutOrganizationInputSchema = z$2.object({
  where: z$2.lazy(() => UserScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => UserUpdateManyMutationInputSchema), z$2.lazy(() => UserUncheckedUpdateManyWithoutOrganizationInputSchema)])
}).strict();
var UserScalarWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => UserScalarWhereInputSchema), z$2.lazy(() => UserScalarWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => UserScalarWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => UserScalarWhereInputSchema), z$2.lazy(() => UserScalarWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  email: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  sub: z$2.union([z$2.lazy(() => IntNullableFilterSchema), z$2.number()]).optional().nullable(),
  passwordHash: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  firstName: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  lastName: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  profileImage: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  verified: z$2.union([z$2.lazy(() => BoolFilterSchema), z$2.boolean()]).optional(),
  role: z$2.union([z$2.lazy(() => EnumUserRoleFilterSchema), z$2.lazy(() => UserRoleSchema)]).optional(),
  organizationId: z$2.union([z$2.lazy(() => IntNullableFilterSchema), z$2.number()]).optional().nullable(),
  restaurantId: z$2.union([z$2.lazy(() => IntNullableFilterSchema), z$2.number()]).optional().nullable(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional()
}).strict();
var OrganizationCreateWithoutRestaurantsInputSchema = z$2.object({
  name: z$2.string(),
  imageUrl: z$2.string().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  users: z$2.lazy(() => UserCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();
var OrganizationUncheckedCreateWithoutRestaurantsInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  imageUrl: z$2.string().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  users: z$2.lazy(() => UserUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();
var OrganizationCreateOrConnectWithoutRestaurantsInputSchema = z$2.object({
  where: z$2.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => OrganizationCreateWithoutRestaurantsInputSchema), z$2.lazy(() => OrganizationUncheckedCreateWithoutRestaurantsInputSchema)])
}).strict();
var UserCreateWithoutRestaurantInputSchema = z$2.object({
  email: z$2.string(),
  sub: z$2.number().int().optional().nullable(),
  passwordHash: z$2.string(),
  firstName: z$2.string(),
  lastName: z$2.string(),
  profileImage: z$2.string().optional().nullable(),
  verified: z$2.boolean().optional(),
  role: z$2.lazy(() => UserRoleSchema),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  organization: z$2.lazy(() => OrganizationCreateNestedOneWithoutUsersInputSchema).optional(),
  shifts: z$2.lazy(() => ShiftCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: z$2.lazy(() => InventoryItemCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: z$2.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: z$2.lazy(() => PasswordResetCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItem: z$2.lazy(() => ProductionPlanItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: z$2.lazy(() => AvailabilityCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraint: z$2.lazy(() => SchedulingConstraintCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedback: z$2.lazy(() => CustomerFeedbackCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: z$2.lazy(() => RecipeVersionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: z$2.lazy(() => RecipeVersionCreateNestedManyWithoutApprovedByInputSchema).optional()
}).strict();
var UserUncheckedCreateWithoutRestaurantInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  email: z$2.string(),
  sub: z$2.number().int().optional().nullable(),
  passwordHash: z$2.string(),
  firstName: z$2.string(),
  lastName: z$2.string(),
  profileImage: z$2.string().optional().nullable(),
  verified: z$2.boolean().optional(),
  role: z$2.lazy(() => UserRoleSchema),
  organizationId: z$2.number().int().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  shifts: z$2.lazy(() => ShiftUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: z$2.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: z$2.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: z$2.lazy(() => PasswordResetUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItem: z$2.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: z$2.lazy(() => AvailabilityUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraint: z$2.lazy(() => SchedulingConstraintUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteUncheckedCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedback: z$2.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: z$2.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: z$2.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutApprovedByInputSchema).optional()
}).strict();
var UserCreateOrConnectWithoutRestaurantInputSchema = z$2.object({
  where: z$2.lazy(() => UserWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => UserCreateWithoutRestaurantInputSchema), z$2.lazy(() => UserUncheckedCreateWithoutRestaurantInputSchema)])
}).strict();
var UserCreateManyRestaurantInputEnvelopeSchema = z$2.object({
  data: z$2.union([z$2.lazy(() => UserCreateManyRestaurantInputSchema), z$2.lazy(() => UserCreateManyRestaurantInputSchema).array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var CookBookCreateWithoutRestaurantInputSchema = z$2.object({
  name: z$2.string(),
  imageUrl: z$2.string().optional().nullable(),
  category: z$2.string(),
  recipes: z$2.lazy(() => RecipeCreateNestedManyWithoutCookBookInputSchema).optional()
}).strict();
var CookBookUncheckedCreateWithoutRestaurantInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  imageUrl: z$2.string().optional().nullable(),
  category: z$2.string(),
  recipes: z$2.lazy(() => RecipeUncheckedCreateNestedManyWithoutCookBookInputSchema).optional()
}).strict();
var CookBookCreateOrConnectWithoutRestaurantInputSchema = z$2.object({
  where: z$2.lazy(() => CookBookWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => CookBookCreateWithoutRestaurantInputSchema), z$2.lazy(() => CookBookUncheckedCreateWithoutRestaurantInputSchema)])
}).strict();
var CookBookCreateManyRestaurantInputEnvelopeSchema = z$2.object({
  data: z$2.union([z$2.lazy(() => CookBookCreateManyRestaurantInputSchema), z$2.lazy(() => CookBookCreateManyRestaurantInputSchema).array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var InventoryCreateWithoutRestaurantInputSchema = z$2.object({
  items: z$2.lazy(() => InventoryItemCreateNestedManyWithoutInventoryInputSchema).optional()
}).strict();
var InventoryUncheckedCreateWithoutRestaurantInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  items: z$2.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutInventoryInputSchema).optional()
}).strict();
var InventoryCreateOrConnectWithoutRestaurantInputSchema = z$2.object({
  where: z$2.lazy(() => InventoryWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => InventoryCreateWithoutRestaurantInputSchema), z$2.lazy(() => InventoryUncheckedCreateWithoutRestaurantInputSchema)])
}).strict();
var OrderCreateWithoutRestaurantInputSchema = z$2.object({
  status: z$2.lazy(() => OrderStatusSchema),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  vendor: z$2.lazy(() => VendorCreateNestedOneWithoutOrdersInputSchema),
  items: z$2.lazy(() => OrderItemCreateNestedManyWithoutOrderInputSchema).optional()
}).strict();
var OrderUncheckedCreateWithoutRestaurantInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  vendorId: z$2.number().int(),
  status: z$2.lazy(() => OrderStatusSchema),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  items: z$2.lazy(() => OrderItemUncheckedCreateNestedManyWithoutOrderInputSchema).optional()
}).strict();
var OrderCreateOrConnectWithoutRestaurantInputSchema = z$2.object({
  where: z$2.lazy(() => OrderWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => OrderCreateWithoutRestaurantInputSchema), z$2.lazy(() => OrderUncheckedCreateWithoutRestaurantInputSchema)])
}).strict();
var OrderCreateManyRestaurantInputEnvelopeSchema = z$2.object({
  data: z$2.union([z$2.lazy(() => OrderCreateManyRestaurantInputSchema), z$2.lazy(() => OrderCreateManyRestaurantInputSchema).array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var RecipeCreateWithoutRestaurantInputSchema = z$2.object({
  name: z$2.string(),
  imageUrl: z$2.union([z$2.lazy(() => RecipeCreateimageUrlInputSchema), z$2.string().array()]).optional(),
  description: z$2.string().optional().nullable(),
  servings: z$2.number().int(),
  cookTime: z$2.number().int(),
  prepTime: z$2.number().int(),
  frequency: z$2.number().int().optional().nullable(),
  foodCost: z$2.number().optional().nullable(),
  isDeleted: z$2.boolean().optional(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  cookBook: z$2.lazy(() => CookBookCreateNestedOneWithoutRecipesInputSchema),
  ingredients: z$2.lazy(() => RecipeIngredientCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z$2.lazy(() => MenuItemCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: z$2.lazy(() => FoodCostHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: z$2.lazy(() => PrepHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z$2.lazy(() => PrepBoardCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  MenuItemRecipe: z$2.lazy(() => MenuItemRecipeCreateNestedManyWithoutRecipeInputSchema).optional(),
  ProductionPlanItem: z$2.lazy(() => ProductionPlanItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z$2.lazy(() => RecipeTagCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: z$2.lazy(() => RecipeVersionCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipment: z$2.lazy(() => RecipeEquipmentCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionCreateNestedManyWithoutRecipesInputSchema).optional()
}).strict();
var RecipeUncheckedCreateWithoutRestaurantInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  imageUrl: z$2.union([z$2.lazy(() => RecipeCreateimageUrlInputSchema), z$2.string().array()]).optional(),
  description: z$2.string().optional().nullable(),
  servings: z$2.number().int(),
  cookTime: z$2.number().int(),
  prepTime: z$2.number().int(),
  frequency: z$2.number().int().optional().nullable(),
  cookBookId: z$2.number().int(),
  foodCost: z$2.number().optional().nullable(),
  isDeleted: z$2.boolean().optional(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  ingredients: z$2.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z$2.lazy(() => MenuItemUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: z$2.lazy(() => FoodCostHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: z$2.lazy(() => PrepHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z$2.lazy(() => PrepBoardUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  MenuItemRecipe: z$2.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  ProductionPlanItem: z$2.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z$2.lazy(() => RecipeTagUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: z$2.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipment: z$2.lazy(() => RecipeEquipmentUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutRecipesInputSchema).optional()
}).strict();
var RecipeCreateOrConnectWithoutRestaurantInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => RecipeCreateWithoutRestaurantInputSchema), z$2.lazy(() => RecipeUncheckedCreateWithoutRestaurantInputSchema)])
}).strict();
var RecipeCreateManyRestaurantInputEnvelopeSchema = z$2.object({
  data: z$2.union([z$2.lazy(() => RecipeCreateManyRestaurantInputSchema), z$2.lazy(() => RecipeCreateManyRestaurantInputSchema).array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var MenuCreateWithoutRestaurantInputSchema = z$2.object({
  name: z$2.string(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  menuItems: z$2.lazy(() => MenuItemCreateNestedManyWithoutMenuInputSchema).optional(),
  MenuCategory: z$2.lazy(() => MenuCategoryCreateNestedManyWithoutMenuInputSchema).optional()
}).strict();
var MenuUncheckedCreateWithoutRestaurantInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  menuItems: z$2.lazy(() => MenuItemUncheckedCreateNestedManyWithoutMenuInputSchema).optional(),
  MenuCategory: z$2.lazy(() => MenuCategoryUncheckedCreateNestedManyWithoutMenuInputSchema).optional()
}).strict();
var MenuCreateOrConnectWithoutRestaurantInputSchema = z$2.object({
  where: z$2.lazy(() => MenuWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => MenuCreateWithoutRestaurantInputSchema), z$2.lazy(() => MenuUncheckedCreateWithoutRestaurantInputSchema)])
}).strict();
var MenuCreateManyRestaurantInputEnvelopeSchema = z$2.object({
  data: z$2.union([z$2.lazy(() => MenuCreateManyRestaurantInputSchema), z$2.lazy(() => MenuCreateManyRestaurantInputSchema).array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var SalesTransactionsCreateWithoutRestaurantInputSchema = z$2.object({
  posTransactionID: z$2.string().optional().nullable(),
  price: z$2.number(),
  total: z$2.number(),
  transactionDate: z$2.coerce.date(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  menuItem: z$2.lazy(() => MenuItemCreateNestedOneWithoutSalesTransactionsInputSchema)
}).strict();
var SalesTransactionsUncheckedCreateWithoutRestaurantInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  posTransactionID: z$2.string().optional().nullable(),
  menuItemId: z$2.number().int(),
  price: z$2.number(),
  total: z$2.number(),
  transactionDate: z$2.coerce.date(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var SalesTransactionsCreateOrConnectWithoutRestaurantInputSchema = z$2.object({
  where: z$2.lazy(() => SalesTransactionsWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => SalesTransactionsCreateWithoutRestaurantInputSchema), z$2.lazy(() => SalesTransactionsUncheckedCreateWithoutRestaurantInputSchema)])
}).strict();
var SalesTransactionsCreateManyRestaurantInputEnvelopeSchema = z$2.object({
  data: z$2.union([z$2.lazy(() => SalesTransactionsCreateManyRestaurantInputSchema), z$2.lazy(() => SalesTransactionsCreateManyRestaurantInputSchema).array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var LeftoverItemCreateWithoutRestaurantInputSchema = z$2.object({
  date: z$2.coerce.date(),
  quantity: z$2.number().int(),
  reason: z$2.string(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  menuItem: z$2.lazy(() => MenuItemCreateNestedOneWithoutLeftoverItemInputSchema),
  recordedBy: z$2.lazy(() => UserCreateNestedOneWithoutLeftoverItemInputSchema)
}).strict();
var LeftoverItemUncheckedCreateWithoutRestaurantInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  date: z$2.coerce.date(),
  menuItemId: z$2.number().int(),
  quantity: z$2.number().int(),
  reason: z$2.string(),
  recordedById: z$2.number().int(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var LeftoverItemCreateOrConnectWithoutRestaurantInputSchema = z$2.object({
  where: z$2.lazy(() => LeftoverItemWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => LeftoverItemCreateWithoutRestaurantInputSchema), z$2.lazy(() => LeftoverItemUncheckedCreateWithoutRestaurantInputSchema)])
}).strict();
var LeftoverItemCreateManyRestaurantInputEnvelopeSchema = z$2.object({
  data: z$2.union([z$2.lazy(() => LeftoverItemCreateManyRestaurantInputSchema), z$2.lazy(() => LeftoverItemCreateManyRestaurantInputSchema).array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var WasteRecordCreateWithoutRestaurantInputSchema = z$2.object({
  date: z$2.coerce.date(),
  quantity: z$2.number(),
  unit: z$2.string(),
  reason: z$2.string(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  ingrediente: z$2.lazy(() => IngredientCreateNestedOneWithoutWasteRecordInputSchema),
  recordedBy: z$2.lazy(() => UserCreateNestedOneWithoutWasteRecordInputSchema)
}).strict();
var WasteRecordUncheckedCreateWithoutRestaurantInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  date: z$2.coerce.date(),
  ingredientId: z$2.number().int(),
  quantity: z$2.number(),
  unit: z$2.string(),
  reason: z$2.string(),
  recordedById: z$2.number().int(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var WasteRecordCreateOrConnectWithoutRestaurantInputSchema = z$2.object({
  where: z$2.lazy(() => WasteRecordWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => WasteRecordCreateWithoutRestaurantInputSchema), z$2.lazy(() => WasteRecordUncheckedCreateWithoutRestaurantInputSchema)])
}).strict();
var WasteRecordCreateManyRestaurantInputEnvelopeSchema = z$2.object({
  data: z$2.union([z$2.lazy(() => WasteRecordCreateManyRestaurantInputSchema), z$2.lazy(() => WasteRecordCreateManyRestaurantInputSchema).array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var ProductionPlanCreateWithoutRestaurantInputSchema = z$2.object({
  date: z$2.coerce.date(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  createdBy: z$2.lazy(() => UserCreateNestedOneWithoutProductionPlanInputSchema),
  items: z$2.lazy(() => ProductionPlanItemCreateNestedManyWithoutProductionPlanInputSchema).optional()
}).strict();
var ProductionPlanUncheckedCreateWithoutRestaurantInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  date: z$2.coerce.date(),
  createdById: z$2.number().int(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  items: z$2.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutProductionPlanInputSchema).optional()
}).strict();
var ProductionPlanCreateOrConnectWithoutRestaurantInputSchema = z$2.object({
  where: z$2.lazy(() => ProductionPlanWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => ProductionPlanCreateWithoutRestaurantInputSchema), z$2.lazy(() => ProductionPlanUncheckedCreateWithoutRestaurantInputSchema)])
}).strict();
var ProductionPlanCreateManyRestaurantInputEnvelopeSchema = z$2.object({
  data: z$2.union([z$2.lazy(() => ProductionPlanCreateManyRestaurantInputSchema), z$2.lazy(() => ProductionPlanCreateManyRestaurantInputSchema).array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var EquipmentCreateWithoutRestaurantInputSchema = z$2.object({
  name: z$2.string(),
  description: z$2.string().optional().nullable(),
  model: z$2.string().optional().nullable(),
  serialNumber: z$2.string().optional().nullable(),
  purchaseDate: z$2.coerce.date().optional().nullable(),
  lastMaintenance: z$2.coerce.date().optional().nullable(),
  nextMaintenance: z$2.coerce.date().optional().nullable(),
  status: z$2.lazy(() => EquipmentStatusSchema).optional(),
  location: z$2.string().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  recipes: z$2.lazy(() => RecipeEquipmentCreateNestedManyWithoutEquipmentInputSchema).optional(),
  maintenanceLogs: z$2.lazy(() => MaintenanceLogCreateNestedManyWithoutEquipmentInputSchema).optional()
}).strict();
var EquipmentUncheckedCreateWithoutRestaurantInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  description: z$2.string().optional().nullable(),
  model: z$2.string().optional().nullable(),
  serialNumber: z$2.string().optional().nullable(),
  purchaseDate: z$2.coerce.date().optional().nullable(),
  lastMaintenance: z$2.coerce.date().optional().nullable(),
  nextMaintenance: z$2.coerce.date().optional().nullable(),
  status: z$2.lazy(() => EquipmentStatusSchema).optional(),
  location: z$2.string().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  recipes: z$2.lazy(() => RecipeEquipmentUncheckedCreateNestedManyWithoutEquipmentInputSchema).optional(),
  maintenanceLogs: z$2.lazy(() => MaintenanceLogUncheckedCreateNestedManyWithoutEquipmentInputSchema).optional()
}).strict();
var EquipmentCreateOrConnectWithoutRestaurantInputSchema = z$2.object({
  where: z$2.lazy(() => EquipmentWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => EquipmentCreateWithoutRestaurantInputSchema), z$2.lazy(() => EquipmentUncheckedCreateWithoutRestaurantInputSchema)])
}).strict();
var EquipmentCreateManyRestaurantInputEnvelopeSchema = z$2.object({
  data: z$2.union([z$2.lazy(() => EquipmentCreateManyRestaurantInputSchema), z$2.lazy(() => EquipmentCreateManyRestaurantInputSchema).array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var QualityChecklistCreateWithoutRestaurantInputSchema = z$2.object({
  name: z$2.string(),
  description: z$2.string().optional().nullable(),
  frequency: z$2.lazy(() => ChecklistFrequencySchema).optional(),
  isActive: z$2.boolean().optional(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  items: z$2.lazy(() => ChecklistItemCreateNestedManyWithoutChecklistInputSchema).optional(),
  completions: z$2.lazy(() => ChecklistCompleteCreateNestedManyWithoutChecklistInputSchema).optional()
}).strict();
var QualityChecklistUncheckedCreateWithoutRestaurantInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  description: z$2.string().optional().nullable(),
  frequency: z$2.lazy(() => ChecklistFrequencySchema).optional(),
  isActive: z$2.boolean().optional(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  items: z$2.lazy(() => ChecklistItemUncheckedCreateNestedManyWithoutChecklistInputSchema).optional(),
  completions: z$2.lazy(() => ChecklistCompleteUncheckedCreateNestedManyWithoutChecklistInputSchema).optional()
}).strict();
var QualityChecklistCreateOrConnectWithoutRestaurantInputSchema = z$2.object({
  where: z$2.lazy(() => QualityChecklistWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => QualityChecklistCreateWithoutRestaurantInputSchema), z$2.lazy(() => QualityChecklistUncheckedCreateWithoutRestaurantInputSchema)])
}).strict();
var QualityChecklistCreateManyRestaurantInputEnvelopeSchema = z$2.object({
  data: z$2.union([z$2.lazy(() => QualityChecklistCreateManyRestaurantInputSchema), z$2.lazy(() => QualityChecklistCreateManyRestaurantInputSchema).array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var CustomerFeedbackCreateWithoutRestaurantInputSchema = z$2.object({
  rating: z$2.number().int(),
  comment: z$2.string().optional().nullable(),
  source: z$2.lazy(() => FeedbackSourceSchema),
  tags: z$2.union([z$2.lazy(() => CustomerFeedbackCreatetagsInputSchema), z$2.string().array()]).optional(),
  status: z$2.lazy(() => FeedbackStatusSchema).optional(),
  responseText: z$2.string().optional().nullable(),
  respondedAt: z$2.coerce.date().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  menuItem: z$2.lazy(() => MenuItemCreateNestedOneWithoutFeedbackInputSchema).optional(),
  respondedBy: z$2.lazy(() => UserCreateNestedOneWithoutCustomerFeedbackInputSchema).optional()
}).strict();
var CustomerFeedbackUncheckedCreateWithoutRestaurantInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  menuItemId: z$2.number().int().optional().nullable(),
  rating: z$2.number().int(),
  comment: z$2.string().optional().nullable(),
  source: z$2.lazy(() => FeedbackSourceSchema),
  tags: z$2.union([z$2.lazy(() => CustomerFeedbackCreatetagsInputSchema), z$2.string().array()]).optional(),
  status: z$2.lazy(() => FeedbackStatusSchema).optional(),
  responseText: z$2.string().optional().nullable(),
  respondedAt: z$2.coerce.date().optional().nullable(),
  respondedById: z$2.number().int().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var CustomerFeedbackCreateOrConnectWithoutRestaurantInputSchema = z$2.object({
  where: z$2.lazy(() => CustomerFeedbackWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => CustomerFeedbackCreateWithoutRestaurantInputSchema), z$2.lazy(() => CustomerFeedbackUncheckedCreateWithoutRestaurantInputSchema)])
}).strict();
var CustomerFeedbackCreateManyRestaurantInputEnvelopeSchema = z$2.object({
  data: z$2.union([z$2.lazy(() => CustomerFeedbackCreateManyRestaurantInputSchema), z$2.lazy(() => CustomerFeedbackCreateManyRestaurantInputSchema).array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var OrganizationUpsertWithoutRestaurantsInputSchema = z$2.object({
  update: z$2.union([z$2.lazy(() => OrganizationUpdateWithoutRestaurantsInputSchema), z$2.lazy(() => OrganizationUncheckedUpdateWithoutRestaurantsInputSchema)]),
  create: z$2.union([z$2.lazy(() => OrganizationCreateWithoutRestaurantsInputSchema), z$2.lazy(() => OrganizationUncheckedCreateWithoutRestaurantsInputSchema)]),
  where: z$2.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();
var OrganizationUpdateToOneWithWhereWithoutRestaurantsInputSchema = z$2.object({
  where: z$2.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z$2.union([z$2.lazy(() => OrganizationUpdateWithoutRestaurantsInputSchema), z$2.lazy(() => OrganizationUncheckedUpdateWithoutRestaurantsInputSchema)])
}).strict();
var OrganizationUpdateWithoutRestaurantsInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  users: z$2.lazy(() => UserUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();
var OrganizationUncheckedUpdateWithoutRestaurantsInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  users: z$2.lazy(() => UserUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();
var UserUpsertWithWhereUniqueWithoutRestaurantInputSchema = z$2.object({
  where: z$2.lazy(() => UserWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => UserUpdateWithoutRestaurantInputSchema), z$2.lazy(() => UserUncheckedUpdateWithoutRestaurantInputSchema)]),
  create: z$2.union([z$2.lazy(() => UserCreateWithoutRestaurantInputSchema), z$2.lazy(() => UserUncheckedCreateWithoutRestaurantInputSchema)])
}).strict();
var UserUpdateWithWhereUniqueWithoutRestaurantInputSchema = z$2.object({
  where: z$2.lazy(() => UserWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => UserUpdateWithoutRestaurantInputSchema), z$2.lazy(() => UserUncheckedUpdateWithoutRestaurantInputSchema)])
}).strict();
var UserUpdateManyWithWhereWithoutRestaurantInputSchema = z$2.object({
  where: z$2.lazy(() => UserScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => UserUpdateManyMutationInputSchema), z$2.lazy(() => UserUncheckedUpdateManyWithoutRestaurantInputSchema)])
}).strict();
var CookBookUpsertWithWhereUniqueWithoutRestaurantInputSchema = z$2.object({
  where: z$2.lazy(() => CookBookWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => CookBookUpdateWithoutRestaurantInputSchema), z$2.lazy(() => CookBookUncheckedUpdateWithoutRestaurantInputSchema)]),
  create: z$2.union([z$2.lazy(() => CookBookCreateWithoutRestaurantInputSchema), z$2.lazy(() => CookBookUncheckedCreateWithoutRestaurantInputSchema)])
}).strict();
var CookBookUpdateWithWhereUniqueWithoutRestaurantInputSchema = z$2.object({
  where: z$2.lazy(() => CookBookWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => CookBookUpdateWithoutRestaurantInputSchema), z$2.lazy(() => CookBookUncheckedUpdateWithoutRestaurantInputSchema)])
}).strict();
var CookBookUpdateManyWithWhereWithoutRestaurantInputSchema = z$2.object({
  where: z$2.lazy(() => CookBookScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => CookBookUpdateManyMutationInputSchema), z$2.lazy(() => CookBookUncheckedUpdateManyWithoutRestaurantInputSchema)])
}).strict();
var CookBookScalarWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => CookBookScalarWhereInputSchema), z$2.lazy(() => CookBookScalarWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => CookBookScalarWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => CookBookScalarWhereInputSchema), z$2.lazy(() => CookBookScalarWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  name: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  imageUrl: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  category: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  restaurantId: z$2.union([z$2.lazy(() => IntNullableFilterSchema), z$2.number()]).optional().nullable()
}).strict();
var InventoryUpsertWithoutRestaurantInputSchema = z$2.object({
  update: z$2.union([z$2.lazy(() => InventoryUpdateWithoutRestaurantInputSchema), z$2.lazy(() => InventoryUncheckedUpdateWithoutRestaurantInputSchema)]),
  create: z$2.union([z$2.lazy(() => InventoryCreateWithoutRestaurantInputSchema), z$2.lazy(() => InventoryUncheckedCreateWithoutRestaurantInputSchema)]),
  where: z$2.lazy(() => InventoryWhereInputSchema).optional()
}).strict();
var InventoryUpdateToOneWithWhereWithoutRestaurantInputSchema = z$2.object({
  where: z$2.lazy(() => InventoryWhereInputSchema).optional(),
  data: z$2.union([z$2.lazy(() => InventoryUpdateWithoutRestaurantInputSchema), z$2.lazy(() => InventoryUncheckedUpdateWithoutRestaurantInputSchema)])
}).strict();
var InventoryUpdateWithoutRestaurantInputSchema = z$2.object({
  items: z$2.lazy(() => InventoryItemUpdateManyWithoutInventoryNestedInputSchema).optional()
}).strict();
var InventoryUncheckedUpdateWithoutRestaurantInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  items: z$2.lazy(() => InventoryItemUncheckedUpdateManyWithoutInventoryNestedInputSchema).optional()
}).strict();
var OrderUpsertWithWhereUniqueWithoutRestaurantInputSchema = z$2.object({
  where: z$2.lazy(() => OrderWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => OrderUpdateWithoutRestaurantInputSchema), z$2.lazy(() => OrderUncheckedUpdateWithoutRestaurantInputSchema)]),
  create: z$2.union([z$2.lazy(() => OrderCreateWithoutRestaurantInputSchema), z$2.lazy(() => OrderUncheckedCreateWithoutRestaurantInputSchema)])
}).strict();
var OrderUpdateWithWhereUniqueWithoutRestaurantInputSchema = z$2.object({
  where: z$2.lazy(() => OrderWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => OrderUpdateWithoutRestaurantInputSchema), z$2.lazy(() => OrderUncheckedUpdateWithoutRestaurantInputSchema)])
}).strict();
var OrderUpdateManyWithWhereWithoutRestaurantInputSchema = z$2.object({
  where: z$2.lazy(() => OrderScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => OrderUpdateManyMutationInputSchema), z$2.lazy(() => OrderUncheckedUpdateManyWithoutRestaurantInputSchema)])
}).strict();
var OrderScalarWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => OrderScalarWhereInputSchema), z$2.lazy(() => OrderScalarWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => OrderScalarWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => OrderScalarWhereInputSchema), z$2.lazy(() => OrderScalarWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  restaurantId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  vendorId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  status: z$2.union([z$2.lazy(() => EnumOrderStatusFilterSchema), z$2.lazy(() => OrderStatusSchema)]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional()
}).strict();
var RecipeUpsertWithWhereUniqueWithoutRestaurantInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => RecipeUpdateWithoutRestaurantInputSchema), z$2.lazy(() => RecipeUncheckedUpdateWithoutRestaurantInputSchema)]),
  create: z$2.union([z$2.lazy(() => RecipeCreateWithoutRestaurantInputSchema), z$2.lazy(() => RecipeUncheckedCreateWithoutRestaurantInputSchema)])
}).strict();
var RecipeUpdateWithWhereUniqueWithoutRestaurantInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => RecipeUpdateWithoutRestaurantInputSchema), z$2.lazy(() => RecipeUncheckedUpdateWithoutRestaurantInputSchema)])
}).strict();
var RecipeUpdateManyWithWhereWithoutRestaurantInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => RecipeUpdateManyMutationInputSchema), z$2.lazy(() => RecipeUncheckedUpdateManyWithoutRestaurantInputSchema)])
}).strict();
var MenuUpsertWithWhereUniqueWithoutRestaurantInputSchema = z$2.object({
  where: z$2.lazy(() => MenuWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => MenuUpdateWithoutRestaurantInputSchema), z$2.lazy(() => MenuUncheckedUpdateWithoutRestaurantInputSchema)]),
  create: z$2.union([z$2.lazy(() => MenuCreateWithoutRestaurantInputSchema), z$2.lazy(() => MenuUncheckedCreateWithoutRestaurantInputSchema)])
}).strict();
var MenuUpdateWithWhereUniqueWithoutRestaurantInputSchema = z$2.object({
  where: z$2.lazy(() => MenuWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => MenuUpdateWithoutRestaurantInputSchema), z$2.lazy(() => MenuUncheckedUpdateWithoutRestaurantInputSchema)])
}).strict();
var MenuUpdateManyWithWhereWithoutRestaurantInputSchema = z$2.object({
  where: z$2.lazy(() => MenuScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => MenuUpdateManyMutationInputSchema), z$2.lazy(() => MenuUncheckedUpdateManyWithoutRestaurantInputSchema)])
}).strict();
var MenuScalarWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => MenuScalarWhereInputSchema), z$2.lazy(() => MenuScalarWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => MenuScalarWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => MenuScalarWhereInputSchema), z$2.lazy(() => MenuScalarWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  name: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  restaurantId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional()
}).strict();
var SalesTransactionsUpsertWithWhereUniqueWithoutRestaurantInputSchema = z$2.object({
  where: z$2.lazy(() => SalesTransactionsWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => SalesTransactionsUpdateWithoutRestaurantInputSchema), z$2.lazy(() => SalesTransactionsUncheckedUpdateWithoutRestaurantInputSchema)]),
  create: z$2.union([z$2.lazy(() => SalesTransactionsCreateWithoutRestaurantInputSchema), z$2.lazy(() => SalesTransactionsUncheckedCreateWithoutRestaurantInputSchema)])
}).strict();
var SalesTransactionsUpdateWithWhereUniqueWithoutRestaurantInputSchema = z$2.object({
  where: z$2.lazy(() => SalesTransactionsWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => SalesTransactionsUpdateWithoutRestaurantInputSchema), z$2.lazy(() => SalesTransactionsUncheckedUpdateWithoutRestaurantInputSchema)])
}).strict();
var SalesTransactionsUpdateManyWithWhereWithoutRestaurantInputSchema = z$2.object({
  where: z$2.lazy(() => SalesTransactionsScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => SalesTransactionsUpdateManyMutationInputSchema), z$2.lazy(() => SalesTransactionsUncheckedUpdateManyWithoutRestaurantInputSchema)])
}).strict();
var SalesTransactionsScalarWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => SalesTransactionsScalarWhereInputSchema), z$2.lazy(() => SalesTransactionsScalarWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => SalesTransactionsScalarWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => SalesTransactionsScalarWhereInputSchema), z$2.lazy(() => SalesTransactionsScalarWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  posTransactionID: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  restaurantId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  menuItemId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  price: z$2.union([z$2.lazy(() => FloatFilterSchema), z$2.number()]).optional(),
  total: z$2.union([z$2.lazy(() => FloatFilterSchema), z$2.number()]).optional(),
  transactionDate: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional()
}).strict();
var LeftoverItemUpsertWithWhereUniqueWithoutRestaurantInputSchema = z$2.object({
  where: z$2.lazy(() => LeftoverItemWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => LeftoverItemUpdateWithoutRestaurantInputSchema), z$2.lazy(() => LeftoverItemUncheckedUpdateWithoutRestaurantInputSchema)]),
  create: z$2.union([z$2.lazy(() => LeftoverItemCreateWithoutRestaurantInputSchema), z$2.lazy(() => LeftoverItemUncheckedCreateWithoutRestaurantInputSchema)])
}).strict();
var LeftoverItemUpdateWithWhereUniqueWithoutRestaurantInputSchema = z$2.object({
  where: z$2.lazy(() => LeftoverItemWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => LeftoverItemUpdateWithoutRestaurantInputSchema), z$2.lazy(() => LeftoverItemUncheckedUpdateWithoutRestaurantInputSchema)])
}).strict();
var LeftoverItemUpdateManyWithWhereWithoutRestaurantInputSchema = z$2.object({
  where: z$2.lazy(() => LeftoverItemScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => LeftoverItemUpdateManyMutationInputSchema), z$2.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRestaurantInputSchema)])
}).strict();
var LeftoverItemScalarWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => LeftoverItemScalarWhereInputSchema), z$2.lazy(() => LeftoverItemScalarWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => LeftoverItemScalarWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => LeftoverItemScalarWhereInputSchema), z$2.lazy(() => LeftoverItemScalarWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  restaurantId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  date: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  menuItemId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  quantity: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  reason: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  recordedById: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional()
}).strict();
var WasteRecordUpsertWithWhereUniqueWithoutRestaurantInputSchema = z$2.object({
  where: z$2.lazy(() => WasteRecordWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => WasteRecordUpdateWithoutRestaurantInputSchema), z$2.lazy(() => WasteRecordUncheckedUpdateWithoutRestaurantInputSchema)]),
  create: z$2.union([z$2.lazy(() => WasteRecordCreateWithoutRestaurantInputSchema), z$2.lazy(() => WasteRecordUncheckedCreateWithoutRestaurantInputSchema)])
}).strict();
var WasteRecordUpdateWithWhereUniqueWithoutRestaurantInputSchema = z$2.object({
  where: z$2.lazy(() => WasteRecordWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => WasteRecordUpdateWithoutRestaurantInputSchema), z$2.lazy(() => WasteRecordUncheckedUpdateWithoutRestaurantInputSchema)])
}).strict();
var WasteRecordUpdateManyWithWhereWithoutRestaurantInputSchema = z$2.object({
  where: z$2.lazy(() => WasteRecordScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => WasteRecordUpdateManyMutationInputSchema), z$2.lazy(() => WasteRecordUncheckedUpdateManyWithoutRestaurantInputSchema)])
}).strict();
var WasteRecordScalarWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => WasteRecordScalarWhereInputSchema), z$2.lazy(() => WasteRecordScalarWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => WasteRecordScalarWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => WasteRecordScalarWhereInputSchema), z$2.lazy(() => WasteRecordScalarWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  restaurantId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  date: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  ingredientId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  quantity: z$2.union([z$2.lazy(() => FloatFilterSchema), z$2.number()]).optional(),
  unit: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  reason: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  recordedById: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional()
}).strict();
var ProductionPlanUpsertWithWhereUniqueWithoutRestaurantInputSchema = z$2.object({
  where: z$2.lazy(() => ProductionPlanWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => ProductionPlanUpdateWithoutRestaurantInputSchema), z$2.lazy(() => ProductionPlanUncheckedUpdateWithoutRestaurantInputSchema)]),
  create: z$2.union([z$2.lazy(() => ProductionPlanCreateWithoutRestaurantInputSchema), z$2.lazy(() => ProductionPlanUncheckedCreateWithoutRestaurantInputSchema)])
}).strict();
var ProductionPlanUpdateWithWhereUniqueWithoutRestaurantInputSchema = z$2.object({
  where: z$2.lazy(() => ProductionPlanWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => ProductionPlanUpdateWithoutRestaurantInputSchema), z$2.lazy(() => ProductionPlanUncheckedUpdateWithoutRestaurantInputSchema)])
}).strict();
var ProductionPlanUpdateManyWithWhereWithoutRestaurantInputSchema = z$2.object({
  where: z$2.lazy(() => ProductionPlanScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => ProductionPlanUpdateManyMutationInputSchema), z$2.lazy(() => ProductionPlanUncheckedUpdateManyWithoutRestaurantInputSchema)])
}).strict();
var ProductionPlanScalarWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => ProductionPlanScalarWhereInputSchema), z$2.lazy(() => ProductionPlanScalarWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => ProductionPlanScalarWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => ProductionPlanScalarWhereInputSchema), z$2.lazy(() => ProductionPlanScalarWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  restaurantId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  date: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  createdById: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional()
}).strict();
var EquipmentUpsertWithWhereUniqueWithoutRestaurantInputSchema = z$2.object({
  where: z$2.lazy(() => EquipmentWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => EquipmentUpdateWithoutRestaurantInputSchema), z$2.lazy(() => EquipmentUncheckedUpdateWithoutRestaurantInputSchema)]),
  create: z$2.union([z$2.lazy(() => EquipmentCreateWithoutRestaurantInputSchema), z$2.lazy(() => EquipmentUncheckedCreateWithoutRestaurantInputSchema)])
}).strict();
var EquipmentUpdateWithWhereUniqueWithoutRestaurantInputSchema = z$2.object({
  where: z$2.lazy(() => EquipmentWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => EquipmentUpdateWithoutRestaurantInputSchema), z$2.lazy(() => EquipmentUncheckedUpdateWithoutRestaurantInputSchema)])
}).strict();
var EquipmentUpdateManyWithWhereWithoutRestaurantInputSchema = z$2.object({
  where: z$2.lazy(() => EquipmentScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => EquipmentUpdateManyMutationInputSchema), z$2.lazy(() => EquipmentUncheckedUpdateManyWithoutRestaurantInputSchema)])
}).strict();
var EquipmentScalarWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => EquipmentScalarWhereInputSchema), z$2.lazy(() => EquipmentScalarWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => EquipmentScalarWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => EquipmentScalarWhereInputSchema), z$2.lazy(() => EquipmentScalarWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  name: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  description: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  model: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  serialNumber: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  purchaseDate: z$2.union([z$2.lazy(() => DateTimeNullableFilterSchema), z$2.coerce.date()]).optional().nullable(),
  lastMaintenance: z$2.union([z$2.lazy(() => DateTimeNullableFilterSchema), z$2.coerce.date()]).optional().nullable(),
  nextMaintenance: z$2.union([z$2.lazy(() => DateTimeNullableFilterSchema), z$2.coerce.date()]).optional().nullable(),
  status: z$2.union([z$2.lazy(() => EnumEquipmentStatusFilterSchema), z$2.lazy(() => EquipmentStatusSchema)]).optional(),
  location: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  restaurantId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional()
}).strict();
var QualityChecklistUpsertWithWhereUniqueWithoutRestaurantInputSchema = z$2.object({
  where: z$2.lazy(() => QualityChecklistWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => QualityChecklistUpdateWithoutRestaurantInputSchema), z$2.lazy(() => QualityChecklistUncheckedUpdateWithoutRestaurantInputSchema)]),
  create: z$2.union([z$2.lazy(() => QualityChecklistCreateWithoutRestaurantInputSchema), z$2.lazy(() => QualityChecklistUncheckedCreateWithoutRestaurantInputSchema)])
}).strict();
var QualityChecklistUpdateWithWhereUniqueWithoutRestaurantInputSchema = z$2.object({
  where: z$2.lazy(() => QualityChecklistWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => QualityChecklistUpdateWithoutRestaurantInputSchema), z$2.lazy(() => QualityChecklistUncheckedUpdateWithoutRestaurantInputSchema)])
}).strict();
var QualityChecklistUpdateManyWithWhereWithoutRestaurantInputSchema = z$2.object({
  where: z$2.lazy(() => QualityChecklistScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => QualityChecklistUpdateManyMutationInputSchema), z$2.lazy(() => QualityChecklistUncheckedUpdateManyWithoutRestaurantInputSchema)])
}).strict();
var QualityChecklistScalarWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => QualityChecklistScalarWhereInputSchema), z$2.lazy(() => QualityChecklistScalarWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => QualityChecklistScalarWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => QualityChecklistScalarWhereInputSchema), z$2.lazy(() => QualityChecklistScalarWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  name: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  description: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  restaurantId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  frequency: z$2.union([z$2.lazy(() => EnumChecklistFrequencyFilterSchema), z$2.lazy(() => ChecklistFrequencySchema)]).optional(),
  isActive: z$2.union([z$2.lazy(() => BoolFilterSchema), z$2.boolean()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional()
}).strict();
var CustomerFeedbackUpsertWithWhereUniqueWithoutRestaurantInputSchema = z$2.object({
  where: z$2.lazy(() => CustomerFeedbackWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => CustomerFeedbackUpdateWithoutRestaurantInputSchema), z$2.lazy(() => CustomerFeedbackUncheckedUpdateWithoutRestaurantInputSchema)]),
  create: z$2.union([z$2.lazy(() => CustomerFeedbackCreateWithoutRestaurantInputSchema), z$2.lazy(() => CustomerFeedbackUncheckedCreateWithoutRestaurantInputSchema)])
}).strict();
var CustomerFeedbackUpdateWithWhereUniqueWithoutRestaurantInputSchema = z$2.object({
  where: z$2.lazy(() => CustomerFeedbackWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => CustomerFeedbackUpdateWithoutRestaurantInputSchema), z$2.lazy(() => CustomerFeedbackUncheckedUpdateWithoutRestaurantInputSchema)])
}).strict();
var CustomerFeedbackUpdateManyWithWhereWithoutRestaurantInputSchema = z$2.object({
  where: z$2.lazy(() => CustomerFeedbackScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => CustomerFeedbackUpdateManyMutationInputSchema), z$2.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRestaurantInputSchema)])
}).strict();
var CustomerFeedbackScalarWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => CustomerFeedbackScalarWhereInputSchema), z$2.lazy(() => CustomerFeedbackScalarWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => CustomerFeedbackScalarWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => CustomerFeedbackScalarWhereInputSchema), z$2.lazy(() => CustomerFeedbackScalarWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  restaurantId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  menuItemId: z$2.union([z$2.lazy(() => IntNullableFilterSchema), z$2.number()]).optional().nullable(),
  rating: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  comment: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  source: z$2.union([z$2.lazy(() => EnumFeedbackSourceFilterSchema), z$2.lazy(() => FeedbackSourceSchema)]).optional(),
  tags: z$2.lazy(() => StringNullableListFilterSchema).optional(),
  status: z$2.union([z$2.lazy(() => EnumFeedbackStatusFilterSchema), z$2.lazy(() => FeedbackStatusSchema)]).optional(),
  responseText: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  respondedAt: z$2.union([z$2.lazy(() => DateTimeNullableFilterSchema), z$2.coerce.date()]).optional().nullable(),
  respondedById: z$2.union([z$2.lazy(() => IntNullableFilterSchema), z$2.number()]).optional().nullable(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional()
}).strict();
var OrganizationCreateWithoutUsersInputSchema = z$2.object({
  name: z$2.string(),
  imageUrl: z$2.string().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  restaurants: z$2.lazy(() => RestaurantCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();
var OrganizationUncheckedCreateWithoutUsersInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  imageUrl: z$2.string().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  restaurants: z$2.lazy(() => RestaurantUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();
var OrganizationCreateOrConnectWithoutUsersInputSchema = z$2.object({
  where: z$2.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => OrganizationCreateWithoutUsersInputSchema), z$2.lazy(() => OrganizationUncheckedCreateWithoutUsersInputSchema)])
}).strict();
var RestaurantCreateWithoutUsersInputSchema = z$2.object({
  name: z$2.string(),
  imageUrl: z$2.string().optional().nullable(),
  address: z$2.string(),
  city: z$2.string(),
  zipCode: z$2.string(),
  state: z$2.string(),
  owner: z$2.string(),
  foodCost: z$2.number().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  isDeleted: z$2.boolean().optional(),
  deleted: z$2.coerce.date().optional().nullable(),
  organization: z$2.lazy(() => OrganizationCreateNestedOneWithoutRestaurantsInputSchema).optional(),
  cookbooks: z$2.lazy(() => CookBookCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: z$2.lazy(() => InventoryCreateNestedOneWithoutRestaurantInputSchema).optional(),
  orders: z$2.lazy(() => OrderCreateNestedManyWithoutRestaurantInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: z$2.lazy(() => MenuCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipment: z$2.lazy(() => EquipmentCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklist: z$2.lazy(() => QualityChecklistCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qustomerFeedback: z$2.lazy(() => CustomerFeedbackCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();
var RestaurantUncheckedCreateWithoutUsersInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  imageUrl: z$2.string().optional().nullable(),
  address: z$2.string(),
  city: z$2.string(),
  zipCode: z$2.string(),
  state: z$2.string(),
  owner: z$2.string(),
  organizationId: z$2.number().int().optional().nullable(),
  foodCost: z$2.number().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  isDeleted: z$2.boolean().optional(),
  deleted: z$2.coerce.date().optional().nullable(),
  cookbooks: z$2.lazy(() => CookBookUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: z$2.lazy(() => InventoryUncheckedCreateNestedOneWithoutRestaurantInputSchema).optional(),
  orders: z$2.lazy(() => OrderUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: z$2.lazy(() => MenuUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipment: z$2.lazy(() => EquipmentUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklist: z$2.lazy(() => QualityChecklistUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qustomerFeedback: z$2.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();
var RestaurantCreateOrConnectWithoutUsersInputSchema = z$2.object({
  where: z$2.lazy(() => RestaurantWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => RestaurantCreateWithoutUsersInputSchema), z$2.lazy(() => RestaurantUncheckedCreateWithoutUsersInputSchema)])
}).strict();
var ShiftCreateWithoutUserInputSchema = z$2.object({
  startTime: z$2.coerce.date(),
  endTime: z$2.coerce.date(),
  status: z$2.lazy(() => ShiftStatusSchema),
  ShiftTask: z$2.lazy(() => ShiftTaskCreateNestedManyWithoutShiftInputSchema).optional()
}).strict();
var ShiftUncheckedCreateWithoutUserInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  startTime: z$2.coerce.date(),
  endTime: z$2.coerce.date(),
  status: z$2.lazy(() => ShiftStatusSchema),
  ShiftTask: z$2.lazy(() => ShiftTaskUncheckedCreateNestedManyWithoutShiftInputSchema).optional()
}).strict();
var ShiftCreateOrConnectWithoutUserInputSchema = z$2.object({
  where: z$2.lazy(() => ShiftWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => ShiftCreateWithoutUserInputSchema), z$2.lazy(() => ShiftUncheckedCreateWithoutUserInputSchema)])
}).strict();
var ShiftCreateManyUserInputEnvelopeSchema = z$2.object({
  data: z$2.union([z$2.lazy(() => ShiftCreateManyUserInputSchema), z$2.lazy(() => ShiftCreateManyUserInputSchema).array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var PrepItemCreateWithoutAssignedToInputSchema = z$2.object({
  quantity: z$2.number().int(),
  status: z$2.lazy(() => PrepStatusSchema),
  prepBoard: z$2.lazy(() => PrepBoardCreateNestedOneWithoutPrepItemsInputSchema),
  recipe: z$2.lazy(() => RecipeCreateNestedOneWithoutPrepItemsInputSchema)
}).strict();
var PrepItemUncheckedCreateWithoutAssignedToInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  prepBoardId: z$2.number().int(),
  recipeId: z$2.number().int(),
  quantity: z$2.number().int(),
  status: z$2.lazy(() => PrepStatusSchema)
}).strict();
var PrepItemCreateOrConnectWithoutAssignedToInputSchema = z$2.object({
  where: z$2.lazy(() => PrepItemWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => PrepItemCreateWithoutAssignedToInputSchema), z$2.lazy(() => PrepItemUncheckedCreateWithoutAssignedToInputSchema)])
}).strict();
var PrepItemCreateManyAssignedToInputEnvelopeSchema = z$2.object({
  data: z$2.union([z$2.lazy(() => PrepItemCreateManyAssignedToInputSchema), z$2.lazy(() => PrepItemCreateManyAssignedToInputSchema).array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var InventoryItemCreateWithoutLastUpdatedByInputSchema = z$2.object({
  quantity: z$2.number(),
  unit: z$2.string(),
  minQuantity: z$2.number(),
  restockThreshold: z$2.number(),
  lastUpdated: z$2.coerce.date().optional(),
  inventory: z$2.lazy(() => InventoryCreateNestedOneWithoutItemsInputSchema),
  ingredient: z$2.lazy(() => IngredientCreateNestedOneWithoutInventoryItemsInputSchema),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalCreateNestedManyWithoutInventoryItemInputSchema).optional()
}).strict();
var InventoryItemUncheckedCreateWithoutLastUpdatedByInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  inventoryId: z$2.number().int(),
  ingredientId: z$2.number().int(),
  quantity: z$2.number(),
  unit: z$2.string(),
  minQuantity: z$2.number(),
  restockThreshold: z$2.number(),
  lastUpdated: z$2.coerce.date().optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutInventoryItemInputSchema).optional()
}).strict();
var InventoryItemCreateOrConnectWithoutLastUpdatedByInputSchema = z$2.object({
  where: z$2.lazy(() => InventoryItemWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => InventoryItemCreateWithoutLastUpdatedByInputSchema), z$2.lazy(() => InventoryItemUncheckedCreateWithoutLastUpdatedByInputSchema)])
}).strict();
var InventoryItemCreateManyLastUpdatedByInputEnvelopeSchema = z$2.object({
  data: z$2.union([z$2.lazy(() => InventoryItemCreateManyLastUpdatedByInputSchema), z$2.lazy(() => InventoryItemCreateManyLastUpdatedByInputSchema).array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var SessionCreateWithoutUserInputSchema = z$2.object({
  id: z$2.string().optional(),
  code: z$2.string(),
  token: z$2.string(),
  expiresAt: z$2.coerce.date(),
  createdAt: z$2.coerce.date().optional()
}).strict();
var SessionUncheckedCreateWithoutUserInputSchema = z$2.object({
  id: z$2.string().optional(),
  code: z$2.string(),
  token: z$2.string(),
  expiresAt: z$2.coerce.date(),
  createdAt: z$2.coerce.date().optional()
}).strict();
var SessionCreateOrConnectWithoutUserInputSchema = z$2.object({
  where: z$2.lazy(() => SessionWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => SessionCreateWithoutUserInputSchema), z$2.lazy(() => SessionUncheckedCreateWithoutUserInputSchema)])
}).strict();
var SessionCreateManyUserInputEnvelopeSchema = z$2.object({
  data: z$2.union([z$2.lazy(() => SessionCreateManyUserInputSchema), z$2.lazy(() => SessionCreateManyUserInputSchema).array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var PasswordResetCreateWithoutUserInputSchema = z$2.object({
  token: z$2.string(),
  expiresAt: z$2.coerce.date(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var PasswordResetUncheckedCreateWithoutUserInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  token: z$2.string(),
  expiresAt: z$2.coerce.date(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var PasswordResetCreateOrConnectWithoutUserInputSchema = z$2.object({
  where: z$2.lazy(() => PasswordResetWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => PasswordResetCreateWithoutUserInputSchema), z$2.lazy(() => PasswordResetUncheckedCreateWithoutUserInputSchema)])
}).strict();
var PasswordResetCreateManyUserInputEnvelopeSchema = z$2.object({
  data: z$2.union([z$2.lazy(() => PasswordResetCreateManyUserInputSchema), z$2.lazy(() => PasswordResetCreateManyUserInputSchema).array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var LeftoverItemCreateWithoutRecordedByInputSchema = z$2.object({
  date: z$2.coerce.date(),
  quantity: z$2.number().int(),
  reason: z$2.string(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  restaurant: z$2.lazy(() => RestaurantCreateNestedOneWithoutLeftoverItemInputSchema),
  menuItem: z$2.lazy(() => MenuItemCreateNestedOneWithoutLeftoverItemInputSchema)
}).strict();
var LeftoverItemUncheckedCreateWithoutRecordedByInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  restaurantId: z$2.number().int(),
  date: z$2.coerce.date(),
  menuItemId: z$2.number().int(),
  quantity: z$2.number().int(),
  reason: z$2.string(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var LeftoverItemCreateOrConnectWithoutRecordedByInputSchema = z$2.object({
  where: z$2.lazy(() => LeftoverItemWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => LeftoverItemCreateWithoutRecordedByInputSchema), z$2.lazy(() => LeftoverItemUncheckedCreateWithoutRecordedByInputSchema)])
}).strict();
var LeftoverItemCreateManyRecordedByInputEnvelopeSchema = z$2.object({
  data: z$2.union([z$2.lazy(() => LeftoverItemCreateManyRecordedByInputSchema), z$2.lazy(() => LeftoverItemCreateManyRecordedByInputSchema).array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var WasteRecordCreateWithoutRecordedByInputSchema = z$2.object({
  date: z$2.coerce.date(),
  quantity: z$2.number(),
  unit: z$2.string(),
  reason: z$2.string(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  restaurant: z$2.lazy(() => RestaurantCreateNestedOneWithoutWasteRecordInputSchema),
  ingrediente: z$2.lazy(() => IngredientCreateNestedOneWithoutWasteRecordInputSchema)
}).strict();
var WasteRecordUncheckedCreateWithoutRecordedByInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  restaurantId: z$2.number().int(),
  date: z$2.coerce.date(),
  ingredientId: z$2.number().int(),
  quantity: z$2.number(),
  unit: z$2.string(),
  reason: z$2.string(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var WasteRecordCreateOrConnectWithoutRecordedByInputSchema = z$2.object({
  where: z$2.lazy(() => WasteRecordWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => WasteRecordCreateWithoutRecordedByInputSchema), z$2.lazy(() => WasteRecordUncheckedCreateWithoutRecordedByInputSchema)])
}).strict();
var WasteRecordCreateManyRecordedByInputEnvelopeSchema = z$2.object({
  data: z$2.union([z$2.lazy(() => WasteRecordCreateManyRecordedByInputSchema), z$2.lazy(() => WasteRecordCreateManyRecordedByInputSchema).array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var ProductionPlanCreateWithoutCreatedByInputSchema = z$2.object({
  date: z$2.coerce.date(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  restaurant: z$2.lazy(() => RestaurantCreateNestedOneWithoutProductionPlanInputSchema),
  items: z$2.lazy(() => ProductionPlanItemCreateNestedManyWithoutProductionPlanInputSchema).optional()
}).strict();
var ProductionPlanUncheckedCreateWithoutCreatedByInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  restaurantId: z$2.number().int(),
  date: z$2.coerce.date(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  items: z$2.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutProductionPlanInputSchema).optional()
}).strict();
var ProductionPlanCreateOrConnectWithoutCreatedByInputSchema = z$2.object({
  where: z$2.lazy(() => ProductionPlanWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => ProductionPlanCreateWithoutCreatedByInputSchema), z$2.lazy(() => ProductionPlanUncheckedCreateWithoutCreatedByInputSchema)])
}).strict();
var ProductionPlanCreateManyCreatedByInputEnvelopeSchema = z$2.object({
  data: z$2.union([z$2.lazy(() => ProductionPlanCreateManyCreatedByInputSchema), z$2.lazy(() => ProductionPlanCreateManyCreatedByInputSchema).array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var ProductionPlanItemCreateWithoutAssignedToInputSchema = z$2.object({
  quantity: z$2.number().int(),
  unit: z$2.string(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  productionPlan: z$2.lazy(() => ProductionPlanCreateNestedOneWithoutItemsInputSchema),
  recipe: z$2.lazy(() => RecipeCreateNestedOneWithoutProductionPlanItemInputSchema)
}).strict();
var ProductionPlanItemUncheckedCreateWithoutAssignedToInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  productionPlanId: z$2.number().int(),
  recipeId: z$2.number().int(),
  quantity: z$2.number().int(),
  unit: z$2.string(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var ProductionPlanItemCreateOrConnectWithoutAssignedToInputSchema = z$2.object({
  where: z$2.lazy(() => ProductionPlanItemWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => ProductionPlanItemCreateWithoutAssignedToInputSchema), z$2.lazy(() => ProductionPlanItemUncheckedCreateWithoutAssignedToInputSchema)])
}).strict();
var ProductionPlanItemCreateManyAssignedToInputEnvelopeSchema = z$2.object({
  data: z$2.union([z$2.lazy(() => ProductionPlanItemCreateManyAssignedToInputSchema), z$2.lazy(() => ProductionPlanItemCreateManyAssignedToInputSchema).array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var AvailabilityCreateWithoutUserInputSchema = z$2.object({
  dayOfWeek: z$2.lazy(() => DayOfWeekSchema),
  startTime: z$2.coerce.date(),
  endTime: z$2.coerce.date(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var AvailabilityUncheckedCreateWithoutUserInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  dayOfWeek: z$2.lazy(() => DayOfWeekSchema),
  startTime: z$2.coerce.date(),
  endTime: z$2.coerce.date(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var AvailabilityCreateOrConnectWithoutUserInputSchema = z$2.object({
  where: z$2.lazy(() => AvailabilityWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => AvailabilityCreateWithoutUserInputSchema), z$2.lazy(() => AvailabilityUncheckedCreateWithoutUserInputSchema)])
}).strict();
var AvailabilityCreateManyUserInputEnvelopeSchema = z$2.object({
  data: z$2.union([z$2.lazy(() => AvailabilityCreateManyUserInputSchema), z$2.lazy(() => AvailabilityCreateManyUserInputSchema).array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var SchedulingConstraintCreateWithoutUserInputSchema = z$2.object({
  date: z$2.coerce.date(),
  constraintsType: z$2.lazy(() => ConstraintTypeSchema),
  startTime: z$2.coerce.date(),
  endTime: z$2.coerce.date(),
  notes: z$2.string().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var SchedulingConstraintUncheckedCreateWithoutUserInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  date: z$2.coerce.date(),
  constraintsType: z$2.lazy(() => ConstraintTypeSchema),
  startTime: z$2.coerce.date(),
  endTime: z$2.coerce.date(),
  notes: z$2.string().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var SchedulingConstraintCreateOrConnectWithoutUserInputSchema = z$2.object({
  where: z$2.lazy(() => SchedulingConstraintWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => SchedulingConstraintCreateWithoutUserInputSchema), z$2.lazy(() => SchedulingConstraintUncheckedCreateWithoutUserInputSchema)])
}).strict();
var SchedulingConstraintCreateManyUserInputEnvelopeSchema = z$2.object({
  data: z$2.union([z$2.lazy(() => SchedulingConstraintCreateManyUserInputSchema), z$2.lazy(() => SchedulingConstraintCreateManyUserInputSchema).array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var InventoryWithdrawalCreateWithoutCreatedByInputSchema = z$2.object({
  dateTime: z$2.coerce.date(),
  quantity: z$2.number(),
  unit: z$2.string(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  inventoryItem: z$2.lazy(() => InventoryItemCreateNestedOneWithoutInventoryWithdrawalInputSchema),
  recipe: z$2.lazy(() => RecipeCreateNestedOneWithoutInventoryWithdrawalInputSchema).optional()
}).strict();
var InventoryWithdrawalUncheckedCreateWithoutCreatedByInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  inventoryItemId: z$2.number().int(),
  dateTime: z$2.coerce.date(),
  quantity: z$2.number(),
  unit: z$2.string(),
  recipeId: z$2.number().int().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var InventoryWithdrawalCreateOrConnectWithoutCreatedByInputSchema = z$2.object({
  where: z$2.lazy(() => InventoryWithdrawalWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => InventoryWithdrawalCreateWithoutCreatedByInputSchema), z$2.lazy(() => InventoryWithdrawalUncheckedCreateWithoutCreatedByInputSchema)])
}).strict();
var InventoryWithdrawalCreateManyCreatedByInputEnvelopeSchema = z$2.object({
  data: z$2.union([z$2.lazy(() => InventoryWithdrawalCreateManyCreatedByInputSchema), z$2.lazy(() => InventoryWithdrawalCreateManyCreatedByInputSchema).array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var ChecklistCompleteCreateWithoutCompletedByInputSchema = z$2.object({
  date: z$2.coerce.date(),
  notes: z$2.string().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  checklist: z$2.lazy(() => QualityChecklistCreateNestedOneWithoutCompletionsInputSchema),
  items: z$2.lazy(() => ChecklistItemCompleteCreateNestedManyWithoutChecklistCompleteInputSchema).optional()
}).strict();
var ChecklistCompleteUncheckedCreateWithoutCompletedByInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  checklistId: z$2.number().int(),
  date: z$2.coerce.date(),
  notes: z$2.string().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  items: z$2.lazy(() => ChecklistItemCompleteUncheckedCreateNestedManyWithoutChecklistCompleteInputSchema).optional()
}).strict();
var ChecklistCompleteCreateOrConnectWithoutCompletedByInputSchema = z$2.object({
  where: z$2.lazy(() => ChecklistCompleteWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => ChecklistCompleteCreateWithoutCompletedByInputSchema), z$2.lazy(() => ChecklistCompleteUncheckedCreateWithoutCompletedByInputSchema)])
}).strict();
var ChecklistCompleteCreateManyCompletedByInputEnvelopeSchema = z$2.object({
  data: z$2.union([z$2.lazy(() => ChecklistCompleteCreateManyCompletedByInputSchema), z$2.lazy(() => ChecklistCompleteCreateManyCompletedByInputSchema).array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var CustomerFeedbackCreateWithoutRespondedByInputSchema = z$2.object({
  rating: z$2.number().int(),
  comment: z$2.string().optional().nullable(),
  source: z$2.lazy(() => FeedbackSourceSchema),
  tags: z$2.union([z$2.lazy(() => CustomerFeedbackCreatetagsInputSchema), z$2.string().array()]).optional(),
  status: z$2.lazy(() => FeedbackStatusSchema).optional(),
  responseText: z$2.string().optional().nullable(),
  respondedAt: z$2.coerce.date().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  restaurant: z$2.lazy(() => RestaurantCreateNestedOneWithoutQustomerFeedbackInputSchema),
  menuItem: z$2.lazy(() => MenuItemCreateNestedOneWithoutFeedbackInputSchema).optional()
}).strict();
var CustomerFeedbackUncheckedCreateWithoutRespondedByInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  restaurantId: z$2.number().int(),
  menuItemId: z$2.number().int().optional().nullable(),
  rating: z$2.number().int(),
  comment: z$2.string().optional().nullable(),
  source: z$2.lazy(() => FeedbackSourceSchema),
  tags: z$2.union([z$2.lazy(() => CustomerFeedbackCreatetagsInputSchema), z$2.string().array()]).optional(),
  status: z$2.lazy(() => FeedbackStatusSchema).optional(),
  responseText: z$2.string().optional().nullable(),
  respondedAt: z$2.coerce.date().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var CustomerFeedbackCreateOrConnectWithoutRespondedByInputSchema = z$2.object({
  where: z$2.lazy(() => CustomerFeedbackWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => CustomerFeedbackCreateWithoutRespondedByInputSchema), z$2.lazy(() => CustomerFeedbackUncheckedCreateWithoutRespondedByInputSchema)])
}).strict();
var CustomerFeedbackCreateManyRespondedByInputEnvelopeSchema = z$2.object({
  data: z$2.union([z$2.lazy(() => CustomerFeedbackCreateManyRespondedByInputSchema), z$2.lazy(() => CustomerFeedbackCreateManyRespondedByInputSchema).array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var RecipeVersionCreateWithoutCreatedByInputSchema = z$2.object({
  versionNumber: z$2.number().int(),
  description: z$2.string().optional().nullable(),
  changes: z$2.string().optional().nullable(),
  isActive: z$2.boolean().optional(),
  approvedAt: z$2.coerce.date().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  recipe: z$2.lazy(() => RecipeCreateNestedOneWithoutVersionsInputSchema),
  ingredients: z$2.lazy(() => RecipeIngredientCreateNestedManyWithoutRecipeVersionInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionCreateNestedManyWithoutRecipeVersionInputSchema).optional(),
  approvedBy: z$2.lazy(() => UserCreateNestedOneWithoutRecipeVersionsApprovedInputSchema).optional()
}).strict();
var RecipeVersionUncheckedCreateWithoutCreatedByInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  recipeId: z$2.number().int(),
  versionNumber: z$2.number().int(),
  description: z$2.string().optional().nullable(),
  changes: z$2.string().optional().nullable(),
  isActive: z$2.boolean().optional(),
  approvedById: z$2.number().int().optional().nullable(),
  approvedAt: z$2.coerce.date().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  ingredients: z$2.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutRecipeVersionInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionUncheckedCreateNestedManyWithoutRecipeVersionInputSchema).optional()
}).strict();
var RecipeVersionCreateOrConnectWithoutCreatedByInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeVersionWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => RecipeVersionCreateWithoutCreatedByInputSchema), z$2.lazy(() => RecipeVersionUncheckedCreateWithoutCreatedByInputSchema)])
}).strict();
var RecipeVersionCreateManyCreatedByInputEnvelopeSchema = z$2.object({
  data: z$2.union([z$2.lazy(() => RecipeVersionCreateManyCreatedByInputSchema), z$2.lazy(() => RecipeVersionCreateManyCreatedByInputSchema).array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var RecipeVersionCreateWithoutApprovedByInputSchema = z$2.object({
  versionNumber: z$2.number().int(),
  description: z$2.string().optional().nullable(),
  changes: z$2.string().optional().nullable(),
  isActive: z$2.boolean().optional(),
  approvedAt: z$2.coerce.date().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  recipe: z$2.lazy(() => RecipeCreateNestedOneWithoutVersionsInputSchema),
  ingredients: z$2.lazy(() => RecipeIngredientCreateNestedManyWithoutRecipeVersionInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionCreateNestedManyWithoutRecipeVersionInputSchema).optional(),
  createdBy: z$2.lazy(() => UserCreateNestedOneWithoutRecipeVersionsCreatedInputSchema)
}).strict();
var RecipeVersionUncheckedCreateWithoutApprovedByInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  recipeId: z$2.number().int(),
  versionNumber: z$2.number().int(),
  description: z$2.string().optional().nullable(),
  changes: z$2.string().optional().nullable(),
  isActive: z$2.boolean().optional(),
  createdById: z$2.number().int(),
  approvedAt: z$2.coerce.date().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  ingredients: z$2.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutRecipeVersionInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionUncheckedCreateNestedManyWithoutRecipeVersionInputSchema).optional()
}).strict();
var RecipeVersionCreateOrConnectWithoutApprovedByInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeVersionWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => RecipeVersionCreateWithoutApprovedByInputSchema), z$2.lazy(() => RecipeVersionUncheckedCreateWithoutApprovedByInputSchema)])
}).strict();
var RecipeVersionCreateManyApprovedByInputEnvelopeSchema = z$2.object({
  data: z$2.union([z$2.lazy(() => RecipeVersionCreateManyApprovedByInputSchema), z$2.lazy(() => RecipeVersionCreateManyApprovedByInputSchema).array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var OrganizationUpsertWithoutUsersInputSchema = z$2.object({
  update: z$2.union([z$2.lazy(() => OrganizationUpdateWithoutUsersInputSchema), z$2.lazy(() => OrganizationUncheckedUpdateWithoutUsersInputSchema)]),
  create: z$2.union([z$2.lazy(() => OrganizationCreateWithoutUsersInputSchema), z$2.lazy(() => OrganizationUncheckedCreateWithoutUsersInputSchema)]),
  where: z$2.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();
var OrganizationUpdateToOneWithWhereWithoutUsersInputSchema = z$2.object({
  where: z$2.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z$2.union([z$2.lazy(() => OrganizationUpdateWithoutUsersInputSchema), z$2.lazy(() => OrganizationUncheckedUpdateWithoutUsersInputSchema)])
}).strict();
var OrganizationUpdateWithoutUsersInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurants: z$2.lazy(() => RestaurantUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();
var OrganizationUncheckedUpdateWithoutUsersInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurants: z$2.lazy(() => RestaurantUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();
var RestaurantUpsertWithoutUsersInputSchema = z$2.object({
  update: z$2.union([z$2.lazy(() => RestaurantUpdateWithoutUsersInputSchema), z$2.lazy(() => RestaurantUncheckedUpdateWithoutUsersInputSchema)]),
  create: z$2.union([z$2.lazy(() => RestaurantCreateWithoutUsersInputSchema), z$2.lazy(() => RestaurantUncheckedCreateWithoutUsersInputSchema)]),
  where: z$2.lazy(() => RestaurantWhereInputSchema).optional()
}).strict();
var RestaurantUpdateToOneWithWhereWithoutUsersInputSchema = z$2.object({
  where: z$2.lazy(() => RestaurantWhereInputSchema).optional(),
  data: z$2.union([z$2.lazy(() => RestaurantUpdateWithoutUsersInputSchema), z$2.lazy(() => RestaurantUncheckedUpdateWithoutUsersInputSchema)])
}).strict();
var RestaurantUpdateWithoutUsersInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  address: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  city: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  zipCode: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  state: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  owner: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  isDeleted: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  deleted: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  organization: z$2.lazy(() => OrganizationUpdateOneWithoutRestaurantsNestedInputSchema).optional(),
  cookbooks: z$2.lazy(() => CookBookUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: z$2.lazy(() => InventoryUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  orders: z$2.lazy(() => OrderUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: z$2.lazy(() => MenuUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipment: z$2.lazy(() => EquipmentUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklist: z$2.lazy(() => QualityChecklistUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qustomerFeedback: z$2.lazy(() => CustomerFeedbackUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();
var RestaurantUncheckedUpdateWithoutUsersInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  address: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  city: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  zipCode: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  state: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  owner: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  organizationId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  isDeleted: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  deleted: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  cookbooks: z$2.lazy(() => CookBookUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: z$2.lazy(() => InventoryUncheckedUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  orders: z$2.lazy(() => OrderUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: z$2.lazy(() => MenuUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipment: z$2.lazy(() => EquipmentUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklist: z$2.lazy(() => QualityChecklistUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qustomerFeedback: z$2.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();
var ShiftUpsertWithWhereUniqueWithoutUserInputSchema = z$2.object({
  where: z$2.lazy(() => ShiftWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => ShiftUpdateWithoutUserInputSchema), z$2.lazy(() => ShiftUncheckedUpdateWithoutUserInputSchema)]),
  create: z$2.union([z$2.lazy(() => ShiftCreateWithoutUserInputSchema), z$2.lazy(() => ShiftUncheckedCreateWithoutUserInputSchema)])
}).strict();
var ShiftUpdateWithWhereUniqueWithoutUserInputSchema = z$2.object({
  where: z$2.lazy(() => ShiftWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => ShiftUpdateWithoutUserInputSchema), z$2.lazy(() => ShiftUncheckedUpdateWithoutUserInputSchema)])
}).strict();
var ShiftUpdateManyWithWhereWithoutUserInputSchema = z$2.object({
  where: z$2.lazy(() => ShiftScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => ShiftUpdateManyMutationInputSchema), z$2.lazy(() => ShiftUncheckedUpdateManyWithoutUserInputSchema)])
}).strict();
var ShiftScalarWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => ShiftScalarWhereInputSchema), z$2.lazy(() => ShiftScalarWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => ShiftScalarWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => ShiftScalarWhereInputSchema), z$2.lazy(() => ShiftScalarWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  userId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  startTime: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  endTime: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  status: z$2.union([z$2.lazy(() => EnumShiftStatusFilterSchema), z$2.lazy(() => ShiftStatusSchema)]).optional()
}).strict();
var PrepItemUpsertWithWhereUniqueWithoutAssignedToInputSchema = z$2.object({
  where: z$2.lazy(() => PrepItemWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => PrepItemUpdateWithoutAssignedToInputSchema), z$2.lazy(() => PrepItemUncheckedUpdateWithoutAssignedToInputSchema)]),
  create: z$2.union([z$2.lazy(() => PrepItemCreateWithoutAssignedToInputSchema), z$2.lazy(() => PrepItemUncheckedCreateWithoutAssignedToInputSchema)])
}).strict();
var PrepItemUpdateWithWhereUniqueWithoutAssignedToInputSchema = z$2.object({
  where: z$2.lazy(() => PrepItemWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => PrepItemUpdateWithoutAssignedToInputSchema), z$2.lazy(() => PrepItemUncheckedUpdateWithoutAssignedToInputSchema)])
}).strict();
var PrepItemUpdateManyWithWhereWithoutAssignedToInputSchema = z$2.object({
  where: z$2.lazy(() => PrepItemScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => PrepItemUpdateManyMutationInputSchema), z$2.lazy(() => PrepItemUncheckedUpdateManyWithoutAssignedToInputSchema)])
}).strict();
var PrepItemScalarWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => PrepItemScalarWhereInputSchema), z$2.lazy(() => PrepItemScalarWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => PrepItemScalarWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => PrepItemScalarWhereInputSchema), z$2.lazy(() => PrepItemScalarWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  prepBoardId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  recipeId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  quantity: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  status: z$2.union([z$2.lazy(() => EnumPrepStatusFilterSchema), z$2.lazy(() => PrepStatusSchema)]).optional(),
  assignedToId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional()
}).strict();
var InventoryItemUpsertWithWhereUniqueWithoutLastUpdatedByInputSchema = z$2.object({
  where: z$2.lazy(() => InventoryItemWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => InventoryItemUpdateWithoutLastUpdatedByInputSchema), z$2.lazy(() => InventoryItemUncheckedUpdateWithoutLastUpdatedByInputSchema)]),
  create: z$2.union([z$2.lazy(() => InventoryItemCreateWithoutLastUpdatedByInputSchema), z$2.lazy(() => InventoryItemUncheckedCreateWithoutLastUpdatedByInputSchema)])
}).strict();
var InventoryItemUpdateWithWhereUniqueWithoutLastUpdatedByInputSchema = z$2.object({
  where: z$2.lazy(() => InventoryItemWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => InventoryItemUpdateWithoutLastUpdatedByInputSchema), z$2.lazy(() => InventoryItemUncheckedUpdateWithoutLastUpdatedByInputSchema)])
}).strict();
var InventoryItemUpdateManyWithWhereWithoutLastUpdatedByInputSchema = z$2.object({
  where: z$2.lazy(() => InventoryItemScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => InventoryItemUpdateManyMutationInputSchema), z$2.lazy(() => InventoryItemUncheckedUpdateManyWithoutLastUpdatedByInputSchema)])
}).strict();
var InventoryItemScalarWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => InventoryItemScalarWhereInputSchema), z$2.lazy(() => InventoryItemScalarWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => InventoryItemScalarWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => InventoryItemScalarWhereInputSchema), z$2.lazy(() => InventoryItemScalarWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  inventoryId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  ingredientId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  quantity: z$2.union([z$2.lazy(() => FloatFilterSchema), z$2.number()]).optional(),
  unit: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  minQuantity: z$2.union([z$2.lazy(() => FloatFilterSchema), z$2.number()]).optional(),
  restockThreshold: z$2.union([z$2.lazy(() => FloatFilterSchema), z$2.number()]).optional(),
  lastUpdatedById: z$2.union([z$2.lazy(() => IntNullableFilterSchema), z$2.number()]).optional().nullable(),
  lastUpdated: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional()
}).strict();
var SessionUpsertWithWhereUniqueWithoutUserInputSchema = z$2.object({
  where: z$2.lazy(() => SessionWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => SessionUpdateWithoutUserInputSchema), z$2.lazy(() => SessionUncheckedUpdateWithoutUserInputSchema)]),
  create: z$2.union([z$2.lazy(() => SessionCreateWithoutUserInputSchema), z$2.lazy(() => SessionUncheckedCreateWithoutUserInputSchema)])
}).strict();
var SessionUpdateWithWhereUniqueWithoutUserInputSchema = z$2.object({
  where: z$2.lazy(() => SessionWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => SessionUpdateWithoutUserInputSchema), z$2.lazy(() => SessionUncheckedUpdateWithoutUserInputSchema)])
}).strict();
var SessionUpdateManyWithWhereWithoutUserInputSchema = z$2.object({
  where: z$2.lazy(() => SessionScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => SessionUpdateManyMutationInputSchema), z$2.lazy(() => SessionUncheckedUpdateManyWithoutUserInputSchema)])
}).strict();
var SessionScalarWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => SessionScalarWhereInputSchema), z$2.lazy(() => SessionScalarWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => SessionScalarWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => SessionScalarWhereInputSchema), z$2.lazy(() => SessionScalarWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  userId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  code: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  token: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  expiresAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional()
}).strict();
var PasswordResetUpsertWithWhereUniqueWithoutUserInputSchema = z$2.object({
  where: z$2.lazy(() => PasswordResetWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => PasswordResetUpdateWithoutUserInputSchema), z$2.lazy(() => PasswordResetUncheckedUpdateWithoutUserInputSchema)]),
  create: z$2.union([z$2.lazy(() => PasswordResetCreateWithoutUserInputSchema), z$2.lazy(() => PasswordResetUncheckedCreateWithoutUserInputSchema)])
}).strict();
var PasswordResetUpdateWithWhereUniqueWithoutUserInputSchema = z$2.object({
  where: z$2.lazy(() => PasswordResetWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => PasswordResetUpdateWithoutUserInputSchema), z$2.lazy(() => PasswordResetUncheckedUpdateWithoutUserInputSchema)])
}).strict();
var PasswordResetUpdateManyWithWhereWithoutUserInputSchema = z$2.object({
  where: z$2.lazy(() => PasswordResetScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => PasswordResetUpdateManyMutationInputSchema), z$2.lazy(() => PasswordResetUncheckedUpdateManyWithoutUserInputSchema)])
}).strict();
var PasswordResetScalarWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => PasswordResetScalarWhereInputSchema), z$2.lazy(() => PasswordResetScalarWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => PasswordResetScalarWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => PasswordResetScalarWhereInputSchema), z$2.lazy(() => PasswordResetScalarWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  token: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  userId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  expiresAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional()
}).strict();
var LeftoverItemUpsertWithWhereUniqueWithoutRecordedByInputSchema = z$2.object({
  where: z$2.lazy(() => LeftoverItemWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => LeftoverItemUpdateWithoutRecordedByInputSchema), z$2.lazy(() => LeftoverItemUncheckedUpdateWithoutRecordedByInputSchema)]),
  create: z$2.union([z$2.lazy(() => LeftoverItemCreateWithoutRecordedByInputSchema), z$2.lazy(() => LeftoverItemUncheckedCreateWithoutRecordedByInputSchema)])
}).strict();
var LeftoverItemUpdateWithWhereUniqueWithoutRecordedByInputSchema = z$2.object({
  where: z$2.lazy(() => LeftoverItemWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => LeftoverItemUpdateWithoutRecordedByInputSchema), z$2.lazy(() => LeftoverItemUncheckedUpdateWithoutRecordedByInputSchema)])
}).strict();
var LeftoverItemUpdateManyWithWhereWithoutRecordedByInputSchema = z$2.object({
  where: z$2.lazy(() => LeftoverItemScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => LeftoverItemUpdateManyMutationInputSchema), z$2.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRecordedByInputSchema)])
}).strict();
var WasteRecordUpsertWithWhereUniqueWithoutRecordedByInputSchema = z$2.object({
  where: z$2.lazy(() => WasteRecordWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => WasteRecordUpdateWithoutRecordedByInputSchema), z$2.lazy(() => WasteRecordUncheckedUpdateWithoutRecordedByInputSchema)]),
  create: z$2.union([z$2.lazy(() => WasteRecordCreateWithoutRecordedByInputSchema), z$2.lazy(() => WasteRecordUncheckedCreateWithoutRecordedByInputSchema)])
}).strict();
var WasteRecordUpdateWithWhereUniqueWithoutRecordedByInputSchema = z$2.object({
  where: z$2.lazy(() => WasteRecordWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => WasteRecordUpdateWithoutRecordedByInputSchema), z$2.lazy(() => WasteRecordUncheckedUpdateWithoutRecordedByInputSchema)])
}).strict();
var WasteRecordUpdateManyWithWhereWithoutRecordedByInputSchema = z$2.object({
  where: z$2.lazy(() => WasteRecordScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => WasteRecordUpdateManyMutationInputSchema), z$2.lazy(() => WasteRecordUncheckedUpdateManyWithoutRecordedByInputSchema)])
}).strict();
var ProductionPlanUpsertWithWhereUniqueWithoutCreatedByInputSchema = z$2.object({
  where: z$2.lazy(() => ProductionPlanWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => ProductionPlanUpdateWithoutCreatedByInputSchema), z$2.lazy(() => ProductionPlanUncheckedUpdateWithoutCreatedByInputSchema)]),
  create: z$2.union([z$2.lazy(() => ProductionPlanCreateWithoutCreatedByInputSchema), z$2.lazy(() => ProductionPlanUncheckedCreateWithoutCreatedByInputSchema)])
}).strict();
var ProductionPlanUpdateWithWhereUniqueWithoutCreatedByInputSchema = z$2.object({
  where: z$2.lazy(() => ProductionPlanWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => ProductionPlanUpdateWithoutCreatedByInputSchema), z$2.lazy(() => ProductionPlanUncheckedUpdateWithoutCreatedByInputSchema)])
}).strict();
var ProductionPlanUpdateManyWithWhereWithoutCreatedByInputSchema = z$2.object({
  where: z$2.lazy(() => ProductionPlanScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => ProductionPlanUpdateManyMutationInputSchema), z$2.lazy(() => ProductionPlanUncheckedUpdateManyWithoutCreatedByInputSchema)])
}).strict();
var ProductionPlanItemUpsertWithWhereUniqueWithoutAssignedToInputSchema = z$2.object({
  where: z$2.lazy(() => ProductionPlanItemWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => ProductionPlanItemUpdateWithoutAssignedToInputSchema), z$2.lazy(() => ProductionPlanItemUncheckedUpdateWithoutAssignedToInputSchema)]),
  create: z$2.union([z$2.lazy(() => ProductionPlanItemCreateWithoutAssignedToInputSchema), z$2.lazy(() => ProductionPlanItemUncheckedCreateWithoutAssignedToInputSchema)])
}).strict();
var ProductionPlanItemUpdateWithWhereUniqueWithoutAssignedToInputSchema = z$2.object({
  where: z$2.lazy(() => ProductionPlanItemWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => ProductionPlanItemUpdateWithoutAssignedToInputSchema), z$2.lazy(() => ProductionPlanItemUncheckedUpdateWithoutAssignedToInputSchema)])
}).strict();
var ProductionPlanItemUpdateManyWithWhereWithoutAssignedToInputSchema = z$2.object({
  where: z$2.lazy(() => ProductionPlanItemScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => ProductionPlanItemUpdateManyMutationInputSchema), z$2.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutAssignedToInputSchema)])
}).strict();
var AvailabilityUpsertWithWhereUniqueWithoutUserInputSchema = z$2.object({
  where: z$2.lazy(() => AvailabilityWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => AvailabilityUpdateWithoutUserInputSchema), z$2.lazy(() => AvailabilityUncheckedUpdateWithoutUserInputSchema)]),
  create: z$2.union([z$2.lazy(() => AvailabilityCreateWithoutUserInputSchema), z$2.lazy(() => AvailabilityUncheckedCreateWithoutUserInputSchema)])
}).strict();
var AvailabilityUpdateWithWhereUniqueWithoutUserInputSchema = z$2.object({
  where: z$2.lazy(() => AvailabilityWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => AvailabilityUpdateWithoutUserInputSchema), z$2.lazy(() => AvailabilityUncheckedUpdateWithoutUserInputSchema)])
}).strict();
var AvailabilityUpdateManyWithWhereWithoutUserInputSchema = z$2.object({
  where: z$2.lazy(() => AvailabilityScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => AvailabilityUpdateManyMutationInputSchema), z$2.lazy(() => AvailabilityUncheckedUpdateManyWithoutUserInputSchema)])
}).strict();
var AvailabilityScalarWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => AvailabilityScalarWhereInputSchema), z$2.lazy(() => AvailabilityScalarWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => AvailabilityScalarWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => AvailabilityScalarWhereInputSchema), z$2.lazy(() => AvailabilityScalarWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  userId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  dayOfWeek: z$2.union([z$2.lazy(() => EnumDayOfWeekFilterSchema), z$2.lazy(() => DayOfWeekSchema)]).optional(),
  startTime: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  endTime: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional()
}).strict();
var SchedulingConstraintUpsertWithWhereUniqueWithoutUserInputSchema = z$2.object({
  where: z$2.lazy(() => SchedulingConstraintWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => SchedulingConstraintUpdateWithoutUserInputSchema), z$2.lazy(() => SchedulingConstraintUncheckedUpdateWithoutUserInputSchema)]),
  create: z$2.union([z$2.lazy(() => SchedulingConstraintCreateWithoutUserInputSchema), z$2.lazy(() => SchedulingConstraintUncheckedCreateWithoutUserInputSchema)])
}).strict();
var SchedulingConstraintUpdateWithWhereUniqueWithoutUserInputSchema = z$2.object({
  where: z$2.lazy(() => SchedulingConstraintWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => SchedulingConstraintUpdateWithoutUserInputSchema), z$2.lazy(() => SchedulingConstraintUncheckedUpdateWithoutUserInputSchema)])
}).strict();
var SchedulingConstraintUpdateManyWithWhereWithoutUserInputSchema = z$2.object({
  where: z$2.lazy(() => SchedulingConstraintScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => SchedulingConstraintUpdateManyMutationInputSchema), z$2.lazy(() => SchedulingConstraintUncheckedUpdateManyWithoutUserInputSchema)])
}).strict();
var SchedulingConstraintScalarWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => SchedulingConstraintScalarWhereInputSchema), z$2.lazy(() => SchedulingConstraintScalarWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => SchedulingConstraintScalarWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => SchedulingConstraintScalarWhereInputSchema), z$2.lazy(() => SchedulingConstraintScalarWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  userId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  date: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  constraintsType: z$2.union([z$2.lazy(() => EnumConstraintTypeFilterSchema), z$2.lazy(() => ConstraintTypeSchema)]).optional(),
  startTime: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  endTime: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  notes: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional()
}).strict();
var InventoryWithdrawalUpsertWithWhereUniqueWithoutCreatedByInputSchema = z$2.object({
  where: z$2.lazy(() => InventoryWithdrawalWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => InventoryWithdrawalUpdateWithoutCreatedByInputSchema), z$2.lazy(() => InventoryWithdrawalUncheckedUpdateWithoutCreatedByInputSchema)]),
  create: z$2.union([z$2.lazy(() => InventoryWithdrawalCreateWithoutCreatedByInputSchema), z$2.lazy(() => InventoryWithdrawalUncheckedCreateWithoutCreatedByInputSchema)])
}).strict();
var InventoryWithdrawalUpdateWithWhereUniqueWithoutCreatedByInputSchema = z$2.object({
  where: z$2.lazy(() => InventoryWithdrawalWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => InventoryWithdrawalUpdateWithoutCreatedByInputSchema), z$2.lazy(() => InventoryWithdrawalUncheckedUpdateWithoutCreatedByInputSchema)])
}).strict();
var InventoryWithdrawalUpdateManyWithWhereWithoutCreatedByInputSchema = z$2.object({
  where: z$2.lazy(() => InventoryWithdrawalScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => InventoryWithdrawalUpdateManyMutationInputSchema), z$2.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutCreatedByInputSchema)])
}).strict();
var InventoryWithdrawalScalarWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => InventoryWithdrawalScalarWhereInputSchema), z$2.lazy(() => InventoryWithdrawalScalarWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => InventoryWithdrawalScalarWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => InventoryWithdrawalScalarWhereInputSchema), z$2.lazy(() => InventoryWithdrawalScalarWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  inventoryItemId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  dateTime: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  quantity: z$2.union([z$2.lazy(() => FloatFilterSchema), z$2.number()]).optional(),
  unit: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  recipeId: z$2.union([z$2.lazy(() => IntNullableFilterSchema), z$2.number()]).optional().nullable(),
  createdById: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional()
}).strict();
var ChecklistCompleteUpsertWithWhereUniqueWithoutCompletedByInputSchema = z$2.object({
  where: z$2.lazy(() => ChecklistCompleteWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => ChecklistCompleteUpdateWithoutCompletedByInputSchema), z$2.lazy(() => ChecklistCompleteUncheckedUpdateWithoutCompletedByInputSchema)]),
  create: z$2.union([z$2.lazy(() => ChecklistCompleteCreateWithoutCompletedByInputSchema), z$2.lazy(() => ChecklistCompleteUncheckedCreateWithoutCompletedByInputSchema)])
}).strict();
var ChecklistCompleteUpdateWithWhereUniqueWithoutCompletedByInputSchema = z$2.object({
  where: z$2.lazy(() => ChecklistCompleteWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => ChecklistCompleteUpdateWithoutCompletedByInputSchema), z$2.lazy(() => ChecklistCompleteUncheckedUpdateWithoutCompletedByInputSchema)])
}).strict();
var ChecklistCompleteUpdateManyWithWhereWithoutCompletedByInputSchema = z$2.object({
  where: z$2.lazy(() => ChecklistCompleteScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => ChecklistCompleteUpdateManyMutationInputSchema), z$2.lazy(() => ChecklistCompleteUncheckedUpdateManyWithoutCompletedByInputSchema)])
}).strict();
var CustomerFeedbackUpsertWithWhereUniqueWithoutRespondedByInputSchema = z$2.object({
  where: z$2.lazy(() => CustomerFeedbackWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => CustomerFeedbackUpdateWithoutRespondedByInputSchema), z$2.lazy(() => CustomerFeedbackUncheckedUpdateWithoutRespondedByInputSchema)]),
  create: z$2.union([z$2.lazy(() => CustomerFeedbackCreateWithoutRespondedByInputSchema), z$2.lazy(() => CustomerFeedbackUncheckedCreateWithoutRespondedByInputSchema)])
}).strict();
var CustomerFeedbackUpdateWithWhereUniqueWithoutRespondedByInputSchema = z$2.object({
  where: z$2.lazy(() => CustomerFeedbackWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => CustomerFeedbackUpdateWithoutRespondedByInputSchema), z$2.lazy(() => CustomerFeedbackUncheckedUpdateWithoutRespondedByInputSchema)])
}).strict();
var CustomerFeedbackUpdateManyWithWhereWithoutRespondedByInputSchema = z$2.object({
  where: z$2.lazy(() => CustomerFeedbackScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => CustomerFeedbackUpdateManyMutationInputSchema), z$2.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRespondedByInputSchema)])
}).strict();
var RecipeVersionUpsertWithWhereUniqueWithoutCreatedByInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeVersionWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => RecipeVersionUpdateWithoutCreatedByInputSchema), z$2.lazy(() => RecipeVersionUncheckedUpdateWithoutCreatedByInputSchema)]),
  create: z$2.union([z$2.lazy(() => RecipeVersionCreateWithoutCreatedByInputSchema), z$2.lazy(() => RecipeVersionUncheckedCreateWithoutCreatedByInputSchema)])
}).strict();
var RecipeVersionUpdateWithWhereUniqueWithoutCreatedByInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeVersionWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => RecipeVersionUpdateWithoutCreatedByInputSchema), z$2.lazy(() => RecipeVersionUncheckedUpdateWithoutCreatedByInputSchema)])
}).strict();
var RecipeVersionUpdateManyWithWhereWithoutCreatedByInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeVersionScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => RecipeVersionUpdateManyMutationInputSchema), z$2.lazy(() => RecipeVersionUncheckedUpdateManyWithoutCreatedByInputSchema)])
}).strict();
var RecipeVersionScalarWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => RecipeVersionScalarWhereInputSchema), z$2.lazy(() => RecipeVersionScalarWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => RecipeVersionScalarWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => RecipeVersionScalarWhereInputSchema), z$2.lazy(() => RecipeVersionScalarWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  recipeId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  versionNumber: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  description: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  changes: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  isActive: z$2.union([z$2.lazy(() => BoolFilterSchema), z$2.boolean()]).optional(),
  createdById: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  approvedById: z$2.union([z$2.lazy(() => IntNullableFilterSchema), z$2.number()]).optional().nullable(),
  approvedAt: z$2.union([z$2.lazy(() => DateTimeNullableFilterSchema), z$2.coerce.date()]).optional().nullable(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional()
}).strict();
var RecipeVersionUpsertWithWhereUniqueWithoutApprovedByInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeVersionWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => RecipeVersionUpdateWithoutApprovedByInputSchema), z$2.lazy(() => RecipeVersionUncheckedUpdateWithoutApprovedByInputSchema)]),
  create: z$2.union([z$2.lazy(() => RecipeVersionCreateWithoutApprovedByInputSchema), z$2.lazy(() => RecipeVersionUncheckedCreateWithoutApprovedByInputSchema)])
}).strict();
var RecipeVersionUpdateWithWhereUniqueWithoutApprovedByInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeVersionWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => RecipeVersionUpdateWithoutApprovedByInputSchema), z$2.lazy(() => RecipeVersionUncheckedUpdateWithoutApprovedByInputSchema)])
}).strict();
var RecipeVersionUpdateManyWithWhereWithoutApprovedByInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeVersionScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => RecipeVersionUpdateManyMutationInputSchema), z$2.lazy(() => RecipeVersionUncheckedUpdateManyWithoutApprovedByInputSchema)])
}).strict();
var UserCreateWithoutSessionsInputSchema = z$2.object({
  email: z$2.string(),
  sub: z$2.number().int().optional().nullable(),
  passwordHash: z$2.string(),
  firstName: z$2.string(),
  lastName: z$2.string(),
  profileImage: z$2.string().optional().nullable(),
  verified: z$2.boolean().optional(),
  role: z$2.lazy(() => UserRoleSchema),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  organization: z$2.lazy(() => OrganizationCreateNestedOneWithoutUsersInputSchema).optional(),
  restaurant: z$2.lazy(() => RestaurantCreateNestedOneWithoutUsersInputSchema).optional(),
  shifts: z$2.lazy(() => ShiftCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: z$2.lazy(() => InventoryItemCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  passwordResets: z$2.lazy(() => PasswordResetCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItem: z$2.lazy(() => ProductionPlanItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: z$2.lazy(() => AvailabilityCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraint: z$2.lazy(() => SchedulingConstraintCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedback: z$2.lazy(() => CustomerFeedbackCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: z$2.lazy(() => RecipeVersionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: z$2.lazy(() => RecipeVersionCreateNestedManyWithoutApprovedByInputSchema).optional()
}).strict();
var UserUncheckedCreateWithoutSessionsInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  email: z$2.string(),
  sub: z$2.number().int().optional().nullable(),
  passwordHash: z$2.string(),
  firstName: z$2.string(),
  lastName: z$2.string(),
  profileImage: z$2.string().optional().nullable(),
  verified: z$2.boolean().optional(),
  role: z$2.lazy(() => UserRoleSchema),
  organizationId: z$2.number().int().optional().nullable(),
  restaurantId: z$2.number().int().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  shifts: z$2.lazy(() => ShiftUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: z$2.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  passwordResets: z$2.lazy(() => PasswordResetUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItem: z$2.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: z$2.lazy(() => AvailabilityUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraint: z$2.lazy(() => SchedulingConstraintUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteUncheckedCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedback: z$2.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: z$2.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: z$2.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutApprovedByInputSchema).optional()
}).strict();
var UserCreateOrConnectWithoutSessionsInputSchema = z$2.object({
  where: z$2.lazy(() => UserWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => UserCreateWithoutSessionsInputSchema), z$2.lazy(() => UserUncheckedCreateWithoutSessionsInputSchema)])
}).strict();
var UserUpsertWithoutSessionsInputSchema = z$2.object({
  update: z$2.union([z$2.lazy(() => UserUpdateWithoutSessionsInputSchema), z$2.lazy(() => UserUncheckedUpdateWithoutSessionsInputSchema)]),
  create: z$2.union([z$2.lazy(() => UserCreateWithoutSessionsInputSchema), z$2.lazy(() => UserUncheckedCreateWithoutSessionsInputSchema)]),
  where: z$2.lazy(() => UserWhereInputSchema).optional()
}).strict();
var UserUpdateToOneWithWhereWithoutSessionsInputSchema = z$2.object({
  where: z$2.lazy(() => UserWhereInputSchema).optional(),
  data: z$2.union([z$2.lazy(() => UserUpdateWithoutSessionsInputSchema), z$2.lazy(() => UserUncheckedUpdateWithoutSessionsInputSchema)])
}).strict();
var UserUpdateWithoutSessionsInputSchema = z$2.object({
  email: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: z$2.union([z$2.lazy(() => UserRoleSchema), z$2.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  organization: z$2.lazy(() => OrganizationUpdateOneWithoutUsersNestedInputSchema).optional(),
  restaurant: z$2.lazy(() => RestaurantUpdateOneWithoutUsersNestedInputSchema).optional(),
  shifts: z$2.lazy(() => ShiftUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: z$2.lazy(() => InventoryItemUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  passwordResets: z$2.lazy(() => PasswordResetUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItem: z$2.lazy(() => ProductionPlanItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: z$2.lazy(() => AvailabilityUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraint: z$2.lazy(() => SchedulingConstraintUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedback: z$2.lazy(() => CustomerFeedbackUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: z$2.lazy(() => RecipeVersionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: z$2.lazy(() => RecipeVersionUpdateManyWithoutApprovedByNestedInputSchema).optional()
}).strict();
var UserUncheckedUpdateWithoutSessionsInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  email: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: z$2.union([z$2.lazy(() => UserRoleSchema), z$2.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  organizationId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  shifts: z$2.lazy(() => ShiftUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: z$2.lazy(() => InventoryItemUncheckedUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  passwordResets: z$2.lazy(() => PasswordResetUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItem: z$2.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: z$2.lazy(() => AvailabilityUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraint: z$2.lazy(() => SchedulingConstraintUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteUncheckedUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedback: z$2.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: z$2.lazy(() => RecipeVersionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: z$2.lazy(() => RecipeVersionUncheckedUpdateManyWithoutApprovedByNestedInputSchema).optional()
}).strict();
var RecipeCreateWithoutCookBookInputSchema = z$2.object({
  name: z$2.string(),
  imageUrl: z$2.union([z$2.lazy(() => RecipeCreateimageUrlInputSchema), z$2.string().array()]).optional(),
  description: z$2.string().optional().nullable(),
  servings: z$2.number().int(),
  cookTime: z$2.number().int(),
  prepTime: z$2.number().int(),
  frequency: z$2.number().int().optional().nullable(),
  foodCost: z$2.number().optional().nullable(),
  isDeleted: z$2.boolean().optional(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  restaurant: z$2.lazy(() => RestaurantCreateNestedOneWithoutRecipesInputSchema),
  ingredients: z$2.lazy(() => RecipeIngredientCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z$2.lazy(() => MenuItemCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: z$2.lazy(() => FoodCostHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: z$2.lazy(() => PrepHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z$2.lazy(() => PrepBoardCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  MenuItemRecipe: z$2.lazy(() => MenuItemRecipeCreateNestedManyWithoutRecipeInputSchema).optional(),
  ProductionPlanItem: z$2.lazy(() => ProductionPlanItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z$2.lazy(() => RecipeTagCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: z$2.lazy(() => RecipeVersionCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipment: z$2.lazy(() => RecipeEquipmentCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionCreateNestedManyWithoutRecipesInputSchema).optional()
}).strict();
var RecipeUncheckedCreateWithoutCookBookInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  imageUrl: z$2.union([z$2.lazy(() => RecipeCreateimageUrlInputSchema), z$2.string().array()]).optional(),
  description: z$2.string().optional().nullable(),
  servings: z$2.number().int(),
  cookTime: z$2.number().int(),
  prepTime: z$2.number().int(),
  frequency: z$2.number().int().optional().nullable(),
  restaurantId: z$2.number().int(),
  foodCost: z$2.number().optional().nullable(),
  isDeleted: z$2.boolean().optional(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  ingredients: z$2.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z$2.lazy(() => MenuItemUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: z$2.lazy(() => FoodCostHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: z$2.lazy(() => PrepHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z$2.lazy(() => PrepBoardUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  MenuItemRecipe: z$2.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  ProductionPlanItem: z$2.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z$2.lazy(() => RecipeTagUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: z$2.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipment: z$2.lazy(() => RecipeEquipmentUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutRecipesInputSchema).optional()
}).strict();
var RecipeCreateOrConnectWithoutCookBookInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => RecipeCreateWithoutCookBookInputSchema), z$2.lazy(() => RecipeUncheckedCreateWithoutCookBookInputSchema)])
}).strict();
var RecipeCreateManyCookBookInputEnvelopeSchema = z$2.object({
  data: z$2.union([z$2.lazy(() => RecipeCreateManyCookBookInputSchema), z$2.lazy(() => RecipeCreateManyCookBookInputSchema).array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var RestaurantCreateWithoutCookbooksInputSchema = z$2.object({
  name: z$2.string(),
  imageUrl: z$2.string().optional().nullable(),
  address: z$2.string(),
  city: z$2.string(),
  zipCode: z$2.string(),
  state: z$2.string(),
  owner: z$2.string(),
  foodCost: z$2.number().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  isDeleted: z$2.boolean().optional(),
  deleted: z$2.coerce.date().optional().nullable(),
  organization: z$2.lazy(() => OrganizationCreateNestedOneWithoutRestaurantsInputSchema).optional(),
  users: z$2.lazy(() => UserCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: z$2.lazy(() => InventoryCreateNestedOneWithoutRestaurantInputSchema).optional(),
  orders: z$2.lazy(() => OrderCreateNestedManyWithoutRestaurantInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: z$2.lazy(() => MenuCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipment: z$2.lazy(() => EquipmentCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklist: z$2.lazy(() => QualityChecklistCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qustomerFeedback: z$2.lazy(() => CustomerFeedbackCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();
var RestaurantUncheckedCreateWithoutCookbooksInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  imageUrl: z$2.string().optional().nullable(),
  address: z$2.string(),
  city: z$2.string(),
  zipCode: z$2.string(),
  state: z$2.string(),
  owner: z$2.string(),
  organizationId: z$2.number().int().optional().nullable(),
  foodCost: z$2.number().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  isDeleted: z$2.boolean().optional(),
  deleted: z$2.coerce.date().optional().nullable(),
  users: z$2.lazy(() => UserUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: z$2.lazy(() => InventoryUncheckedCreateNestedOneWithoutRestaurantInputSchema).optional(),
  orders: z$2.lazy(() => OrderUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: z$2.lazy(() => MenuUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipment: z$2.lazy(() => EquipmentUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklist: z$2.lazy(() => QualityChecklistUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qustomerFeedback: z$2.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();
var RestaurantCreateOrConnectWithoutCookbooksInputSchema = z$2.object({
  where: z$2.lazy(() => RestaurantWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => RestaurantCreateWithoutCookbooksInputSchema), z$2.lazy(() => RestaurantUncheckedCreateWithoutCookbooksInputSchema)])
}).strict();
var RecipeUpsertWithWhereUniqueWithoutCookBookInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => RecipeUpdateWithoutCookBookInputSchema), z$2.lazy(() => RecipeUncheckedUpdateWithoutCookBookInputSchema)]),
  create: z$2.union([z$2.lazy(() => RecipeCreateWithoutCookBookInputSchema), z$2.lazy(() => RecipeUncheckedCreateWithoutCookBookInputSchema)])
}).strict();
var RecipeUpdateWithWhereUniqueWithoutCookBookInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => RecipeUpdateWithoutCookBookInputSchema), z$2.lazy(() => RecipeUncheckedUpdateWithoutCookBookInputSchema)])
}).strict();
var RecipeUpdateManyWithWhereWithoutCookBookInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => RecipeUpdateManyMutationInputSchema), z$2.lazy(() => RecipeUncheckedUpdateManyWithoutCookBookInputSchema)])
}).strict();
var RestaurantUpsertWithoutCookbooksInputSchema = z$2.object({
  update: z$2.union([z$2.lazy(() => RestaurantUpdateWithoutCookbooksInputSchema), z$2.lazy(() => RestaurantUncheckedUpdateWithoutCookbooksInputSchema)]),
  create: z$2.union([z$2.lazy(() => RestaurantCreateWithoutCookbooksInputSchema), z$2.lazy(() => RestaurantUncheckedCreateWithoutCookbooksInputSchema)]),
  where: z$2.lazy(() => RestaurantWhereInputSchema).optional()
}).strict();
var RestaurantUpdateToOneWithWhereWithoutCookbooksInputSchema = z$2.object({
  where: z$2.lazy(() => RestaurantWhereInputSchema).optional(),
  data: z$2.union([z$2.lazy(() => RestaurantUpdateWithoutCookbooksInputSchema), z$2.lazy(() => RestaurantUncheckedUpdateWithoutCookbooksInputSchema)])
}).strict();
var RestaurantUpdateWithoutCookbooksInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  address: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  city: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  zipCode: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  state: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  owner: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  isDeleted: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  deleted: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  organization: z$2.lazy(() => OrganizationUpdateOneWithoutRestaurantsNestedInputSchema).optional(),
  users: z$2.lazy(() => UserUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: z$2.lazy(() => InventoryUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  orders: z$2.lazy(() => OrderUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: z$2.lazy(() => MenuUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipment: z$2.lazy(() => EquipmentUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklist: z$2.lazy(() => QualityChecklistUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qustomerFeedback: z$2.lazy(() => CustomerFeedbackUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();
var RestaurantUncheckedUpdateWithoutCookbooksInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  address: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  city: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  zipCode: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  state: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  owner: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  organizationId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  isDeleted: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  deleted: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  users: z$2.lazy(() => UserUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: z$2.lazy(() => InventoryUncheckedUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  orders: z$2.lazy(() => OrderUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: z$2.lazy(() => MenuUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipment: z$2.lazy(() => EquipmentUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklist: z$2.lazy(() => QualityChecklistUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qustomerFeedback: z$2.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();
var RestaurantCreateWithoutRecipesInputSchema = z$2.object({
  name: z$2.string(),
  imageUrl: z$2.string().optional().nullable(),
  address: z$2.string(),
  city: z$2.string(),
  zipCode: z$2.string(),
  state: z$2.string(),
  owner: z$2.string(),
  foodCost: z$2.number().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  isDeleted: z$2.boolean().optional(),
  deleted: z$2.coerce.date().optional().nullable(),
  organization: z$2.lazy(() => OrganizationCreateNestedOneWithoutRestaurantsInputSchema).optional(),
  users: z$2.lazy(() => UserCreateNestedManyWithoutRestaurantInputSchema).optional(),
  cookbooks: z$2.lazy(() => CookBookCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: z$2.lazy(() => InventoryCreateNestedOneWithoutRestaurantInputSchema).optional(),
  orders: z$2.lazy(() => OrderCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: z$2.lazy(() => MenuCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipment: z$2.lazy(() => EquipmentCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklist: z$2.lazy(() => QualityChecklistCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qustomerFeedback: z$2.lazy(() => CustomerFeedbackCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();
var RestaurantUncheckedCreateWithoutRecipesInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  imageUrl: z$2.string().optional().nullable(),
  address: z$2.string(),
  city: z$2.string(),
  zipCode: z$2.string(),
  state: z$2.string(),
  owner: z$2.string(),
  organizationId: z$2.number().int().optional().nullable(),
  foodCost: z$2.number().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  isDeleted: z$2.boolean().optional(),
  deleted: z$2.coerce.date().optional().nullable(),
  users: z$2.lazy(() => UserUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  cookbooks: z$2.lazy(() => CookBookUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: z$2.lazy(() => InventoryUncheckedCreateNestedOneWithoutRestaurantInputSchema).optional(),
  orders: z$2.lazy(() => OrderUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: z$2.lazy(() => MenuUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipment: z$2.lazy(() => EquipmentUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklist: z$2.lazy(() => QualityChecklistUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qustomerFeedback: z$2.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();
var RestaurantCreateOrConnectWithoutRecipesInputSchema = z$2.object({
  where: z$2.lazy(() => RestaurantWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => RestaurantCreateWithoutRecipesInputSchema), z$2.lazy(() => RestaurantUncheckedCreateWithoutRecipesInputSchema)])
}).strict();
var CookBookCreateWithoutRecipesInputSchema = z$2.object({
  name: z$2.string(),
  imageUrl: z$2.string().optional().nullable(),
  category: z$2.string(),
  restaurant: z$2.lazy(() => RestaurantCreateNestedOneWithoutCookbooksInputSchema).optional()
}).strict();
var CookBookUncheckedCreateWithoutRecipesInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  imageUrl: z$2.string().optional().nullable(),
  category: z$2.string(),
  restaurantId: z$2.number().int().optional().nullable()
}).strict();
var CookBookCreateOrConnectWithoutRecipesInputSchema = z$2.object({
  where: z$2.lazy(() => CookBookWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => CookBookCreateWithoutRecipesInputSchema), z$2.lazy(() => CookBookUncheckedCreateWithoutRecipesInputSchema)])
}).strict();
var RecipeIngredientCreateWithoutRecipeInputSchema = z$2.object({
  quantity: z$2.number(),
  unit: z$2.string(),
  joinAt: z$2.coerce.date().optional(),
  ingredient: z$2.lazy(() => IngredientCreateNestedOneWithoutRecipeIngredientsInputSchema),
  RecipeVersion: z$2.lazy(() => RecipeVersionCreateNestedOneWithoutIngredientsInputSchema).optional()
}).strict();
var RecipeIngredientUncheckedCreateWithoutRecipeInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  ingredientId: z$2.number().int(),
  quantity: z$2.number(),
  unit: z$2.string(),
  joinAt: z$2.coerce.date().optional(),
  recipeVersionId: z$2.number().int().optional().nullable()
}).strict();
var RecipeIngredientCreateOrConnectWithoutRecipeInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeIngredientWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => RecipeIngredientCreateWithoutRecipeInputSchema), z$2.lazy(() => RecipeIngredientUncheckedCreateWithoutRecipeInputSchema)])
}).strict();
var RecipeIngredientCreateManyRecipeInputEnvelopeSchema = z$2.object({
  data: z$2.union([z$2.lazy(() => RecipeIngredientCreateManyRecipeInputSchema), z$2.lazy(() => RecipeIngredientCreateManyRecipeInputSchema).array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var RecipeInstructionCreateWithoutRecipeInputSchema = z$2.object({
  stepNumber: z$2.number().int(),
  instruction: z$2.string(),
  imageUrl: z$2.string().optional().nullable(),
  RecipeVersion: z$2.lazy(() => RecipeVersionCreateNestedOneWithoutInstructionsInputSchema).optional()
}).strict();
var RecipeInstructionUncheckedCreateWithoutRecipeInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  stepNumber: z$2.number().int(),
  instruction: z$2.string(),
  imageUrl: z$2.string().optional().nullable(),
  recipeVersionId: z$2.number().int().optional().nullable()
}).strict();
var RecipeInstructionCreateOrConnectWithoutRecipeInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeInstructionWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => RecipeInstructionCreateWithoutRecipeInputSchema), z$2.lazy(() => RecipeInstructionUncheckedCreateWithoutRecipeInputSchema)])
}).strict();
var RecipeInstructionCreateManyRecipeInputEnvelopeSchema = z$2.object({
  data: z$2.union([z$2.lazy(() => RecipeInstructionCreateManyRecipeInputSchema), z$2.lazy(() => RecipeInstructionCreateManyRecipeInputSchema).array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var MenuItemCreateWithoutRecipesInputSchema = z$2.object({
  name: z$2.string(),
  description: z$2.string().optional().nullable(),
  price: z$2.number(),
  foodCost: z$2.number(),
  recipeIds: z$2.union([z$2.lazy(() => MenuItemCreaterecipeIdsInputSchema), z$2.number().int().array()]).optional(),
  recipeServingsAmount: z$2.union([z$2.lazy(() => MenuItemCreaterecipeServingsAmountInputSchema), z$2.number().array()]).optional(),
  recipeServingsCost: z$2.union([z$2.lazy(() => MenuItemCreaterecipeServingsCostInputSchema), z$2.number().array()]).optional(),
  allergens: z$2.union([z$2.lazy(() => MenuItemCreateallergensInputSchema), z$2.string().array()]).optional(),
  nutritionalInfoId: z$2.number().int().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  nutritionalInfo: z$2.lazy(() => NutritionalInfoCreateNestedOneWithoutMenuItemInputSchema).optional(),
  menu: z$2.lazy(() => MenuCreateNestedOneWithoutMenuItemsInputSchema),
  menuItemRecipe: z$2.lazy(() => MenuItemRecipeCreateNestedManyWithoutMenuItemInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsCreateNestedManyWithoutMenuItemInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemCreateNestedManyWithoutMenuItemInputSchema).optional(),
  nutritionalRecommendation: z$2.lazy(() => NutritionalRecommendationCreateNestedManyWithoutMenuItemInputSchema).optional(),
  category: z$2.lazy(() => MenuCategoryCreateNestedOneWithoutMenuItemsInputSchema).optional(),
  feedback: z$2.lazy(() => CustomerFeedbackCreateNestedManyWithoutMenuItemInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionCreateNestedManyWithoutMenuItemsInputSchema).optional()
}).strict();
var MenuItemUncheckedCreateWithoutRecipesInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  description: z$2.string().optional().nullable(),
  price: z$2.number(),
  foodCost: z$2.number(),
  recipeIds: z$2.union([z$2.lazy(() => MenuItemCreaterecipeIdsInputSchema), z$2.number().int().array()]).optional(),
  recipeServingsAmount: z$2.union([z$2.lazy(() => MenuItemCreaterecipeServingsAmountInputSchema), z$2.number().array()]).optional(),
  recipeServingsCost: z$2.union([z$2.lazy(() => MenuItemCreaterecipeServingsCostInputSchema), z$2.number().array()]).optional(),
  allergens: z$2.union([z$2.lazy(() => MenuItemCreateallergensInputSchema), z$2.string().array()]).optional(),
  nutritionalInfoId: z$2.number().int().optional().nullable(),
  menuId: z$2.number().int(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  categoryId: z$2.number().int().optional().nullable(),
  nutritionalInfo: z$2.lazy(() => NutritionalInfoUncheckedCreateNestedOneWithoutMenuItemInputSchema).optional(),
  menuItemRecipe: z$2.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  nutritionalRecommendation: z$2.lazy(() => NutritionalRecommendationUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  feedback: z$2.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutMenuItemsInputSchema).optional()
}).strict();
var MenuItemCreateOrConnectWithoutRecipesInputSchema = z$2.object({
  where: z$2.lazy(() => MenuItemWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => MenuItemCreateWithoutRecipesInputSchema), z$2.lazy(() => MenuItemUncheckedCreateWithoutRecipesInputSchema)])
}).strict();
var FoodCostHistoryCreateWithoutRecipeInputSchema = z$2.object({
  cost: z$2.number(),
  date: z$2.coerce.date(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var FoodCostHistoryUncheckedCreateWithoutRecipeInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  cost: z$2.number(),
  date: z$2.coerce.date(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var FoodCostHistoryCreateOrConnectWithoutRecipeInputSchema = z$2.object({
  where: z$2.lazy(() => FoodCostHistoryWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => FoodCostHistoryCreateWithoutRecipeInputSchema), z$2.lazy(() => FoodCostHistoryUncheckedCreateWithoutRecipeInputSchema)])
}).strict();
var FoodCostHistoryCreateManyRecipeInputEnvelopeSchema = z$2.object({
  data: z$2.union([z$2.lazy(() => FoodCostHistoryCreateManyRecipeInputSchema), z$2.lazy(() => FoodCostHistoryCreateManyRecipeInputSchema).array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var PrepHistoryCreateWithoutRecipeInputSchema = z$2.object({
  quantity: z$2.number().int(),
  date: z$2.coerce.date(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var PrepHistoryUncheckedCreateWithoutRecipeInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  quantity: z$2.number().int(),
  date: z$2.coerce.date(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var PrepHistoryCreateOrConnectWithoutRecipeInputSchema = z$2.object({
  where: z$2.lazy(() => PrepHistoryWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => PrepHistoryCreateWithoutRecipeInputSchema), z$2.lazy(() => PrepHistoryUncheckedCreateWithoutRecipeInputSchema)])
}).strict();
var PrepHistoryCreateManyRecipeInputEnvelopeSchema = z$2.object({
  data: z$2.union([z$2.lazy(() => PrepHistoryCreateManyRecipeInputSchema), z$2.lazy(() => PrepHistoryCreateManyRecipeInputSchema).array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var PrepBoardCreateWithoutRecipesInputSchema = z$2.object({
  name: z$2.string(),
  status: z$2.lazy(() => PrepStatusSchema),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  prepItems: z$2.lazy(() => PrepItemCreateNestedManyWithoutPrepBoardInputSchema).optional()
}).strict();
var PrepBoardUncheckedCreateWithoutRecipesInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  status: z$2.lazy(() => PrepStatusSchema),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  prepItems: z$2.lazy(() => PrepItemUncheckedCreateNestedManyWithoutPrepBoardInputSchema).optional()
}).strict();
var PrepBoardCreateOrConnectWithoutRecipesInputSchema = z$2.object({
  where: z$2.lazy(() => PrepBoardWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => PrepBoardCreateWithoutRecipesInputSchema), z$2.lazy(() => PrepBoardUncheckedCreateWithoutRecipesInputSchema)])
}).strict();
var PrepItemCreateWithoutRecipeInputSchema = z$2.object({
  quantity: z$2.number().int(),
  status: z$2.lazy(() => PrepStatusSchema),
  prepBoard: z$2.lazy(() => PrepBoardCreateNestedOneWithoutPrepItemsInputSchema),
  assignedTo: z$2.lazy(() => UserCreateNestedOneWithoutPrepItemsInputSchema)
}).strict();
var PrepItemUncheckedCreateWithoutRecipeInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  prepBoardId: z$2.number().int(),
  quantity: z$2.number().int(),
  status: z$2.lazy(() => PrepStatusSchema),
  assignedToId: z$2.number().int()
}).strict();
var PrepItemCreateOrConnectWithoutRecipeInputSchema = z$2.object({
  where: z$2.lazy(() => PrepItemWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => PrepItemCreateWithoutRecipeInputSchema), z$2.lazy(() => PrepItemUncheckedCreateWithoutRecipeInputSchema)])
}).strict();
var PrepItemCreateManyRecipeInputEnvelopeSchema = z$2.object({
  data: z$2.union([z$2.lazy(() => PrepItemCreateManyRecipeInputSchema), z$2.lazy(() => PrepItemCreateManyRecipeInputSchema).array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var MenuItemRecipeCreateWithoutRecipeInputSchema = z$2.object({
  joinAt: z$2.coerce.date().optional(),
  menuItem: z$2.lazy(() => MenuItemCreateNestedOneWithoutMenuItemRecipeInputSchema)
}).strict();
var MenuItemRecipeUncheckedCreateWithoutRecipeInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  menuItemId: z$2.number().int(),
  joinAt: z$2.coerce.date().optional()
}).strict();
var MenuItemRecipeCreateOrConnectWithoutRecipeInputSchema = z$2.object({
  where: z$2.lazy(() => MenuItemRecipeWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => MenuItemRecipeCreateWithoutRecipeInputSchema), z$2.lazy(() => MenuItemRecipeUncheckedCreateWithoutRecipeInputSchema)])
}).strict();
var MenuItemRecipeCreateManyRecipeInputEnvelopeSchema = z$2.object({
  data: z$2.union([z$2.lazy(() => MenuItemRecipeCreateManyRecipeInputSchema), z$2.lazy(() => MenuItemRecipeCreateManyRecipeInputSchema).array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var ProductionPlanItemCreateWithoutRecipeInputSchema = z$2.object({
  quantity: z$2.number().int(),
  unit: z$2.string(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  productionPlan: z$2.lazy(() => ProductionPlanCreateNestedOneWithoutItemsInputSchema),
  assignedTo: z$2.lazy(() => UserCreateNestedOneWithoutProductionPlanItemInputSchema).optional()
}).strict();
var ProductionPlanItemUncheckedCreateWithoutRecipeInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  productionPlanId: z$2.number().int(),
  quantity: z$2.number().int(),
  unit: z$2.string(),
  assignedToId: z$2.number().int().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var ProductionPlanItemCreateOrConnectWithoutRecipeInputSchema = z$2.object({
  where: z$2.lazy(() => ProductionPlanItemWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => ProductionPlanItemCreateWithoutRecipeInputSchema), z$2.lazy(() => ProductionPlanItemUncheckedCreateWithoutRecipeInputSchema)])
}).strict();
var ProductionPlanItemCreateManyRecipeInputEnvelopeSchema = z$2.object({
  data: z$2.union([z$2.lazy(() => ProductionPlanItemCreateManyRecipeInputSchema), z$2.lazy(() => ProductionPlanItemCreateManyRecipeInputSchema).array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var InventoryWithdrawalCreateWithoutRecipeInputSchema = z$2.object({
  dateTime: z$2.coerce.date(),
  quantity: z$2.number(),
  unit: z$2.string(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  inventoryItem: z$2.lazy(() => InventoryItemCreateNestedOneWithoutInventoryWithdrawalInputSchema),
  createdBy: z$2.lazy(() => UserCreateNestedOneWithoutInventoryWithdrawalInputSchema)
}).strict();
var InventoryWithdrawalUncheckedCreateWithoutRecipeInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  inventoryItemId: z$2.number().int(),
  dateTime: z$2.coerce.date(),
  quantity: z$2.number(),
  unit: z$2.string(),
  createdById: z$2.number().int(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var InventoryWithdrawalCreateOrConnectWithoutRecipeInputSchema = z$2.object({
  where: z$2.lazy(() => InventoryWithdrawalWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => InventoryWithdrawalCreateWithoutRecipeInputSchema), z$2.lazy(() => InventoryWithdrawalUncheckedCreateWithoutRecipeInputSchema)])
}).strict();
var InventoryWithdrawalCreateManyRecipeInputEnvelopeSchema = z$2.object({
  data: z$2.union([z$2.lazy(() => InventoryWithdrawalCreateManyRecipeInputSchema), z$2.lazy(() => InventoryWithdrawalCreateManyRecipeInputSchema).array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var RecipeTagCreateWithoutRecipesInputSchema = z$2.object({
  name: z$2.string(),
  description: z$2.string().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var RecipeTagUncheckedCreateWithoutRecipesInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  description: z$2.string().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var RecipeTagCreateOrConnectWithoutRecipesInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeTagWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => RecipeTagCreateWithoutRecipesInputSchema), z$2.lazy(() => RecipeTagUncheckedCreateWithoutRecipesInputSchema)])
}).strict();
var RecipeVersionCreateWithoutRecipeInputSchema = z$2.object({
  versionNumber: z$2.number().int(),
  description: z$2.string().optional().nullable(),
  changes: z$2.string().optional().nullable(),
  isActive: z$2.boolean().optional(),
  approvedAt: z$2.coerce.date().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  ingredients: z$2.lazy(() => RecipeIngredientCreateNestedManyWithoutRecipeVersionInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionCreateNestedManyWithoutRecipeVersionInputSchema).optional(),
  createdBy: z$2.lazy(() => UserCreateNestedOneWithoutRecipeVersionsCreatedInputSchema),
  approvedBy: z$2.lazy(() => UserCreateNestedOneWithoutRecipeVersionsApprovedInputSchema).optional()
}).strict();
var RecipeVersionUncheckedCreateWithoutRecipeInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  versionNumber: z$2.number().int(),
  description: z$2.string().optional().nullable(),
  changes: z$2.string().optional().nullable(),
  isActive: z$2.boolean().optional(),
  createdById: z$2.number().int(),
  approvedById: z$2.number().int().optional().nullable(),
  approvedAt: z$2.coerce.date().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  ingredients: z$2.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutRecipeVersionInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionUncheckedCreateNestedManyWithoutRecipeVersionInputSchema).optional()
}).strict();
var RecipeVersionCreateOrConnectWithoutRecipeInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeVersionWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => RecipeVersionCreateWithoutRecipeInputSchema), z$2.lazy(() => RecipeVersionUncheckedCreateWithoutRecipeInputSchema)])
}).strict();
var RecipeVersionCreateManyRecipeInputEnvelopeSchema = z$2.object({
  data: z$2.union([z$2.lazy(() => RecipeVersionCreateManyRecipeInputSchema), z$2.lazy(() => RecipeVersionCreateManyRecipeInputSchema).array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var RecipeEquipmentCreateWithoutRecipeInputSchema = z$2.object({
  notes: z$2.string().optional().nullable(),
  equipment: z$2.lazy(() => EquipmentCreateNestedOneWithoutRecipesInputSchema)
}).strict();
var RecipeEquipmentUncheckedCreateWithoutRecipeInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  equipmentId: z$2.number().int(),
  notes: z$2.string().optional().nullable()
}).strict();
var RecipeEquipmentCreateOrConnectWithoutRecipeInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeEquipmentWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => RecipeEquipmentCreateWithoutRecipeInputSchema), z$2.lazy(() => RecipeEquipmentUncheckedCreateWithoutRecipeInputSchema)])
}).strict();
var RecipeEquipmentCreateManyRecipeInputEnvelopeSchema = z$2.object({
  data: z$2.union([z$2.lazy(() => RecipeEquipmentCreateManyRecipeInputSchema), z$2.lazy(() => RecipeEquipmentCreateManyRecipeInputSchema).array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var DietaryRestrictionCreateWithoutRecipesInputSchema = z$2.object({
  name: z$2.string(),
  description: z$2.string().optional().nullable(),
  icon: z$2.string().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  menuItems: z$2.lazy(() => MenuItemCreateNestedManyWithoutDietaryRestrictionsInputSchema).optional(),
  ingredients: z$2.lazy(() => IngredientCreateNestedManyWithoutDietaryRestrictionInputSchema).optional()
}).strict();
var DietaryRestrictionUncheckedCreateWithoutRecipesInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  description: z$2.string().optional().nullable(),
  icon: z$2.string().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  menuItems: z$2.lazy(() => MenuItemUncheckedCreateNestedManyWithoutDietaryRestrictionsInputSchema).optional(),
  ingredients: z$2.lazy(() => IngredientUncheckedCreateNestedManyWithoutDietaryRestrictionInputSchema).optional()
}).strict();
var DietaryRestrictionCreateOrConnectWithoutRecipesInputSchema = z$2.object({
  where: z$2.lazy(() => DietaryRestrictionWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => DietaryRestrictionCreateWithoutRecipesInputSchema), z$2.lazy(() => DietaryRestrictionUncheckedCreateWithoutRecipesInputSchema)])
}).strict();
var RestaurantUpsertWithoutRecipesInputSchema = z$2.object({
  update: z$2.union([z$2.lazy(() => RestaurantUpdateWithoutRecipesInputSchema), z$2.lazy(() => RestaurantUncheckedUpdateWithoutRecipesInputSchema)]),
  create: z$2.union([z$2.lazy(() => RestaurantCreateWithoutRecipesInputSchema), z$2.lazy(() => RestaurantUncheckedCreateWithoutRecipesInputSchema)]),
  where: z$2.lazy(() => RestaurantWhereInputSchema).optional()
}).strict();
var RestaurantUpdateToOneWithWhereWithoutRecipesInputSchema = z$2.object({
  where: z$2.lazy(() => RestaurantWhereInputSchema).optional(),
  data: z$2.union([z$2.lazy(() => RestaurantUpdateWithoutRecipesInputSchema), z$2.lazy(() => RestaurantUncheckedUpdateWithoutRecipesInputSchema)])
}).strict();
var RestaurantUpdateWithoutRecipesInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  address: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  city: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  zipCode: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  state: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  owner: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  isDeleted: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  deleted: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  organization: z$2.lazy(() => OrganizationUpdateOneWithoutRestaurantsNestedInputSchema).optional(),
  users: z$2.lazy(() => UserUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  cookbooks: z$2.lazy(() => CookBookUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: z$2.lazy(() => InventoryUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  orders: z$2.lazy(() => OrderUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: z$2.lazy(() => MenuUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipment: z$2.lazy(() => EquipmentUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklist: z$2.lazy(() => QualityChecklistUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qustomerFeedback: z$2.lazy(() => CustomerFeedbackUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();
var RestaurantUncheckedUpdateWithoutRecipesInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  address: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  city: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  zipCode: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  state: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  owner: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  organizationId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  isDeleted: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  deleted: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  users: z$2.lazy(() => UserUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  cookbooks: z$2.lazy(() => CookBookUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: z$2.lazy(() => InventoryUncheckedUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  orders: z$2.lazy(() => OrderUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: z$2.lazy(() => MenuUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipment: z$2.lazy(() => EquipmentUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklist: z$2.lazy(() => QualityChecklistUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qustomerFeedback: z$2.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();
var CookBookUpsertWithoutRecipesInputSchema = z$2.object({
  update: z$2.union([z$2.lazy(() => CookBookUpdateWithoutRecipesInputSchema), z$2.lazy(() => CookBookUncheckedUpdateWithoutRecipesInputSchema)]),
  create: z$2.union([z$2.lazy(() => CookBookCreateWithoutRecipesInputSchema), z$2.lazy(() => CookBookUncheckedCreateWithoutRecipesInputSchema)]),
  where: z$2.lazy(() => CookBookWhereInputSchema).optional()
}).strict();
var CookBookUpdateToOneWithWhereWithoutRecipesInputSchema = z$2.object({
  where: z$2.lazy(() => CookBookWhereInputSchema).optional(),
  data: z$2.union([z$2.lazy(() => CookBookUpdateWithoutRecipesInputSchema), z$2.lazy(() => CookBookUncheckedUpdateWithoutRecipesInputSchema)])
}).strict();
var CookBookUpdateWithoutRecipesInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  category: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: z$2.lazy(() => RestaurantUpdateOneWithoutCookbooksNestedInputSchema).optional()
}).strict();
var CookBookUncheckedUpdateWithoutRecipesInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  category: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable()
}).strict();
var RecipeIngredientUpsertWithWhereUniqueWithoutRecipeInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeIngredientWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => RecipeIngredientUpdateWithoutRecipeInputSchema), z$2.lazy(() => RecipeIngredientUncheckedUpdateWithoutRecipeInputSchema)]),
  create: z$2.union([z$2.lazy(() => RecipeIngredientCreateWithoutRecipeInputSchema), z$2.lazy(() => RecipeIngredientUncheckedCreateWithoutRecipeInputSchema)])
}).strict();
var RecipeIngredientUpdateWithWhereUniqueWithoutRecipeInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeIngredientWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => RecipeIngredientUpdateWithoutRecipeInputSchema), z$2.lazy(() => RecipeIngredientUncheckedUpdateWithoutRecipeInputSchema)])
}).strict();
var RecipeIngredientUpdateManyWithWhereWithoutRecipeInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeIngredientScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => RecipeIngredientUpdateManyMutationInputSchema), z$2.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutRecipeInputSchema)])
}).strict();
var RecipeInstructionUpsertWithWhereUniqueWithoutRecipeInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeInstructionWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => RecipeInstructionUpdateWithoutRecipeInputSchema), z$2.lazy(() => RecipeInstructionUncheckedUpdateWithoutRecipeInputSchema)]),
  create: z$2.union([z$2.lazy(() => RecipeInstructionCreateWithoutRecipeInputSchema), z$2.lazy(() => RecipeInstructionUncheckedCreateWithoutRecipeInputSchema)])
}).strict();
var RecipeInstructionUpdateWithWhereUniqueWithoutRecipeInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeInstructionWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => RecipeInstructionUpdateWithoutRecipeInputSchema), z$2.lazy(() => RecipeInstructionUncheckedUpdateWithoutRecipeInputSchema)])
}).strict();
var RecipeInstructionUpdateManyWithWhereWithoutRecipeInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeInstructionScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => RecipeInstructionUpdateManyMutationInputSchema), z$2.lazy(() => RecipeInstructionUncheckedUpdateManyWithoutRecipeInputSchema)])
}).strict();
var MenuItemUpsertWithWhereUniqueWithoutRecipesInputSchema = z$2.object({
  where: z$2.lazy(() => MenuItemWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => MenuItemUpdateWithoutRecipesInputSchema), z$2.lazy(() => MenuItemUncheckedUpdateWithoutRecipesInputSchema)]),
  create: z$2.union([z$2.lazy(() => MenuItemCreateWithoutRecipesInputSchema), z$2.lazy(() => MenuItemUncheckedCreateWithoutRecipesInputSchema)])
}).strict();
var MenuItemUpdateWithWhereUniqueWithoutRecipesInputSchema = z$2.object({
  where: z$2.lazy(() => MenuItemWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => MenuItemUpdateWithoutRecipesInputSchema), z$2.lazy(() => MenuItemUncheckedUpdateWithoutRecipesInputSchema)])
}).strict();
var MenuItemUpdateManyWithWhereWithoutRecipesInputSchema = z$2.object({
  where: z$2.lazy(() => MenuItemScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => MenuItemUpdateManyMutationInputSchema), z$2.lazy(() => MenuItemUncheckedUpdateManyWithoutRecipesInputSchema)])
}).strict();
var FoodCostHistoryUpsertWithWhereUniqueWithoutRecipeInputSchema = z$2.object({
  where: z$2.lazy(() => FoodCostHistoryWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => FoodCostHistoryUpdateWithoutRecipeInputSchema), z$2.lazy(() => FoodCostHistoryUncheckedUpdateWithoutRecipeInputSchema)]),
  create: z$2.union([z$2.lazy(() => FoodCostHistoryCreateWithoutRecipeInputSchema), z$2.lazy(() => FoodCostHistoryUncheckedCreateWithoutRecipeInputSchema)])
}).strict();
var FoodCostHistoryUpdateWithWhereUniqueWithoutRecipeInputSchema = z$2.object({
  where: z$2.lazy(() => FoodCostHistoryWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => FoodCostHistoryUpdateWithoutRecipeInputSchema), z$2.lazy(() => FoodCostHistoryUncheckedUpdateWithoutRecipeInputSchema)])
}).strict();
var FoodCostHistoryUpdateManyWithWhereWithoutRecipeInputSchema = z$2.object({
  where: z$2.lazy(() => FoodCostHistoryScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => FoodCostHistoryUpdateManyMutationInputSchema), z$2.lazy(() => FoodCostHistoryUncheckedUpdateManyWithoutRecipeInputSchema)])
}).strict();
var FoodCostHistoryScalarWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => FoodCostHistoryScalarWhereInputSchema), z$2.lazy(() => FoodCostHistoryScalarWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => FoodCostHistoryScalarWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => FoodCostHistoryScalarWhereInputSchema), z$2.lazy(() => FoodCostHistoryScalarWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  recipeId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  cost: z$2.union([z$2.lazy(() => FloatFilterSchema), z$2.number()]).optional(),
  date: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional()
}).strict();
var PrepHistoryUpsertWithWhereUniqueWithoutRecipeInputSchema = z$2.object({
  where: z$2.lazy(() => PrepHistoryWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => PrepHistoryUpdateWithoutRecipeInputSchema), z$2.lazy(() => PrepHistoryUncheckedUpdateWithoutRecipeInputSchema)]),
  create: z$2.union([z$2.lazy(() => PrepHistoryCreateWithoutRecipeInputSchema), z$2.lazy(() => PrepHistoryUncheckedCreateWithoutRecipeInputSchema)])
}).strict();
var PrepHistoryUpdateWithWhereUniqueWithoutRecipeInputSchema = z$2.object({
  where: z$2.lazy(() => PrepHistoryWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => PrepHistoryUpdateWithoutRecipeInputSchema), z$2.lazy(() => PrepHistoryUncheckedUpdateWithoutRecipeInputSchema)])
}).strict();
var PrepHistoryUpdateManyWithWhereWithoutRecipeInputSchema = z$2.object({
  where: z$2.lazy(() => PrepHistoryScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => PrepHistoryUpdateManyMutationInputSchema), z$2.lazy(() => PrepHistoryUncheckedUpdateManyWithoutRecipeInputSchema)])
}).strict();
var PrepHistoryScalarWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => PrepHistoryScalarWhereInputSchema), z$2.lazy(() => PrepHistoryScalarWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => PrepHistoryScalarWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => PrepHistoryScalarWhereInputSchema), z$2.lazy(() => PrepHistoryScalarWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  recipeId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  quantity: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  date: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional()
}).strict();
var PrepBoardUpsertWithWhereUniqueWithoutRecipesInputSchema = z$2.object({
  where: z$2.lazy(() => PrepBoardWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => PrepBoardUpdateWithoutRecipesInputSchema), z$2.lazy(() => PrepBoardUncheckedUpdateWithoutRecipesInputSchema)]),
  create: z$2.union([z$2.lazy(() => PrepBoardCreateWithoutRecipesInputSchema), z$2.lazy(() => PrepBoardUncheckedCreateWithoutRecipesInputSchema)])
}).strict();
var PrepBoardUpdateWithWhereUniqueWithoutRecipesInputSchema = z$2.object({
  where: z$2.lazy(() => PrepBoardWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => PrepBoardUpdateWithoutRecipesInputSchema), z$2.lazy(() => PrepBoardUncheckedUpdateWithoutRecipesInputSchema)])
}).strict();
var PrepBoardUpdateManyWithWhereWithoutRecipesInputSchema = z$2.object({
  where: z$2.lazy(() => PrepBoardScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => PrepBoardUpdateManyMutationInputSchema), z$2.lazy(() => PrepBoardUncheckedUpdateManyWithoutRecipesInputSchema)])
}).strict();
var PrepBoardScalarWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => PrepBoardScalarWhereInputSchema), z$2.lazy(() => PrepBoardScalarWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => PrepBoardScalarWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => PrepBoardScalarWhereInputSchema), z$2.lazy(() => PrepBoardScalarWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  name: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  status: z$2.union([z$2.lazy(() => EnumPrepStatusFilterSchema), z$2.lazy(() => PrepStatusSchema)]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional()
}).strict();
var PrepItemUpsertWithWhereUniqueWithoutRecipeInputSchema = z$2.object({
  where: z$2.lazy(() => PrepItemWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => PrepItemUpdateWithoutRecipeInputSchema), z$2.lazy(() => PrepItemUncheckedUpdateWithoutRecipeInputSchema)]),
  create: z$2.union([z$2.lazy(() => PrepItemCreateWithoutRecipeInputSchema), z$2.lazy(() => PrepItemUncheckedCreateWithoutRecipeInputSchema)])
}).strict();
var PrepItemUpdateWithWhereUniqueWithoutRecipeInputSchema = z$2.object({
  where: z$2.lazy(() => PrepItemWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => PrepItemUpdateWithoutRecipeInputSchema), z$2.lazy(() => PrepItemUncheckedUpdateWithoutRecipeInputSchema)])
}).strict();
var PrepItemUpdateManyWithWhereWithoutRecipeInputSchema = z$2.object({
  where: z$2.lazy(() => PrepItemScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => PrepItemUpdateManyMutationInputSchema), z$2.lazy(() => PrepItemUncheckedUpdateManyWithoutRecipeInputSchema)])
}).strict();
var MenuItemRecipeUpsertWithWhereUniqueWithoutRecipeInputSchema = z$2.object({
  where: z$2.lazy(() => MenuItemRecipeWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => MenuItemRecipeUpdateWithoutRecipeInputSchema), z$2.lazy(() => MenuItemRecipeUncheckedUpdateWithoutRecipeInputSchema)]),
  create: z$2.union([z$2.lazy(() => MenuItemRecipeCreateWithoutRecipeInputSchema), z$2.lazy(() => MenuItemRecipeUncheckedCreateWithoutRecipeInputSchema)])
}).strict();
var MenuItemRecipeUpdateWithWhereUniqueWithoutRecipeInputSchema = z$2.object({
  where: z$2.lazy(() => MenuItemRecipeWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => MenuItemRecipeUpdateWithoutRecipeInputSchema), z$2.lazy(() => MenuItemRecipeUncheckedUpdateWithoutRecipeInputSchema)])
}).strict();
var MenuItemRecipeUpdateManyWithWhereWithoutRecipeInputSchema = z$2.object({
  where: z$2.lazy(() => MenuItemRecipeScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => MenuItemRecipeUpdateManyMutationInputSchema), z$2.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutRecipeInputSchema)])
}).strict();
var MenuItemRecipeScalarWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => MenuItemRecipeScalarWhereInputSchema), z$2.lazy(() => MenuItemRecipeScalarWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => MenuItemRecipeScalarWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => MenuItemRecipeScalarWhereInputSchema), z$2.lazy(() => MenuItemRecipeScalarWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  menuItemId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  recipeId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  joinAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional()
}).strict();
var ProductionPlanItemUpsertWithWhereUniqueWithoutRecipeInputSchema = z$2.object({
  where: z$2.lazy(() => ProductionPlanItemWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => ProductionPlanItemUpdateWithoutRecipeInputSchema), z$2.lazy(() => ProductionPlanItemUncheckedUpdateWithoutRecipeInputSchema)]),
  create: z$2.union([z$2.lazy(() => ProductionPlanItemCreateWithoutRecipeInputSchema), z$2.lazy(() => ProductionPlanItemUncheckedCreateWithoutRecipeInputSchema)])
}).strict();
var ProductionPlanItemUpdateWithWhereUniqueWithoutRecipeInputSchema = z$2.object({
  where: z$2.lazy(() => ProductionPlanItemWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => ProductionPlanItemUpdateWithoutRecipeInputSchema), z$2.lazy(() => ProductionPlanItemUncheckedUpdateWithoutRecipeInputSchema)])
}).strict();
var ProductionPlanItemUpdateManyWithWhereWithoutRecipeInputSchema = z$2.object({
  where: z$2.lazy(() => ProductionPlanItemScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => ProductionPlanItemUpdateManyMutationInputSchema), z$2.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutRecipeInputSchema)])
}).strict();
var InventoryWithdrawalUpsertWithWhereUniqueWithoutRecipeInputSchema = z$2.object({
  where: z$2.lazy(() => InventoryWithdrawalWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => InventoryWithdrawalUpdateWithoutRecipeInputSchema), z$2.lazy(() => InventoryWithdrawalUncheckedUpdateWithoutRecipeInputSchema)]),
  create: z$2.union([z$2.lazy(() => InventoryWithdrawalCreateWithoutRecipeInputSchema), z$2.lazy(() => InventoryWithdrawalUncheckedCreateWithoutRecipeInputSchema)])
}).strict();
var InventoryWithdrawalUpdateWithWhereUniqueWithoutRecipeInputSchema = z$2.object({
  where: z$2.lazy(() => InventoryWithdrawalWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => InventoryWithdrawalUpdateWithoutRecipeInputSchema), z$2.lazy(() => InventoryWithdrawalUncheckedUpdateWithoutRecipeInputSchema)])
}).strict();
var InventoryWithdrawalUpdateManyWithWhereWithoutRecipeInputSchema = z$2.object({
  where: z$2.lazy(() => InventoryWithdrawalScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => InventoryWithdrawalUpdateManyMutationInputSchema), z$2.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutRecipeInputSchema)])
}).strict();
var RecipeTagUpsertWithWhereUniqueWithoutRecipesInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeTagWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => RecipeTagUpdateWithoutRecipesInputSchema), z$2.lazy(() => RecipeTagUncheckedUpdateWithoutRecipesInputSchema)]),
  create: z$2.union([z$2.lazy(() => RecipeTagCreateWithoutRecipesInputSchema), z$2.lazy(() => RecipeTagUncheckedCreateWithoutRecipesInputSchema)])
}).strict();
var RecipeTagUpdateWithWhereUniqueWithoutRecipesInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeTagWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => RecipeTagUpdateWithoutRecipesInputSchema), z$2.lazy(() => RecipeTagUncheckedUpdateWithoutRecipesInputSchema)])
}).strict();
var RecipeTagUpdateManyWithWhereWithoutRecipesInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeTagScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => RecipeTagUpdateManyMutationInputSchema), z$2.lazy(() => RecipeTagUncheckedUpdateManyWithoutRecipesInputSchema)])
}).strict();
var RecipeTagScalarWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => RecipeTagScalarWhereInputSchema), z$2.lazy(() => RecipeTagScalarWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => RecipeTagScalarWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => RecipeTagScalarWhereInputSchema), z$2.lazy(() => RecipeTagScalarWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  name: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  description: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional()
}).strict();
var RecipeVersionUpsertWithWhereUniqueWithoutRecipeInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeVersionWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => RecipeVersionUpdateWithoutRecipeInputSchema), z$2.lazy(() => RecipeVersionUncheckedUpdateWithoutRecipeInputSchema)]),
  create: z$2.union([z$2.lazy(() => RecipeVersionCreateWithoutRecipeInputSchema), z$2.lazy(() => RecipeVersionUncheckedCreateWithoutRecipeInputSchema)])
}).strict();
var RecipeVersionUpdateWithWhereUniqueWithoutRecipeInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeVersionWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => RecipeVersionUpdateWithoutRecipeInputSchema), z$2.lazy(() => RecipeVersionUncheckedUpdateWithoutRecipeInputSchema)])
}).strict();
var RecipeVersionUpdateManyWithWhereWithoutRecipeInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeVersionScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => RecipeVersionUpdateManyMutationInputSchema), z$2.lazy(() => RecipeVersionUncheckedUpdateManyWithoutRecipeInputSchema)])
}).strict();
var RecipeEquipmentUpsertWithWhereUniqueWithoutRecipeInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeEquipmentWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => RecipeEquipmentUpdateWithoutRecipeInputSchema), z$2.lazy(() => RecipeEquipmentUncheckedUpdateWithoutRecipeInputSchema)]),
  create: z$2.union([z$2.lazy(() => RecipeEquipmentCreateWithoutRecipeInputSchema), z$2.lazy(() => RecipeEquipmentUncheckedCreateWithoutRecipeInputSchema)])
}).strict();
var RecipeEquipmentUpdateWithWhereUniqueWithoutRecipeInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeEquipmentWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => RecipeEquipmentUpdateWithoutRecipeInputSchema), z$2.lazy(() => RecipeEquipmentUncheckedUpdateWithoutRecipeInputSchema)])
}).strict();
var RecipeEquipmentUpdateManyWithWhereWithoutRecipeInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeEquipmentScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => RecipeEquipmentUpdateManyMutationInputSchema), z$2.lazy(() => RecipeEquipmentUncheckedUpdateManyWithoutRecipeInputSchema)])
}).strict();
var DietaryRestrictionUpsertWithWhereUniqueWithoutRecipesInputSchema = z$2.object({
  where: z$2.lazy(() => DietaryRestrictionWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => DietaryRestrictionUpdateWithoutRecipesInputSchema), z$2.lazy(() => DietaryRestrictionUncheckedUpdateWithoutRecipesInputSchema)]),
  create: z$2.union([z$2.lazy(() => DietaryRestrictionCreateWithoutRecipesInputSchema), z$2.lazy(() => DietaryRestrictionUncheckedCreateWithoutRecipesInputSchema)])
}).strict();
var DietaryRestrictionUpdateWithWhereUniqueWithoutRecipesInputSchema = z$2.object({
  where: z$2.lazy(() => DietaryRestrictionWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => DietaryRestrictionUpdateWithoutRecipesInputSchema), z$2.lazy(() => DietaryRestrictionUncheckedUpdateWithoutRecipesInputSchema)])
}).strict();
var DietaryRestrictionUpdateManyWithWhereWithoutRecipesInputSchema = z$2.object({
  where: z$2.lazy(() => DietaryRestrictionScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => DietaryRestrictionUpdateManyMutationInputSchema), z$2.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutRecipesInputSchema)])
}).strict();
var DietaryRestrictionScalarWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => DietaryRestrictionScalarWhereInputSchema), z$2.lazy(() => DietaryRestrictionScalarWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => DietaryRestrictionScalarWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => DietaryRestrictionScalarWhereInputSchema), z$2.lazy(() => DietaryRestrictionScalarWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  name: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  description: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  icon: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional()
}).strict();
var RecipeIngredientCreateWithoutIngredientInputSchema = z$2.object({
  quantity: z$2.number(),
  unit: z$2.string(),
  joinAt: z$2.coerce.date().optional(),
  recipe: z$2.lazy(() => RecipeCreateNestedOneWithoutIngredientsInputSchema),
  RecipeVersion: z$2.lazy(() => RecipeVersionCreateNestedOneWithoutIngredientsInputSchema).optional()
}).strict();
var RecipeIngredientUncheckedCreateWithoutIngredientInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  recipeId: z$2.number().int(),
  quantity: z$2.number(),
  unit: z$2.string(),
  joinAt: z$2.coerce.date().optional(),
  recipeVersionId: z$2.number().int().optional().nullable()
}).strict();
var RecipeIngredientCreateOrConnectWithoutIngredientInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeIngredientWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => RecipeIngredientCreateWithoutIngredientInputSchema), z$2.lazy(() => RecipeIngredientUncheckedCreateWithoutIngredientInputSchema)])
}).strict();
var RecipeIngredientCreateManyIngredientInputEnvelopeSchema = z$2.object({
  data: z$2.union([z$2.lazy(() => RecipeIngredientCreateManyIngredientInputSchema), z$2.lazy(() => RecipeIngredientCreateManyIngredientInputSchema).array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var InventoryItemCreateWithoutIngredientInputSchema = z$2.object({
  quantity: z$2.number(),
  unit: z$2.string(),
  minQuantity: z$2.number(),
  restockThreshold: z$2.number(),
  lastUpdated: z$2.coerce.date().optional(),
  inventory: z$2.lazy(() => InventoryCreateNestedOneWithoutItemsInputSchema),
  lastUpdatedBy: z$2.lazy(() => UserCreateNestedOneWithoutInventoryUpdatesInputSchema).optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalCreateNestedManyWithoutInventoryItemInputSchema).optional()
}).strict();
var InventoryItemUncheckedCreateWithoutIngredientInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  inventoryId: z$2.number().int(),
  quantity: z$2.number(),
  unit: z$2.string(),
  minQuantity: z$2.number(),
  restockThreshold: z$2.number(),
  lastUpdatedById: z$2.number().int().optional().nullable(),
  lastUpdated: z$2.coerce.date().optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutInventoryItemInputSchema).optional()
}).strict();
var InventoryItemCreateOrConnectWithoutIngredientInputSchema = z$2.object({
  where: z$2.lazy(() => InventoryItemWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => InventoryItemCreateWithoutIngredientInputSchema), z$2.lazy(() => InventoryItemUncheckedCreateWithoutIngredientInputSchema)])
}).strict();
var InventoryItemCreateManyIngredientInputEnvelopeSchema = z$2.object({
  data: z$2.union([z$2.lazy(() => InventoryItemCreateManyIngredientInputSchema), z$2.lazy(() => InventoryItemCreateManyIngredientInputSchema).array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var OrderItemCreateWithoutIngredientInputSchema = z$2.object({
  quantity: z$2.number(),
  unit: z$2.string(),
  price: z$2.number(),
  order: z$2.lazy(() => OrderCreateNestedOneWithoutItemsInputSchema)
}).strict();
var OrderItemUncheckedCreateWithoutIngredientInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  orderId: z$2.number().int(),
  quantity: z$2.number(),
  unit: z$2.string(),
  price: z$2.number()
}).strict();
var OrderItemCreateOrConnectWithoutIngredientInputSchema = z$2.object({
  where: z$2.lazy(() => OrderItemWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => OrderItemCreateWithoutIngredientInputSchema), z$2.lazy(() => OrderItemUncheckedCreateWithoutIngredientInputSchema)])
}).strict();
var OrderItemCreateManyIngredientInputEnvelopeSchema = z$2.object({
  data: z$2.union([z$2.lazy(() => OrderItemCreateManyIngredientInputSchema), z$2.lazy(() => OrderItemCreateManyIngredientInputSchema).array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var VendorCreateWithoutIngredientsInputSchema = z$2.object({
  name: z$2.string(),
  contact: z$2.string(),
  email: z$2.string(),
  phone: z$2.string(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  orders: z$2.lazy(() => OrderCreateNestedManyWithoutVendorInputSchema).optional(),
  supplierPriceHistory: z$2.lazy(() => SupplierPriceHistoryCreateNestedManyWithoutVendorInputSchema).optional()
}).strict();
var VendorUncheckedCreateWithoutIngredientsInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  contact: z$2.string(),
  email: z$2.string(),
  phone: z$2.string(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  orders: z$2.lazy(() => OrderUncheckedCreateNestedManyWithoutVendorInputSchema).optional(),
  supplierPriceHistory: z$2.lazy(() => SupplierPriceHistoryUncheckedCreateNestedManyWithoutVendorInputSchema).optional()
}).strict();
var VendorCreateOrConnectWithoutIngredientsInputSchema = z$2.object({
  where: z$2.lazy(() => VendorWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => VendorCreateWithoutIngredientsInputSchema), z$2.lazy(() => VendorUncheckedCreateWithoutIngredientsInputSchema)])
}).strict();
var WasteRecordCreateWithoutIngredienteInputSchema = z$2.object({
  date: z$2.coerce.date(),
  quantity: z$2.number(),
  unit: z$2.string(),
  reason: z$2.string(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  restaurant: z$2.lazy(() => RestaurantCreateNestedOneWithoutWasteRecordInputSchema),
  recordedBy: z$2.lazy(() => UserCreateNestedOneWithoutWasteRecordInputSchema)
}).strict();
var WasteRecordUncheckedCreateWithoutIngredienteInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  restaurantId: z$2.number().int(),
  date: z$2.coerce.date(),
  quantity: z$2.number(),
  unit: z$2.string(),
  reason: z$2.string(),
  recordedById: z$2.number().int(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var WasteRecordCreateOrConnectWithoutIngredienteInputSchema = z$2.object({
  where: z$2.lazy(() => WasteRecordWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => WasteRecordCreateWithoutIngredienteInputSchema), z$2.lazy(() => WasteRecordUncheckedCreateWithoutIngredienteInputSchema)])
}).strict();
var WasteRecordCreateManyIngredienteInputEnvelopeSchema = z$2.object({
  data: z$2.union([z$2.lazy(() => WasteRecordCreateManyIngredienteInputSchema), z$2.lazy(() => WasteRecordCreateManyIngredienteInputSchema).array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var IngredientAllergenCreateWithoutIngredientInputSchema = z$2.object({
  allergen: z$2.lazy(() => AllergenCreateNestedOneWithoutIngredientsInputSchema)
}).strict();
var IngredientAllergenUncheckedCreateWithoutIngredientInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  allergenId: z$2.number().int()
}).strict();
var IngredientAllergenCreateOrConnectWithoutIngredientInputSchema = z$2.object({
  where: z$2.lazy(() => IngredientAllergenWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => IngredientAllergenCreateWithoutIngredientInputSchema), z$2.lazy(() => IngredientAllergenUncheckedCreateWithoutIngredientInputSchema)])
}).strict();
var IngredientAllergenCreateManyIngredientInputEnvelopeSchema = z$2.object({
  data: z$2.union([z$2.lazy(() => IngredientAllergenCreateManyIngredientInputSchema), z$2.lazy(() => IngredientAllergenCreateManyIngredientInputSchema).array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var SupplierPriceHistoryCreateWithoutIngredientInputSchema = z$2.object({
  price: z$2.number(),
  unit: z$2.string(),
  startDate: z$2.coerce.date(),
  endDate: z$2.coerce.date().optional().nullable(),
  notes: z$2.string().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  vendor: z$2.lazy(() => VendorCreateNestedOneWithoutSupplierPriceHistoryInputSchema)
}).strict();
var SupplierPriceHistoryUncheckedCreateWithoutIngredientInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  vendorId: z$2.number().int(),
  price: z$2.number(),
  unit: z$2.string(),
  startDate: z$2.coerce.date(),
  endDate: z$2.coerce.date().optional().nullable(),
  notes: z$2.string().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var SupplierPriceHistoryCreateOrConnectWithoutIngredientInputSchema = z$2.object({
  where: z$2.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => SupplierPriceHistoryCreateWithoutIngredientInputSchema), z$2.lazy(() => SupplierPriceHistoryUncheckedCreateWithoutIngredientInputSchema)])
}).strict();
var SupplierPriceHistoryCreateManyIngredientInputEnvelopeSchema = z$2.object({
  data: z$2.union([z$2.lazy(() => SupplierPriceHistoryCreateManyIngredientInputSchema), z$2.lazy(() => SupplierPriceHistoryCreateManyIngredientInputSchema).array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var DietaryRestrictionCreateWithoutIngredientsInputSchema = z$2.object({
  name: z$2.string(),
  description: z$2.string().optional().nullable(),
  icon: z$2.string().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  menuItems: z$2.lazy(() => MenuItemCreateNestedManyWithoutDietaryRestrictionsInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeCreateNestedManyWithoutDietaryRestrictionsInputSchema).optional()
}).strict();
var DietaryRestrictionUncheckedCreateWithoutIngredientsInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  description: z$2.string().optional().nullable(),
  icon: z$2.string().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  menuItems: z$2.lazy(() => MenuItemUncheckedCreateNestedManyWithoutDietaryRestrictionsInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeUncheckedCreateNestedManyWithoutDietaryRestrictionsInputSchema).optional()
}).strict();
var DietaryRestrictionCreateOrConnectWithoutIngredientsInputSchema = z$2.object({
  where: z$2.lazy(() => DietaryRestrictionWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => DietaryRestrictionCreateWithoutIngredientsInputSchema), z$2.lazy(() => DietaryRestrictionUncheckedCreateWithoutIngredientsInputSchema)])
}).strict();
var RecipeIngredientUpsertWithWhereUniqueWithoutIngredientInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeIngredientWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => RecipeIngredientUpdateWithoutIngredientInputSchema), z$2.lazy(() => RecipeIngredientUncheckedUpdateWithoutIngredientInputSchema)]),
  create: z$2.union([z$2.lazy(() => RecipeIngredientCreateWithoutIngredientInputSchema), z$2.lazy(() => RecipeIngredientUncheckedCreateWithoutIngredientInputSchema)])
}).strict();
var RecipeIngredientUpdateWithWhereUniqueWithoutIngredientInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeIngredientWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => RecipeIngredientUpdateWithoutIngredientInputSchema), z$2.lazy(() => RecipeIngredientUncheckedUpdateWithoutIngredientInputSchema)])
}).strict();
var RecipeIngredientUpdateManyWithWhereWithoutIngredientInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeIngredientScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => RecipeIngredientUpdateManyMutationInputSchema), z$2.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutIngredientInputSchema)])
}).strict();
var InventoryItemUpsertWithWhereUniqueWithoutIngredientInputSchema = z$2.object({
  where: z$2.lazy(() => InventoryItemWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => InventoryItemUpdateWithoutIngredientInputSchema), z$2.lazy(() => InventoryItemUncheckedUpdateWithoutIngredientInputSchema)]),
  create: z$2.union([z$2.lazy(() => InventoryItemCreateWithoutIngredientInputSchema), z$2.lazy(() => InventoryItemUncheckedCreateWithoutIngredientInputSchema)])
}).strict();
var InventoryItemUpdateWithWhereUniqueWithoutIngredientInputSchema = z$2.object({
  where: z$2.lazy(() => InventoryItemWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => InventoryItemUpdateWithoutIngredientInputSchema), z$2.lazy(() => InventoryItemUncheckedUpdateWithoutIngredientInputSchema)])
}).strict();
var InventoryItemUpdateManyWithWhereWithoutIngredientInputSchema = z$2.object({
  where: z$2.lazy(() => InventoryItemScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => InventoryItemUpdateManyMutationInputSchema), z$2.lazy(() => InventoryItemUncheckedUpdateManyWithoutIngredientInputSchema)])
}).strict();
var OrderItemUpsertWithWhereUniqueWithoutIngredientInputSchema = z$2.object({
  where: z$2.lazy(() => OrderItemWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => OrderItemUpdateWithoutIngredientInputSchema), z$2.lazy(() => OrderItemUncheckedUpdateWithoutIngredientInputSchema)]),
  create: z$2.union([z$2.lazy(() => OrderItemCreateWithoutIngredientInputSchema), z$2.lazy(() => OrderItemUncheckedCreateWithoutIngredientInputSchema)])
}).strict();
var OrderItemUpdateWithWhereUniqueWithoutIngredientInputSchema = z$2.object({
  where: z$2.lazy(() => OrderItemWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => OrderItemUpdateWithoutIngredientInputSchema), z$2.lazy(() => OrderItemUncheckedUpdateWithoutIngredientInputSchema)])
}).strict();
var OrderItemUpdateManyWithWhereWithoutIngredientInputSchema = z$2.object({
  where: z$2.lazy(() => OrderItemScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => OrderItemUpdateManyMutationInputSchema), z$2.lazy(() => OrderItemUncheckedUpdateManyWithoutIngredientInputSchema)])
}).strict();
var OrderItemScalarWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => OrderItemScalarWhereInputSchema), z$2.lazy(() => OrderItemScalarWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => OrderItemScalarWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => OrderItemScalarWhereInputSchema), z$2.lazy(() => OrderItemScalarWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  orderId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  ingredientId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  quantity: z$2.union([z$2.lazy(() => FloatFilterSchema), z$2.number()]).optional(),
  unit: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  price: z$2.union([z$2.lazy(() => FloatFilterSchema), z$2.number()]).optional()
}).strict();
var VendorUpsertWithWhereUniqueWithoutIngredientsInputSchema = z$2.object({
  where: z$2.lazy(() => VendorWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => VendorUpdateWithoutIngredientsInputSchema), z$2.lazy(() => VendorUncheckedUpdateWithoutIngredientsInputSchema)]),
  create: z$2.union([z$2.lazy(() => VendorCreateWithoutIngredientsInputSchema), z$2.lazy(() => VendorUncheckedCreateWithoutIngredientsInputSchema)])
}).strict();
var VendorUpdateWithWhereUniqueWithoutIngredientsInputSchema = z$2.object({
  where: z$2.lazy(() => VendorWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => VendorUpdateWithoutIngredientsInputSchema), z$2.lazy(() => VendorUncheckedUpdateWithoutIngredientsInputSchema)])
}).strict();
var VendorUpdateManyWithWhereWithoutIngredientsInputSchema = z$2.object({
  where: z$2.lazy(() => VendorScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => VendorUpdateManyMutationInputSchema), z$2.lazy(() => VendorUncheckedUpdateManyWithoutIngredientsInputSchema)])
}).strict();
var VendorScalarWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => VendorScalarWhereInputSchema), z$2.lazy(() => VendorScalarWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => VendorScalarWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => VendorScalarWhereInputSchema), z$2.lazy(() => VendorScalarWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  name: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  contact: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  email: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  phone: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional()
}).strict();
var WasteRecordUpsertWithWhereUniqueWithoutIngredienteInputSchema = z$2.object({
  where: z$2.lazy(() => WasteRecordWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => WasteRecordUpdateWithoutIngredienteInputSchema), z$2.lazy(() => WasteRecordUncheckedUpdateWithoutIngredienteInputSchema)]),
  create: z$2.union([z$2.lazy(() => WasteRecordCreateWithoutIngredienteInputSchema), z$2.lazy(() => WasteRecordUncheckedCreateWithoutIngredienteInputSchema)])
}).strict();
var WasteRecordUpdateWithWhereUniqueWithoutIngredienteInputSchema = z$2.object({
  where: z$2.lazy(() => WasteRecordWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => WasteRecordUpdateWithoutIngredienteInputSchema), z$2.lazy(() => WasteRecordUncheckedUpdateWithoutIngredienteInputSchema)])
}).strict();
var WasteRecordUpdateManyWithWhereWithoutIngredienteInputSchema = z$2.object({
  where: z$2.lazy(() => WasteRecordScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => WasteRecordUpdateManyMutationInputSchema), z$2.lazy(() => WasteRecordUncheckedUpdateManyWithoutIngredienteInputSchema)])
}).strict();
var IngredientAllergenUpsertWithWhereUniqueWithoutIngredientInputSchema = z$2.object({
  where: z$2.lazy(() => IngredientAllergenWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => IngredientAllergenUpdateWithoutIngredientInputSchema), z$2.lazy(() => IngredientAllergenUncheckedUpdateWithoutIngredientInputSchema)]),
  create: z$2.union([z$2.lazy(() => IngredientAllergenCreateWithoutIngredientInputSchema), z$2.lazy(() => IngredientAllergenUncheckedCreateWithoutIngredientInputSchema)])
}).strict();
var IngredientAllergenUpdateWithWhereUniqueWithoutIngredientInputSchema = z$2.object({
  where: z$2.lazy(() => IngredientAllergenWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => IngredientAllergenUpdateWithoutIngredientInputSchema), z$2.lazy(() => IngredientAllergenUncheckedUpdateWithoutIngredientInputSchema)])
}).strict();
var IngredientAllergenUpdateManyWithWhereWithoutIngredientInputSchema = z$2.object({
  where: z$2.lazy(() => IngredientAllergenScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => IngredientAllergenUpdateManyMutationInputSchema), z$2.lazy(() => IngredientAllergenUncheckedUpdateManyWithoutIngredientInputSchema)])
}).strict();
var SupplierPriceHistoryUpsertWithWhereUniqueWithoutIngredientInputSchema = z$2.object({
  where: z$2.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => SupplierPriceHistoryUpdateWithoutIngredientInputSchema), z$2.lazy(() => SupplierPriceHistoryUncheckedUpdateWithoutIngredientInputSchema)]),
  create: z$2.union([z$2.lazy(() => SupplierPriceHistoryCreateWithoutIngredientInputSchema), z$2.lazy(() => SupplierPriceHistoryUncheckedCreateWithoutIngredientInputSchema)])
}).strict();
var SupplierPriceHistoryUpdateWithWhereUniqueWithoutIngredientInputSchema = z$2.object({
  where: z$2.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => SupplierPriceHistoryUpdateWithoutIngredientInputSchema), z$2.lazy(() => SupplierPriceHistoryUncheckedUpdateWithoutIngredientInputSchema)])
}).strict();
var SupplierPriceHistoryUpdateManyWithWhereWithoutIngredientInputSchema = z$2.object({
  where: z$2.lazy(() => SupplierPriceHistoryScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => SupplierPriceHistoryUpdateManyMutationInputSchema), z$2.lazy(() => SupplierPriceHistoryUncheckedUpdateManyWithoutIngredientInputSchema)])
}).strict();
var SupplierPriceHistoryScalarWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => SupplierPriceHistoryScalarWhereInputSchema), z$2.lazy(() => SupplierPriceHistoryScalarWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => SupplierPriceHistoryScalarWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => SupplierPriceHistoryScalarWhereInputSchema), z$2.lazy(() => SupplierPriceHistoryScalarWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  vendorId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  ingredientId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  price: z$2.union([z$2.lazy(() => FloatFilterSchema), z$2.number()]).optional(),
  unit: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  startDate: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  endDate: z$2.union([z$2.lazy(() => DateTimeNullableFilterSchema), z$2.coerce.date()]).optional().nullable(),
  notes: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional()
}).strict();
var DietaryRestrictionUpsertWithoutIngredientsInputSchema = z$2.object({
  update: z$2.union([z$2.lazy(() => DietaryRestrictionUpdateWithoutIngredientsInputSchema), z$2.lazy(() => DietaryRestrictionUncheckedUpdateWithoutIngredientsInputSchema)]),
  create: z$2.union([z$2.lazy(() => DietaryRestrictionCreateWithoutIngredientsInputSchema), z$2.lazy(() => DietaryRestrictionUncheckedCreateWithoutIngredientsInputSchema)]),
  where: z$2.lazy(() => DietaryRestrictionWhereInputSchema).optional()
}).strict();
var DietaryRestrictionUpdateToOneWithWhereWithoutIngredientsInputSchema = z$2.object({
  where: z$2.lazy(() => DietaryRestrictionWhereInputSchema).optional(),
  data: z$2.union([z$2.lazy(() => DietaryRestrictionUpdateWithoutIngredientsInputSchema), z$2.lazy(() => DietaryRestrictionUncheckedUpdateWithoutIngredientsInputSchema)])
}).strict();
var DietaryRestrictionUpdateWithoutIngredientsInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  icon: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  menuItems: z$2.lazy(() => MenuItemUpdateManyWithoutDietaryRestrictionsNestedInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeUpdateManyWithoutDietaryRestrictionsNestedInputSchema).optional()
}).strict();
var DietaryRestrictionUncheckedUpdateWithoutIngredientsInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  icon: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  menuItems: z$2.lazy(() => MenuItemUncheckedUpdateManyWithoutDietaryRestrictionsNestedInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeUncheckedUpdateManyWithoutDietaryRestrictionsNestedInputSchema).optional()
}).strict();
var RecipeCreateWithoutIngredientsInputSchema = z$2.object({
  name: z$2.string(),
  imageUrl: z$2.union([z$2.lazy(() => RecipeCreateimageUrlInputSchema), z$2.string().array()]).optional(),
  description: z$2.string().optional().nullable(),
  servings: z$2.number().int(),
  cookTime: z$2.number().int(),
  prepTime: z$2.number().int(),
  frequency: z$2.number().int().optional().nullable(),
  foodCost: z$2.number().optional().nullable(),
  isDeleted: z$2.boolean().optional(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  restaurant: z$2.lazy(() => RestaurantCreateNestedOneWithoutRecipesInputSchema),
  cookBook: z$2.lazy(() => CookBookCreateNestedOneWithoutRecipesInputSchema),
  instructions: z$2.lazy(() => RecipeInstructionCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z$2.lazy(() => MenuItemCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: z$2.lazy(() => FoodCostHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: z$2.lazy(() => PrepHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z$2.lazy(() => PrepBoardCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  MenuItemRecipe: z$2.lazy(() => MenuItemRecipeCreateNestedManyWithoutRecipeInputSchema).optional(),
  ProductionPlanItem: z$2.lazy(() => ProductionPlanItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z$2.lazy(() => RecipeTagCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: z$2.lazy(() => RecipeVersionCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipment: z$2.lazy(() => RecipeEquipmentCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionCreateNestedManyWithoutRecipesInputSchema).optional()
}).strict();
var RecipeUncheckedCreateWithoutIngredientsInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  imageUrl: z$2.union([z$2.lazy(() => RecipeCreateimageUrlInputSchema), z$2.string().array()]).optional(),
  description: z$2.string().optional().nullable(),
  servings: z$2.number().int(),
  cookTime: z$2.number().int(),
  prepTime: z$2.number().int(),
  frequency: z$2.number().int().optional().nullable(),
  restaurantId: z$2.number().int(),
  cookBookId: z$2.number().int(),
  foodCost: z$2.number().optional().nullable(),
  isDeleted: z$2.boolean().optional(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  instructions: z$2.lazy(() => RecipeInstructionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z$2.lazy(() => MenuItemUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: z$2.lazy(() => FoodCostHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: z$2.lazy(() => PrepHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z$2.lazy(() => PrepBoardUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  MenuItemRecipe: z$2.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  ProductionPlanItem: z$2.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z$2.lazy(() => RecipeTagUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: z$2.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipment: z$2.lazy(() => RecipeEquipmentUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutRecipesInputSchema).optional()
}).strict();
var RecipeCreateOrConnectWithoutIngredientsInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => RecipeCreateWithoutIngredientsInputSchema), z$2.lazy(() => RecipeUncheckedCreateWithoutIngredientsInputSchema)])
}).strict();
var IngredientCreateWithoutRecipeIngredientsInputSchema = z$2.object({
  name: z$2.string(),
  category: z$2.string(),
  price: z$2.number(),
  inventoryItems: z$2.lazy(() => InventoryItemCreateNestedManyWithoutIngredientInputSchema).optional(),
  orderItems: z$2.lazy(() => OrderItemCreateNestedManyWithoutIngredientInputSchema).optional(),
  vendors: z$2.lazy(() => VendorCreateNestedManyWithoutIngredientsInputSchema).optional(),
  WasteRecord: z$2.lazy(() => WasteRecordCreateNestedManyWithoutIngredienteInputSchema).optional(),
  IngredientAllergen: z$2.lazy(() => IngredientAllergenCreateNestedManyWithoutIngredientInputSchema).optional(),
  SupplierPriceHistory: z$2.lazy(() => SupplierPriceHistoryCreateNestedManyWithoutIngredientInputSchema).optional(),
  DietaryRestriction: z$2.lazy(() => DietaryRestrictionCreateNestedOneWithoutIngredientsInputSchema).optional()
}).strict();
var IngredientUncheckedCreateWithoutRecipeIngredientsInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  category: z$2.string(),
  price: z$2.number(),
  dietaryRestrictionId: z$2.number().int().optional().nullable(),
  inventoryItems: z$2.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  orderItems: z$2.lazy(() => OrderItemUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  vendors: z$2.lazy(() => VendorUncheckedCreateNestedManyWithoutIngredientsInputSchema).optional(),
  WasteRecord: z$2.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutIngredienteInputSchema).optional(),
  IngredientAllergen: z$2.lazy(() => IngredientAllergenUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  SupplierPriceHistory: z$2.lazy(() => SupplierPriceHistoryUncheckedCreateNestedManyWithoutIngredientInputSchema).optional()
}).strict();
var IngredientCreateOrConnectWithoutRecipeIngredientsInputSchema = z$2.object({
  where: z$2.lazy(() => IngredientWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => IngredientCreateWithoutRecipeIngredientsInputSchema), z$2.lazy(() => IngredientUncheckedCreateWithoutRecipeIngredientsInputSchema)])
}).strict();
var RecipeVersionCreateWithoutIngredientsInputSchema = z$2.object({
  versionNumber: z$2.number().int(),
  description: z$2.string().optional().nullable(),
  changes: z$2.string().optional().nullable(),
  isActive: z$2.boolean().optional(),
  approvedAt: z$2.coerce.date().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  recipe: z$2.lazy(() => RecipeCreateNestedOneWithoutVersionsInputSchema),
  instructions: z$2.lazy(() => RecipeInstructionCreateNestedManyWithoutRecipeVersionInputSchema).optional(),
  createdBy: z$2.lazy(() => UserCreateNestedOneWithoutRecipeVersionsCreatedInputSchema),
  approvedBy: z$2.lazy(() => UserCreateNestedOneWithoutRecipeVersionsApprovedInputSchema).optional()
}).strict();
var RecipeVersionUncheckedCreateWithoutIngredientsInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  recipeId: z$2.number().int(),
  versionNumber: z$2.number().int(),
  description: z$2.string().optional().nullable(),
  changes: z$2.string().optional().nullable(),
  isActive: z$2.boolean().optional(),
  createdById: z$2.number().int(),
  approvedById: z$2.number().int().optional().nullable(),
  approvedAt: z$2.coerce.date().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  instructions: z$2.lazy(() => RecipeInstructionUncheckedCreateNestedManyWithoutRecipeVersionInputSchema).optional()
}).strict();
var RecipeVersionCreateOrConnectWithoutIngredientsInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeVersionWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => RecipeVersionCreateWithoutIngredientsInputSchema), z$2.lazy(() => RecipeVersionUncheckedCreateWithoutIngredientsInputSchema)])
}).strict();
var RecipeUpsertWithoutIngredientsInputSchema = z$2.object({
  update: z$2.union([z$2.lazy(() => RecipeUpdateWithoutIngredientsInputSchema), z$2.lazy(() => RecipeUncheckedUpdateWithoutIngredientsInputSchema)]),
  create: z$2.union([z$2.lazy(() => RecipeCreateWithoutIngredientsInputSchema), z$2.lazy(() => RecipeUncheckedCreateWithoutIngredientsInputSchema)]),
  where: z$2.lazy(() => RecipeWhereInputSchema).optional()
}).strict();
var RecipeUpdateToOneWithWhereWithoutIngredientsInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeWhereInputSchema).optional(),
  data: z$2.union([z$2.lazy(() => RecipeUpdateWithoutIngredientsInputSchema), z$2.lazy(() => RecipeUncheckedUpdateWithoutIngredientsInputSchema)])
}).strict();
var RecipeUpdateWithoutIngredientsInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.lazy(() => RecipeUpdateimageUrlInputSchema), z$2.string().array()]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: z$2.lazy(() => RestaurantUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  cookBook: z$2.lazy(() => CookBookUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z$2.lazy(() => MenuItemUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: z$2.lazy(() => FoodCostHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: z$2.lazy(() => PrepHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z$2.lazy(() => PrepBoardUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  MenuItemRecipe: z$2.lazy(() => MenuItemRecipeUpdateManyWithoutRecipeNestedInputSchema).optional(),
  ProductionPlanItem: z$2.lazy(() => ProductionPlanItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z$2.lazy(() => RecipeTagUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: z$2.lazy(() => RecipeVersionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipment: z$2.lazy(() => RecipeEquipmentUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionUpdateManyWithoutRecipesNestedInputSchema).optional()
}).strict();
var RecipeUncheckedUpdateWithoutIngredientsInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.lazy(() => RecipeUpdateimageUrlInputSchema), z$2.string().array()]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookBookId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  instructions: z$2.lazy(() => RecipeInstructionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z$2.lazy(() => MenuItemUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: z$2.lazy(() => FoodCostHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: z$2.lazy(() => PrepHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z$2.lazy(() => PrepBoardUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  MenuItemRecipe: z$2.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  ProductionPlanItem: z$2.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z$2.lazy(() => RecipeTagUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: z$2.lazy(() => RecipeVersionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipment: z$2.lazy(() => RecipeEquipmentUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional()
}).strict();
var IngredientUpsertWithoutRecipeIngredientsInputSchema = z$2.object({
  update: z$2.union([z$2.lazy(() => IngredientUpdateWithoutRecipeIngredientsInputSchema), z$2.lazy(() => IngredientUncheckedUpdateWithoutRecipeIngredientsInputSchema)]),
  create: z$2.union([z$2.lazy(() => IngredientCreateWithoutRecipeIngredientsInputSchema), z$2.lazy(() => IngredientUncheckedCreateWithoutRecipeIngredientsInputSchema)]),
  where: z$2.lazy(() => IngredientWhereInputSchema).optional()
}).strict();
var IngredientUpdateToOneWithWhereWithoutRecipeIngredientsInputSchema = z$2.object({
  where: z$2.lazy(() => IngredientWhereInputSchema).optional(),
  data: z$2.union([z$2.lazy(() => IngredientUpdateWithoutRecipeIngredientsInputSchema), z$2.lazy(() => IngredientUncheckedUpdateWithoutRecipeIngredientsInputSchema)])
}).strict();
var IngredientUpdateWithoutRecipeIngredientsInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  category: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  inventoryItems: z$2.lazy(() => InventoryItemUpdateManyWithoutIngredientNestedInputSchema).optional(),
  orderItems: z$2.lazy(() => OrderItemUpdateManyWithoutIngredientNestedInputSchema).optional(),
  vendors: z$2.lazy(() => VendorUpdateManyWithoutIngredientsNestedInputSchema).optional(),
  WasteRecord: z$2.lazy(() => WasteRecordUpdateManyWithoutIngredienteNestedInputSchema).optional(),
  IngredientAllergen: z$2.lazy(() => IngredientAllergenUpdateManyWithoutIngredientNestedInputSchema).optional(),
  SupplierPriceHistory: z$2.lazy(() => SupplierPriceHistoryUpdateManyWithoutIngredientNestedInputSchema).optional(),
  DietaryRestriction: z$2.lazy(() => DietaryRestrictionUpdateOneWithoutIngredientsNestedInputSchema).optional()
}).strict();
var IngredientUncheckedUpdateWithoutRecipeIngredientsInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  category: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  dietaryRestrictionId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  inventoryItems: z$2.lazy(() => InventoryItemUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  orderItems: z$2.lazy(() => OrderItemUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  vendors: z$2.lazy(() => VendorUncheckedUpdateManyWithoutIngredientsNestedInputSchema).optional(),
  WasteRecord: z$2.lazy(() => WasteRecordUncheckedUpdateManyWithoutIngredienteNestedInputSchema).optional(),
  IngredientAllergen: z$2.lazy(() => IngredientAllergenUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  SupplierPriceHistory: z$2.lazy(() => SupplierPriceHistoryUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional()
}).strict();
var RecipeVersionUpsertWithoutIngredientsInputSchema = z$2.object({
  update: z$2.union([z$2.lazy(() => RecipeVersionUpdateWithoutIngredientsInputSchema), z$2.lazy(() => RecipeVersionUncheckedUpdateWithoutIngredientsInputSchema)]),
  create: z$2.union([z$2.lazy(() => RecipeVersionCreateWithoutIngredientsInputSchema), z$2.lazy(() => RecipeVersionUncheckedCreateWithoutIngredientsInputSchema)]),
  where: z$2.lazy(() => RecipeVersionWhereInputSchema).optional()
}).strict();
var RecipeVersionUpdateToOneWithWhereWithoutIngredientsInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeVersionWhereInputSchema).optional(),
  data: z$2.union([z$2.lazy(() => RecipeVersionUpdateWithoutIngredientsInputSchema), z$2.lazy(() => RecipeVersionUncheckedUpdateWithoutIngredientsInputSchema)])
}).strict();
var RecipeVersionUpdateWithoutIngredientsInputSchema = z$2.object({
  versionNumber: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  changes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isActive: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  approvedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  recipe: z$2.lazy(() => RecipeUpdateOneRequiredWithoutVersionsNestedInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionUpdateManyWithoutRecipeVersionNestedInputSchema).optional(),
  createdBy: z$2.lazy(() => UserUpdateOneRequiredWithoutRecipeVersionsCreatedNestedInputSchema).optional(),
  approvedBy: z$2.lazy(() => UserUpdateOneWithoutRecipeVersionsApprovedNestedInputSchema).optional()
}).strict();
var RecipeVersionUncheckedUpdateWithoutIngredientsInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  versionNumber: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  changes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isActive: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdById: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  approvedById: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  approvedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  instructions: z$2.lazy(() => RecipeInstructionUncheckedUpdateManyWithoutRecipeVersionNestedInputSchema).optional()
}).strict();
var RecipeCreateWithoutInstructionsInputSchema = z$2.object({
  name: z$2.string(),
  imageUrl: z$2.union([z$2.lazy(() => RecipeCreateimageUrlInputSchema), z$2.string().array()]).optional(),
  description: z$2.string().optional().nullable(),
  servings: z$2.number().int(),
  cookTime: z$2.number().int(),
  prepTime: z$2.number().int(),
  frequency: z$2.number().int().optional().nullable(),
  foodCost: z$2.number().optional().nullable(),
  isDeleted: z$2.boolean().optional(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  restaurant: z$2.lazy(() => RestaurantCreateNestedOneWithoutRecipesInputSchema),
  cookBook: z$2.lazy(() => CookBookCreateNestedOneWithoutRecipesInputSchema),
  ingredients: z$2.lazy(() => RecipeIngredientCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z$2.lazy(() => MenuItemCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: z$2.lazy(() => FoodCostHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: z$2.lazy(() => PrepHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z$2.lazy(() => PrepBoardCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  MenuItemRecipe: z$2.lazy(() => MenuItemRecipeCreateNestedManyWithoutRecipeInputSchema).optional(),
  ProductionPlanItem: z$2.lazy(() => ProductionPlanItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z$2.lazy(() => RecipeTagCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: z$2.lazy(() => RecipeVersionCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipment: z$2.lazy(() => RecipeEquipmentCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionCreateNestedManyWithoutRecipesInputSchema).optional()
}).strict();
var RecipeUncheckedCreateWithoutInstructionsInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  imageUrl: z$2.union([z$2.lazy(() => RecipeCreateimageUrlInputSchema), z$2.string().array()]).optional(),
  description: z$2.string().optional().nullable(),
  servings: z$2.number().int(),
  cookTime: z$2.number().int(),
  prepTime: z$2.number().int(),
  frequency: z$2.number().int().optional().nullable(),
  restaurantId: z$2.number().int(),
  cookBookId: z$2.number().int(),
  foodCost: z$2.number().optional().nullable(),
  isDeleted: z$2.boolean().optional(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  ingredients: z$2.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z$2.lazy(() => MenuItemUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: z$2.lazy(() => FoodCostHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: z$2.lazy(() => PrepHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z$2.lazy(() => PrepBoardUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  MenuItemRecipe: z$2.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  ProductionPlanItem: z$2.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z$2.lazy(() => RecipeTagUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: z$2.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipment: z$2.lazy(() => RecipeEquipmentUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutRecipesInputSchema).optional()
}).strict();
var RecipeCreateOrConnectWithoutInstructionsInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => RecipeCreateWithoutInstructionsInputSchema), z$2.lazy(() => RecipeUncheckedCreateWithoutInstructionsInputSchema)])
}).strict();
var RecipeVersionCreateWithoutInstructionsInputSchema = z$2.object({
  versionNumber: z$2.number().int(),
  description: z$2.string().optional().nullable(),
  changes: z$2.string().optional().nullable(),
  isActive: z$2.boolean().optional(),
  approvedAt: z$2.coerce.date().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  recipe: z$2.lazy(() => RecipeCreateNestedOneWithoutVersionsInputSchema),
  ingredients: z$2.lazy(() => RecipeIngredientCreateNestedManyWithoutRecipeVersionInputSchema).optional(),
  createdBy: z$2.lazy(() => UserCreateNestedOneWithoutRecipeVersionsCreatedInputSchema),
  approvedBy: z$2.lazy(() => UserCreateNestedOneWithoutRecipeVersionsApprovedInputSchema).optional()
}).strict();
var RecipeVersionUncheckedCreateWithoutInstructionsInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  recipeId: z$2.number().int(),
  versionNumber: z$2.number().int(),
  description: z$2.string().optional().nullable(),
  changes: z$2.string().optional().nullable(),
  isActive: z$2.boolean().optional(),
  createdById: z$2.number().int(),
  approvedById: z$2.number().int().optional().nullable(),
  approvedAt: z$2.coerce.date().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  ingredients: z$2.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutRecipeVersionInputSchema).optional()
}).strict();
var RecipeVersionCreateOrConnectWithoutInstructionsInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeVersionWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => RecipeVersionCreateWithoutInstructionsInputSchema), z$2.lazy(() => RecipeVersionUncheckedCreateWithoutInstructionsInputSchema)])
}).strict();
var RecipeUpsertWithoutInstructionsInputSchema = z$2.object({
  update: z$2.union([z$2.lazy(() => RecipeUpdateWithoutInstructionsInputSchema), z$2.lazy(() => RecipeUncheckedUpdateWithoutInstructionsInputSchema)]),
  create: z$2.union([z$2.lazy(() => RecipeCreateWithoutInstructionsInputSchema), z$2.lazy(() => RecipeUncheckedCreateWithoutInstructionsInputSchema)]),
  where: z$2.lazy(() => RecipeWhereInputSchema).optional()
}).strict();
var RecipeUpdateToOneWithWhereWithoutInstructionsInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeWhereInputSchema).optional(),
  data: z$2.union([z$2.lazy(() => RecipeUpdateWithoutInstructionsInputSchema), z$2.lazy(() => RecipeUncheckedUpdateWithoutInstructionsInputSchema)])
}).strict();
var RecipeUpdateWithoutInstructionsInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.lazy(() => RecipeUpdateimageUrlInputSchema), z$2.string().array()]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: z$2.lazy(() => RestaurantUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  cookBook: z$2.lazy(() => CookBookUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  ingredients: z$2.lazy(() => RecipeIngredientUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z$2.lazy(() => MenuItemUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: z$2.lazy(() => FoodCostHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: z$2.lazy(() => PrepHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z$2.lazy(() => PrepBoardUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  MenuItemRecipe: z$2.lazy(() => MenuItemRecipeUpdateManyWithoutRecipeNestedInputSchema).optional(),
  ProductionPlanItem: z$2.lazy(() => ProductionPlanItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z$2.lazy(() => RecipeTagUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: z$2.lazy(() => RecipeVersionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipment: z$2.lazy(() => RecipeEquipmentUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionUpdateManyWithoutRecipesNestedInputSchema).optional()
}).strict();
var RecipeUncheckedUpdateWithoutInstructionsInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.lazy(() => RecipeUpdateimageUrlInputSchema), z$2.string().array()]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookBookId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  ingredients: z$2.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z$2.lazy(() => MenuItemUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: z$2.lazy(() => FoodCostHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: z$2.lazy(() => PrepHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z$2.lazy(() => PrepBoardUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  MenuItemRecipe: z$2.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  ProductionPlanItem: z$2.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z$2.lazy(() => RecipeTagUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: z$2.lazy(() => RecipeVersionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipment: z$2.lazy(() => RecipeEquipmentUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional()
}).strict();
var RecipeVersionUpsertWithoutInstructionsInputSchema = z$2.object({
  update: z$2.union([z$2.lazy(() => RecipeVersionUpdateWithoutInstructionsInputSchema), z$2.lazy(() => RecipeVersionUncheckedUpdateWithoutInstructionsInputSchema)]),
  create: z$2.union([z$2.lazy(() => RecipeVersionCreateWithoutInstructionsInputSchema), z$2.lazy(() => RecipeVersionUncheckedCreateWithoutInstructionsInputSchema)]),
  where: z$2.lazy(() => RecipeVersionWhereInputSchema).optional()
}).strict();
var RecipeVersionUpdateToOneWithWhereWithoutInstructionsInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeVersionWhereInputSchema).optional(),
  data: z$2.union([z$2.lazy(() => RecipeVersionUpdateWithoutInstructionsInputSchema), z$2.lazy(() => RecipeVersionUncheckedUpdateWithoutInstructionsInputSchema)])
}).strict();
var RecipeVersionUpdateWithoutInstructionsInputSchema = z$2.object({
  versionNumber: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  changes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isActive: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  approvedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  recipe: z$2.lazy(() => RecipeUpdateOneRequiredWithoutVersionsNestedInputSchema).optional(),
  ingredients: z$2.lazy(() => RecipeIngredientUpdateManyWithoutRecipeVersionNestedInputSchema).optional(),
  createdBy: z$2.lazy(() => UserUpdateOneRequiredWithoutRecipeVersionsCreatedNestedInputSchema).optional(),
  approvedBy: z$2.lazy(() => UserUpdateOneWithoutRecipeVersionsApprovedNestedInputSchema).optional()
}).strict();
var RecipeVersionUncheckedUpdateWithoutInstructionsInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  versionNumber: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  changes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isActive: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdById: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  approvedById: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  approvedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  ingredients: z$2.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutRecipeVersionNestedInputSchema).optional()
}).strict();
var RestaurantCreateWithoutInventoryInputSchema = z$2.object({
  name: z$2.string(),
  imageUrl: z$2.string().optional().nullable(),
  address: z$2.string(),
  city: z$2.string(),
  zipCode: z$2.string(),
  state: z$2.string(),
  owner: z$2.string(),
  foodCost: z$2.number().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  isDeleted: z$2.boolean().optional(),
  deleted: z$2.coerce.date().optional().nullable(),
  organization: z$2.lazy(() => OrganizationCreateNestedOneWithoutRestaurantsInputSchema).optional(),
  users: z$2.lazy(() => UserCreateNestedManyWithoutRestaurantInputSchema).optional(),
  cookbooks: z$2.lazy(() => CookBookCreateNestedManyWithoutRestaurantInputSchema).optional(),
  orders: z$2.lazy(() => OrderCreateNestedManyWithoutRestaurantInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: z$2.lazy(() => MenuCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipment: z$2.lazy(() => EquipmentCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklist: z$2.lazy(() => QualityChecklistCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qustomerFeedback: z$2.lazy(() => CustomerFeedbackCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();
var RestaurantUncheckedCreateWithoutInventoryInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  imageUrl: z$2.string().optional().nullable(),
  address: z$2.string(),
  city: z$2.string(),
  zipCode: z$2.string(),
  state: z$2.string(),
  owner: z$2.string(),
  organizationId: z$2.number().int().optional().nullable(),
  foodCost: z$2.number().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  isDeleted: z$2.boolean().optional(),
  deleted: z$2.coerce.date().optional().nullable(),
  users: z$2.lazy(() => UserUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  cookbooks: z$2.lazy(() => CookBookUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  orders: z$2.lazy(() => OrderUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: z$2.lazy(() => MenuUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipment: z$2.lazy(() => EquipmentUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklist: z$2.lazy(() => QualityChecklistUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qustomerFeedback: z$2.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();
var RestaurantCreateOrConnectWithoutInventoryInputSchema = z$2.object({
  where: z$2.lazy(() => RestaurantWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => RestaurantCreateWithoutInventoryInputSchema), z$2.lazy(() => RestaurantUncheckedCreateWithoutInventoryInputSchema)])
}).strict();
var InventoryItemCreateWithoutInventoryInputSchema = z$2.object({
  quantity: z$2.number(),
  unit: z$2.string(),
  minQuantity: z$2.number(),
  restockThreshold: z$2.number(),
  lastUpdated: z$2.coerce.date().optional(),
  ingredient: z$2.lazy(() => IngredientCreateNestedOneWithoutInventoryItemsInputSchema),
  lastUpdatedBy: z$2.lazy(() => UserCreateNestedOneWithoutInventoryUpdatesInputSchema).optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalCreateNestedManyWithoutInventoryItemInputSchema).optional()
}).strict();
var InventoryItemUncheckedCreateWithoutInventoryInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  ingredientId: z$2.number().int(),
  quantity: z$2.number(),
  unit: z$2.string(),
  minQuantity: z$2.number(),
  restockThreshold: z$2.number(),
  lastUpdatedById: z$2.number().int().optional().nullable(),
  lastUpdated: z$2.coerce.date().optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutInventoryItemInputSchema).optional()
}).strict();
var InventoryItemCreateOrConnectWithoutInventoryInputSchema = z$2.object({
  where: z$2.lazy(() => InventoryItemWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => InventoryItemCreateWithoutInventoryInputSchema), z$2.lazy(() => InventoryItemUncheckedCreateWithoutInventoryInputSchema)])
}).strict();
var InventoryItemCreateManyInventoryInputEnvelopeSchema = z$2.object({
  data: z$2.union([z$2.lazy(() => InventoryItemCreateManyInventoryInputSchema), z$2.lazy(() => InventoryItemCreateManyInventoryInputSchema).array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var RestaurantUpsertWithoutInventoryInputSchema = z$2.object({
  update: z$2.union([z$2.lazy(() => RestaurantUpdateWithoutInventoryInputSchema), z$2.lazy(() => RestaurantUncheckedUpdateWithoutInventoryInputSchema)]),
  create: z$2.union([z$2.lazy(() => RestaurantCreateWithoutInventoryInputSchema), z$2.lazy(() => RestaurantUncheckedCreateWithoutInventoryInputSchema)]),
  where: z$2.lazy(() => RestaurantWhereInputSchema).optional()
}).strict();
var RestaurantUpdateToOneWithWhereWithoutInventoryInputSchema = z$2.object({
  where: z$2.lazy(() => RestaurantWhereInputSchema).optional(),
  data: z$2.union([z$2.lazy(() => RestaurantUpdateWithoutInventoryInputSchema), z$2.lazy(() => RestaurantUncheckedUpdateWithoutInventoryInputSchema)])
}).strict();
var RestaurantUpdateWithoutInventoryInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  address: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  city: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  zipCode: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  state: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  owner: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  isDeleted: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  deleted: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  organization: z$2.lazy(() => OrganizationUpdateOneWithoutRestaurantsNestedInputSchema).optional(),
  users: z$2.lazy(() => UserUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  cookbooks: z$2.lazy(() => CookBookUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  orders: z$2.lazy(() => OrderUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: z$2.lazy(() => MenuUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipment: z$2.lazy(() => EquipmentUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklist: z$2.lazy(() => QualityChecklistUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qustomerFeedback: z$2.lazy(() => CustomerFeedbackUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();
var RestaurantUncheckedUpdateWithoutInventoryInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  address: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  city: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  zipCode: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  state: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  owner: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  organizationId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  isDeleted: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  deleted: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  users: z$2.lazy(() => UserUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  cookbooks: z$2.lazy(() => CookBookUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  orders: z$2.lazy(() => OrderUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: z$2.lazy(() => MenuUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipment: z$2.lazy(() => EquipmentUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklist: z$2.lazy(() => QualityChecklistUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qustomerFeedback: z$2.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();
var InventoryItemUpsertWithWhereUniqueWithoutInventoryInputSchema = z$2.object({
  where: z$2.lazy(() => InventoryItemWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => InventoryItemUpdateWithoutInventoryInputSchema), z$2.lazy(() => InventoryItemUncheckedUpdateWithoutInventoryInputSchema)]),
  create: z$2.union([z$2.lazy(() => InventoryItemCreateWithoutInventoryInputSchema), z$2.lazy(() => InventoryItemUncheckedCreateWithoutInventoryInputSchema)])
}).strict();
var InventoryItemUpdateWithWhereUniqueWithoutInventoryInputSchema = z$2.object({
  where: z$2.lazy(() => InventoryItemWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => InventoryItemUpdateWithoutInventoryInputSchema), z$2.lazy(() => InventoryItemUncheckedUpdateWithoutInventoryInputSchema)])
}).strict();
var InventoryItemUpdateManyWithWhereWithoutInventoryInputSchema = z$2.object({
  where: z$2.lazy(() => InventoryItemScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => InventoryItemUpdateManyMutationInputSchema), z$2.lazy(() => InventoryItemUncheckedUpdateManyWithoutInventoryInputSchema)])
}).strict();
var InventoryCreateWithoutItemsInputSchema = z$2.object({
  restaurant: z$2.lazy(() => RestaurantCreateNestedOneWithoutInventoryInputSchema)
}).strict();
var InventoryUncheckedCreateWithoutItemsInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  restaurantId: z$2.number().int()
}).strict();
var InventoryCreateOrConnectWithoutItemsInputSchema = z$2.object({
  where: z$2.lazy(() => InventoryWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => InventoryCreateWithoutItemsInputSchema), z$2.lazy(() => InventoryUncheckedCreateWithoutItemsInputSchema)])
}).strict();
var IngredientCreateWithoutInventoryItemsInputSchema = z$2.object({
  name: z$2.string(),
  category: z$2.string(),
  price: z$2.number(),
  recipeIngredients: z$2.lazy(() => RecipeIngredientCreateNestedManyWithoutIngredientInputSchema).optional(),
  orderItems: z$2.lazy(() => OrderItemCreateNestedManyWithoutIngredientInputSchema).optional(),
  vendors: z$2.lazy(() => VendorCreateNestedManyWithoutIngredientsInputSchema).optional(),
  WasteRecord: z$2.lazy(() => WasteRecordCreateNestedManyWithoutIngredienteInputSchema).optional(),
  IngredientAllergen: z$2.lazy(() => IngredientAllergenCreateNestedManyWithoutIngredientInputSchema).optional(),
  SupplierPriceHistory: z$2.lazy(() => SupplierPriceHistoryCreateNestedManyWithoutIngredientInputSchema).optional(),
  DietaryRestriction: z$2.lazy(() => DietaryRestrictionCreateNestedOneWithoutIngredientsInputSchema).optional()
}).strict();
var IngredientUncheckedCreateWithoutInventoryItemsInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  category: z$2.string(),
  price: z$2.number(),
  dietaryRestrictionId: z$2.number().int().optional().nullable(),
  recipeIngredients: z$2.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  orderItems: z$2.lazy(() => OrderItemUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  vendors: z$2.lazy(() => VendorUncheckedCreateNestedManyWithoutIngredientsInputSchema).optional(),
  WasteRecord: z$2.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutIngredienteInputSchema).optional(),
  IngredientAllergen: z$2.lazy(() => IngredientAllergenUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  SupplierPriceHistory: z$2.lazy(() => SupplierPriceHistoryUncheckedCreateNestedManyWithoutIngredientInputSchema).optional()
}).strict();
var IngredientCreateOrConnectWithoutInventoryItemsInputSchema = z$2.object({
  where: z$2.lazy(() => IngredientWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => IngredientCreateWithoutInventoryItemsInputSchema), z$2.lazy(() => IngredientUncheckedCreateWithoutInventoryItemsInputSchema)])
}).strict();
var UserCreateWithoutInventoryUpdatesInputSchema = z$2.object({
  email: z$2.string(),
  sub: z$2.number().int().optional().nullable(),
  passwordHash: z$2.string(),
  firstName: z$2.string(),
  lastName: z$2.string(),
  profileImage: z$2.string().optional().nullable(),
  verified: z$2.boolean().optional(),
  role: z$2.lazy(() => UserRoleSchema),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  organization: z$2.lazy(() => OrganizationCreateNestedOneWithoutUsersInputSchema).optional(),
  restaurant: z$2.lazy(() => RestaurantCreateNestedOneWithoutUsersInputSchema).optional(),
  shifts: z$2.lazy(() => ShiftCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  sessions: z$2.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: z$2.lazy(() => PasswordResetCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItem: z$2.lazy(() => ProductionPlanItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: z$2.lazy(() => AvailabilityCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraint: z$2.lazy(() => SchedulingConstraintCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedback: z$2.lazy(() => CustomerFeedbackCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: z$2.lazy(() => RecipeVersionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: z$2.lazy(() => RecipeVersionCreateNestedManyWithoutApprovedByInputSchema).optional()
}).strict();
var UserUncheckedCreateWithoutInventoryUpdatesInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  email: z$2.string(),
  sub: z$2.number().int().optional().nullable(),
  passwordHash: z$2.string(),
  firstName: z$2.string(),
  lastName: z$2.string(),
  profileImage: z$2.string().optional().nullable(),
  verified: z$2.boolean().optional(),
  role: z$2.lazy(() => UserRoleSchema),
  organizationId: z$2.number().int().optional().nullable(),
  restaurantId: z$2.number().int().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  shifts: z$2.lazy(() => ShiftUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  sessions: z$2.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: z$2.lazy(() => PasswordResetUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItem: z$2.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: z$2.lazy(() => AvailabilityUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraint: z$2.lazy(() => SchedulingConstraintUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteUncheckedCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedback: z$2.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: z$2.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: z$2.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutApprovedByInputSchema).optional()
}).strict();
var UserCreateOrConnectWithoutInventoryUpdatesInputSchema = z$2.object({
  where: z$2.lazy(() => UserWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => UserCreateWithoutInventoryUpdatesInputSchema), z$2.lazy(() => UserUncheckedCreateWithoutInventoryUpdatesInputSchema)])
}).strict();
var InventoryWithdrawalCreateWithoutInventoryItemInputSchema = z$2.object({
  dateTime: z$2.coerce.date(),
  quantity: z$2.number(),
  unit: z$2.string(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  recipe: z$2.lazy(() => RecipeCreateNestedOneWithoutInventoryWithdrawalInputSchema).optional(),
  createdBy: z$2.lazy(() => UserCreateNestedOneWithoutInventoryWithdrawalInputSchema)
}).strict();
var InventoryWithdrawalUncheckedCreateWithoutInventoryItemInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  dateTime: z$2.coerce.date(),
  quantity: z$2.number(),
  unit: z$2.string(),
  recipeId: z$2.number().int().optional().nullable(),
  createdById: z$2.number().int(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var InventoryWithdrawalCreateOrConnectWithoutInventoryItemInputSchema = z$2.object({
  where: z$2.lazy(() => InventoryWithdrawalWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => InventoryWithdrawalCreateWithoutInventoryItemInputSchema), z$2.lazy(() => InventoryWithdrawalUncheckedCreateWithoutInventoryItemInputSchema)])
}).strict();
var InventoryWithdrawalCreateManyInventoryItemInputEnvelopeSchema = z$2.object({
  data: z$2.union([z$2.lazy(() => InventoryWithdrawalCreateManyInventoryItemInputSchema), z$2.lazy(() => InventoryWithdrawalCreateManyInventoryItemInputSchema).array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var InventoryUpsertWithoutItemsInputSchema = z$2.object({
  update: z$2.union([z$2.lazy(() => InventoryUpdateWithoutItemsInputSchema), z$2.lazy(() => InventoryUncheckedUpdateWithoutItemsInputSchema)]),
  create: z$2.union([z$2.lazy(() => InventoryCreateWithoutItemsInputSchema), z$2.lazy(() => InventoryUncheckedCreateWithoutItemsInputSchema)]),
  where: z$2.lazy(() => InventoryWhereInputSchema).optional()
}).strict();
var InventoryUpdateToOneWithWhereWithoutItemsInputSchema = z$2.object({
  where: z$2.lazy(() => InventoryWhereInputSchema).optional(),
  data: z$2.union([z$2.lazy(() => InventoryUpdateWithoutItemsInputSchema), z$2.lazy(() => InventoryUncheckedUpdateWithoutItemsInputSchema)])
}).strict();
var InventoryUpdateWithoutItemsInputSchema = z$2.object({
  restaurant: z$2.lazy(() => RestaurantUpdateOneRequiredWithoutInventoryNestedInputSchema).optional()
}).strict();
var InventoryUncheckedUpdateWithoutItemsInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var IngredientUpsertWithoutInventoryItemsInputSchema = z$2.object({
  update: z$2.union([z$2.lazy(() => IngredientUpdateWithoutInventoryItemsInputSchema), z$2.lazy(() => IngredientUncheckedUpdateWithoutInventoryItemsInputSchema)]),
  create: z$2.union([z$2.lazy(() => IngredientCreateWithoutInventoryItemsInputSchema), z$2.lazy(() => IngredientUncheckedCreateWithoutInventoryItemsInputSchema)]),
  where: z$2.lazy(() => IngredientWhereInputSchema).optional()
}).strict();
var IngredientUpdateToOneWithWhereWithoutInventoryItemsInputSchema = z$2.object({
  where: z$2.lazy(() => IngredientWhereInputSchema).optional(),
  data: z$2.union([z$2.lazy(() => IngredientUpdateWithoutInventoryItemsInputSchema), z$2.lazy(() => IngredientUncheckedUpdateWithoutInventoryItemsInputSchema)])
}).strict();
var IngredientUpdateWithoutInventoryItemsInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  category: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipeIngredients: z$2.lazy(() => RecipeIngredientUpdateManyWithoutIngredientNestedInputSchema).optional(),
  orderItems: z$2.lazy(() => OrderItemUpdateManyWithoutIngredientNestedInputSchema).optional(),
  vendors: z$2.lazy(() => VendorUpdateManyWithoutIngredientsNestedInputSchema).optional(),
  WasteRecord: z$2.lazy(() => WasteRecordUpdateManyWithoutIngredienteNestedInputSchema).optional(),
  IngredientAllergen: z$2.lazy(() => IngredientAllergenUpdateManyWithoutIngredientNestedInputSchema).optional(),
  SupplierPriceHistory: z$2.lazy(() => SupplierPriceHistoryUpdateManyWithoutIngredientNestedInputSchema).optional(),
  DietaryRestriction: z$2.lazy(() => DietaryRestrictionUpdateOneWithoutIngredientsNestedInputSchema).optional()
}).strict();
var IngredientUncheckedUpdateWithoutInventoryItemsInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  category: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  dietaryRestrictionId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  recipeIngredients: z$2.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  orderItems: z$2.lazy(() => OrderItemUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  vendors: z$2.lazy(() => VendorUncheckedUpdateManyWithoutIngredientsNestedInputSchema).optional(),
  WasteRecord: z$2.lazy(() => WasteRecordUncheckedUpdateManyWithoutIngredienteNestedInputSchema).optional(),
  IngredientAllergen: z$2.lazy(() => IngredientAllergenUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  SupplierPriceHistory: z$2.lazy(() => SupplierPriceHistoryUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional()
}).strict();
var UserUpsertWithoutInventoryUpdatesInputSchema = z$2.object({
  update: z$2.union([z$2.lazy(() => UserUpdateWithoutInventoryUpdatesInputSchema), z$2.lazy(() => UserUncheckedUpdateWithoutInventoryUpdatesInputSchema)]),
  create: z$2.union([z$2.lazy(() => UserCreateWithoutInventoryUpdatesInputSchema), z$2.lazy(() => UserUncheckedCreateWithoutInventoryUpdatesInputSchema)]),
  where: z$2.lazy(() => UserWhereInputSchema).optional()
}).strict();
var UserUpdateToOneWithWhereWithoutInventoryUpdatesInputSchema = z$2.object({
  where: z$2.lazy(() => UserWhereInputSchema).optional(),
  data: z$2.union([z$2.lazy(() => UserUpdateWithoutInventoryUpdatesInputSchema), z$2.lazy(() => UserUncheckedUpdateWithoutInventoryUpdatesInputSchema)])
}).strict();
var UserUpdateWithoutInventoryUpdatesInputSchema = z$2.object({
  email: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: z$2.union([z$2.lazy(() => UserRoleSchema), z$2.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  organization: z$2.lazy(() => OrganizationUpdateOneWithoutUsersNestedInputSchema).optional(),
  restaurant: z$2.lazy(() => RestaurantUpdateOneWithoutUsersNestedInputSchema).optional(),
  shifts: z$2.lazy(() => ShiftUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  sessions: z$2.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: z$2.lazy(() => PasswordResetUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItem: z$2.lazy(() => ProductionPlanItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: z$2.lazy(() => AvailabilityUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraint: z$2.lazy(() => SchedulingConstraintUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedback: z$2.lazy(() => CustomerFeedbackUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: z$2.lazy(() => RecipeVersionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: z$2.lazy(() => RecipeVersionUpdateManyWithoutApprovedByNestedInputSchema).optional()
}).strict();
var UserUncheckedUpdateWithoutInventoryUpdatesInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  email: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: z$2.union([z$2.lazy(() => UserRoleSchema), z$2.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  organizationId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  shifts: z$2.lazy(() => ShiftUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  sessions: z$2.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: z$2.lazy(() => PasswordResetUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItem: z$2.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: z$2.lazy(() => AvailabilityUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraint: z$2.lazy(() => SchedulingConstraintUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteUncheckedUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedback: z$2.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: z$2.lazy(() => RecipeVersionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: z$2.lazy(() => RecipeVersionUncheckedUpdateManyWithoutApprovedByNestedInputSchema).optional()
}).strict();
var InventoryWithdrawalUpsertWithWhereUniqueWithoutInventoryItemInputSchema = z$2.object({
  where: z$2.lazy(() => InventoryWithdrawalWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => InventoryWithdrawalUpdateWithoutInventoryItemInputSchema), z$2.lazy(() => InventoryWithdrawalUncheckedUpdateWithoutInventoryItemInputSchema)]),
  create: z$2.union([z$2.lazy(() => InventoryWithdrawalCreateWithoutInventoryItemInputSchema), z$2.lazy(() => InventoryWithdrawalUncheckedCreateWithoutInventoryItemInputSchema)])
}).strict();
var InventoryWithdrawalUpdateWithWhereUniqueWithoutInventoryItemInputSchema = z$2.object({
  where: z$2.lazy(() => InventoryWithdrawalWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => InventoryWithdrawalUpdateWithoutInventoryItemInputSchema), z$2.lazy(() => InventoryWithdrawalUncheckedUpdateWithoutInventoryItemInputSchema)])
}).strict();
var InventoryWithdrawalUpdateManyWithWhereWithoutInventoryItemInputSchema = z$2.object({
  where: z$2.lazy(() => InventoryWithdrawalScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => InventoryWithdrawalUpdateManyMutationInputSchema), z$2.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutInventoryItemInputSchema)])
}).strict();
var RestaurantCreateWithoutOrdersInputSchema = z$2.object({
  name: z$2.string(),
  imageUrl: z$2.string().optional().nullable(),
  address: z$2.string(),
  city: z$2.string(),
  zipCode: z$2.string(),
  state: z$2.string(),
  owner: z$2.string(),
  foodCost: z$2.number().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  isDeleted: z$2.boolean().optional(),
  deleted: z$2.coerce.date().optional().nullable(),
  organization: z$2.lazy(() => OrganizationCreateNestedOneWithoutRestaurantsInputSchema).optional(),
  users: z$2.lazy(() => UserCreateNestedManyWithoutRestaurantInputSchema).optional(),
  cookbooks: z$2.lazy(() => CookBookCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: z$2.lazy(() => InventoryCreateNestedOneWithoutRestaurantInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: z$2.lazy(() => MenuCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipment: z$2.lazy(() => EquipmentCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklist: z$2.lazy(() => QualityChecklistCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qustomerFeedback: z$2.lazy(() => CustomerFeedbackCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();
var RestaurantUncheckedCreateWithoutOrdersInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  imageUrl: z$2.string().optional().nullable(),
  address: z$2.string(),
  city: z$2.string(),
  zipCode: z$2.string(),
  state: z$2.string(),
  owner: z$2.string(),
  organizationId: z$2.number().int().optional().nullable(),
  foodCost: z$2.number().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  isDeleted: z$2.boolean().optional(),
  deleted: z$2.coerce.date().optional().nullable(),
  users: z$2.lazy(() => UserUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  cookbooks: z$2.lazy(() => CookBookUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: z$2.lazy(() => InventoryUncheckedCreateNestedOneWithoutRestaurantInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: z$2.lazy(() => MenuUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipment: z$2.lazy(() => EquipmentUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklist: z$2.lazy(() => QualityChecklistUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qustomerFeedback: z$2.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();
var RestaurantCreateOrConnectWithoutOrdersInputSchema = z$2.object({
  where: z$2.lazy(() => RestaurantWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => RestaurantCreateWithoutOrdersInputSchema), z$2.lazy(() => RestaurantUncheckedCreateWithoutOrdersInputSchema)])
}).strict();
var VendorCreateWithoutOrdersInputSchema = z$2.object({
  name: z$2.string(),
  contact: z$2.string(),
  email: z$2.string(),
  phone: z$2.string(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  ingredients: z$2.lazy(() => IngredientCreateNestedManyWithoutVendorsInputSchema).optional(),
  supplierPriceHistory: z$2.lazy(() => SupplierPriceHistoryCreateNestedManyWithoutVendorInputSchema).optional()
}).strict();
var VendorUncheckedCreateWithoutOrdersInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  contact: z$2.string(),
  email: z$2.string(),
  phone: z$2.string(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  ingredients: z$2.lazy(() => IngredientUncheckedCreateNestedManyWithoutVendorsInputSchema).optional(),
  supplierPriceHistory: z$2.lazy(() => SupplierPriceHistoryUncheckedCreateNestedManyWithoutVendorInputSchema).optional()
}).strict();
var VendorCreateOrConnectWithoutOrdersInputSchema = z$2.object({
  where: z$2.lazy(() => VendorWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => VendorCreateWithoutOrdersInputSchema), z$2.lazy(() => VendorUncheckedCreateWithoutOrdersInputSchema)])
}).strict();
var OrderItemCreateWithoutOrderInputSchema = z$2.object({
  quantity: z$2.number(),
  unit: z$2.string(),
  price: z$2.number(),
  ingredient: z$2.lazy(() => IngredientCreateNestedOneWithoutOrderItemsInputSchema)
}).strict();
var OrderItemUncheckedCreateWithoutOrderInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  ingredientId: z$2.number().int(),
  quantity: z$2.number(),
  unit: z$2.string(),
  price: z$2.number()
}).strict();
var OrderItemCreateOrConnectWithoutOrderInputSchema = z$2.object({
  where: z$2.lazy(() => OrderItemWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => OrderItemCreateWithoutOrderInputSchema), z$2.lazy(() => OrderItemUncheckedCreateWithoutOrderInputSchema)])
}).strict();
var OrderItemCreateManyOrderInputEnvelopeSchema = z$2.object({
  data: z$2.union([z$2.lazy(() => OrderItemCreateManyOrderInputSchema), z$2.lazy(() => OrderItemCreateManyOrderInputSchema).array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var RestaurantUpsertWithoutOrdersInputSchema = z$2.object({
  update: z$2.union([z$2.lazy(() => RestaurantUpdateWithoutOrdersInputSchema), z$2.lazy(() => RestaurantUncheckedUpdateWithoutOrdersInputSchema)]),
  create: z$2.union([z$2.lazy(() => RestaurantCreateWithoutOrdersInputSchema), z$2.lazy(() => RestaurantUncheckedCreateWithoutOrdersInputSchema)]),
  where: z$2.lazy(() => RestaurantWhereInputSchema).optional()
}).strict();
var RestaurantUpdateToOneWithWhereWithoutOrdersInputSchema = z$2.object({
  where: z$2.lazy(() => RestaurantWhereInputSchema).optional(),
  data: z$2.union([z$2.lazy(() => RestaurantUpdateWithoutOrdersInputSchema), z$2.lazy(() => RestaurantUncheckedUpdateWithoutOrdersInputSchema)])
}).strict();
var RestaurantUpdateWithoutOrdersInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  address: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  city: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  zipCode: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  state: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  owner: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  isDeleted: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  deleted: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  organization: z$2.lazy(() => OrganizationUpdateOneWithoutRestaurantsNestedInputSchema).optional(),
  users: z$2.lazy(() => UserUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  cookbooks: z$2.lazy(() => CookBookUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: z$2.lazy(() => InventoryUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: z$2.lazy(() => MenuUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipment: z$2.lazy(() => EquipmentUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklist: z$2.lazy(() => QualityChecklistUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qustomerFeedback: z$2.lazy(() => CustomerFeedbackUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();
var RestaurantUncheckedUpdateWithoutOrdersInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  address: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  city: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  zipCode: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  state: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  owner: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  organizationId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  isDeleted: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  deleted: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  users: z$2.lazy(() => UserUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  cookbooks: z$2.lazy(() => CookBookUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: z$2.lazy(() => InventoryUncheckedUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: z$2.lazy(() => MenuUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipment: z$2.lazy(() => EquipmentUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklist: z$2.lazy(() => QualityChecklistUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qustomerFeedback: z$2.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();
var VendorUpsertWithoutOrdersInputSchema = z$2.object({
  update: z$2.union([z$2.lazy(() => VendorUpdateWithoutOrdersInputSchema), z$2.lazy(() => VendorUncheckedUpdateWithoutOrdersInputSchema)]),
  create: z$2.union([z$2.lazy(() => VendorCreateWithoutOrdersInputSchema), z$2.lazy(() => VendorUncheckedCreateWithoutOrdersInputSchema)]),
  where: z$2.lazy(() => VendorWhereInputSchema).optional()
}).strict();
var VendorUpdateToOneWithWhereWithoutOrdersInputSchema = z$2.object({
  where: z$2.lazy(() => VendorWhereInputSchema).optional(),
  data: z$2.union([z$2.lazy(() => VendorUpdateWithoutOrdersInputSchema), z$2.lazy(() => VendorUncheckedUpdateWithoutOrdersInputSchema)])
}).strict();
var VendorUpdateWithoutOrdersInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  contact: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  email: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  phone: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  ingredients: z$2.lazy(() => IngredientUpdateManyWithoutVendorsNestedInputSchema).optional(),
  supplierPriceHistory: z$2.lazy(() => SupplierPriceHistoryUpdateManyWithoutVendorNestedInputSchema).optional()
}).strict();
var VendorUncheckedUpdateWithoutOrdersInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  contact: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  email: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  phone: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  ingredients: z$2.lazy(() => IngredientUncheckedUpdateManyWithoutVendorsNestedInputSchema).optional(),
  supplierPriceHistory: z$2.lazy(() => SupplierPriceHistoryUncheckedUpdateManyWithoutVendorNestedInputSchema).optional()
}).strict();
var OrderItemUpsertWithWhereUniqueWithoutOrderInputSchema = z$2.object({
  where: z$2.lazy(() => OrderItemWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => OrderItemUpdateWithoutOrderInputSchema), z$2.lazy(() => OrderItemUncheckedUpdateWithoutOrderInputSchema)]),
  create: z$2.union([z$2.lazy(() => OrderItemCreateWithoutOrderInputSchema), z$2.lazy(() => OrderItemUncheckedCreateWithoutOrderInputSchema)])
}).strict();
var OrderItemUpdateWithWhereUniqueWithoutOrderInputSchema = z$2.object({
  where: z$2.lazy(() => OrderItemWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => OrderItemUpdateWithoutOrderInputSchema), z$2.lazy(() => OrderItemUncheckedUpdateWithoutOrderInputSchema)])
}).strict();
var OrderItemUpdateManyWithWhereWithoutOrderInputSchema = z$2.object({
  where: z$2.lazy(() => OrderItemScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => OrderItemUpdateManyMutationInputSchema), z$2.lazy(() => OrderItemUncheckedUpdateManyWithoutOrderInputSchema)])
}).strict();
var OrderCreateWithoutItemsInputSchema = z$2.object({
  status: z$2.lazy(() => OrderStatusSchema),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  restaurant: z$2.lazy(() => RestaurantCreateNestedOneWithoutOrdersInputSchema),
  vendor: z$2.lazy(() => VendorCreateNestedOneWithoutOrdersInputSchema)
}).strict();
var OrderUncheckedCreateWithoutItemsInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  restaurantId: z$2.number().int(),
  vendorId: z$2.number().int(),
  status: z$2.lazy(() => OrderStatusSchema),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var OrderCreateOrConnectWithoutItemsInputSchema = z$2.object({
  where: z$2.lazy(() => OrderWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => OrderCreateWithoutItemsInputSchema), z$2.lazy(() => OrderUncheckedCreateWithoutItemsInputSchema)])
}).strict();
var IngredientCreateWithoutOrderItemsInputSchema = z$2.object({
  name: z$2.string(),
  category: z$2.string(),
  price: z$2.number(),
  recipeIngredients: z$2.lazy(() => RecipeIngredientCreateNestedManyWithoutIngredientInputSchema).optional(),
  inventoryItems: z$2.lazy(() => InventoryItemCreateNestedManyWithoutIngredientInputSchema).optional(),
  vendors: z$2.lazy(() => VendorCreateNestedManyWithoutIngredientsInputSchema).optional(),
  WasteRecord: z$2.lazy(() => WasteRecordCreateNestedManyWithoutIngredienteInputSchema).optional(),
  IngredientAllergen: z$2.lazy(() => IngredientAllergenCreateNestedManyWithoutIngredientInputSchema).optional(),
  SupplierPriceHistory: z$2.lazy(() => SupplierPriceHistoryCreateNestedManyWithoutIngredientInputSchema).optional(),
  DietaryRestriction: z$2.lazy(() => DietaryRestrictionCreateNestedOneWithoutIngredientsInputSchema).optional()
}).strict();
var IngredientUncheckedCreateWithoutOrderItemsInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  category: z$2.string(),
  price: z$2.number(),
  dietaryRestrictionId: z$2.number().int().optional().nullable(),
  recipeIngredients: z$2.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  inventoryItems: z$2.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  vendors: z$2.lazy(() => VendorUncheckedCreateNestedManyWithoutIngredientsInputSchema).optional(),
  WasteRecord: z$2.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutIngredienteInputSchema).optional(),
  IngredientAllergen: z$2.lazy(() => IngredientAllergenUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  SupplierPriceHistory: z$2.lazy(() => SupplierPriceHistoryUncheckedCreateNestedManyWithoutIngredientInputSchema).optional()
}).strict();
var IngredientCreateOrConnectWithoutOrderItemsInputSchema = z$2.object({
  where: z$2.lazy(() => IngredientWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => IngredientCreateWithoutOrderItemsInputSchema), z$2.lazy(() => IngredientUncheckedCreateWithoutOrderItemsInputSchema)])
}).strict();
var OrderUpsertWithoutItemsInputSchema = z$2.object({
  update: z$2.union([z$2.lazy(() => OrderUpdateWithoutItemsInputSchema), z$2.lazy(() => OrderUncheckedUpdateWithoutItemsInputSchema)]),
  create: z$2.union([z$2.lazy(() => OrderCreateWithoutItemsInputSchema), z$2.lazy(() => OrderUncheckedCreateWithoutItemsInputSchema)]),
  where: z$2.lazy(() => OrderWhereInputSchema).optional()
}).strict();
var OrderUpdateToOneWithWhereWithoutItemsInputSchema = z$2.object({
  where: z$2.lazy(() => OrderWhereInputSchema).optional(),
  data: z$2.union([z$2.lazy(() => OrderUpdateWithoutItemsInputSchema), z$2.lazy(() => OrderUncheckedUpdateWithoutItemsInputSchema)])
}).strict();
var OrderUpdateWithoutItemsInputSchema = z$2.object({
  status: z$2.union([z$2.lazy(() => OrderStatusSchema), z$2.lazy(() => EnumOrderStatusFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: z$2.lazy(() => RestaurantUpdateOneRequiredWithoutOrdersNestedInputSchema).optional(),
  vendor: z$2.lazy(() => VendorUpdateOneRequiredWithoutOrdersNestedInputSchema).optional()
}).strict();
var OrderUncheckedUpdateWithoutItemsInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  vendorId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  status: z$2.union([z$2.lazy(() => OrderStatusSchema), z$2.lazy(() => EnumOrderStatusFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var IngredientUpsertWithoutOrderItemsInputSchema = z$2.object({
  update: z$2.union([z$2.lazy(() => IngredientUpdateWithoutOrderItemsInputSchema), z$2.lazy(() => IngredientUncheckedUpdateWithoutOrderItemsInputSchema)]),
  create: z$2.union([z$2.lazy(() => IngredientCreateWithoutOrderItemsInputSchema), z$2.lazy(() => IngredientUncheckedCreateWithoutOrderItemsInputSchema)]),
  where: z$2.lazy(() => IngredientWhereInputSchema).optional()
}).strict();
var IngredientUpdateToOneWithWhereWithoutOrderItemsInputSchema = z$2.object({
  where: z$2.lazy(() => IngredientWhereInputSchema).optional(),
  data: z$2.union([z$2.lazy(() => IngredientUpdateWithoutOrderItemsInputSchema), z$2.lazy(() => IngredientUncheckedUpdateWithoutOrderItemsInputSchema)])
}).strict();
var IngredientUpdateWithoutOrderItemsInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  category: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipeIngredients: z$2.lazy(() => RecipeIngredientUpdateManyWithoutIngredientNestedInputSchema).optional(),
  inventoryItems: z$2.lazy(() => InventoryItemUpdateManyWithoutIngredientNestedInputSchema).optional(),
  vendors: z$2.lazy(() => VendorUpdateManyWithoutIngredientsNestedInputSchema).optional(),
  WasteRecord: z$2.lazy(() => WasteRecordUpdateManyWithoutIngredienteNestedInputSchema).optional(),
  IngredientAllergen: z$2.lazy(() => IngredientAllergenUpdateManyWithoutIngredientNestedInputSchema).optional(),
  SupplierPriceHistory: z$2.lazy(() => SupplierPriceHistoryUpdateManyWithoutIngredientNestedInputSchema).optional(),
  DietaryRestriction: z$2.lazy(() => DietaryRestrictionUpdateOneWithoutIngredientsNestedInputSchema).optional()
}).strict();
var IngredientUncheckedUpdateWithoutOrderItemsInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  category: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  dietaryRestrictionId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  recipeIngredients: z$2.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  inventoryItems: z$2.lazy(() => InventoryItemUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  vendors: z$2.lazy(() => VendorUncheckedUpdateManyWithoutIngredientsNestedInputSchema).optional(),
  WasteRecord: z$2.lazy(() => WasteRecordUncheckedUpdateManyWithoutIngredienteNestedInputSchema).optional(),
  IngredientAllergen: z$2.lazy(() => IngredientAllergenUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  SupplierPriceHistory: z$2.lazy(() => SupplierPriceHistoryUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional()
}).strict();
var OrderCreateWithoutVendorInputSchema = z$2.object({
  status: z$2.lazy(() => OrderStatusSchema),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  restaurant: z$2.lazy(() => RestaurantCreateNestedOneWithoutOrdersInputSchema),
  items: z$2.lazy(() => OrderItemCreateNestedManyWithoutOrderInputSchema).optional()
}).strict();
var OrderUncheckedCreateWithoutVendorInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  restaurantId: z$2.number().int(),
  status: z$2.lazy(() => OrderStatusSchema),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  items: z$2.lazy(() => OrderItemUncheckedCreateNestedManyWithoutOrderInputSchema).optional()
}).strict();
var OrderCreateOrConnectWithoutVendorInputSchema = z$2.object({
  where: z$2.lazy(() => OrderWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => OrderCreateWithoutVendorInputSchema), z$2.lazy(() => OrderUncheckedCreateWithoutVendorInputSchema)])
}).strict();
var OrderCreateManyVendorInputEnvelopeSchema = z$2.object({
  data: z$2.union([z$2.lazy(() => OrderCreateManyVendorInputSchema), z$2.lazy(() => OrderCreateManyVendorInputSchema).array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var IngredientCreateWithoutVendorsInputSchema = z$2.object({
  name: z$2.string(),
  category: z$2.string(),
  price: z$2.number(),
  recipeIngredients: z$2.lazy(() => RecipeIngredientCreateNestedManyWithoutIngredientInputSchema).optional(),
  inventoryItems: z$2.lazy(() => InventoryItemCreateNestedManyWithoutIngredientInputSchema).optional(),
  orderItems: z$2.lazy(() => OrderItemCreateNestedManyWithoutIngredientInputSchema).optional(),
  WasteRecord: z$2.lazy(() => WasteRecordCreateNestedManyWithoutIngredienteInputSchema).optional(),
  IngredientAllergen: z$2.lazy(() => IngredientAllergenCreateNestedManyWithoutIngredientInputSchema).optional(),
  SupplierPriceHistory: z$2.lazy(() => SupplierPriceHistoryCreateNestedManyWithoutIngredientInputSchema).optional(),
  DietaryRestriction: z$2.lazy(() => DietaryRestrictionCreateNestedOneWithoutIngredientsInputSchema).optional()
}).strict();
var IngredientUncheckedCreateWithoutVendorsInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  category: z$2.string(),
  price: z$2.number(),
  dietaryRestrictionId: z$2.number().int().optional().nullable(),
  recipeIngredients: z$2.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  inventoryItems: z$2.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  orderItems: z$2.lazy(() => OrderItemUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  WasteRecord: z$2.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutIngredienteInputSchema).optional(),
  IngredientAllergen: z$2.lazy(() => IngredientAllergenUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  SupplierPriceHistory: z$2.lazy(() => SupplierPriceHistoryUncheckedCreateNestedManyWithoutIngredientInputSchema).optional()
}).strict();
var IngredientCreateOrConnectWithoutVendorsInputSchema = z$2.object({
  where: z$2.lazy(() => IngredientWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => IngredientCreateWithoutVendorsInputSchema), z$2.lazy(() => IngredientUncheckedCreateWithoutVendorsInputSchema)])
}).strict();
var SupplierPriceHistoryCreateWithoutVendorInputSchema = z$2.object({
  price: z$2.number(),
  unit: z$2.string(),
  startDate: z$2.coerce.date(),
  endDate: z$2.coerce.date().optional().nullable(),
  notes: z$2.string().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  ingredient: z$2.lazy(() => IngredientCreateNestedOneWithoutSupplierPriceHistoryInputSchema)
}).strict();
var SupplierPriceHistoryUncheckedCreateWithoutVendorInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  ingredientId: z$2.number().int(),
  price: z$2.number(),
  unit: z$2.string(),
  startDate: z$2.coerce.date(),
  endDate: z$2.coerce.date().optional().nullable(),
  notes: z$2.string().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var SupplierPriceHistoryCreateOrConnectWithoutVendorInputSchema = z$2.object({
  where: z$2.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => SupplierPriceHistoryCreateWithoutVendorInputSchema), z$2.lazy(() => SupplierPriceHistoryUncheckedCreateWithoutVendorInputSchema)])
}).strict();
var SupplierPriceHistoryCreateManyVendorInputEnvelopeSchema = z$2.object({
  data: z$2.union([z$2.lazy(() => SupplierPriceHistoryCreateManyVendorInputSchema), z$2.lazy(() => SupplierPriceHistoryCreateManyVendorInputSchema).array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var OrderUpsertWithWhereUniqueWithoutVendorInputSchema = z$2.object({
  where: z$2.lazy(() => OrderWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => OrderUpdateWithoutVendorInputSchema), z$2.lazy(() => OrderUncheckedUpdateWithoutVendorInputSchema)]),
  create: z$2.union([z$2.lazy(() => OrderCreateWithoutVendorInputSchema), z$2.lazy(() => OrderUncheckedCreateWithoutVendorInputSchema)])
}).strict();
var OrderUpdateWithWhereUniqueWithoutVendorInputSchema = z$2.object({
  where: z$2.lazy(() => OrderWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => OrderUpdateWithoutVendorInputSchema), z$2.lazy(() => OrderUncheckedUpdateWithoutVendorInputSchema)])
}).strict();
var OrderUpdateManyWithWhereWithoutVendorInputSchema = z$2.object({
  where: z$2.lazy(() => OrderScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => OrderUpdateManyMutationInputSchema), z$2.lazy(() => OrderUncheckedUpdateManyWithoutVendorInputSchema)])
}).strict();
var IngredientUpsertWithWhereUniqueWithoutVendorsInputSchema = z$2.object({
  where: z$2.lazy(() => IngredientWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => IngredientUpdateWithoutVendorsInputSchema), z$2.lazy(() => IngredientUncheckedUpdateWithoutVendorsInputSchema)]),
  create: z$2.union([z$2.lazy(() => IngredientCreateWithoutVendorsInputSchema), z$2.lazy(() => IngredientUncheckedCreateWithoutVendorsInputSchema)])
}).strict();
var IngredientUpdateWithWhereUniqueWithoutVendorsInputSchema = z$2.object({
  where: z$2.lazy(() => IngredientWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => IngredientUpdateWithoutVendorsInputSchema), z$2.lazy(() => IngredientUncheckedUpdateWithoutVendorsInputSchema)])
}).strict();
var IngredientUpdateManyWithWhereWithoutVendorsInputSchema = z$2.object({
  where: z$2.lazy(() => IngredientScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => IngredientUpdateManyMutationInputSchema), z$2.lazy(() => IngredientUncheckedUpdateManyWithoutVendorsInputSchema)])
}).strict();
var SupplierPriceHistoryUpsertWithWhereUniqueWithoutVendorInputSchema = z$2.object({
  where: z$2.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => SupplierPriceHistoryUpdateWithoutVendorInputSchema), z$2.lazy(() => SupplierPriceHistoryUncheckedUpdateWithoutVendorInputSchema)]),
  create: z$2.union([z$2.lazy(() => SupplierPriceHistoryCreateWithoutVendorInputSchema), z$2.lazy(() => SupplierPriceHistoryUncheckedCreateWithoutVendorInputSchema)])
}).strict();
var SupplierPriceHistoryUpdateWithWhereUniqueWithoutVendorInputSchema = z$2.object({
  where: z$2.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => SupplierPriceHistoryUpdateWithoutVendorInputSchema), z$2.lazy(() => SupplierPriceHistoryUncheckedUpdateWithoutVendorInputSchema)])
}).strict();
var SupplierPriceHistoryUpdateManyWithWhereWithoutVendorInputSchema = z$2.object({
  where: z$2.lazy(() => SupplierPriceHistoryScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => SupplierPriceHistoryUpdateManyMutationInputSchema), z$2.lazy(() => SupplierPriceHistoryUncheckedUpdateManyWithoutVendorInputSchema)])
}).strict();
var UserCreateWithoutShiftsInputSchema = z$2.object({
  email: z$2.string(),
  sub: z$2.number().int().optional().nullable(),
  passwordHash: z$2.string(),
  firstName: z$2.string(),
  lastName: z$2.string(),
  profileImage: z$2.string().optional().nullable(),
  verified: z$2.boolean().optional(),
  role: z$2.lazy(() => UserRoleSchema),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  organization: z$2.lazy(() => OrganizationCreateNestedOneWithoutUsersInputSchema).optional(),
  restaurant: z$2.lazy(() => RestaurantCreateNestedOneWithoutUsersInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: z$2.lazy(() => InventoryItemCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: z$2.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: z$2.lazy(() => PasswordResetCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItem: z$2.lazy(() => ProductionPlanItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: z$2.lazy(() => AvailabilityCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraint: z$2.lazy(() => SchedulingConstraintCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedback: z$2.lazy(() => CustomerFeedbackCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: z$2.lazy(() => RecipeVersionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: z$2.lazy(() => RecipeVersionCreateNestedManyWithoutApprovedByInputSchema).optional()
}).strict();
var UserUncheckedCreateWithoutShiftsInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  email: z$2.string(),
  sub: z$2.number().int().optional().nullable(),
  passwordHash: z$2.string(),
  firstName: z$2.string(),
  lastName: z$2.string(),
  profileImage: z$2.string().optional().nullable(),
  verified: z$2.boolean().optional(),
  role: z$2.lazy(() => UserRoleSchema),
  organizationId: z$2.number().int().optional().nullable(),
  restaurantId: z$2.number().int().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  prepItems: z$2.lazy(() => PrepItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: z$2.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: z$2.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: z$2.lazy(() => PasswordResetUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItem: z$2.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: z$2.lazy(() => AvailabilityUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraint: z$2.lazy(() => SchedulingConstraintUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteUncheckedCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedback: z$2.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: z$2.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: z$2.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutApprovedByInputSchema).optional()
}).strict();
var UserCreateOrConnectWithoutShiftsInputSchema = z$2.object({
  where: z$2.lazy(() => UserWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => UserCreateWithoutShiftsInputSchema), z$2.lazy(() => UserUncheckedCreateWithoutShiftsInputSchema)])
}).strict();
var ShiftTaskCreateWithoutShiftInputSchema = z$2.object({
  taskType: z$2.lazy(() => TaskTypeSchema),
  startTime: z$2.coerce.date(),
  endTime: z$2.coerce.date(),
  duration: z$2.number().int(),
  notes: z$2.string().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var ShiftTaskUncheckedCreateWithoutShiftInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  taskType: z$2.lazy(() => TaskTypeSchema),
  startTime: z$2.coerce.date(),
  endTime: z$2.coerce.date(),
  duration: z$2.number().int(),
  notes: z$2.string().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var ShiftTaskCreateOrConnectWithoutShiftInputSchema = z$2.object({
  where: z$2.lazy(() => ShiftTaskWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => ShiftTaskCreateWithoutShiftInputSchema), z$2.lazy(() => ShiftTaskUncheckedCreateWithoutShiftInputSchema)])
}).strict();
var ShiftTaskCreateManyShiftInputEnvelopeSchema = z$2.object({
  data: z$2.union([z$2.lazy(() => ShiftTaskCreateManyShiftInputSchema), z$2.lazy(() => ShiftTaskCreateManyShiftInputSchema).array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var UserUpsertWithoutShiftsInputSchema = z$2.object({
  update: z$2.union([z$2.lazy(() => UserUpdateWithoutShiftsInputSchema), z$2.lazy(() => UserUncheckedUpdateWithoutShiftsInputSchema)]),
  create: z$2.union([z$2.lazy(() => UserCreateWithoutShiftsInputSchema), z$2.lazy(() => UserUncheckedCreateWithoutShiftsInputSchema)]),
  where: z$2.lazy(() => UserWhereInputSchema).optional()
}).strict();
var UserUpdateToOneWithWhereWithoutShiftsInputSchema = z$2.object({
  where: z$2.lazy(() => UserWhereInputSchema).optional(),
  data: z$2.union([z$2.lazy(() => UserUpdateWithoutShiftsInputSchema), z$2.lazy(() => UserUncheckedUpdateWithoutShiftsInputSchema)])
}).strict();
var UserUpdateWithoutShiftsInputSchema = z$2.object({
  email: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: z$2.union([z$2.lazy(() => UserRoleSchema), z$2.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  organization: z$2.lazy(() => OrganizationUpdateOneWithoutUsersNestedInputSchema).optional(),
  restaurant: z$2.lazy(() => RestaurantUpdateOneWithoutUsersNestedInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: z$2.lazy(() => InventoryItemUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: z$2.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: z$2.lazy(() => PasswordResetUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItem: z$2.lazy(() => ProductionPlanItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: z$2.lazy(() => AvailabilityUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraint: z$2.lazy(() => SchedulingConstraintUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedback: z$2.lazy(() => CustomerFeedbackUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: z$2.lazy(() => RecipeVersionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: z$2.lazy(() => RecipeVersionUpdateManyWithoutApprovedByNestedInputSchema).optional()
}).strict();
var UserUncheckedUpdateWithoutShiftsInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  email: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: z$2.union([z$2.lazy(() => UserRoleSchema), z$2.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  organizationId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  prepItems: z$2.lazy(() => PrepItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: z$2.lazy(() => InventoryItemUncheckedUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: z$2.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: z$2.lazy(() => PasswordResetUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItem: z$2.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: z$2.lazy(() => AvailabilityUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraint: z$2.lazy(() => SchedulingConstraintUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteUncheckedUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedback: z$2.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: z$2.lazy(() => RecipeVersionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: z$2.lazy(() => RecipeVersionUncheckedUpdateManyWithoutApprovedByNestedInputSchema).optional()
}).strict();
var ShiftTaskUpsertWithWhereUniqueWithoutShiftInputSchema = z$2.object({
  where: z$2.lazy(() => ShiftTaskWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => ShiftTaskUpdateWithoutShiftInputSchema), z$2.lazy(() => ShiftTaskUncheckedUpdateWithoutShiftInputSchema)]),
  create: z$2.union([z$2.lazy(() => ShiftTaskCreateWithoutShiftInputSchema), z$2.lazy(() => ShiftTaskUncheckedCreateWithoutShiftInputSchema)])
}).strict();
var ShiftTaskUpdateWithWhereUniqueWithoutShiftInputSchema = z$2.object({
  where: z$2.lazy(() => ShiftTaskWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => ShiftTaskUpdateWithoutShiftInputSchema), z$2.lazy(() => ShiftTaskUncheckedUpdateWithoutShiftInputSchema)])
}).strict();
var ShiftTaskUpdateManyWithWhereWithoutShiftInputSchema = z$2.object({
  where: z$2.lazy(() => ShiftTaskScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => ShiftTaskUpdateManyMutationInputSchema), z$2.lazy(() => ShiftTaskUncheckedUpdateManyWithoutShiftInputSchema)])
}).strict();
var ShiftTaskScalarWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => ShiftTaskScalarWhereInputSchema), z$2.lazy(() => ShiftTaskScalarWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => ShiftTaskScalarWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => ShiftTaskScalarWhereInputSchema), z$2.lazy(() => ShiftTaskScalarWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  shiftId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  taskType: z$2.union([z$2.lazy(() => EnumTaskTypeFilterSchema), z$2.lazy(() => TaskTypeSchema)]).optional(),
  startTime: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  endTime: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  duration: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  notes: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional()
}).strict();
var RecipeCreateWithoutPrepBoardsInputSchema = z$2.object({
  name: z$2.string(),
  imageUrl: z$2.union([z$2.lazy(() => RecipeCreateimageUrlInputSchema), z$2.string().array()]).optional(),
  description: z$2.string().optional().nullable(),
  servings: z$2.number().int(),
  cookTime: z$2.number().int(),
  prepTime: z$2.number().int(),
  frequency: z$2.number().int().optional().nullable(),
  foodCost: z$2.number().optional().nullable(),
  isDeleted: z$2.boolean().optional(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  restaurant: z$2.lazy(() => RestaurantCreateNestedOneWithoutRecipesInputSchema),
  cookBook: z$2.lazy(() => CookBookCreateNestedOneWithoutRecipesInputSchema),
  ingredients: z$2.lazy(() => RecipeIngredientCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z$2.lazy(() => MenuItemCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: z$2.lazy(() => FoodCostHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: z$2.lazy(() => PrepHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  MenuItemRecipe: z$2.lazy(() => MenuItemRecipeCreateNestedManyWithoutRecipeInputSchema).optional(),
  ProductionPlanItem: z$2.lazy(() => ProductionPlanItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z$2.lazy(() => RecipeTagCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: z$2.lazy(() => RecipeVersionCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipment: z$2.lazy(() => RecipeEquipmentCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionCreateNestedManyWithoutRecipesInputSchema).optional()
}).strict();
var RecipeUncheckedCreateWithoutPrepBoardsInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  imageUrl: z$2.union([z$2.lazy(() => RecipeCreateimageUrlInputSchema), z$2.string().array()]).optional(),
  description: z$2.string().optional().nullable(),
  servings: z$2.number().int(),
  cookTime: z$2.number().int(),
  prepTime: z$2.number().int(),
  frequency: z$2.number().int().optional().nullable(),
  restaurantId: z$2.number().int(),
  cookBookId: z$2.number().int(),
  foodCost: z$2.number().optional().nullable(),
  isDeleted: z$2.boolean().optional(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  ingredients: z$2.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z$2.lazy(() => MenuItemUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: z$2.lazy(() => FoodCostHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: z$2.lazy(() => PrepHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  MenuItemRecipe: z$2.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  ProductionPlanItem: z$2.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z$2.lazy(() => RecipeTagUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: z$2.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipment: z$2.lazy(() => RecipeEquipmentUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutRecipesInputSchema).optional()
}).strict();
var RecipeCreateOrConnectWithoutPrepBoardsInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => RecipeCreateWithoutPrepBoardsInputSchema), z$2.lazy(() => RecipeUncheckedCreateWithoutPrepBoardsInputSchema)])
}).strict();
var PrepItemCreateWithoutPrepBoardInputSchema = z$2.object({
  quantity: z$2.number().int(),
  status: z$2.lazy(() => PrepStatusSchema),
  recipe: z$2.lazy(() => RecipeCreateNestedOneWithoutPrepItemsInputSchema),
  assignedTo: z$2.lazy(() => UserCreateNestedOneWithoutPrepItemsInputSchema)
}).strict();
var PrepItemUncheckedCreateWithoutPrepBoardInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  recipeId: z$2.number().int(),
  quantity: z$2.number().int(),
  status: z$2.lazy(() => PrepStatusSchema),
  assignedToId: z$2.number().int()
}).strict();
var PrepItemCreateOrConnectWithoutPrepBoardInputSchema = z$2.object({
  where: z$2.lazy(() => PrepItemWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => PrepItemCreateWithoutPrepBoardInputSchema), z$2.lazy(() => PrepItemUncheckedCreateWithoutPrepBoardInputSchema)])
}).strict();
var PrepItemCreateManyPrepBoardInputEnvelopeSchema = z$2.object({
  data: z$2.union([z$2.lazy(() => PrepItemCreateManyPrepBoardInputSchema), z$2.lazy(() => PrepItemCreateManyPrepBoardInputSchema).array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var RecipeUpsertWithWhereUniqueWithoutPrepBoardsInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => RecipeUpdateWithoutPrepBoardsInputSchema), z$2.lazy(() => RecipeUncheckedUpdateWithoutPrepBoardsInputSchema)]),
  create: z$2.union([z$2.lazy(() => RecipeCreateWithoutPrepBoardsInputSchema), z$2.lazy(() => RecipeUncheckedCreateWithoutPrepBoardsInputSchema)])
}).strict();
var RecipeUpdateWithWhereUniqueWithoutPrepBoardsInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => RecipeUpdateWithoutPrepBoardsInputSchema), z$2.lazy(() => RecipeUncheckedUpdateWithoutPrepBoardsInputSchema)])
}).strict();
var RecipeUpdateManyWithWhereWithoutPrepBoardsInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => RecipeUpdateManyMutationInputSchema), z$2.lazy(() => RecipeUncheckedUpdateManyWithoutPrepBoardsInputSchema)])
}).strict();
var PrepItemUpsertWithWhereUniqueWithoutPrepBoardInputSchema = z$2.object({
  where: z$2.lazy(() => PrepItemWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => PrepItemUpdateWithoutPrepBoardInputSchema), z$2.lazy(() => PrepItemUncheckedUpdateWithoutPrepBoardInputSchema)]),
  create: z$2.union([z$2.lazy(() => PrepItemCreateWithoutPrepBoardInputSchema), z$2.lazy(() => PrepItemUncheckedCreateWithoutPrepBoardInputSchema)])
}).strict();
var PrepItemUpdateWithWhereUniqueWithoutPrepBoardInputSchema = z$2.object({
  where: z$2.lazy(() => PrepItemWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => PrepItemUpdateWithoutPrepBoardInputSchema), z$2.lazy(() => PrepItemUncheckedUpdateWithoutPrepBoardInputSchema)])
}).strict();
var PrepItemUpdateManyWithWhereWithoutPrepBoardInputSchema = z$2.object({
  where: z$2.lazy(() => PrepItemScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => PrepItemUpdateManyMutationInputSchema), z$2.lazy(() => PrepItemUncheckedUpdateManyWithoutPrepBoardInputSchema)])
}).strict();
var PrepBoardCreateWithoutPrepItemsInputSchema = z$2.object({
  name: z$2.string(),
  status: z$2.lazy(() => PrepStatusSchema),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  recipes: z$2.lazy(() => RecipeCreateNestedManyWithoutPrepBoardsInputSchema).optional()
}).strict();
var PrepBoardUncheckedCreateWithoutPrepItemsInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  status: z$2.lazy(() => PrepStatusSchema),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  recipes: z$2.lazy(() => RecipeUncheckedCreateNestedManyWithoutPrepBoardsInputSchema).optional()
}).strict();
var PrepBoardCreateOrConnectWithoutPrepItemsInputSchema = z$2.object({
  where: z$2.lazy(() => PrepBoardWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => PrepBoardCreateWithoutPrepItemsInputSchema), z$2.lazy(() => PrepBoardUncheckedCreateWithoutPrepItemsInputSchema)])
}).strict();
var RecipeCreateWithoutPrepItemsInputSchema = z$2.object({
  name: z$2.string(),
  imageUrl: z$2.union([z$2.lazy(() => RecipeCreateimageUrlInputSchema), z$2.string().array()]).optional(),
  description: z$2.string().optional().nullable(),
  servings: z$2.number().int(),
  cookTime: z$2.number().int(),
  prepTime: z$2.number().int(),
  frequency: z$2.number().int().optional().nullable(),
  foodCost: z$2.number().optional().nullable(),
  isDeleted: z$2.boolean().optional(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  restaurant: z$2.lazy(() => RestaurantCreateNestedOneWithoutRecipesInputSchema),
  cookBook: z$2.lazy(() => CookBookCreateNestedOneWithoutRecipesInputSchema),
  ingredients: z$2.lazy(() => RecipeIngredientCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z$2.lazy(() => MenuItemCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: z$2.lazy(() => FoodCostHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: z$2.lazy(() => PrepHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z$2.lazy(() => PrepBoardCreateNestedManyWithoutRecipesInputSchema).optional(),
  MenuItemRecipe: z$2.lazy(() => MenuItemRecipeCreateNestedManyWithoutRecipeInputSchema).optional(),
  ProductionPlanItem: z$2.lazy(() => ProductionPlanItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z$2.lazy(() => RecipeTagCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: z$2.lazy(() => RecipeVersionCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipment: z$2.lazy(() => RecipeEquipmentCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionCreateNestedManyWithoutRecipesInputSchema).optional()
}).strict();
var RecipeUncheckedCreateWithoutPrepItemsInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  imageUrl: z$2.union([z$2.lazy(() => RecipeCreateimageUrlInputSchema), z$2.string().array()]).optional(),
  description: z$2.string().optional().nullable(),
  servings: z$2.number().int(),
  cookTime: z$2.number().int(),
  prepTime: z$2.number().int(),
  frequency: z$2.number().int().optional().nullable(),
  restaurantId: z$2.number().int(),
  cookBookId: z$2.number().int(),
  foodCost: z$2.number().optional().nullable(),
  isDeleted: z$2.boolean().optional(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  ingredients: z$2.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z$2.lazy(() => MenuItemUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: z$2.lazy(() => FoodCostHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: z$2.lazy(() => PrepHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z$2.lazy(() => PrepBoardUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  MenuItemRecipe: z$2.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  ProductionPlanItem: z$2.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z$2.lazy(() => RecipeTagUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: z$2.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipment: z$2.lazy(() => RecipeEquipmentUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutRecipesInputSchema).optional()
}).strict();
var RecipeCreateOrConnectWithoutPrepItemsInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => RecipeCreateWithoutPrepItemsInputSchema), z$2.lazy(() => RecipeUncheckedCreateWithoutPrepItemsInputSchema)])
}).strict();
var UserCreateWithoutPrepItemsInputSchema = z$2.object({
  email: z$2.string(),
  sub: z$2.number().int().optional().nullable(),
  passwordHash: z$2.string(),
  firstName: z$2.string(),
  lastName: z$2.string(),
  profileImage: z$2.string().optional().nullable(),
  verified: z$2.boolean().optional(),
  role: z$2.lazy(() => UserRoleSchema),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  organization: z$2.lazy(() => OrganizationCreateNestedOneWithoutUsersInputSchema).optional(),
  restaurant: z$2.lazy(() => RestaurantCreateNestedOneWithoutUsersInputSchema).optional(),
  shifts: z$2.lazy(() => ShiftCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryUpdates: z$2.lazy(() => InventoryItemCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: z$2.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: z$2.lazy(() => PasswordResetCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItem: z$2.lazy(() => ProductionPlanItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: z$2.lazy(() => AvailabilityCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraint: z$2.lazy(() => SchedulingConstraintCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedback: z$2.lazy(() => CustomerFeedbackCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: z$2.lazy(() => RecipeVersionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: z$2.lazy(() => RecipeVersionCreateNestedManyWithoutApprovedByInputSchema).optional()
}).strict();
var UserUncheckedCreateWithoutPrepItemsInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  email: z$2.string(),
  sub: z$2.number().int().optional().nullable(),
  passwordHash: z$2.string(),
  firstName: z$2.string(),
  lastName: z$2.string(),
  profileImage: z$2.string().optional().nullable(),
  verified: z$2.boolean().optional(),
  role: z$2.lazy(() => UserRoleSchema),
  organizationId: z$2.number().int().optional().nullable(),
  restaurantId: z$2.number().int().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  shifts: z$2.lazy(() => ShiftUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryUpdates: z$2.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: z$2.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: z$2.lazy(() => PasswordResetUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItem: z$2.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: z$2.lazy(() => AvailabilityUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraint: z$2.lazy(() => SchedulingConstraintUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteUncheckedCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedback: z$2.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: z$2.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: z$2.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutApprovedByInputSchema).optional()
}).strict();
var UserCreateOrConnectWithoutPrepItemsInputSchema = z$2.object({
  where: z$2.lazy(() => UserWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => UserCreateWithoutPrepItemsInputSchema), z$2.lazy(() => UserUncheckedCreateWithoutPrepItemsInputSchema)])
}).strict();
var PrepBoardUpsertWithoutPrepItemsInputSchema = z$2.object({
  update: z$2.union([z$2.lazy(() => PrepBoardUpdateWithoutPrepItemsInputSchema), z$2.lazy(() => PrepBoardUncheckedUpdateWithoutPrepItemsInputSchema)]),
  create: z$2.union([z$2.lazy(() => PrepBoardCreateWithoutPrepItemsInputSchema), z$2.lazy(() => PrepBoardUncheckedCreateWithoutPrepItemsInputSchema)]),
  where: z$2.lazy(() => PrepBoardWhereInputSchema).optional()
}).strict();
var PrepBoardUpdateToOneWithWhereWithoutPrepItemsInputSchema = z$2.object({
  where: z$2.lazy(() => PrepBoardWhereInputSchema).optional(),
  data: z$2.union([z$2.lazy(() => PrepBoardUpdateWithoutPrepItemsInputSchema), z$2.lazy(() => PrepBoardUncheckedUpdateWithoutPrepItemsInputSchema)])
}).strict();
var PrepBoardUpdateWithoutPrepItemsInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  status: z$2.union([z$2.lazy(() => PrepStatusSchema), z$2.lazy(() => EnumPrepStatusFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  recipes: z$2.lazy(() => RecipeUpdateManyWithoutPrepBoardsNestedInputSchema).optional()
}).strict();
var PrepBoardUncheckedUpdateWithoutPrepItemsInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  status: z$2.union([z$2.lazy(() => PrepStatusSchema), z$2.lazy(() => EnumPrepStatusFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  recipes: z$2.lazy(() => RecipeUncheckedUpdateManyWithoutPrepBoardsNestedInputSchema).optional()
}).strict();
var RecipeUpsertWithoutPrepItemsInputSchema = z$2.object({
  update: z$2.union([z$2.lazy(() => RecipeUpdateWithoutPrepItemsInputSchema), z$2.lazy(() => RecipeUncheckedUpdateWithoutPrepItemsInputSchema)]),
  create: z$2.union([z$2.lazy(() => RecipeCreateWithoutPrepItemsInputSchema), z$2.lazy(() => RecipeUncheckedCreateWithoutPrepItemsInputSchema)]),
  where: z$2.lazy(() => RecipeWhereInputSchema).optional()
}).strict();
var RecipeUpdateToOneWithWhereWithoutPrepItemsInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeWhereInputSchema).optional(),
  data: z$2.union([z$2.lazy(() => RecipeUpdateWithoutPrepItemsInputSchema), z$2.lazy(() => RecipeUncheckedUpdateWithoutPrepItemsInputSchema)])
}).strict();
var RecipeUpdateWithoutPrepItemsInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.lazy(() => RecipeUpdateimageUrlInputSchema), z$2.string().array()]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: z$2.lazy(() => RestaurantUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  cookBook: z$2.lazy(() => CookBookUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  ingredients: z$2.lazy(() => RecipeIngredientUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z$2.lazy(() => MenuItemUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: z$2.lazy(() => FoodCostHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: z$2.lazy(() => PrepHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z$2.lazy(() => PrepBoardUpdateManyWithoutRecipesNestedInputSchema).optional(),
  MenuItemRecipe: z$2.lazy(() => MenuItemRecipeUpdateManyWithoutRecipeNestedInputSchema).optional(),
  ProductionPlanItem: z$2.lazy(() => ProductionPlanItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z$2.lazy(() => RecipeTagUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: z$2.lazy(() => RecipeVersionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipment: z$2.lazy(() => RecipeEquipmentUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionUpdateManyWithoutRecipesNestedInputSchema).optional()
}).strict();
var RecipeUncheckedUpdateWithoutPrepItemsInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.lazy(() => RecipeUpdateimageUrlInputSchema), z$2.string().array()]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookBookId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  ingredients: z$2.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z$2.lazy(() => MenuItemUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: z$2.lazy(() => FoodCostHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: z$2.lazy(() => PrepHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z$2.lazy(() => PrepBoardUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  MenuItemRecipe: z$2.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  ProductionPlanItem: z$2.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z$2.lazy(() => RecipeTagUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: z$2.lazy(() => RecipeVersionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipment: z$2.lazy(() => RecipeEquipmentUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional()
}).strict();
var UserUpsertWithoutPrepItemsInputSchema = z$2.object({
  update: z$2.union([z$2.lazy(() => UserUpdateWithoutPrepItemsInputSchema), z$2.lazy(() => UserUncheckedUpdateWithoutPrepItemsInputSchema)]),
  create: z$2.union([z$2.lazy(() => UserCreateWithoutPrepItemsInputSchema), z$2.lazy(() => UserUncheckedCreateWithoutPrepItemsInputSchema)]),
  where: z$2.lazy(() => UserWhereInputSchema).optional()
}).strict();
var UserUpdateToOneWithWhereWithoutPrepItemsInputSchema = z$2.object({
  where: z$2.lazy(() => UserWhereInputSchema).optional(),
  data: z$2.union([z$2.lazy(() => UserUpdateWithoutPrepItemsInputSchema), z$2.lazy(() => UserUncheckedUpdateWithoutPrepItemsInputSchema)])
}).strict();
var UserUpdateWithoutPrepItemsInputSchema = z$2.object({
  email: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: z$2.union([z$2.lazy(() => UserRoleSchema), z$2.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  organization: z$2.lazy(() => OrganizationUpdateOneWithoutUsersNestedInputSchema).optional(),
  restaurant: z$2.lazy(() => RestaurantUpdateOneWithoutUsersNestedInputSchema).optional(),
  shifts: z$2.lazy(() => ShiftUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryUpdates: z$2.lazy(() => InventoryItemUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: z$2.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: z$2.lazy(() => PasswordResetUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItem: z$2.lazy(() => ProductionPlanItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: z$2.lazy(() => AvailabilityUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraint: z$2.lazy(() => SchedulingConstraintUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedback: z$2.lazy(() => CustomerFeedbackUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: z$2.lazy(() => RecipeVersionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: z$2.lazy(() => RecipeVersionUpdateManyWithoutApprovedByNestedInputSchema).optional()
}).strict();
var UserUncheckedUpdateWithoutPrepItemsInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  email: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: z$2.union([z$2.lazy(() => UserRoleSchema), z$2.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  organizationId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  shifts: z$2.lazy(() => ShiftUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryUpdates: z$2.lazy(() => InventoryItemUncheckedUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: z$2.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: z$2.lazy(() => PasswordResetUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItem: z$2.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: z$2.lazy(() => AvailabilityUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraint: z$2.lazy(() => SchedulingConstraintUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteUncheckedUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedback: z$2.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: z$2.lazy(() => RecipeVersionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: z$2.lazy(() => RecipeVersionUncheckedUpdateManyWithoutApprovedByNestedInputSchema).optional()
}).strict();
var UserCreateWithoutPasswordResetsInputSchema = z$2.object({
  email: z$2.string(),
  sub: z$2.number().int().optional().nullable(),
  passwordHash: z$2.string(),
  firstName: z$2.string(),
  lastName: z$2.string(),
  profileImage: z$2.string().optional().nullable(),
  verified: z$2.boolean().optional(),
  role: z$2.lazy(() => UserRoleSchema),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  organization: z$2.lazy(() => OrganizationCreateNestedOneWithoutUsersInputSchema).optional(),
  restaurant: z$2.lazy(() => RestaurantCreateNestedOneWithoutUsersInputSchema).optional(),
  shifts: z$2.lazy(() => ShiftCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: z$2.lazy(() => InventoryItemCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: z$2.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItem: z$2.lazy(() => ProductionPlanItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: z$2.lazy(() => AvailabilityCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraint: z$2.lazy(() => SchedulingConstraintCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedback: z$2.lazy(() => CustomerFeedbackCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: z$2.lazy(() => RecipeVersionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: z$2.lazy(() => RecipeVersionCreateNestedManyWithoutApprovedByInputSchema).optional()
}).strict();
var UserUncheckedCreateWithoutPasswordResetsInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  email: z$2.string(),
  sub: z$2.number().int().optional().nullable(),
  passwordHash: z$2.string(),
  firstName: z$2.string(),
  lastName: z$2.string(),
  profileImage: z$2.string().optional().nullable(),
  verified: z$2.boolean().optional(),
  role: z$2.lazy(() => UserRoleSchema),
  organizationId: z$2.number().int().optional().nullable(),
  restaurantId: z$2.number().int().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  shifts: z$2.lazy(() => ShiftUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: z$2.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: z$2.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItem: z$2.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: z$2.lazy(() => AvailabilityUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraint: z$2.lazy(() => SchedulingConstraintUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteUncheckedCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedback: z$2.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: z$2.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: z$2.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutApprovedByInputSchema).optional()
}).strict();
var UserCreateOrConnectWithoutPasswordResetsInputSchema = z$2.object({
  where: z$2.lazy(() => UserWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => UserCreateWithoutPasswordResetsInputSchema), z$2.lazy(() => UserUncheckedCreateWithoutPasswordResetsInputSchema)])
}).strict();
var UserUpsertWithoutPasswordResetsInputSchema = z$2.object({
  update: z$2.union([z$2.lazy(() => UserUpdateWithoutPasswordResetsInputSchema), z$2.lazy(() => UserUncheckedUpdateWithoutPasswordResetsInputSchema)]),
  create: z$2.union([z$2.lazy(() => UserCreateWithoutPasswordResetsInputSchema), z$2.lazy(() => UserUncheckedCreateWithoutPasswordResetsInputSchema)]),
  where: z$2.lazy(() => UserWhereInputSchema).optional()
}).strict();
var UserUpdateToOneWithWhereWithoutPasswordResetsInputSchema = z$2.object({
  where: z$2.lazy(() => UserWhereInputSchema).optional(),
  data: z$2.union([z$2.lazy(() => UserUpdateWithoutPasswordResetsInputSchema), z$2.lazy(() => UserUncheckedUpdateWithoutPasswordResetsInputSchema)])
}).strict();
var UserUpdateWithoutPasswordResetsInputSchema = z$2.object({
  email: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: z$2.union([z$2.lazy(() => UserRoleSchema), z$2.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  organization: z$2.lazy(() => OrganizationUpdateOneWithoutUsersNestedInputSchema).optional(),
  restaurant: z$2.lazy(() => RestaurantUpdateOneWithoutUsersNestedInputSchema).optional(),
  shifts: z$2.lazy(() => ShiftUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: z$2.lazy(() => InventoryItemUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: z$2.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItem: z$2.lazy(() => ProductionPlanItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: z$2.lazy(() => AvailabilityUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraint: z$2.lazy(() => SchedulingConstraintUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedback: z$2.lazy(() => CustomerFeedbackUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: z$2.lazy(() => RecipeVersionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: z$2.lazy(() => RecipeVersionUpdateManyWithoutApprovedByNestedInputSchema).optional()
}).strict();
var UserUncheckedUpdateWithoutPasswordResetsInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  email: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: z$2.union([z$2.lazy(() => UserRoleSchema), z$2.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  organizationId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  shifts: z$2.lazy(() => ShiftUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: z$2.lazy(() => InventoryItemUncheckedUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: z$2.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItem: z$2.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: z$2.lazy(() => AvailabilityUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraint: z$2.lazy(() => SchedulingConstraintUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteUncheckedUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedback: z$2.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: z$2.lazy(() => RecipeVersionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: z$2.lazy(() => RecipeVersionUncheckedUpdateManyWithoutApprovedByNestedInputSchema).optional()
}).strict();
var RestaurantCreateWithoutMenusInputSchema = z$2.object({
  name: z$2.string(),
  imageUrl: z$2.string().optional().nullable(),
  address: z$2.string(),
  city: z$2.string(),
  zipCode: z$2.string(),
  state: z$2.string(),
  owner: z$2.string(),
  foodCost: z$2.number().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  isDeleted: z$2.boolean().optional(),
  deleted: z$2.coerce.date().optional().nullable(),
  organization: z$2.lazy(() => OrganizationCreateNestedOneWithoutRestaurantsInputSchema).optional(),
  users: z$2.lazy(() => UserCreateNestedManyWithoutRestaurantInputSchema).optional(),
  cookbooks: z$2.lazy(() => CookBookCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: z$2.lazy(() => InventoryCreateNestedOneWithoutRestaurantInputSchema).optional(),
  orders: z$2.lazy(() => OrderCreateNestedManyWithoutRestaurantInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipment: z$2.lazy(() => EquipmentCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklist: z$2.lazy(() => QualityChecklistCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qustomerFeedback: z$2.lazy(() => CustomerFeedbackCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();
var RestaurantUncheckedCreateWithoutMenusInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  imageUrl: z$2.string().optional().nullable(),
  address: z$2.string(),
  city: z$2.string(),
  zipCode: z$2.string(),
  state: z$2.string(),
  owner: z$2.string(),
  organizationId: z$2.number().int().optional().nullable(),
  foodCost: z$2.number().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  isDeleted: z$2.boolean().optional(),
  deleted: z$2.coerce.date().optional().nullable(),
  users: z$2.lazy(() => UserUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  cookbooks: z$2.lazy(() => CookBookUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: z$2.lazy(() => InventoryUncheckedCreateNestedOneWithoutRestaurantInputSchema).optional(),
  orders: z$2.lazy(() => OrderUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipment: z$2.lazy(() => EquipmentUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklist: z$2.lazy(() => QualityChecklistUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qustomerFeedback: z$2.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();
var RestaurantCreateOrConnectWithoutMenusInputSchema = z$2.object({
  where: z$2.lazy(() => RestaurantWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => RestaurantCreateWithoutMenusInputSchema), z$2.lazy(() => RestaurantUncheckedCreateWithoutMenusInputSchema)])
}).strict();
var MenuItemCreateWithoutMenuInputSchema = z$2.object({
  name: z$2.string(),
  description: z$2.string().optional().nullable(),
  price: z$2.number(),
  foodCost: z$2.number(),
  recipeIds: z$2.union([z$2.lazy(() => MenuItemCreaterecipeIdsInputSchema), z$2.number().int().array()]).optional(),
  recipeServingsAmount: z$2.union([z$2.lazy(() => MenuItemCreaterecipeServingsAmountInputSchema), z$2.number().array()]).optional(),
  recipeServingsCost: z$2.union([z$2.lazy(() => MenuItemCreaterecipeServingsCostInputSchema), z$2.number().array()]).optional(),
  allergens: z$2.union([z$2.lazy(() => MenuItemCreateallergensInputSchema), z$2.string().array()]).optional(),
  nutritionalInfoId: z$2.number().int().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  nutritionalInfo: z$2.lazy(() => NutritionalInfoCreateNestedOneWithoutMenuItemInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeCreateNestedManyWithoutMenuItemsInputSchema).optional(),
  menuItemRecipe: z$2.lazy(() => MenuItemRecipeCreateNestedManyWithoutMenuItemInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsCreateNestedManyWithoutMenuItemInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemCreateNestedManyWithoutMenuItemInputSchema).optional(),
  nutritionalRecommendation: z$2.lazy(() => NutritionalRecommendationCreateNestedManyWithoutMenuItemInputSchema).optional(),
  category: z$2.lazy(() => MenuCategoryCreateNestedOneWithoutMenuItemsInputSchema).optional(),
  feedback: z$2.lazy(() => CustomerFeedbackCreateNestedManyWithoutMenuItemInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionCreateNestedManyWithoutMenuItemsInputSchema).optional()
}).strict();
var MenuItemUncheckedCreateWithoutMenuInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  description: z$2.string().optional().nullable(),
  price: z$2.number(),
  foodCost: z$2.number(),
  recipeIds: z$2.union([z$2.lazy(() => MenuItemCreaterecipeIdsInputSchema), z$2.number().int().array()]).optional(),
  recipeServingsAmount: z$2.union([z$2.lazy(() => MenuItemCreaterecipeServingsAmountInputSchema), z$2.number().array()]).optional(),
  recipeServingsCost: z$2.union([z$2.lazy(() => MenuItemCreaterecipeServingsCostInputSchema), z$2.number().array()]).optional(),
  allergens: z$2.union([z$2.lazy(() => MenuItemCreateallergensInputSchema), z$2.string().array()]).optional(),
  nutritionalInfoId: z$2.number().int().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  categoryId: z$2.number().int().optional().nullable(),
  nutritionalInfo: z$2.lazy(() => NutritionalInfoUncheckedCreateNestedOneWithoutMenuItemInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeUncheckedCreateNestedManyWithoutMenuItemsInputSchema).optional(),
  menuItemRecipe: z$2.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  nutritionalRecommendation: z$2.lazy(() => NutritionalRecommendationUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  feedback: z$2.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutMenuItemsInputSchema).optional()
}).strict();
var MenuItemCreateOrConnectWithoutMenuInputSchema = z$2.object({
  where: z$2.lazy(() => MenuItemWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => MenuItemCreateWithoutMenuInputSchema), z$2.lazy(() => MenuItemUncheckedCreateWithoutMenuInputSchema)])
}).strict();
var MenuItemCreateManyMenuInputEnvelopeSchema = z$2.object({
  data: z$2.union([z$2.lazy(() => MenuItemCreateManyMenuInputSchema), z$2.lazy(() => MenuItemCreateManyMenuInputSchema).array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var MenuCategoryCreateWithoutMenuInputSchema = z$2.object({
  name: z$2.string(),
  description: z$2.string().optional().nullable(),
  displayOrder: z$2.number().int(),
  isActive: z$2.boolean().optional(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  menuItems: z$2.lazy(() => MenuItemCreateNestedManyWithoutCategoryInputSchema).optional()
}).strict();
var MenuCategoryUncheckedCreateWithoutMenuInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  description: z$2.string().optional().nullable(),
  displayOrder: z$2.number().int(),
  isActive: z$2.boolean().optional(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  menuItems: z$2.lazy(() => MenuItemUncheckedCreateNestedManyWithoutCategoryInputSchema).optional()
}).strict();
var MenuCategoryCreateOrConnectWithoutMenuInputSchema = z$2.object({
  where: z$2.lazy(() => MenuCategoryWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => MenuCategoryCreateWithoutMenuInputSchema), z$2.lazy(() => MenuCategoryUncheckedCreateWithoutMenuInputSchema)])
}).strict();
var MenuCategoryCreateManyMenuInputEnvelopeSchema = z$2.object({
  data: z$2.union([z$2.lazy(() => MenuCategoryCreateManyMenuInputSchema), z$2.lazy(() => MenuCategoryCreateManyMenuInputSchema).array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var RestaurantUpsertWithoutMenusInputSchema = z$2.object({
  update: z$2.union([z$2.lazy(() => RestaurantUpdateWithoutMenusInputSchema), z$2.lazy(() => RestaurantUncheckedUpdateWithoutMenusInputSchema)]),
  create: z$2.union([z$2.lazy(() => RestaurantCreateWithoutMenusInputSchema), z$2.lazy(() => RestaurantUncheckedCreateWithoutMenusInputSchema)]),
  where: z$2.lazy(() => RestaurantWhereInputSchema).optional()
}).strict();
var RestaurantUpdateToOneWithWhereWithoutMenusInputSchema = z$2.object({
  where: z$2.lazy(() => RestaurantWhereInputSchema).optional(),
  data: z$2.union([z$2.lazy(() => RestaurantUpdateWithoutMenusInputSchema), z$2.lazy(() => RestaurantUncheckedUpdateWithoutMenusInputSchema)])
}).strict();
var RestaurantUpdateWithoutMenusInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  address: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  city: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  zipCode: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  state: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  owner: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  isDeleted: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  deleted: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  organization: z$2.lazy(() => OrganizationUpdateOneWithoutRestaurantsNestedInputSchema).optional(),
  users: z$2.lazy(() => UserUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  cookbooks: z$2.lazy(() => CookBookUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: z$2.lazy(() => InventoryUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  orders: z$2.lazy(() => OrderUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipment: z$2.lazy(() => EquipmentUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklist: z$2.lazy(() => QualityChecklistUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qustomerFeedback: z$2.lazy(() => CustomerFeedbackUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();
var RestaurantUncheckedUpdateWithoutMenusInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  address: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  city: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  zipCode: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  state: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  owner: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  organizationId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  isDeleted: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  deleted: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  users: z$2.lazy(() => UserUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  cookbooks: z$2.lazy(() => CookBookUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: z$2.lazy(() => InventoryUncheckedUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  orders: z$2.lazy(() => OrderUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipment: z$2.lazy(() => EquipmentUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklist: z$2.lazy(() => QualityChecklistUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qustomerFeedback: z$2.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();
var MenuItemUpsertWithWhereUniqueWithoutMenuInputSchema = z$2.object({
  where: z$2.lazy(() => MenuItemWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => MenuItemUpdateWithoutMenuInputSchema), z$2.lazy(() => MenuItemUncheckedUpdateWithoutMenuInputSchema)]),
  create: z$2.union([z$2.lazy(() => MenuItemCreateWithoutMenuInputSchema), z$2.lazy(() => MenuItemUncheckedCreateWithoutMenuInputSchema)])
}).strict();
var MenuItemUpdateWithWhereUniqueWithoutMenuInputSchema = z$2.object({
  where: z$2.lazy(() => MenuItemWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => MenuItemUpdateWithoutMenuInputSchema), z$2.lazy(() => MenuItemUncheckedUpdateWithoutMenuInputSchema)])
}).strict();
var MenuItemUpdateManyWithWhereWithoutMenuInputSchema = z$2.object({
  where: z$2.lazy(() => MenuItemScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => MenuItemUpdateManyMutationInputSchema), z$2.lazy(() => MenuItemUncheckedUpdateManyWithoutMenuInputSchema)])
}).strict();
var MenuCategoryUpsertWithWhereUniqueWithoutMenuInputSchema = z$2.object({
  where: z$2.lazy(() => MenuCategoryWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => MenuCategoryUpdateWithoutMenuInputSchema), z$2.lazy(() => MenuCategoryUncheckedUpdateWithoutMenuInputSchema)]),
  create: z$2.union([z$2.lazy(() => MenuCategoryCreateWithoutMenuInputSchema), z$2.lazy(() => MenuCategoryUncheckedCreateWithoutMenuInputSchema)])
}).strict();
var MenuCategoryUpdateWithWhereUniqueWithoutMenuInputSchema = z$2.object({
  where: z$2.lazy(() => MenuCategoryWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => MenuCategoryUpdateWithoutMenuInputSchema), z$2.lazy(() => MenuCategoryUncheckedUpdateWithoutMenuInputSchema)])
}).strict();
var MenuCategoryUpdateManyWithWhereWithoutMenuInputSchema = z$2.object({
  where: z$2.lazy(() => MenuCategoryScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => MenuCategoryUpdateManyMutationInputSchema), z$2.lazy(() => MenuCategoryUncheckedUpdateManyWithoutMenuInputSchema)])
}).strict();
var MenuCategoryScalarWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => MenuCategoryScalarWhereInputSchema), z$2.lazy(() => MenuCategoryScalarWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => MenuCategoryScalarWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => MenuCategoryScalarWhereInputSchema), z$2.lazy(() => MenuCategoryScalarWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  name: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  description: z$2.union([z$2.lazy(() => StringNullableFilterSchema), z$2.string()]).optional().nullable(),
  displayOrder: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  menuId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  isActive: z$2.union([z$2.lazy(() => BoolFilterSchema), z$2.boolean()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional()
}).strict();
var MenuItemCreateWithoutMenuItemRecipeInputSchema = z$2.object({
  name: z$2.string(),
  description: z$2.string().optional().nullable(),
  price: z$2.number(),
  foodCost: z$2.number(),
  recipeIds: z$2.union([z$2.lazy(() => MenuItemCreaterecipeIdsInputSchema), z$2.number().int().array()]).optional(),
  recipeServingsAmount: z$2.union([z$2.lazy(() => MenuItemCreaterecipeServingsAmountInputSchema), z$2.number().array()]).optional(),
  recipeServingsCost: z$2.union([z$2.lazy(() => MenuItemCreaterecipeServingsCostInputSchema), z$2.number().array()]).optional(),
  allergens: z$2.union([z$2.lazy(() => MenuItemCreateallergensInputSchema), z$2.string().array()]).optional(),
  nutritionalInfoId: z$2.number().int().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  nutritionalInfo: z$2.lazy(() => NutritionalInfoCreateNestedOneWithoutMenuItemInputSchema).optional(),
  menu: z$2.lazy(() => MenuCreateNestedOneWithoutMenuItemsInputSchema),
  recipes: z$2.lazy(() => RecipeCreateNestedManyWithoutMenuItemsInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsCreateNestedManyWithoutMenuItemInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemCreateNestedManyWithoutMenuItemInputSchema).optional(),
  nutritionalRecommendation: z$2.lazy(() => NutritionalRecommendationCreateNestedManyWithoutMenuItemInputSchema).optional(),
  category: z$2.lazy(() => MenuCategoryCreateNestedOneWithoutMenuItemsInputSchema).optional(),
  feedback: z$2.lazy(() => CustomerFeedbackCreateNestedManyWithoutMenuItemInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionCreateNestedManyWithoutMenuItemsInputSchema).optional()
}).strict();
var MenuItemUncheckedCreateWithoutMenuItemRecipeInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  description: z$2.string().optional().nullable(),
  price: z$2.number(),
  foodCost: z$2.number(),
  recipeIds: z$2.union([z$2.lazy(() => MenuItemCreaterecipeIdsInputSchema), z$2.number().int().array()]).optional(),
  recipeServingsAmount: z$2.union([z$2.lazy(() => MenuItemCreaterecipeServingsAmountInputSchema), z$2.number().array()]).optional(),
  recipeServingsCost: z$2.union([z$2.lazy(() => MenuItemCreaterecipeServingsCostInputSchema), z$2.number().array()]).optional(),
  allergens: z$2.union([z$2.lazy(() => MenuItemCreateallergensInputSchema), z$2.string().array()]).optional(),
  nutritionalInfoId: z$2.number().int().optional().nullable(),
  menuId: z$2.number().int(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  categoryId: z$2.number().int().optional().nullable(),
  nutritionalInfo: z$2.lazy(() => NutritionalInfoUncheckedCreateNestedOneWithoutMenuItemInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeUncheckedCreateNestedManyWithoutMenuItemsInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  nutritionalRecommendation: z$2.lazy(() => NutritionalRecommendationUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  feedback: z$2.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutMenuItemsInputSchema).optional()
}).strict();
var MenuItemCreateOrConnectWithoutMenuItemRecipeInputSchema = z$2.object({
  where: z$2.lazy(() => MenuItemWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => MenuItemCreateWithoutMenuItemRecipeInputSchema), z$2.lazy(() => MenuItemUncheckedCreateWithoutMenuItemRecipeInputSchema)])
}).strict();
var RecipeCreateWithoutMenuItemRecipeInputSchema = z$2.object({
  name: z$2.string(),
  imageUrl: z$2.union([z$2.lazy(() => RecipeCreateimageUrlInputSchema), z$2.string().array()]).optional(),
  description: z$2.string().optional().nullable(),
  servings: z$2.number().int(),
  cookTime: z$2.number().int(),
  prepTime: z$2.number().int(),
  frequency: z$2.number().int().optional().nullable(),
  foodCost: z$2.number().optional().nullable(),
  isDeleted: z$2.boolean().optional(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  restaurant: z$2.lazy(() => RestaurantCreateNestedOneWithoutRecipesInputSchema),
  cookBook: z$2.lazy(() => CookBookCreateNestedOneWithoutRecipesInputSchema),
  ingredients: z$2.lazy(() => RecipeIngredientCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z$2.lazy(() => MenuItemCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: z$2.lazy(() => FoodCostHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: z$2.lazy(() => PrepHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z$2.lazy(() => PrepBoardCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  ProductionPlanItem: z$2.lazy(() => ProductionPlanItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z$2.lazy(() => RecipeTagCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: z$2.lazy(() => RecipeVersionCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipment: z$2.lazy(() => RecipeEquipmentCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionCreateNestedManyWithoutRecipesInputSchema).optional()
}).strict();
var RecipeUncheckedCreateWithoutMenuItemRecipeInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  imageUrl: z$2.union([z$2.lazy(() => RecipeCreateimageUrlInputSchema), z$2.string().array()]).optional(),
  description: z$2.string().optional().nullable(),
  servings: z$2.number().int(),
  cookTime: z$2.number().int(),
  prepTime: z$2.number().int(),
  frequency: z$2.number().int().optional().nullable(),
  restaurantId: z$2.number().int(),
  cookBookId: z$2.number().int(),
  foodCost: z$2.number().optional().nullable(),
  isDeleted: z$2.boolean().optional(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  ingredients: z$2.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z$2.lazy(() => MenuItemUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: z$2.lazy(() => FoodCostHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: z$2.lazy(() => PrepHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z$2.lazy(() => PrepBoardUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  ProductionPlanItem: z$2.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z$2.lazy(() => RecipeTagUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: z$2.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipment: z$2.lazy(() => RecipeEquipmentUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutRecipesInputSchema).optional()
}).strict();
var RecipeCreateOrConnectWithoutMenuItemRecipeInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => RecipeCreateWithoutMenuItemRecipeInputSchema), z$2.lazy(() => RecipeUncheckedCreateWithoutMenuItemRecipeInputSchema)])
}).strict();
var MenuItemUpsertWithoutMenuItemRecipeInputSchema = z$2.object({
  update: z$2.union([z$2.lazy(() => MenuItemUpdateWithoutMenuItemRecipeInputSchema), z$2.lazy(() => MenuItemUncheckedUpdateWithoutMenuItemRecipeInputSchema)]),
  create: z$2.union([z$2.lazy(() => MenuItemCreateWithoutMenuItemRecipeInputSchema), z$2.lazy(() => MenuItemUncheckedCreateWithoutMenuItemRecipeInputSchema)]),
  where: z$2.lazy(() => MenuItemWhereInputSchema).optional()
}).strict();
var MenuItemUpdateToOneWithWhereWithoutMenuItemRecipeInputSchema = z$2.object({
  where: z$2.lazy(() => MenuItemWhereInputSchema).optional(),
  data: z$2.union([z$2.lazy(() => MenuItemUpdateWithoutMenuItemRecipeInputSchema), z$2.lazy(() => MenuItemUncheckedUpdateWithoutMenuItemRecipeInputSchema)])
}).strict();
var MenuItemUpdateWithoutMenuItemRecipeInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipeIds: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeIdsInputSchema), z$2.number().int().array()]).optional(),
  recipeServingsAmount: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema), z$2.number().array()]).optional(),
  recipeServingsCost: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema), z$2.number().array()]).optional(),
  allergens: z$2.union([z$2.lazy(() => MenuItemUpdateallergensInputSchema), z$2.string().array()]).optional(),
  nutritionalInfoId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  nutritionalInfo: z$2.lazy(() => NutritionalInfoUpdateOneWithoutMenuItemNestedInputSchema).optional(),
  menu: z$2.lazy(() => MenuUpdateOneRequiredWithoutMenuItemsNestedInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeUpdateManyWithoutMenuItemsNestedInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  nutritionalRecommendation: z$2.lazy(() => NutritionalRecommendationUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  category: z$2.lazy(() => MenuCategoryUpdateOneWithoutMenuItemsNestedInputSchema).optional(),
  feedback: z$2.lazy(() => CustomerFeedbackUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionUpdateManyWithoutMenuItemsNestedInputSchema).optional()
}).strict();
var MenuItemUncheckedUpdateWithoutMenuItemRecipeInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipeIds: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeIdsInputSchema), z$2.number().int().array()]).optional(),
  recipeServingsAmount: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema), z$2.number().array()]).optional(),
  recipeServingsCost: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema), z$2.number().array()]).optional(),
  allergens: z$2.union([z$2.lazy(() => MenuItemUpdateallergensInputSchema), z$2.string().array()]).optional(),
  nutritionalInfoId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  menuId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  categoryId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  nutritionalInfo: z$2.lazy(() => NutritionalInfoUncheckedUpdateOneWithoutMenuItemNestedInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeUncheckedUpdateManyWithoutMenuItemsNestedInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  nutritionalRecommendation: z$2.lazy(() => NutritionalRecommendationUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  feedback: z$2.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutMenuItemsNestedInputSchema).optional()
}).strict();
var RecipeUpsertWithoutMenuItemRecipeInputSchema = z$2.object({
  update: z$2.union([z$2.lazy(() => RecipeUpdateWithoutMenuItemRecipeInputSchema), z$2.lazy(() => RecipeUncheckedUpdateWithoutMenuItemRecipeInputSchema)]),
  create: z$2.union([z$2.lazy(() => RecipeCreateWithoutMenuItemRecipeInputSchema), z$2.lazy(() => RecipeUncheckedCreateWithoutMenuItemRecipeInputSchema)]),
  where: z$2.lazy(() => RecipeWhereInputSchema).optional()
}).strict();
var RecipeUpdateToOneWithWhereWithoutMenuItemRecipeInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeWhereInputSchema).optional(),
  data: z$2.union([z$2.lazy(() => RecipeUpdateWithoutMenuItemRecipeInputSchema), z$2.lazy(() => RecipeUncheckedUpdateWithoutMenuItemRecipeInputSchema)])
}).strict();
var RecipeUpdateWithoutMenuItemRecipeInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.lazy(() => RecipeUpdateimageUrlInputSchema), z$2.string().array()]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: z$2.lazy(() => RestaurantUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  cookBook: z$2.lazy(() => CookBookUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  ingredients: z$2.lazy(() => RecipeIngredientUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z$2.lazy(() => MenuItemUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: z$2.lazy(() => FoodCostHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: z$2.lazy(() => PrepHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z$2.lazy(() => PrepBoardUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  ProductionPlanItem: z$2.lazy(() => ProductionPlanItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z$2.lazy(() => RecipeTagUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: z$2.lazy(() => RecipeVersionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipment: z$2.lazy(() => RecipeEquipmentUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionUpdateManyWithoutRecipesNestedInputSchema).optional()
}).strict();
var RecipeUncheckedUpdateWithoutMenuItemRecipeInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.lazy(() => RecipeUpdateimageUrlInputSchema), z$2.string().array()]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookBookId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  ingredients: z$2.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z$2.lazy(() => MenuItemUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: z$2.lazy(() => FoodCostHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: z$2.lazy(() => PrepHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z$2.lazy(() => PrepBoardUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  ProductionPlanItem: z$2.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z$2.lazy(() => RecipeTagUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: z$2.lazy(() => RecipeVersionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipment: z$2.lazy(() => RecipeEquipmentUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional()
}).strict();
var NutritionalInfoCreateWithoutMenuItemInputSchema = z$2.object({
  calories: z$2.number(),
  fat: z$2.number(),
  saturatedFat: z$2.number(),
  transFat: z$2.number(),
  cholesterol: z$2.number(),
  sodium: z$2.number(),
  carbohydrates: z$2.number(),
  fiber: z$2.number(),
  sugar: z$2.number(),
  protein: z$2.number(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var NutritionalInfoUncheckedCreateWithoutMenuItemInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  calories: z$2.number(),
  fat: z$2.number(),
  saturatedFat: z$2.number(),
  transFat: z$2.number(),
  cholesterol: z$2.number(),
  sodium: z$2.number(),
  carbohydrates: z$2.number(),
  fiber: z$2.number(),
  sugar: z$2.number(),
  protein: z$2.number(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var NutritionalInfoCreateOrConnectWithoutMenuItemInputSchema = z$2.object({
  where: z$2.lazy(() => NutritionalInfoWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => NutritionalInfoCreateWithoutMenuItemInputSchema), z$2.lazy(() => NutritionalInfoUncheckedCreateWithoutMenuItemInputSchema)])
}).strict();
var MenuCreateWithoutMenuItemsInputSchema = z$2.object({
  name: z$2.string(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  restaurant: z$2.lazy(() => RestaurantCreateNestedOneWithoutMenusInputSchema),
  MenuCategory: z$2.lazy(() => MenuCategoryCreateNestedManyWithoutMenuInputSchema).optional()
}).strict();
var MenuUncheckedCreateWithoutMenuItemsInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  restaurantId: z$2.number().int(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  MenuCategory: z$2.lazy(() => MenuCategoryUncheckedCreateNestedManyWithoutMenuInputSchema).optional()
}).strict();
var MenuCreateOrConnectWithoutMenuItemsInputSchema = z$2.object({
  where: z$2.lazy(() => MenuWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => MenuCreateWithoutMenuItemsInputSchema), z$2.lazy(() => MenuUncheckedCreateWithoutMenuItemsInputSchema)])
}).strict();
var RecipeCreateWithoutMenuItemsInputSchema = z$2.object({
  name: z$2.string(),
  imageUrl: z$2.union([z$2.lazy(() => RecipeCreateimageUrlInputSchema), z$2.string().array()]).optional(),
  description: z$2.string().optional().nullable(),
  servings: z$2.number().int(),
  cookTime: z$2.number().int(),
  prepTime: z$2.number().int(),
  frequency: z$2.number().int().optional().nullable(),
  foodCost: z$2.number().optional().nullable(),
  isDeleted: z$2.boolean().optional(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  restaurant: z$2.lazy(() => RestaurantCreateNestedOneWithoutRecipesInputSchema),
  cookBook: z$2.lazy(() => CookBookCreateNestedOneWithoutRecipesInputSchema),
  ingredients: z$2.lazy(() => RecipeIngredientCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionCreateNestedManyWithoutRecipeInputSchema).optional(),
  foodCostHistory: z$2.lazy(() => FoodCostHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: z$2.lazy(() => PrepHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z$2.lazy(() => PrepBoardCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  MenuItemRecipe: z$2.lazy(() => MenuItemRecipeCreateNestedManyWithoutRecipeInputSchema).optional(),
  ProductionPlanItem: z$2.lazy(() => ProductionPlanItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z$2.lazy(() => RecipeTagCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: z$2.lazy(() => RecipeVersionCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipment: z$2.lazy(() => RecipeEquipmentCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionCreateNestedManyWithoutRecipesInputSchema).optional()
}).strict();
var RecipeUncheckedCreateWithoutMenuItemsInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  imageUrl: z$2.union([z$2.lazy(() => RecipeCreateimageUrlInputSchema), z$2.string().array()]).optional(),
  description: z$2.string().optional().nullable(),
  servings: z$2.number().int(),
  cookTime: z$2.number().int(),
  prepTime: z$2.number().int(),
  frequency: z$2.number().int().optional().nullable(),
  restaurantId: z$2.number().int(),
  cookBookId: z$2.number().int(),
  foodCost: z$2.number().optional().nullable(),
  isDeleted: z$2.boolean().optional(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  ingredients: z$2.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  foodCostHistory: z$2.lazy(() => FoodCostHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: z$2.lazy(() => PrepHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z$2.lazy(() => PrepBoardUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  MenuItemRecipe: z$2.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  ProductionPlanItem: z$2.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z$2.lazy(() => RecipeTagUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: z$2.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipment: z$2.lazy(() => RecipeEquipmentUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutRecipesInputSchema).optional()
}).strict();
var RecipeCreateOrConnectWithoutMenuItemsInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => RecipeCreateWithoutMenuItemsInputSchema), z$2.lazy(() => RecipeUncheckedCreateWithoutMenuItemsInputSchema)])
}).strict();
var MenuItemRecipeCreateWithoutMenuItemInputSchema = z$2.object({
  joinAt: z$2.coerce.date().optional(),
  recipe: z$2.lazy(() => RecipeCreateNestedOneWithoutMenuItemRecipeInputSchema)
}).strict();
var MenuItemRecipeUncheckedCreateWithoutMenuItemInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  recipeId: z$2.number().int(),
  joinAt: z$2.coerce.date().optional()
}).strict();
var MenuItemRecipeCreateOrConnectWithoutMenuItemInputSchema = z$2.object({
  where: z$2.lazy(() => MenuItemRecipeWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => MenuItemRecipeCreateWithoutMenuItemInputSchema), z$2.lazy(() => MenuItemRecipeUncheckedCreateWithoutMenuItemInputSchema)])
}).strict();
var MenuItemRecipeCreateManyMenuItemInputEnvelopeSchema = z$2.object({
  data: z$2.union([z$2.lazy(() => MenuItemRecipeCreateManyMenuItemInputSchema), z$2.lazy(() => MenuItemRecipeCreateManyMenuItemInputSchema).array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var SalesTransactionsCreateWithoutMenuItemInputSchema = z$2.object({
  posTransactionID: z$2.string().optional().nullable(),
  price: z$2.number(),
  total: z$2.number(),
  transactionDate: z$2.coerce.date(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  restaurant: z$2.lazy(() => RestaurantCreateNestedOneWithoutSalesTransactionsInputSchema)
}).strict();
var SalesTransactionsUncheckedCreateWithoutMenuItemInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  posTransactionID: z$2.string().optional().nullable(),
  restaurantId: z$2.number().int(),
  price: z$2.number(),
  total: z$2.number(),
  transactionDate: z$2.coerce.date(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var SalesTransactionsCreateOrConnectWithoutMenuItemInputSchema = z$2.object({
  where: z$2.lazy(() => SalesTransactionsWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => SalesTransactionsCreateWithoutMenuItemInputSchema), z$2.lazy(() => SalesTransactionsUncheckedCreateWithoutMenuItemInputSchema)])
}).strict();
var SalesTransactionsCreateManyMenuItemInputEnvelopeSchema = z$2.object({
  data: z$2.union([z$2.lazy(() => SalesTransactionsCreateManyMenuItemInputSchema), z$2.lazy(() => SalesTransactionsCreateManyMenuItemInputSchema).array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var LeftoverItemCreateWithoutMenuItemInputSchema = z$2.object({
  date: z$2.coerce.date(),
  quantity: z$2.number().int(),
  reason: z$2.string(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  restaurant: z$2.lazy(() => RestaurantCreateNestedOneWithoutLeftoverItemInputSchema),
  recordedBy: z$2.lazy(() => UserCreateNestedOneWithoutLeftoverItemInputSchema)
}).strict();
var LeftoverItemUncheckedCreateWithoutMenuItemInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  restaurantId: z$2.number().int(),
  date: z$2.coerce.date(),
  quantity: z$2.number().int(),
  reason: z$2.string(),
  recordedById: z$2.number().int(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var LeftoverItemCreateOrConnectWithoutMenuItemInputSchema = z$2.object({
  where: z$2.lazy(() => LeftoverItemWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => LeftoverItemCreateWithoutMenuItemInputSchema), z$2.lazy(() => LeftoverItemUncheckedCreateWithoutMenuItemInputSchema)])
}).strict();
var LeftoverItemCreateManyMenuItemInputEnvelopeSchema = z$2.object({
  data: z$2.union([z$2.lazy(() => LeftoverItemCreateManyMenuItemInputSchema), z$2.lazy(() => LeftoverItemCreateManyMenuItemInputSchema).array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var NutritionalRecommendationCreateWithoutMenuItemInputSchema = z$2.object({
  recommendation: z$2.string(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var NutritionalRecommendationUncheckedCreateWithoutMenuItemInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  recommendation: z$2.string(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var NutritionalRecommendationCreateOrConnectWithoutMenuItemInputSchema = z$2.object({
  where: z$2.lazy(() => NutritionalRecommendationWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => NutritionalRecommendationCreateWithoutMenuItemInputSchema), z$2.lazy(() => NutritionalRecommendationUncheckedCreateWithoutMenuItemInputSchema)])
}).strict();
var NutritionalRecommendationCreateManyMenuItemInputEnvelopeSchema = z$2.object({
  data: z$2.union([z$2.lazy(() => NutritionalRecommendationCreateManyMenuItemInputSchema), z$2.lazy(() => NutritionalRecommendationCreateManyMenuItemInputSchema).array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var MenuCategoryCreateWithoutMenuItemsInputSchema = z$2.object({
  name: z$2.string(),
  description: z$2.string().optional().nullable(),
  displayOrder: z$2.number().int(),
  isActive: z$2.boolean().optional(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  menu: z$2.lazy(() => MenuCreateNestedOneWithoutMenuCategoryInputSchema)
}).strict();
var MenuCategoryUncheckedCreateWithoutMenuItemsInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  description: z$2.string().optional().nullable(),
  displayOrder: z$2.number().int(),
  menuId: z$2.number().int(),
  isActive: z$2.boolean().optional(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var MenuCategoryCreateOrConnectWithoutMenuItemsInputSchema = z$2.object({
  where: z$2.lazy(() => MenuCategoryWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => MenuCategoryCreateWithoutMenuItemsInputSchema), z$2.lazy(() => MenuCategoryUncheckedCreateWithoutMenuItemsInputSchema)])
}).strict();
var CustomerFeedbackCreateWithoutMenuItemInputSchema = z$2.object({
  rating: z$2.number().int(),
  comment: z$2.string().optional().nullable(),
  source: z$2.lazy(() => FeedbackSourceSchema),
  tags: z$2.union([z$2.lazy(() => CustomerFeedbackCreatetagsInputSchema), z$2.string().array()]).optional(),
  status: z$2.lazy(() => FeedbackStatusSchema).optional(),
  responseText: z$2.string().optional().nullable(),
  respondedAt: z$2.coerce.date().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  restaurant: z$2.lazy(() => RestaurantCreateNestedOneWithoutQustomerFeedbackInputSchema),
  respondedBy: z$2.lazy(() => UserCreateNestedOneWithoutCustomerFeedbackInputSchema).optional()
}).strict();
var CustomerFeedbackUncheckedCreateWithoutMenuItemInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  restaurantId: z$2.number().int(),
  rating: z$2.number().int(),
  comment: z$2.string().optional().nullable(),
  source: z$2.lazy(() => FeedbackSourceSchema),
  tags: z$2.union([z$2.lazy(() => CustomerFeedbackCreatetagsInputSchema), z$2.string().array()]).optional(),
  status: z$2.lazy(() => FeedbackStatusSchema).optional(),
  responseText: z$2.string().optional().nullable(),
  respondedAt: z$2.coerce.date().optional().nullable(),
  respondedById: z$2.number().int().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var CustomerFeedbackCreateOrConnectWithoutMenuItemInputSchema = z$2.object({
  where: z$2.lazy(() => CustomerFeedbackWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => CustomerFeedbackCreateWithoutMenuItemInputSchema), z$2.lazy(() => CustomerFeedbackUncheckedCreateWithoutMenuItemInputSchema)])
}).strict();
var CustomerFeedbackCreateManyMenuItemInputEnvelopeSchema = z$2.object({
  data: z$2.union([z$2.lazy(() => CustomerFeedbackCreateManyMenuItemInputSchema), z$2.lazy(() => CustomerFeedbackCreateManyMenuItemInputSchema).array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var DietaryRestrictionCreateWithoutMenuItemsInputSchema = z$2.object({
  name: z$2.string(),
  description: z$2.string().optional().nullable(),
  icon: z$2.string().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  recipes: z$2.lazy(() => RecipeCreateNestedManyWithoutDietaryRestrictionsInputSchema).optional(),
  ingredients: z$2.lazy(() => IngredientCreateNestedManyWithoutDietaryRestrictionInputSchema).optional()
}).strict();
var DietaryRestrictionUncheckedCreateWithoutMenuItemsInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  description: z$2.string().optional().nullable(),
  icon: z$2.string().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  recipes: z$2.lazy(() => RecipeUncheckedCreateNestedManyWithoutDietaryRestrictionsInputSchema).optional(),
  ingredients: z$2.lazy(() => IngredientUncheckedCreateNestedManyWithoutDietaryRestrictionInputSchema).optional()
}).strict();
var DietaryRestrictionCreateOrConnectWithoutMenuItemsInputSchema = z$2.object({
  where: z$2.lazy(() => DietaryRestrictionWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => DietaryRestrictionCreateWithoutMenuItemsInputSchema), z$2.lazy(() => DietaryRestrictionUncheckedCreateWithoutMenuItemsInputSchema)])
}).strict();
var NutritionalInfoUpsertWithoutMenuItemInputSchema = z$2.object({
  update: z$2.union([z$2.lazy(() => NutritionalInfoUpdateWithoutMenuItemInputSchema), z$2.lazy(() => NutritionalInfoUncheckedUpdateWithoutMenuItemInputSchema)]),
  create: z$2.union([z$2.lazy(() => NutritionalInfoCreateWithoutMenuItemInputSchema), z$2.lazy(() => NutritionalInfoUncheckedCreateWithoutMenuItemInputSchema)]),
  where: z$2.lazy(() => NutritionalInfoWhereInputSchema).optional()
}).strict();
var NutritionalInfoUpdateToOneWithWhereWithoutMenuItemInputSchema = z$2.object({
  where: z$2.lazy(() => NutritionalInfoWhereInputSchema).optional(),
  data: z$2.union([z$2.lazy(() => NutritionalInfoUpdateWithoutMenuItemInputSchema), z$2.lazy(() => NutritionalInfoUncheckedUpdateWithoutMenuItemInputSchema)])
}).strict();
var NutritionalInfoUpdateWithoutMenuItemInputSchema = z$2.object({
  calories: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  fat: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  saturatedFat: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  transFat: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  cholesterol: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  sodium: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  carbohydrates: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  fiber: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  sugar: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  protein: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var NutritionalInfoUncheckedUpdateWithoutMenuItemInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  calories: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  fat: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  saturatedFat: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  transFat: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  cholesterol: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  sodium: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  carbohydrates: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  fiber: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  sugar: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  protein: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var MenuUpsertWithoutMenuItemsInputSchema = z$2.object({
  update: z$2.union([z$2.lazy(() => MenuUpdateWithoutMenuItemsInputSchema), z$2.lazy(() => MenuUncheckedUpdateWithoutMenuItemsInputSchema)]),
  create: z$2.union([z$2.lazy(() => MenuCreateWithoutMenuItemsInputSchema), z$2.lazy(() => MenuUncheckedCreateWithoutMenuItemsInputSchema)]),
  where: z$2.lazy(() => MenuWhereInputSchema).optional()
}).strict();
var MenuUpdateToOneWithWhereWithoutMenuItemsInputSchema = z$2.object({
  where: z$2.lazy(() => MenuWhereInputSchema).optional(),
  data: z$2.union([z$2.lazy(() => MenuUpdateWithoutMenuItemsInputSchema), z$2.lazy(() => MenuUncheckedUpdateWithoutMenuItemsInputSchema)])
}).strict();
var MenuUpdateWithoutMenuItemsInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: z$2.lazy(() => RestaurantUpdateOneRequiredWithoutMenusNestedInputSchema).optional(),
  MenuCategory: z$2.lazy(() => MenuCategoryUpdateManyWithoutMenuNestedInputSchema).optional()
}).strict();
var MenuUncheckedUpdateWithoutMenuItemsInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  MenuCategory: z$2.lazy(() => MenuCategoryUncheckedUpdateManyWithoutMenuNestedInputSchema).optional()
}).strict();
var RecipeUpsertWithWhereUniqueWithoutMenuItemsInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => RecipeUpdateWithoutMenuItemsInputSchema), z$2.lazy(() => RecipeUncheckedUpdateWithoutMenuItemsInputSchema)]),
  create: z$2.union([z$2.lazy(() => RecipeCreateWithoutMenuItemsInputSchema), z$2.lazy(() => RecipeUncheckedCreateWithoutMenuItemsInputSchema)])
}).strict();
var RecipeUpdateWithWhereUniqueWithoutMenuItemsInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => RecipeUpdateWithoutMenuItemsInputSchema), z$2.lazy(() => RecipeUncheckedUpdateWithoutMenuItemsInputSchema)])
}).strict();
var RecipeUpdateManyWithWhereWithoutMenuItemsInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => RecipeUpdateManyMutationInputSchema), z$2.lazy(() => RecipeUncheckedUpdateManyWithoutMenuItemsInputSchema)])
}).strict();
var MenuItemRecipeUpsertWithWhereUniqueWithoutMenuItemInputSchema = z$2.object({
  where: z$2.lazy(() => MenuItemRecipeWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => MenuItemRecipeUpdateWithoutMenuItemInputSchema), z$2.lazy(() => MenuItemRecipeUncheckedUpdateWithoutMenuItemInputSchema)]),
  create: z$2.union([z$2.lazy(() => MenuItemRecipeCreateWithoutMenuItemInputSchema), z$2.lazy(() => MenuItemRecipeUncheckedCreateWithoutMenuItemInputSchema)])
}).strict();
var MenuItemRecipeUpdateWithWhereUniqueWithoutMenuItemInputSchema = z$2.object({
  where: z$2.lazy(() => MenuItemRecipeWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => MenuItemRecipeUpdateWithoutMenuItemInputSchema), z$2.lazy(() => MenuItemRecipeUncheckedUpdateWithoutMenuItemInputSchema)])
}).strict();
var MenuItemRecipeUpdateManyWithWhereWithoutMenuItemInputSchema = z$2.object({
  where: z$2.lazy(() => MenuItemRecipeScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => MenuItemRecipeUpdateManyMutationInputSchema), z$2.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutMenuItemInputSchema)])
}).strict();
var SalesTransactionsUpsertWithWhereUniqueWithoutMenuItemInputSchema = z$2.object({
  where: z$2.lazy(() => SalesTransactionsWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => SalesTransactionsUpdateWithoutMenuItemInputSchema), z$2.lazy(() => SalesTransactionsUncheckedUpdateWithoutMenuItemInputSchema)]),
  create: z$2.union([z$2.lazy(() => SalesTransactionsCreateWithoutMenuItemInputSchema), z$2.lazy(() => SalesTransactionsUncheckedCreateWithoutMenuItemInputSchema)])
}).strict();
var SalesTransactionsUpdateWithWhereUniqueWithoutMenuItemInputSchema = z$2.object({
  where: z$2.lazy(() => SalesTransactionsWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => SalesTransactionsUpdateWithoutMenuItemInputSchema), z$2.lazy(() => SalesTransactionsUncheckedUpdateWithoutMenuItemInputSchema)])
}).strict();
var SalesTransactionsUpdateManyWithWhereWithoutMenuItemInputSchema = z$2.object({
  where: z$2.lazy(() => SalesTransactionsScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => SalesTransactionsUpdateManyMutationInputSchema), z$2.lazy(() => SalesTransactionsUncheckedUpdateManyWithoutMenuItemInputSchema)])
}).strict();
var LeftoverItemUpsertWithWhereUniqueWithoutMenuItemInputSchema = z$2.object({
  where: z$2.lazy(() => LeftoverItemWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => LeftoverItemUpdateWithoutMenuItemInputSchema), z$2.lazy(() => LeftoverItemUncheckedUpdateWithoutMenuItemInputSchema)]),
  create: z$2.union([z$2.lazy(() => LeftoverItemCreateWithoutMenuItemInputSchema), z$2.lazy(() => LeftoverItemUncheckedCreateWithoutMenuItemInputSchema)])
}).strict();
var LeftoverItemUpdateWithWhereUniqueWithoutMenuItemInputSchema = z$2.object({
  where: z$2.lazy(() => LeftoverItemWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => LeftoverItemUpdateWithoutMenuItemInputSchema), z$2.lazy(() => LeftoverItemUncheckedUpdateWithoutMenuItemInputSchema)])
}).strict();
var LeftoverItemUpdateManyWithWhereWithoutMenuItemInputSchema = z$2.object({
  where: z$2.lazy(() => LeftoverItemScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => LeftoverItemUpdateManyMutationInputSchema), z$2.lazy(() => LeftoverItemUncheckedUpdateManyWithoutMenuItemInputSchema)])
}).strict();
var NutritionalRecommendationUpsertWithWhereUniqueWithoutMenuItemInputSchema = z$2.object({
  where: z$2.lazy(() => NutritionalRecommendationWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => NutritionalRecommendationUpdateWithoutMenuItemInputSchema), z$2.lazy(() => NutritionalRecommendationUncheckedUpdateWithoutMenuItemInputSchema)]),
  create: z$2.union([z$2.lazy(() => NutritionalRecommendationCreateWithoutMenuItemInputSchema), z$2.lazy(() => NutritionalRecommendationUncheckedCreateWithoutMenuItemInputSchema)])
}).strict();
var NutritionalRecommendationUpdateWithWhereUniqueWithoutMenuItemInputSchema = z$2.object({
  where: z$2.lazy(() => NutritionalRecommendationWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => NutritionalRecommendationUpdateWithoutMenuItemInputSchema), z$2.lazy(() => NutritionalRecommendationUncheckedUpdateWithoutMenuItemInputSchema)])
}).strict();
var NutritionalRecommendationUpdateManyWithWhereWithoutMenuItemInputSchema = z$2.object({
  where: z$2.lazy(() => NutritionalRecommendationScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => NutritionalRecommendationUpdateManyMutationInputSchema), z$2.lazy(() => NutritionalRecommendationUncheckedUpdateManyWithoutMenuItemInputSchema)])
}).strict();
var NutritionalRecommendationScalarWhereInputSchema = z$2.object({
  AND: z$2.union([z$2.lazy(() => NutritionalRecommendationScalarWhereInputSchema), z$2.lazy(() => NutritionalRecommendationScalarWhereInputSchema).array()]).optional(),
  OR: z$2.lazy(() => NutritionalRecommendationScalarWhereInputSchema).array().optional(),
  NOT: z$2.union([z$2.lazy(() => NutritionalRecommendationScalarWhereInputSchema), z$2.lazy(() => NutritionalRecommendationScalarWhereInputSchema).array()]).optional(),
  id: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  menuItemId: z$2.union([z$2.lazy(() => IntFilterSchema), z$2.number()]).optional(),
  recommendation: z$2.union([z$2.lazy(() => StringFilterSchema), z$2.string()]).optional(),
  createdAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional(),
  updatedAt: z$2.union([z$2.lazy(() => DateTimeFilterSchema), z$2.coerce.date()]).optional()
}).strict();
var MenuCategoryUpsertWithoutMenuItemsInputSchema = z$2.object({
  update: z$2.union([z$2.lazy(() => MenuCategoryUpdateWithoutMenuItemsInputSchema), z$2.lazy(() => MenuCategoryUncheckedUpdateWithoutMenuItemsInputSchema)]),
  create: z$2.union([z$2.lazy(() => MenuCategoryCreateWithoutMenuItemsInputSchema), z$2.lazy(() => MenuCategoryUncheckedCreateWithoutMenuItemsInputSchema)]),
  where: z$2.lazy(() => MenuCategoryWhereInputSchema).optional()
}).strict();
var MenuCategoryUpdateToOneWithWhereWithoutMenuItemsInputSchema = z$2.object({
  where: z$2.lazy(() => MenuCategoryWhereInputSchema).optional(),
  data: z$2.union([z$2.lazy(() => MenuCategoryUpdateWithoutMenuItemsInputSchema), z$2.lazy(() => MenuCategoryUncheckedUpdateWithoutMenuItemsInputSchema)])
}).strict();
var MenuCategoryUpdateWithoutMenuItemsInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  displayOrder: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  isActive: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  menu: z$2.lazy(() => MenuUpdateOneRequiredWithoutMenuCategoryNestedInputSchema).optional()
}).strict();
var MenuCategoryUncheckedUpdateWithoutMenuItemsInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  displayOrder: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  menuId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  isActive: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var CustomerFeedbackUpsertWithWhereUniqueWithoutMenuItemInputSchema = z$2.object({
  where: z$2.lazy(() => CustomerFeedbackWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => CustomerFeedbackUpdateWithoutMenuItemInputSchema), z$2.lazy(() => CustomerFeedbackUncheckedUpdateWithoutMenuItemInputSchema)]),
  create: z$2.union([z$2.lazy(() => CustomerFeedbackCreateWithoutMenuItemInputSchema), z$2.lazy(() => CustomerFeedbackUncheckedCreateWithoutMenuItemInputSchema)])
}).strict();
var CustomerFeedbackUpdateWithWhereUniqueWithoutMenuItemInputSchema = z$2.object({
  where: z$2.lazy(() => CustomerFeedbackWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => CustomerFeedbackUpdateWithoutMenuItemInputSchema), z$2.lazy(() => CustomerFeedbackUncheckedUpdateWithoutMenuItemInputSchema)])
}).strict();
var CustomerFeedbackUpdateManyWithWhereWithoutMenuItemInputSchema = z$2.object({
  where: z$2.lazy(() => CustomerFeedbackScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => CustomerFeedbackUpdateManyMutationInputSchema), z$2.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutMenuItemInputSchema)])
}).strict();
var DietaryRestrictionUpsertWithWhereUniqueWithoutMenuItemsInputSchema = z$2.object({
  where: z$2.lazy(() => DietaryRestrictionWhereUniqueInputSchema),
  update: z$2.union([z$2.lazy(() => DietaryRestrictionUpdateWithoutMenuItemsInputSchema), z$2.lazy(() => DietaryRestrictionUncheckedUpdateWithoutMenuItemsInputSchema)]),
  create: z$2.union([z$2.lazy(() => DietaryRestrictionCreateWithoutMenuItemsInputSchema), z$2.lazy(() => DietaryRestrictionUncheckedCreateWithoutMenuItemsInputSchema)])
}).strict();
var DietaryRestrictionUpdateWithWhereUniqueWithoutMenuItemsInputSchema = z$2.object({
  where: z$2.lazy(() => DietaryRestrictionWhereUniqueInputSchema),
  data: z$2.union([z$2.lazy(() => DietaryRestrictionUpdateWithoutMenuItemsInputSchema), z$2.lazy(() => DietaryRestrictionUncheckedUpdateWithoutMenuItemsInputSchema)])
}).strict();
var DietaryRestrictionUpdateManyWithWhereWithoutMenuItemsInputSchema = z$2.object({
  where: z$2.lazy(() => DietaryRestrictionScalarWhereInputSchema),
  data: z$2.union([z$2.lazy(() => DietaryRestrictionUpdateManyMutationInputSchema), z$2.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutMenuItemsInputSchema)])
}).strict();
var MenuItemCreateWithoutNutritionalInfoInputSchema = z$2.object({
  name: z$2.string(),
  description: z$2.string().optional().nullable(),
  price: z$2.number(),
  foodCost: z$2.number(),
  recipeIds: z$2.union([z$2.lazy(() => MenuItemCreaterecipeIdsInputSchema), z$2.number().int().array()]).optional(),
  recipeServingsAmount: z$2.union([z$2.lazy(() => MenuItemCreaterecipeServingsAmountInputSchema), z$2.number().array()]).optional(),
  recipeServingsCost: z$2.union([z$2.lazy(() => MenuItemCreaterecipeServingsCostInputSchema), z$2.number().array()]).optional(),
  allergens: z$2.union([z$2.lazy(() => MenuItemCreateallergensInputSchema), z$2.string().array()]).optional(),
  nutritionalInfoId: z$2.number().int().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  menu: z$2.lazy(() => MenuCreateNestedOneWithoutMenuItemsInputSchema),
  recipes: z$2.lazy(() => RecipeCreateNestedManyWithoutMenuItemsInputSchema).optional(),
  menuItemRecipe: z$2.lazy(() => MenuItemRecipeCreateNestedManyWithoutMenuItemInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsCreateNestedManyWithoutMenuItemInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemCreateNestedManyWithoutMenuItemInputSchema).optional(),
  nutritionalRecommendation: z$2.lazy(() => NutritionalRecommendationCreateNestedManyWithoutMenuItemInputSchema).optional(),
  category: z$2.lazy(() => MenuCategoryCreateNestedOneWithoutMenuItemsInputSchema).optional(),
  feedback: z$2.lazy(() => CustomerFeedbackCreateNestedManyWithoutMenuItemInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionCreateNestedManyWithoutMenuItemsInputSchema).optional()
}).strict();
var MenuItemUncheckedCreateWithoutNutritionalInfoInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  description: z$2.string().optional().nullable(),
  price: z$2.number(),
  foodCost: z$2.number(),
  recipeIds: z$2.union([z$2.lazy(() => MenuItemCreaterecipeIdsInputSchema), z$2.number().int().array()]).optional(),
  recipeServingsAmount: z$2.union([z$2.lazy(() => MenuItemCreaterecipeServingsAmountInputSchema), z$2.number().array()]).optional(),
  recipeServingsCost: z$2.union([z$2.lazy(() => MenuItemCreaterecipeServingsCostInputSchema), z$2.number().array()]).optional(),
  allergens: z$2.union([z$2.lazy(() => MenuItemCreateallergensInputSchema), z$2.string().array()]).optional(),
  nutritionalInfoId: z$2.number().int().optional().nullable(),
  menuId: z$2.number().int(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  categoryId: z$2.number().int().optional().nullable(),
  recipes: z$2.lazy(() => RecipeUncheckedCreateNestedManyWithoutMenuItemsInputSchema).optional(),
  menuItemRecipe: z$2.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  nutritionalRecommendation: z$2.lazy(() => NutritionalRecommendationUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  feedback: z$2.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutMenuItemsInputSchema).optional()
}).strict();
var MenuItemCreateOrConnectWithoutNutritionalInfoInputSchema = z$2.object({
  where: z$2.lazy(() => MenuItemWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => MenuItemCreateWithoutNutritionalInfoInputSchema), z$2.lazy(() => MenuItemUncheckedCreateWithoutNutritionalInfoInputSchema)])
}).strict();
var MenuItemUpsertWithoutNutritionalInfoInputSchema = z$2.object({
  update: z$2.union([z$2.lazy(() => MenuItemUpdateWithoutNutritionalInfoInputSchema), z$2.lazy(() => MenuItemUncheckedUpdateWithoutNutritionalInfoInputSchema)]),
  create: z$2.union([z$2.lazy(() => MenuItemCreateWithoutNutritionalInfoInputSchema), z$2.lazy(() => MenuItemUncheckedCreateWithoutNutritionalInfoInputSchema)]),
  where: z$2.lazy(() => MenuItemWhereInputSchema).optional()
}).strict();
var MenuItemUpdateToOneWithWhereWithoutNutritionalInfoInputSchema = z$2.object({
  where: z$2.lazy(() => MenuItemWhereInputSchema).optional(),
  data: z$2.union([z$2.lazy(() => MenuItemUpdateWithoutNutritionalInfoInputSchema), z$2.lazy(() => MenuItemUncheckedUpdateWithoutNutritionalInfoInputSchema)])
}).strict();
var MenuItemUpdateWithoutNutritionalInfoInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipeIds: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeIdsInputSchema), z$2.number().int().array()]).optional(),
  recipeServingsAmount: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema), z$2.number().array()]).optional(),
  recipeServingsCost: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema), z$2.number().array()]).optional(),
  allergens: z$2.union([z$2.lazy(() => MenuItemUpdateallergensInputSchema), z$2.string().array()]).optional(),
  nutritionalInfoId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  menu: z$2.lazy(() => MenuUpdateOneRequiredWithoutMenuItemsNestedInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeUpdateManyWithoutMenuItemsNestedInputSchema).optional(),
  menuItemRecipe: z$2.lazy(() => MenuItemRecipeUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  nutritionalRecommendation: z$2.lazy(() => NutritionalRecommendationUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  category: z$2.lazy(() => MenuCategoryUpdateOneWithoutMenuItemsNestedInputSchema).optional(),
  feedback: z$2.lazy(() => CustomerFeedbackUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionUpdateManyWithoutMenuItemsNestedInputSchema).optional()
}).strict();
var MenuItemUncheckedUpdateWithoutNutritionalInfoInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipeIds: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeIdsInputSchema), z$2.number().int().array()]).optional(),
  recipeServingsAmount: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema), z$2.number().array()]).optional(),
  recipeServingsCost: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema), z$2.number().array()]).optional(),
  allergens: z$2.union([z$2.lazy(() => MenuItemUpdateallergensInputSchema), z$2.string().array()]).optional(),
  nutritionalInfoId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  menuId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  categoryId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  recipes: z$2.lazy(() => RecipeUncheckedUpdateManyWithoutMenuItemsNestedInputSchema).optional(),
  menuItemRecipe: z$2.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  nutritionalRecommendation: z$2.lazy(() => NutritionalRecommendationUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  feedback: z$2.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutMenuItemsNestedInputSchema).optional()
}).strict();
var RecipeCreateWithoutFoodCostHistoryInputSchema = z$2.object({
  name: z$2.string(),
  imageUrl: z$2.union([z$2.lazy(() => RecipeCreateimageUrlInputSchema), z$2.string().array()]).optional(),
  description: z$2.string().optional().nullable(),
  servings: z$2.number().int(),
  cookTime: z$2.number().int(),
  prepTime: z$2.number().int(),
  frequency: z$2.number().int().optional().nullable(),
  foodCost: z$2.number().optional().nullable(),
  isDeleted: z$2.boolean().optional(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  restaurant: z$2.lazy(() => RestaurantCreateNestedOneWithoutRecipesInputSchema),
  cookBook: z$2.lazy(() => CookBookCreateNestedOneWithoutRecipesInputSchema),
  ingredients: z$2.lazy(() => RecipeIngredientCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z$2.lazy(() => MenuItemCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepHistory: z$2.lazy(() => PrepHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z$2.lazy(() => PrepBoardCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  MenuItemRecipe: z$2.lazy(() => MenuItemRecipeCreateNestedManyWithoutRecipeInputSchema).optional(),
  ProductionPlanItem: z$2.lazy(() => ProductionPlanItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z$2.lazy(() => RecipeTagCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: z$2.lazy(() => RecipeVersionCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipment: z$2.lazy(() => RecipeEquipmentCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionCreateNestedManyWithoutRecipesInputSchema).optional()
}).strict();
var RecipeUncheckedCreateWithoutFoodCostHistoryInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  imageUrl: z$2.union([z$2.lazy(() => RecipeCreateimageUrlInputSchema), z$2.string().array()]).optional(),
  description: z$2.string().optional().nullable(),
  servings: z$2.number().int(),
  cookTime: z$2.number().int(),
  prepTime: z$2.number().int(),
  frequency: z$2.number().int().optional().nullable(),
  restaurantId: z$2.number().int(),
  cookBookId: z$2.number().int(),
  foodCost: z$2.number().optional().nullable(),
  isDeleted: z$2.boolean().optional(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  ingredients: z$2.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z$2.lazy(() => MenuItemUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepHistory: z$2.lazy(() => PrepHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z$2.lazy(() => PrepBoardUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  MenuItemRecipe: z$2.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  ProductionPlanItem: z$2.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z$2.lazy(() => RecipeTagUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: z$2.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipment: z$2.lazy(() => RecipeEquipmentUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutRecipesInputSchema).optional()
}).strict();
var RecipeCreateOrConnectWithoutFoodCostHistoryInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => RecipeCreateWithoutFoodCostHistoryInputSchema), z$2.lazy(() => RecipeUncheckedCreateWithoutFoodCostHistoryInputSchema)])
}).strict();
var RecipeUpsertWithoutFoodCostHistoryInputSchema = z$2.object({
  update: z$2.union([z$2.lazy(() => RecipeUpdateWithoutFoodCostHistoryInputSchema), z$2.lazy(() => RecipeUncheckedUpdateWithoutFoodCostHistoryInputSchema)]),
  create: z$2.union([z$2.lazy(() => RecipeCreateWithoutFoodCostHistoryInputSchema), z$2.lazy(() => RecipeUncheckedCreateWithoutFoodCostHistoryInputSchema)]),
  where: z$2.lazy(() => RecipeWhereInputSchema).optional()
}).strict();
var RecipeUpdateToOneWithWhereWithoutFoodCostHistoryInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeWhereInputSchema).optional(),
  data: z$2.union([z$2.lazy(() => RecipeUpdateWithoutFoodCostHistoryInputSchema), z$2.lazy(() => RecipeUncheckedUpdateWithoutFoodCostHistoryInputSchema)])
}).strict();
var RecipeUpdateWithoutFoodCostHistoryInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.lazy(() => RecipeUpdateimageUrlInputSchema), z$2.string().array()]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: z$2.lazy(() => RestaurantUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  cookBook: z$2.lazy(() => CookBookUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  ingredients: z$2.lazy(() => RecipeIngredientUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z$2.lazy(() => MenuItemUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepHistory: z$2.lazy(() => PrepHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z$2.lazy(() => PrepBoardUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  MenuItemRecipe: z$2.lazy(() => MenuItemRecipeUpdateManyWithoutRecipeNestedInputSchema).optional(),
  ProductionPlanItem: z$2.lazy(() => ProductionPlanItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z$2.lazy(() => RecipeTagUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: z$2.lazy(() => RecipeVersionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipment: z$2.lazy(() => RecipeEquipmentUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionUpdateManyWithoutRecipesNestedInputSchema).optional()
}).strict();
var RecipeUncheckedUpdateWithoutFoodCostHistoryInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.lazy(() => RecipeUpdateimageUrlInputSchema), z$2.string().array()]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookBookId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  ingredients: z$2.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z$2.lazy(() => MenuItemUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepHistory: z$2.lazy(() => PrepHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z$2.lazy(() => PrepBoardUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  MenuItemRecipe: z$2.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  ProductionPlanItem: z$2.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z$2.lazy(() => RecipeTagUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: z$2.lazy(() => RecipeVersionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipment: z$2.lazy(() => RecipeEquipmentUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional()
}).strict();
var RecipeCreateWithoutPrepHistoryInputSchema = z$2.object({
  name: z$2.string(),
  imageUrl: z$2.union([z$2.lazy(() => RecipeCreateimageUrlInputSchema), z$2.string().array()]).optional(),
  description: z$2.string().optional().nullable(),
  servings: z$2.number().int(),
  cookTime: z$2.number().int(),
  prepTime: z$2.number().int(),
  frequency: z$2.number().int().optional().nullable(),
  foodCost: z$2.number().optional().nullable(),
  isDeleted: z$2.boolean().optional(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  restaurant: z$2.lazy(() => RestaurantCreateNestedOneWithoutRecipesInputSchema),
  cookBook: z$2.lazy(() => CookBookCreateNestedOneWithoutRecipesInputSchema),
  ingredients: z$2.lazy(() => RecipeIngredientCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z$2.lazy(() => MenuItemCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: z$2.lazy(() => FoodCostHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z$2.lazy(() => PrepBoardCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  MenuItemRecipe: z$2.lazy(() => MenuItemRecipeCreateNestedManyWithoutRecipeInputSchema).optional(),
  ProductionPlanItem: z$2.lazy(() => ProductionPlanItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z$2.lazy(() => RecipeTagCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: z$2.lazy(() => RecipeVersionCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipment: z$2.lazy(() => RecipeEquipmentCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionCreateNestedManyWithoutRecipesInputSchema).optional()
}).strict();
var RecipeUncheckedCreateWithoutPrepHistoryInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  imageUrl: z$2.union([z$2.lazy(() => RecipeCreateimageUrlInputSchema), z$2.string().array()]).optional(),
  description: z$2.string().optional().nullable(),
  servings: z$2.number().int(),
  cookTime: z$2.number().int(),
  prepTime: z$2.number().int(),
  frequency: z$2.number().int().optional().nullable(),
  restaurantId: z$2.number().int(),
  cookBookId: z$2.number().int(),
  foodCost: z$2.number().optional().nullable(),
  isDeleted: z$2.boolean().optional(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  ingredients: z$2.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z$2.lazy(() => MenuItemUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: z$2.lazy(() => FoodCostHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z$2.lazy(() => PrepBoardUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  MenuItemRecipe: z$2.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  ProductionPlanItem: z$2.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z$2.lazy(() => RecipeTagUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: z$2.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipment: z$2.lazy(() => RecipeEquipmentUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutRecipesInputSchema).optional()
}).strict();
var RecipeCreateOrConnectWithoutPrepHistoryInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeWhereUniqueInputSchema),
  create: z$2.union([z$2.lazy(() => RecipeCreateWithoutPrepHistoryInputSchema), z$2.lazy(() => RecipeUncheckedCreateWithoutPrepHistoryInputSchema)])
}).strict();
var RecipeUpsertWithoutPrepHistoryInputSchema = z$2.object({
  update: z$2.union([z$2.lazy(() => RecipeUpdateWithoutPrepHistoryInputSchema), z$2.lazy(() => RecipeUncheckedUpdateWithoutPrepHistoryInputSchema)]),
  create: z$2.union([z$2.lazy(() => RecipeCreateWithoutPrepHistoryInputSchema), z$2.lazy(() => RecipeUncheckedCreateWithoutPrepHistoryInputSchema)]),
  where: z$2.lazy(() => RecipeWhereInputSchema).optional()
}).strict();
var RecipeUpdateToOneWithWhereWithoutPrepHistoryInputSchema = z$2.object({
  where: z$2.lazy(() => RecipeWhereInputSchema).optional(),
  data: z$2.union([z$2.lazy(() => RecipeUpdateWithoutPrepHistoryInputSchema), z$2.lazy(() => RecipeUncheckedUpdateWithoutPrepHistoryInputSchema)])
}).strict();
var RecipeUpdateWithoutPrepHistoryInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.lazy(() => RecipeUpdateimageUrlInputSchema), z$2.string().array()]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: z$2.lazy(() => RestaurantUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  cookBook: z$2.lazy(() => CookBookUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  ingredients: z$2.lazy(() => RecipeIngredientUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z$2.lazy(() => MenuItemUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: z$2.lazy(() => FoodCostHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z$2.lazy(() => PrepBoardUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  MenuItemRecipe: z$2.lazy(() => MenuItemRecipeUpdateManyWithoutRecipeNestedInputSchema).optional(),
  ProductionPlanItem: z$2.lazy(() => ProductionPlanItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z$2.lazy(() => RecipeTagUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: z$2.lazy(() => RecipeVersionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipment: z$2.lazy(() => RecipeEquipmentUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionUpdateManyWithoutRecipesNestedInputSchema).optional()
}).strict();
var RecipeUncheckedUpdateWithoutPrepHistoryInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.lazy(() => RecipeUpdateimageUrlInputSchema), z$2.string().array()]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookBookId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  ingredients: z$2.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z$2.lazy(() => MenuItemUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: z$2.lazy(() => FoodCostHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z$2.lazy(() => PrepBoardUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  MenuItemRecipe: z$2.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  ProductionPlanItem: z$2.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z$2.lazy(() => RecipeTagUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: z$2.lazy(() => RecipeVersionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipment: z$2.lazy(() => RecipeEquipmentUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional()
}).strict();
var MenuItemCreateManyCategoryInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  description: z$2.string().optional().nullable(),
  price: z$2.number(),
  foodCost: z$2.number(),
  recipeIds: z$2.union([z$2.lazy(() => MenuItemCreaterecipeIdsInputSchema), z$2.number().int().array()]).optional(),
  recipeServingsAmount: z$2.union([z$2.lazy(() => MenuItemCreaterecipeServingsAmountInputSchema), z$2.number().array()]).optional(),
  recipeServingsCost: z$2.union([z$2.lazy(() => MenuItemCreaterecipeServingsCostInputSchema), z$2.number().array()]).optional(),
  allergens: z$2.union([z$2.lazy(() => MenuItemCreateallergensInputSchema), z$2.string().array()]).optional(),
  nutritionalInfoId: z$2.number().int().optional().nullable(),
  menuId: z$2.number().int(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var MenuItemUpdateWithoutCategoryInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipeIds: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeIdsInputSchema), z$2.number().int().array()]).optional(),
  recipeServingsAmount: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema), z$2.number().array()]).optional(),
  recipeServingsCost: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema), z$2.number().array()]).optional(),
  allergens: z$2.union([z$2.lazy(() => MenuItemUpdateallergensInputSchema), z$2.string().array()]).optional(),
  nutritionalInfoId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  nutritionalInfo: z$2.lazy(() => NutritionalInfoUpdateOneWithoutMenuItemNestedInputSchema).optional(),
  menu: z$2.lazy(() => MenuUpdateOneRequiredWithoutMenuItemsNestedInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeUpdateManyWithoutMenuItemsNestedInputSchema).optional(),
  menuItemRecipe: z$2.lazy(() => MenuItemRecipeUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  nutritionalRecommendation: z$2.lazy(() => NutritionalRecommendationUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  feedback: z$2.lazy(() => CustomerFeedbackUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionUpdateManyWithoutMenuItemsNestedInputSchema).optional()
}).strict();
var MenuItemUncheckedUpdateWithoutCategoryInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipeIds: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeIdsInputSchema), z$2.number().int().array()]).optional(),
  recipeServingsAmount: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema), z$2.number().array()]).optional(),
  recipeServingsCost: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema), z$2.number().array()]).optional(),
  allergens: z$2.union([z$2.lazy(() => MenuItemUpdateallergensInputSchema), z$2.string().array()]).optional(),
  nutritionalInfoId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  menuId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  nutritionalInfo: z$2.lazy(() => NutritionalInfoUncheckedUpdateOneWithoutMenuItemNestedInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeUncheckedUpdateManyWithoutMenuItemsNestedInputSchema).optional(),
  menuItemRecipe: z$2.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  nutritionalRecommendation: z$2.lazy(() => NutritionalRecommendationUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  feedback: z$2.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutMenuItemsNestedInputSchema).optional()
}).strict();
var MenuItemUncheckedUpdateManyWithoutCategoryInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipeIds: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeIdsInputSchema), z$2.number().int().array()]).optional(),
  recipeServingsAmount: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema), z$2.number().array()]).optional(),
  recipeServingsCost: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema), z$2.number().array()]).optional(),
  allergens: z$2.union([z$2.lazy(() => MenuItemUpdateallergensInputSchema), z$2.string().array()]).optional(),
  nutritionalInfoId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  menuId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var RecipeIngredientCreateManyRecipeVersionInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  recipeId: z$2.number().int(),
  ingredientId: z$2.number().int(),
  quantity: z$2.number(),
  unit: z$2.string(),
  joinAt: z$2.coerce.date().optional()
}).strict();
var RecipeInstructionCreateManyRecipeVersionInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  recipeId: z$2.number().int(),
  stepNumber: z$2.number().int(),
  instruction: z$2.string(),
  imageUrl: z$2.string().optional().nullable()
}).strict();
var RecipeIngredientUpdateWithoutRecipeVersionInputSchema = z$2.object({
  quantity: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  joinAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  recipe: z$2.lazy(() => RecipeUpdateOneRequiredWithoutIngredientsNestedInputSchema).optional(),
  ingredient: z$2.lazy(() => IngredientUpdateOneRequiredWithoutRecipeIngredientsNestedInputSchema).optional()
}).strict();
var RecipeIngredientUncheckedUpdateWithoutRecipeVersionInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  ingredientId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  joinAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var RecipeIngredientUncheckedUpdateManyWithoutRecipeVersionInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  ingredientId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  joinAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var RecipeInstructionUpdateWithoutRecipeVersionInputSchema = z$2.object({
  stepNumber: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  instruction: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  recipe: z$2.lazy(() => RecipeUpdateOneRequiredWithoutInstructionsNestedInputSchema).optional()
}).strict();
var RecipeInstructionUncheckedUpdateWithoutRecipeVersionInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  stepNumber: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  instruction: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable()
}).strict();
var RecipeInstructionUncheckedUpdateManyWithoutRecipeVersionInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  stepNumber: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  instruction: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable()
}).strict();
var RecipeEquipmentCreateManyEquipmentInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  recipeId: z$2.number().int(),
  notes: z$2.string().optional().nullable()
}).strict();
var MaintenanceLogCreateManyEquipmentInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  date: z$2.coerce.date(),
  type: z$2.lazy(() => MaintenanceTypeSchema),
  description: z$2.string(),
  cost: z$2.number().optional().nullable(),
  performedBy: z$2.string(),
  notes: z$2.string().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var RecipeEquipmentUpdateWithoutEquipmentInputSchema = z$2.object({
  notes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  recipe: z$2.lazy(() => RecipeUpdateOneRequiredWithoutEquipmentNestedInputSchema).optional()
}).strict();
var RecipeEquipmentUncheckedUpdateWithoutEquipmentInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  notes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable()
}).strict();
var RecipeEquipmentUncheckedUpdateManyWithoutEquipmentInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  notes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable()
}).strict();
var MaintenanceLogUpdateWithoutEquipmentInputSchema = z$2.object({
  date: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  type: z$2.union([z$2.lazy(() => MaintenanceTypeSchema), z$2.lazy(() => EnumMaintenanceTypeFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  cost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  performedBy: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  notes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var MaintenanceLogUncheckedUpdateWithoutEquipmentInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  type: z$2.union([z$2.lazy(() => MaintenanceTypeSchema), z$2.lazy(() => EnumMaintenanceTypeFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  cost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  performedBy: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  notes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var MaintenanceLogUncheckedUpdateManyWithoutEquipmentInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  type: z$2.union([z$2.lazy(() => MaintenanceTypeSchema), z$2.lazy(() => EnumMaintenanceTypeFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  cost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  performedBy: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  notes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var ChecklistItemCreateManyChecklistInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  description: z$2.string(),
  order: z$2.number().int(),
  type: z$2.lazy(() => ChecklistItemTypeSchema),
  requiredPhotos: z$2.boolean().optional(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var ChecklistCompleteCreateManyChecklistInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  completedById: z$2.number().int(),
  date: z$2.coerce.date(),
  notes: z$2.string().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var ChecklistItemUpdateWithoutChecklistInputSchema = z$2.object({
  description: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  order: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  type: z$2.union([z$2.lazy(() => ChecklistItemTypeSchema), z$2.lazy(() => EnumChecklistItemTypeFieldUpdateOperationsInputSchema)]).optional(),
  requiredPhotos: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  completions: z$2.lazy(() => ChecklistItemCompleteUpdateManyWithoutChecklistItemNestedInputSchema).optional()
}).strict();
var ChecklistItemUncheckedUpdateWithoutChecklistInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  order: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  type: z$2.union([z$2.lazy(() => ChecklistItemTypeSchema), z$2.lazy(() => EnumChecklistItemTypeFieldUpdateOperationsInputSchema)]).optional(),
  requiredPhotos: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  completions: z$2.lazy(() => ChecklistItemCompleteUncheckedUpdateManyWithoutChecklistItemNestedInputSchema).optional()
}).strict();
var ChecklistItemUncheckedUpdateManyWithoutChecklistInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  order: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  type: z$2.union([z$2.lazy(() => ChecklistItemTypeSchema), z$2.lazy(() => EnumChecklistItemTypeFieldUpdateOperationsInputSchema)]).optional(),
  requiredPhotos: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var ChecklistCompleteUpdateWithoutChecklistInputSchema = z$2.object({
  date: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  notes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  completedBy: z$2.lazy(() => UserUpdateOneRequiredWithoutChecklistCompleteNestedInputSchema).optional(),
  items: z$2.lazy(() => ChecklistItemCompleteUpdateManyWithoutChecklistCompleteNestedInputSchema).optional()
}).strict();
var ChecklistCompleteUncheckedUpdateWithoutChecklistInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  completedById: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  notes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  items: z$2.lazy(() => ChecklistItemCompleteUncheckedUpdateManyWithoutChecklistCompleteNestedInputSchema).optional()
}).strict();
var ChecklistCompleteUncheckedUpdateManyWithoutChecklistInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  completedById: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  notes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var ChecklistItemCompleteCreateManyChecklistItemInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  checklistCompleteId: z$2.number().int(),
  status: z$2.lazy(() => ChecklistStatusSchema),
  notes: z$2.string().optional().nullable(),
  photoUrls: z$2.union([z$2.lazy(() => ChecklistItemCompleteCreatephotoUrlsInputSchema), z$2.string().array()]).optional(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var ChecklistItemCompleteUpdateWithoutChecklistItemInputSchema = z$2.object({
  status: z$2.union([z$2.lazy(() => ChecklistStatusSchema), z$2.lazy(() => EnumChecklistStatusFieldUpdateOperationsInputSchema)]).optional(),
  notes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  photoUrls: z$2.union([z$2.lazy(() => ChecklistItemCompleteUpdatephotoUrlsInputSchema), z$2.string().array()]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteUpdateOneRequiredWithoutItemsNestedInputSchema).optional()
}).strict();
var ChecklistItemCompleteUncheckedUpdateWithoutChecklistItemInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  checklistCompleteId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  status: z$2.union([z$2.lazy(() => ChecklistStatusSchema), z$2.lazy(() => EnumChecklistStatusFieldUpdateOperationsInputSchema)]).optional(),
  notes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  photoUrls: z$2.union([z$2.lazy(() => ChecklistItemCompleteUpdatephotoUrlsInputSchema), z$2.string().array()]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var ChecklistItemCompleteUncheckedUpdateManyWithoutChecklistItemInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  checklistCompleteId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  status: z$2.union([z$2.lazy(() => ChecklistStatusSchema), z$2.lazy(() => EnumChecklistStatusFieldUpdateOperationsInputSchema)]).optional(),
  notes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  photoUrls: z$2.union([z$2.lazy(() => ChecklistItemCompleteUpdatephotoUrlsInputSchema), z$2.string().array()]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var ChecklistItemCompleteCreateManyChecklistCompleteInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  checklistItemId: z$2.number().int(),
  status: z$2.lazy(() => ChecklistStatusSchema),
  notes: z$2.string().optional().nullable(),
  photoUrls: z$2.union([z$2.lazy(() => ChecklistItemCompleteCreatephotoUrlsInputSchema), z$2.string().array()]).optional(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var ChecklistItemCompleteUpdateWithoutChecklistCompleteInputSchema = z$2.object({
  status: z$2.union([z$2.lazy(() => ChecklistStatusSchema), z$2.lazy(() => EnumChecklistStatusFieldUpdateOperationsInputSchema)]).optional(),
  notes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  photoUrls: z$2.union([z$2.lazy(() => ChecklistItemCompleteUpdatephotoUrlsInputSchema), z$2.string().array()]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  checklistItem: z$2.lazy(() => ChecklistItemUpdateOneRequiredWithoutCompletionsNestedInputSchema).optional()
}).strict();
var ChecklistItemCompleteUncheckedUpdateWithoutChecklistCompleteInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  checklistItemId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  status: z$2.union([z$2.lazy(() => ChecklistStatusSchema), z$2.lazy(() => EnumChecklistStatusFieldUpdateOperationsInputSchema)]).optional(),
  notes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  photoUrls: z$2.union([z$2.lazy(() => ChecklistItemCompleteUpdatephotoUrlsInputSchema), z$2.string().array()]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var ChecklistItemCompleteUncheckedUpdateManyWithoutChecklistCompleteInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  checklistItemId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  status: z$2.union([z$2.lazy(() => ChecklistStatusSchema), z$2.lazy(() => EnumChecklistStatusFieldUpdateOperationsInputSchema)]).optional(),
  notes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  photoUrls: z$2.union([z$2.lazy(() => ChecklistItemCompleteUpdatephotoUrlsInputSchema), z$2.string().array()]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var IngredientCreateManyDietaryRestrictionInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  category: z$2.string(),
  price: z$2.number()
}).strict();
var MenuItemUpdateWithoutDietaryRestrictionsInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipeIds: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeIdsInputSchema), z$2.number().int().array()]).optional(),
  recipeServingsAmount: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema), z$2.number().array()]).optional(),
  recipeServingsCost: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema), z$2.number().array()]).optional(),
  allergens: z$2.union([z$2.lazy(() => MenuItemUpdateallergensInputSchema), z$2.string().array()]).optional(),
  nutritionalInfoId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  nutritionalInfo: z$2.lazy(() => NutritionalInfoUpdateOneWithoutMenuItemNestedInputSchema).optional(),
  menu: z$2.lazy(() => MenuUpdateOneRequiredWithoutMenuItemsNestedInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeUpdateManyWithoutMenuItemsNestedInputSchema).optional(),
  menuItemRecipe: z$2.lazy(() => MenuItemRecipeUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  nutritionalRecommendation: z$2.lazy(() => NutritionalRecommendationUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  category: z$2.lazy(() => MenuCategoryUpdateOneWithoutMenuItemsNestedInputSchema).optional(),
  feedback: z$2.lazy(() => CustomerFeedbackUpdateManyWithoutMenuItemNestedInputSchema).optional()
}).strict();
var MenuItemUncheckedUpdateWithoutDietaryRestrictionsInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipeIds: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeIdsInputSchema), z$2.number().int().array()]).optional(),
  recipeServingsAmount: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema), z$2.number().array()]).optional(),
  recipeServingsCost: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema), z$2.number().array()]).optional(),
  allergens: z$2.union([z$2.lazy(() => MenuItemUpdateallergensInputSchema), z$2.string().array()]).optional(),
  nutritionalInfoId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  menuId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  categoryId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  nutritionalInfo: z$2.lazy(() => NutritionalInfoUncheckedUpdateOneWithoutMenuItemNestedInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeUncheckedUpdateManyWithoutMenuItemsNestedInputSchema).optional(),
  menuItemRecipe: z$2.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  nutritionalRecommendation: z$2.lazy(() => NutritionalRecommendationUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  feedback: z$2.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional()
}).strict();
var MenuItemUncheckedUpdateManyWithoutDietaryRestrictionsInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipeIds: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeIdsInputSchema), z$2.number().int().array()]).optional(),
  recipeServingsAmount: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema), z$2.number().array()]).optional(),
  recipeServingsCost: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema), z$2.number().array()]).optional(),
  allergens: z$2.union([z$2.lazy(() => MenuItemUpdateallergensInputSchema), z$2.string().array()]).optional(),
  nutritionalInfoId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  menuId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  categoryId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable()
}).strict();
var RecipeUpdateWithoutDietaryRestrictionsInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.lazy(() => RecipeUpdateimageUrlInputSchema), z$2.string().array()]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: z$2.lazy(() => RestaurantUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  cookBook: z$2.lazy(() => CookBookUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  ingredients: z$2.lazy(() => RecipeIngredientUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z$2.lazy(() => MenuItemUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: z$2.lazy(() => FoodCostHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: z$2.lazy(() => PrepHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z$2.lazy(() => PrepBoardUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  MenuItemRecipe: z$2.lazy(() => MenuItemRecipeUpdateManyWithoutRecipeNestedInputSchema).optional(),
  ProductionPlanItem: z$2.lazy(() => ProductionPlanItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z$2.lazy(() => RecipeTagUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: z$2.lazy(() => RecipeVersionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipment: z$2.lazy(() => RecipeEquipmentUpdateManyWithoutRecipeNestedInputSchema).optional()
}).strict();
var RecipeUncheckedUpdateWithoutDietaryRestrictionsInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.lazy(() => RecipeUpdateimageUrlInputSchema), z$2.string().array()]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookBookId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  ingredients: z$2.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z$2.lazy(() => MenuItemUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: z$2.lazy(() => FoodCostHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: z$2.lazy(() => PrepHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z$2.lazy(() => PrepBoardUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  MenuItemRecipe: z$2.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  ProductionPlanItem: z$2.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z$2.lazy(() => RecipeTagUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: z$2.lazy(() => RecipeVersionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipment: z$2.lazy(() => RecipeEquipmentUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional()
}).strict();
var RecipeUncheckedUpdateManyWithoutDietaryRestrictionsInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.lazy(() => RecipeUpdateimageUrlInputSchema), z$2.string().array()]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookBookId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var IngredientUpdateWithoutDietaryRestrictionInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  category: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipeIngredients: z$2.lazy(() => RecipeIngredientUpdateManyWithoutIngredientNestedInputSchema).optional(),
  inventoryItems: z$2.lazy(() => InventoryItemUpdateManyWithoutIngredientNestedInputSchema).optional(),
  orderItems: z$2.lazy(() => OrderItemUpdateManyWithoutIngredientNestedInputSchema).optional(),
  vendors: z$2.lazy(() => VendorUpdateManyWithoutIngredientsNestedInputSchema).optional(),
  WasteRecord: z$2.lazy(() => WasteRecordUpdateManyWithoutIngredienteNestedInputSchema).optional(),
  IngredientAllergen: z$2.lazy(() => IngredientAllergenUpdateManyWithoutIngredientNestedInputSchema).optional(),
  SupplierPriceHistory: z$2.lazy(() => SupplierPriceHistoryUpdateManyWithoutIngredientNestedInputSchema).optional()
}).strict();
var IngredientUncheckedUpdateWithoutDietaryRestrictionInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  category: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipeIngredients: z$2.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  inventoryItems: z$2.lazy(() => InventoryItemUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  orderItems: z$2.lazy(() => OrderItemUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  vendors: z$2.lazy(() => VendorUncheckedUpdateManyWithoutIngredientsNestedInputSchema).optional(),
  WasteRecord: z$2.lazy(() => WasteRecordUncheckedUpdateManyWithoutIngredienteNestedInputSchema).optional(),
  IngredientAllergen: z$2.lazy(() => IngredientAllergenUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  SupplierPriceHistory: z$2.lazy(() => SupplierPriceHistoryUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional()
}).strict();
var IngredientUncheckedUpdateManyWithoutDietaryRestrictionInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  category: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var RecipeUpdateWithoutTagsInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.lazy(() => RecipeUpdateimageUrlInputSchema), z$2.string().array()]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: z$2.lazy(() => RestaurantUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  cookBook: z$2.lazy(() => CookBookUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  ingredients: z$2.lazy(() => RecipeIngredientUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z$2.lazy(() => MenuItemUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: z$2.lazy(() => FoodCostHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: z$2.lazy(() => PrepHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z$2.lazy(() => PrepBoardUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  MenuItemRecipe: z$2.lazy(() => MenuItemRecipeUpdateManyWithoutRecipeNestedInputSchema).optional(),
  ProductionPlanItem: z$2.lazy(() => ProductionPlanItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUpdateManyWithoutRecipeNestedInputSchema).optional(),
  versions: z$2.lazy(() => RecipeVersionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipment: z$2.lazy(() => RecipeEquipmentUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionUpdateManyWithoutRecipesNestedInputSchema).optional()
}).strict();
var RecipeUncheckedUpdateWithoutTagsInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.lazy(() => RecipeUpdateimageUrlInputSchema), z$2.string().array()]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookBookId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  ingredients: z$2.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z$2.lazy(() => MenuItemUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: z$2.lazy(() => FoodCostHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: z$2.lazy(() => PrepHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z$2.lazy(() => PrepBoardUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  MenuItemRecipe: z$2.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  ProductionPlanItem: z$2.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  versions: z$2.lazy(() => RecipeVersionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipment: z$2.lazy(() => RecipeEquipmentUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional()
}).strict();
var RecipeUncheckedUpdateManyWithoutTagsInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.lazy(() => RecipeUpdateimageUrlInputSchema), z$2.string().array()]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookBookId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var ProductionPlanItemCreateManyProductionPlanInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  recipeId: z$2.number().int(),
  quantity: z$2.number().int(),
  unit: z$2.string(),
  assignedToId: z$2.number().int().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var ProductionPlanItemUpdateWithoutProductionPlanInputSchema = z$2.object({
  quantity: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  recipe: z$2.lazy(() => RecipeUpdateOneRequiredWithoutProductionPlanItemNestedInputSchema).optional(),
  assignedTo: z$2.lazy(() => UserUpdateOneWithoutProductionPlanItemNestedInputSchema).optional()
}).strict();
var ProductionPlanItemUncheckedUpdateWithoutProductionPlanInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  assignedToId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var ProductionPlanItemUncheckedUpdateManyWithoutProductionPlanInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  assignedToId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var IngredientAllergenCreateManyAllergenInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  ingredientId: z$2.number().int()
}).strict();
var IngredientAllergenUpdateWithoutAllergenInputSchema = z$2.object({
  ingredient: z$2.lazy(() => IngredientUpdateOneRequiredWithoutIngredientAllergenNestedInputSchema).optional()
}).strict();
var IngredientAllergenUncheckedUpdateWithoutAllergenInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  ingredientId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var IngredientAllergenUncheckedUpdateManyWithoutAllergenInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  ingredientId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var RestaurantCreateManyOrganizationInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  imageUrl: z$2.string().optional().nullable(),
  address: z$2.string(),
  city: z$2.string(),
  zipCode: z$2.string(),
  state: z$2.string(),
  owner: z$2.string(),
  foodCost: z$2.number().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  isDeleted: z$2.boolean().optional(),
  deleted: z$2.coerce.date().optional().nullable()
}).strict();
var UserCreateManyOrganizationInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  email: z$2.string(),
  sub: z$2.number().int().optional().nullable(),
  passwordHash: z$2.string(),
  firstName: z$2.string(),
  lastName: z$2.string(),
  profileImage: z$2.string().optional().nullable(),
  verified: z$2.boolean().optional(),
  role: z$2.lazy(() => UserRoleSchema),
  restaurantId: z$2.number().int().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var RestaurantUpdateWithoutOrganizationInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  address: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  city: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  zipCode: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  state: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  owner: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  isDeleted: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  deleted: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  users: z$2.lazy(() => UserUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  cookbooks: z$2.lazy(() => CookBookUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: z$2.lazy(() => InventoryUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  orders: z$2.lazy(() => OrderUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: z$2.lazy(() => MenuUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipment: z$2.lazy(() => EquipmentUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklist: z$2.lazy(() => QualityChecklistUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qustomerFeedback: z$2.lazy(() => CustomerFeedbackUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();
var RestaurantUncheckedUpdateWithoutOrganizationInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  address: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  city: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  zipCode: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  state: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  owner: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  isDeleted: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  deleted: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  users: z$2.lazy(() => UserUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  cookbooks: z$2.lazy(() => CookBookUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: z$2.lazy(() => InventoryUncheckedUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  orders: z$2.lazy(() => OrderUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: z$2.lazy(() => MenuUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipment: z$2.lazy(() => EquipmentUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklist: z$2.lazy(() => QualityChecklistUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qustomerFeedback: z$2.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();
var RestaurantUncheckedUpdateManyWithoutOrganizationInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  address: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  city: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  zipCode: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  state: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  owner: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  isDeleted: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  deleted: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable()
}).strict();
var UserUpdateWithoutOrganizationInputSchema = z$2.object({
  email: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: z$2.union([z$2.lazy(() => UserRoleSchema), z$2.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: z$2.lazy(() => RestaurantUpdateOneWithoutUsersNestedInputSchema).optional(),
  shifts: z$2.lazy(() => ShiftUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: z$2.lazy(() => InventoryItemUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: z$2.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: z$2.lazy(() => PasswordResetUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItem: z$2.lazy(() => ProductionPlanItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: z$2.lazy(() => AvailabilityUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraint: z$2.lazy(() => SchedulingConstraintUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedback: z$2.lazy(() => CustomerFeedbackUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: z$2.lazy(() => RecipeVersionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: z$2.lazy(() => RecipeVersionUpdateManyWithoutApprovedByNestedInputSchema).optional()
}).strict();
var UserUncheckedUpdateWithoutOrganizationInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  email: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: z$2.union([z$2.lazy(() => UserRoleSchema), z$2.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  shifts: z$2.lazy(() => ShiftUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: z$2.lazy(() => InventoryItemUncheckedUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: z$2.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: z$2.lazy(() => PasswordResetUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItem: z$2.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: z$2.lazy(() => AvailabilityUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraint: z$2.lazy(() => SchedulingConstraintUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteUncheckedUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedback: z$2.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: z$2.lazy(() => RecipeVersionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: z$2.lazy(() => RecipeVersionUncheckedUpdateManyWithoutApprovedByNestedInputSchema).optional()
}).strict();
var UserUncheckedUpdateManyWithoutOrganizationInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  email: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: z$2.union([z$2.lazy(() => UserRoleSchema), z$2.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var UserCreateManyRestaurantInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  email: z$2.string(),
  sub: z$2.number().int().optional().nullable(),
  passwordHash: z$2.string(),
  firstName: z$2.string(),
  lastName: z$2.string(),
  profileImage: z$2.string().optional().nullable(),
  verified: z$2.boolean().optional(),
  role: z$2.lazy(() => UserRoleSchema),
  organizationId: z$2.number().int().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var CookBookCreateManyRestaurantInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  imageUrl: z$2.string().optional().nullable(),
  category: z$2.string()
}).strict();
var OrderCreateManyRestaurantInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  vendorId: z$2.number().int(),
  status: z$2.lazy(() => OrderStatusSchema),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var RecipeCreateManyRestaurantInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  imageUrl: z$2.union([z$2.lazy(() => RecipeCreateimageUrlInputSchema), z$2.string().array()]).optional(),
  description: z$2.string().optional().nullable(),
  servings: z$2.number().int(),
  cookTime: z$2.number().int(),
  prepTime: z$2.number().int(),
  frequency: z$2.number().int().optional().nullable(),
  cookBookId: z$2.number().int(),
  foodCost: z$2.number().optional().nullable(),
  isDeleted: z$2.boolean().optional(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var MenuCreateManyRestaurantInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var SalesTransactionsCreateManyRestaurantInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  posTransactionID: z$2.string().optional().nullable(),
  menuItemId: z$2.number().int(),
  price: z$2.number(),
  total: z$2.number(),
  transactionDate: z$2.coerce.date(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var LeftoverItemCreateManyRestaurantInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  date: z$2.coerce.date(),
  menuItemId: z$2.number().int(),
  quantity: z$2.number().int(),
  reason: z$2.string(),
  recordedById: z$2.number().int(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var WasteRecordCreateManyRestaurantInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  date: z$2.coerce.date(),
  ingredientId: z$2.number().int(),
  quantity: z$2.number(),
  unit: z$2.string(),
  reason: z$2.string(),
  recordedById: z$2.number().int(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var ProductionPlanCreateManyRestaurantInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  date: z$2.coerce.date(),
  createdById: z$2.number().int(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var EquipmentCreateManyRestaurantInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  description: z$2.string().optional().nullable(),
  model: z$2.string().optional().nullable(),
  serialNumber: z$2.string().optional().nullable(),
  purchaseDate: z$2.coerce.date().optional().nullable(),
  lastMaintenance: z$2.coerce.date().optional().nullable(),
  nextMaintenance: z$2.coerce.date().optional().nullable(),
  status: z$2.lazy(() => EquipmentStatusSchema).optional(),
  location: z$2.string().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var QualityChecklistCreateManyRestaurantInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  description: z$2.string().optional().nullable(),
  frequency: z$2.lazy(() => ChecklistFrequencySchema).optional(),
  isActive: z$2.boolean().optional(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var CustomerFeedbackCreateManyRestaurantInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  menuItemId: z$2.number().int().optional().nullable(),
  rating: z$2.number().int(),
  comment: z$2.string().optional().nullable(),
  source: z$2.lazy(() => FeedbackSourceSchema),
  tags: z$2.union([z$2.lazy(() => CustomerFeedbackCreatetagsInputSchema), z$2.string().array()]).optional(),
  status: z$2.lazy(() => FeedbackStatusSchema).optional(),
  responseText: z$2.string().optional().nullable(),
  respondedAt: z$2.coerce.date().optional().nullable(),
  respondedById: z$2.number().int().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var UserUpdateWithoutRestaurantInputSchema = z$2.object({
  email: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: z$2.union([z$2.lazy(() => UserRoleSchema), z$2.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  organization: z$2.lazy(() => OrganizationUpdateOneWithoutUsersNestedInputSchema).optional(),
  shifts: z$2.lazy(() => ShiftUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: z$2.lazy(() => InventoryItemUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: z$2.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: z$2.lazy(() => PasswordResetUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItem: z$2.lazy(() => ProductionPlanItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: z$2.lazy(() => AvailabilityUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraint: z$2.lazy(() => SchedulingConstraintUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedback: z$2.lazy(() => CustomerFeedbackUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: z$2.lazy(() => RecipeVersionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: z$2.lazy(() => RecipeVersionUpdateManyWithoutApprovedByNestedInputSchema).optional()
}).strict();
var UserUncheckedUpdateWithoutRestaurantInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  email: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: z$2.union([z$2.lazy(() => UserRoleSchema), z$2.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  organizationId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  shifts: z$2.lazy(() => ShiftUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: z$2.lazy(() => InventoryItemUncheckedUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: z$2.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: z$2.lazy(() => PasswordResetUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecord: z$2.lazy(() => WasteRecordUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItem: z$2.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: z$2.lazy(() => AvailabilityUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraint: z$2.lazy(() => SchedulingConstraintUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistComplete: z$2.lazy(() => ChecklistCompleteUncheckedUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedback: z$2.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: z$2.lazy(() => RecipeVersionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: z$2.lazy(() => RecipeVersionUncheckedUpdateManyWithoutApprovedByNestedInputSchema).optional()
}).strict();
var UserUncheckedUpdateManyWithoutRestaurantInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  email: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: z$2.union([z$2.lazy(() => UserRoleSchema), z$2.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  organizationId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var CookBookUpdateWithoutRestaurantInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  category: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  recipes: z$2.lazy(() => RecipeUpdateManyWithoutCookBookNestedInputSchema).optional()
}).strict();
var CookBookUncheckedUpdateWithoutRestaurantInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  category: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  recipes: z$2.lazy(() => RecipeUncheckedUpdateManyWithoutCookBookNestedInputSchema).optional()
}).strict();
var CookBookUncheckedUpdateManyWithoutRestaurantInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  category: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var OrderUpdateWithoutRestaurantInputSchema = z$2.object({
  status: z$2.union([z$2.lazy(() => OrderStatusSchema), z$2.lazy(() => EnumOrderStatusFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  vendor: z$2.lazy(() => VendorUpdateOneRequiredWithoutOrdersNestedInputSchema).optional(),
  items: z$2.lazy(() => OrderItemUpdateManyWithoutOrderNestedInputSchema).optional()
}).strict();
var OrderUncheckedUpdateWithoutRestaurantInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  vendorId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  status: z$2.union([z$2.lazy(() => OrderStatusSchema), z$2.lazy(() => EnumOrderStatusFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  items: z$2.lazy(() => OrderItemUncheckedUpdateManyWithoutOrderNestedInputSchema).optional()
}).strict();
var OrderUncheckedUpdateManyWithoutRestaurantInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  vendorId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  status: z$2.union([z$2.lazy(() => OrderStatusSchema), z$2.lazy(() => EnumOrderStatusFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var RecipeUpdateWithoutRestaurantInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.lazy(() => RecipeUpdateimageUrlInputSchema), z$2.string().array()]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  cookBook: z$2.lazy(() => CookBookUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  ingredients: z$2.lazy(() => RecipeIngredientUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z$2.lazy(() => MenuItemUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: z$2.lazy(() => FoodCostHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: z$2.lazy(() => PrepHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z$2.lazy(() => PrepBoardUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  MenuItemRecipe: z$2.lazy(() => MenuItemRecipeUpdateManyWithoutRecipeNestedInputSchema).optional(),
  ProductionPlanItem: z$2.lazy(() => ProductionPlanItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z$2.lazy(() => RecipeTagUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: z$2.lazy(() => RecipeVersionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipment: z$2.lazy(() => RecipeEquipmentUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionUpdateManyWithoutRecipesNestedInputSchema).optional()
}).strict();
var RecipeUncheckedUpdateWithoutRestaurantInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.lazy(() => RecipeUpdateimageUrlInputSchema), z$2.string().array()]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  cookBookId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  ingredients: z$2.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z$2.lazy(() => MenuItemUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: z$2.lazy(() => FoodCostHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: z$2.lazy(() => PrepHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z$2.lazy(() => PrepBoardUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  MenuItemRecipe: z$2.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  ProductionPlanItem: z$2.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z$2.lazy(() => RecipeTagUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: z$2.lazy(() => RecipeVersionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipment: z$2.lazy(() => RecipeEquipmentUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional()
}).strict();
var RecipeUncheckedUpdateManyWithoutRestaurantInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.lazy(() => RecipeUpdateimageUrlInputSchema), z$2.string().array()]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  cookBookId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var MenuUpdateWithoutRestaurantInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  menuItems: z$2.lazy(() => MenuItemUpdateManyWithoutMenuNestedInputSchema).optional(),
  MenuCategory: z$2.lazy(() => MenuCategoryUpdateManyWithoutMenuNestedInputSchema).optional()
}).strict();
var MenuUncheckedUpdateWithoutRestaurantInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  menuItems: z$2.lazy(() => MenuItemUncheckedUpdateManyWithoutMenuNestedInputSchema).optional(),
  MenuCategory: z$2.lazy(() => MenuCategoryUncheckedUpdateManyWithoutMenuNestedInputSchema).optional()
}).strict();
var MenuUncheckedUpdateManyWithoutRestaurantInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var SalesTransactionsUpdateWithoutRestaurantInputSchema = z$2.object({
  posTransactionID: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  total: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  transactionDate: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  menuItem: z$2.lazy(() => MenuItemUpdateOneRequiredWithoutSalesTransactionsNestedInputSchema).optional()
}).strict();
var SalesTransactionsUncheckedUpdateWithoutRestaurantInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  posTransactionID: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  menuItemId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  total: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  transactionDate: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var SalesTransactionsUncheckedUpdateManyWithoutRestaurantInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  posTransactionID: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  menuItemId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  total: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  transactionDate: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var LeftoverItemUpdateWithoutRestaurantInputSchema = z$2.object({
  date: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  reason: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  menuItem: z$2.lazy(() => MenuItemUpdateOneRequiredWithoutLeftoverItemNestedInputSchema).optional(),
  recordedBy: z$2.lazy(() => UserUpdateOneRequiredWithoutLeftoverItemNestedInputSchema).optional()
}).strict();
var LeftoverItemUncheckedUpdateWithoutRestaurantInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  menuItemId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  reason: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  recordedById: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var LeftoverItemUncheckedUpdateManyWithoutRestaurantInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  menuItemId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  reason: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  recordedById: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var WasteRecordUpdateWithoutRestaurantInputSchema = z$2.object({
  date: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  reason: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  ingrediente: z$2.lazy(() => IngredientUpdateOneRequiredWithoutWasteRecordNestedInputSchema).optional(),
  recordedBy: z$2.lazy(() => UserUpdateOneRequiredWithoutWasteRecordNestedInputSchema).optional()
}).strict();
var WasteRecordUncheckedUpdateWithoutRestaurantInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  ingredientId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  reason: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  recordedById: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var WasteRecordUncheckedUpdateManyWithoutRestaurantInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  ingredientId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  reason: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  recordedById: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var ProductionPlanUpdateWithoutRestaurantInputSchema = z$2.object({
  date: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdBy: z$2.lazy(() => UserUpdateOneRequiredWithoutProductionPlanNestedInputSchema).optional(),
  items: z$2.lazy(() => ProductionPlanItemUpdateManyWithoutProductionPlanNestedInputSchema).optional()
}).strict();
var ProductionPlanUncheckedUpdateWithoutRestaurantInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdById: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  items: z$2.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutProductionPlanNestedInputSchema).optional()
}).strict();
var ProductionPlanUncheckedUpdateManyWithoutRestaurantInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdById: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var EquipmentUpdateWithoutRestaurantInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  model: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  serialNumber: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  purchaseDate: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  lastMaintenance: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  nextMaintenance: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  status: z$2.union([z$2.lazy(() => EquipmentStatusSchema), z$2.lazy(() => EnumEquipmentStatusFieldUpdateOperationsInputSchema)]).optional(),
  location: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  recipes: z$2.lazy(() => RecipeEquipmentUpdateManyWithoutEquipmentNestedInputSchema).optional(),
  maintenanceLogs: z$2.lazy(() => MaintenanceLogUpdateManyWithoutEquipmentNestedInputSchema).optional()
}).strict();
var EquipmentUncheckedUpdateWithoutRestaurantInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  model: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  serialNumber: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  purchaseDate: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  lastMaintenance: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  nextMaintenance: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  status: z$2.union([z$2.lazy(() => EquipmentStatusSchema), z$2.lazy(() => EnumEquipmentStatusFieldUpdateOperationsInputSchema)]).optional(),
  location: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  recipes: z$2.lazy(() => RecipeEquipmentUncheckedUpdateManyWithoutEquipmentNestedInputSchema).optional(),
  maintenanceLogs: z$2.lazy(() => MaintenanceLogUncheckedUpdateManyWithoutEquipmentNestedInputSchema).optional()
}).strict();
var EquipmentUncheckedUpdateManyWithoutRestaurantInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  model: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  serialNumber: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  purchaseDate: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  lastMaintenance: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  nextMaintenance: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  status: z$2.union([z$2.lazy(() => EquipmentStatusSchema), z$2.lazy(() => EnumEquipmentStatusFieldUpdateOperationsInputSchema)]).optional(),
  location: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var QualityChecklistUpdateWithoutRestaurantInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  frequency: z$2.union([z$2.lazy(() => ChecklistFrequencySchema), z$2.lazy(() => EnumChecklistFrequencyFieldUpdateOperationsInputSchema)]).optional(),
  isActive: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  items: z$2.lazy(() => ChecklistItemUpdateManyWithoutChecklistNestedInputSchema).optional(),
  completions: z$2.lazy(() => ChecklistCompleteUpdateManyWithoutChecklistNestedInputSchema).optional()
}).strict();
var QualityChecklistUncheckedUpdateWithoutRestaurantInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  frequency: z$2.union([z$2.lazy(() => ChecklistFrequencySchema), z$2.lazy(() => EnumChecklistFrequencyFieldUpdateOperationsInputSchema)]).optional(),
  isActive: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  items: z$2.lazy(() => ChecklistItemUncheckedUpdateManyWithoutChecklistNestedInputSchema).optional(),
  completions: z$2.lazy(() => ChecklistCompleteUncheckedUpdateManyWithoutChecklistNestedInputSchema).optional()
}).strict();
var QualityChecklistUncheckedUpdateManyWithoutRestaurantInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  frequency: z$2.union([z$2.lazy(() => ChecklistFrequencySchema), z$2.lazy(() => EnumChecklistFrequencyFieldUpdateOperationsInputSchema)]).optional(),
  isActive: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var CustomerFeedbackUpdateWithoutRestaurantInputSchema = z$2.object({
  rating: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  comment: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  source: z$2.union([z$2.lazy(() => FeedbackSourceSchema), z$2.lazy(() => EnumFeedbackSourceFieldUpdateOperationsInputSchema)]).optional(),
  tags: z$2.union([z$2.lazy(() => CustomerFeedbackUpdatetagsInputSchema), z$2.string().array()]).optional(),
  status: z$2.union([z$2.lazy(() => FeedbackStatusSchema), z$2.lazy(() => EnumFeedbackStatusFieldUpdateOperationsInputSchema)]).optional(),
  responseText: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  respondedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  menuItem: z$2.lazy(() => MenuItemUpdateOneWithoutFeedbackNestedInputSchema).optional(),
  respondedBy: z$2.lazy(() => UserUpdateOneWithoutCustomerFeedbackNestedInputSchema).optional()
}).strict();
var CustomerFeedbackUncheckedUpdateWithoutRestaurantInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  menuItemId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  rating: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  comment: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  source: z$2.union([z$2.lazy(() => FeedbackSourceSchema), z$2.lazy(() => EnumFeedbackSourceFieldUpdateOperationsInputSchema)]).optional(),
  tags: z$2.union([z$2.lazy(() => CustomerFeedbackUpdatetagsInputSchema), z$2.string().array()]).optional(),
  status: z$2.union([z$2.lazy(() => FeedbackStatusSchema), z$2.lazy(() => EnumFeedbackStatusFieldUpdateOperationsInputSchema)]).optional(),
  responseText: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  respondedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  respondedById: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var CustomerFeedbackUncheckedUpdateManyWithoutRestaurantInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  menuItemId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  rating: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  comment: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  source: z$2.union([z$2.lazy(() => FeedbackSourceSchema), z$2.lazy(() => EnumFeedbackSourceFieldUpdateOperationsInputSchema)]).optional(),
  tags: z$2.union([z$2.lazy(() => CustomerFeedbackUpdatetagsInputSchema), z$2.string().array()]).optional(),
  status: z$2.union([z$2.lazy(() => FeedbackStatusSchema), z$2.lazy(() => EnumFeedbackStatusFieldUpdateOperationsInputSchema)]).optional(),
  responseText: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  respondedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  respondedById: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var ShiftCreateManyUserInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  startTime: z$2.coerce.date(),
  endTime: z$2.coerce.date(),
  status: z$2.lazy(() => ShiftStatusSchema)
}).strict();
var PrepItemCreateManyAssignedToInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  prepBoardId: z$2.number().int(),
  recipeId: z$2.number().int(),
  quantity: z$2.number().int(),
  status: z$2.lazy(() => PrepStatusSchema)
}).strict();
var InventoryItemCreateManyLastUpdatedByInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  inventoryId: z$2.number().int(),
  ingredientId: z$2.number().int(),
  quantity: z$2.number(),
  unit: z$2.string(),
  minQuantity: z$2.number(),
  restockThreshold: z$2.number(),
  lastUpdated: z$2.coerce.date().optional()
}).strict();
var SessionCreateManyUserInputSchema = z$2.object({
  id: z$2.string().optional(),
  code: z$2.string(),
  token: z$2.string(),
  expiresAt: z$2.coerce.date(),
  createdAt: z$2.coerce.date().optional()
}).strict();
var PasswordResetCreateManyUserInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  token: z$2.string(),
  expiresAt: z$2.coerce.date(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var LeftoverItemCreateManyRecordedByInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  restaurantId: z$2.number().int(),
  date: z$2.coerce.date(),
  menuItemId: z$2.number().int(),
  quantity: z$2.number().int(),
  reason: z$2.string(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var WasteRecordCreateManyRecordedByInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  restaurantId: z$2.number().int(),
  date: z$2.coerce.date(),
  ingredientId: z$2.number().int(),
  quantity: z$2.number(),
  unit: z$2.string(),
  reason: z$2.string(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var ProductionPlanCreateManyCreatedByInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  restaurantId: z$2.number().int(),
  date: z$2.coerce.date(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var ProductionPlanItemCreateManyAssignedToInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  productionPlanId: z$2.number().int(),
  recipeId: z$2.number().int(),
  quantity: z$2.number().int(),
  unit: z$2.string(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var AvailabilityCreateManyUserInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  dayOfWeek: z$2.lazy(() => DayOfWeekSchema),
  startTime: z$2.coerce.date(),
  endTime: z$2.coerce.date(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var SchedulingConstraintCreateManyUserInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  date: z$2.coerce.date(),
  constraintsType: z$2.lazy(() => ConstraintTypeSchema),
  startTime: z$2.coerce.date(),
  endTime: z$2.coerce.date(),
  notes: z$2.string().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var InventoryWithdrawalCreateManyCreatedByInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  inventoryItemId: z$2.number().int(),
  dateTime: z$2.coerce.date(),
  quantity: z$2.number(),
  unit: z$2.string(),
  recipeId: z$2.number().int().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var ChecklistCompleteCreateManyCompletedByInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  checklistId: z$2.number().int(),
  date: z$2.coerce.date(),
  notes: z$2.string().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var CustomerFeedbackCreateManyRespondedByInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  restaurantId: z$2.number().int(),
  menuItemId: z$2.number().int().optional().nullable(),
  rating: z$2.number().int(),
  comment: z$2.string().optional().nullable(),
  source: z$2.lazy(() => FeedbackSourceSchema),
  tags: z$2.union([z$2.lazy(() => CustomerFeedbackCreatetagsInputSchema), z$2.string().array()]).optional(),
  status: z$2.lazy(() => FeedbackStatusSchema).optional(),
  responseText: z$2.string().optional().nullable(),
  respondedAt: z$2.coerce.date().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var RecipeVersionCreateManyCreatedByInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  recipeId: z$2.number().int(),
  versionNumber: z$2.number().int(),
  description: z$2.string().optional().nullable(),
  changes: z$2.string().optional().nullable(),
  isActive: z$2.boolean().optional(),
  approvedById: z$2.number().int().optional().nullable(),
  approvedAt: z$2.coerce.date().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var RecipeVersionCreateManyApprovedByInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  recipeId: z$2.number().int(),
  versionNumber: z$2.number().int(),
  description: z$2.string().optional().nullable(),
  changes: z$2.string().optional().nullable(),
  isActive: z$2.boolean().optional(),
  createdById: z$2.number().int(),
  approvedAt: z$2.coerce.date().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var ShiftUpdateWithoutUserInputSchema = z$2.object({
  startTime: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endTime: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  status: z$2.union([z$2.lazy(() => ShiftStatusSchema), z$2.lazy(() => EnumShiftStatusFieldUpdateOperationsInputSchema)]).optional(),
  ShiftTask: z$2.lazy(() => ShiftTaskUpdateManyWithoutShiftNestedInputSchema).optional()
}).strict();
var ShiftUncheckedUpdateWithoutUserInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  startTime: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endTime: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  status: z$2.union([z$2.lazy(() => ShiftStatusSchema), z$2.lazy(() => EnumShiftStatusFieldUpdateOperationsInputSchema)]).optional(),
  ShiftTask: z$2.lazy(() => ShiftTaskUncheckedUpdateManyWithoutShiftNestedInputSchema).optional()
}).strict();
var ShiftUncheckedUpdateManyWithoutUserInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  startTime: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endTime: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  status: z$2.union([z$2.lazy(() => ShiftStatusSchema), z$2.lazy(() => EnumShiftStatusFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var PrepItemUpdateWithoutAssignedToInputSchema = z$2.object({
  quantity: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  status: z$2.union([z$2.lazy(() => PrepStatusSchema), z$2.lazy(() => EnumPrepStatusFieldUpdateOperationsInputSchema)]).optional(),
  prepBoard: z$2.lazy(() => PrepBoardUpdateOneRequiredWithoutPrepItemsNestedInputSchema).optional(),
  recipe: z$2.lazy(() => RecipeUpdateOneRequiredWithoutPrepItemsNestedInputSchema).optional()
}).strict();
var PrepItemUncheckedUpdateWithoutAssignedToInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepBoardId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  status: z$2.union([z$2.lazy(() => PrepStatusSchema), z$2.lazy(() => EnumPrepStatusFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var PrepItemUncheckedUpdateManyWithoutAssignedToInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepBoardId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  status: z$2.union([z$2.lazy(() => PrepStatusSchema), z$2.lazy(() => EnumPrepStatusFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var InventoryItemUpdateWithoutLastUpdatedByInputSchema = z$2.object({
  quantity: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  minQuantity: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  restockThreshold: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  lastUpdated: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  inventory: z$2.lazy(() => InventoryUpdateOneRequiredWithoutItemsNestedInputSchema).optional(),
  ingredient: z$2.lazy(() => IngredientUpdateOneRequiredWithoutInventoryItemsNestedInputSchema).optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUpdateManyWithoutInventoryItemNestedInputSchema).optional()
}).strict();
var InventoryItemUncheckedUpdateWithoutLastUpdatedByInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  inventoryId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  ingredientId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  minQuantity: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  restockThreshold: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  lastUpdated: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutInventoryItemNestedInputSchema).optional()
}).strict();
var InventoryItemUncheckedUpdateManyWithoutLastUpdatedByInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  inventoryId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  ingredientId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  minQuantity: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  restockThreshold: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  lastUpdated: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var SessionUpdateWithoutUserInputSchema = z$2.object({
  id: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  code: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  token: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  expiresAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var SessionUncheckedUpdateWithoutUserInputSchema = z$2.object({
  id: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  code: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  token: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  expiresAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var SessionUncheckedUpdateManyWithoutUserInputSchema = z$2.object({
  id: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  code: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  token: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  expiresAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var PasswordResetUpdateWithoutUserInputSchema = z$2.object({
  token: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  expiresAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var PasswordResetUncheckedUpdateWithoutUserInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  token: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  expiresAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var PasswordResetUncheckedUpdateManyWithoutUserInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  token: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  expiresAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var LeftoverItemUpdateWithoutRecordedByInputSchema = z$2.object({
  date: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  reason: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: z$2.lazy(() => RestaurantUpdateOneRequiredWithoutLeftoverItemNestedInputSchema).optional(),
  menuItem: z$2.lazy(() => MenuItemUpdateOneRequiredWithoutLeftoverItemNestedInputSchema).optional()
}).strict();
var LeftoverItemUncheckedUpdateWithoutRecordedByInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  menuItemId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  reason: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var LeftoverItemUncheckedUpdateManyWithoutRecordedByInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  menuItemId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  reason: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var WasteRecordUpdateWithoutRecordedByInputSchema = z$2.object({
  date: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  reason: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: z$2.lazy(() => RestaurantUpdateOneRequiredWithoutWasteRecordNestedInputSchema).optional(),
  ingrediente: z$2.lazy(() => IngredientUpdateOneRequiredWithoutWasteRecordNestedInputSchema).optional()
}).strict();
var WasteRecordUncheckedUpdateWithoutRecordedByInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  ingredientId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  reason: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var WasteRecordUncheckedUpdateManyWithoutRecordedByInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  ingredientId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  reason: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var ProductionPlanUpdateWithoutCreatedByInputSchema = z$2.object({
  date: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: z$2.lazy(() => RestaurantUpdateOneRequiredWithoutProductionPlanNestedInputSchema).optional(),
  items: z$2.lazy(() => ProductionPlanItemUpdateManyWithoutProductionPlanNestedInputSchema).optional()
}).strict();
var ProductionPlanUncheckedUpdateWithoutCreatedByInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  items: z$2.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutProductionPlanNestedInputSchema).optional()
}).strict();
var ProductionPlanUncheckedUpdateManyWithoutCreatedByInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var ProductionPlanItemUpdateWithoutAssignedToInputSchema = z$2.object({
  quantity: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUpdateOneRequiredWithoutItemsNestedInputSchema).optional(),
  recipe: z$2.lazy(() => RecipeUpdateOneRequiredWithoutProductionPlanItemNestedInputSchema).optional()
}).strict();
var ProductionPlanItemUncheckedUpdateWithoutAssignedToInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  productionPlanId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var ProductionPlanItemUncheckedUpdateManyWithoutAssignedToInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  productionPlanId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var AvailabilityUpdateWithoutUserInputSchema = z$2.object({
  dayOfWeek: z$2.union([z$2.lazy(() => DayOfWeekSchema), z$2.lazy(() => EnumDayOfWeekFieldUpdateOperationsInputSchema)]).optional(),
  startTime: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endTime: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var AvailabilityUncheckedUpdateWithoutUserInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  dayOfWeek: z$2.union([z$2.lazy(() => DayOfWeekSchema), z$2.lazy(() => EnumDayOfWeekFieldUpdateOperationsInputSchema)]).optional(),
  startTime: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endTime: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var AvailabilityUncheckedUpdateManyWithoutUserInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  dayOfWeek: z$2.union([z$2.lazy(() => DayOfWeekSchema), z$2.lazy(() => EnumDayOfWeekFieldUpdateOperationsInputSchema)]).optional(),
  startTime: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endTime: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var SchedulingConstraintUpdateWithoutUserInputSchema = z$2.object({
  date: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  constraintsType: z$2.union([z$2.lazy(() => ConstraintTypeSchema), z$2.lazy(() => EnumConstraintTypeFieldUpdateOperationsInputSchema)]).optional(),
  startTime: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endTime: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  notes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var SchedulingConstraintUncheckedUpdateWithoutUserInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  constraintsType: z$2.union([z$2.lazy(() => ConstraintTypeSchema), z$2.lazy(() => EnumConstraintTypeFieldUpdateOperationsInputSchema)]).optional(),
  startTime: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endTime: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  notes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var SchedulingConstraintUncheckedUpdateManyWithoutUserInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  constraintsType: z$2.union([z$2.lazy(() => ConstraintTypeSchema), z$2.lazy(() => EnumConstraintTypeFieldUpdateOperationsInputSchema)]).optional(),
  startTime: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endTime: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  notes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var InventoryWithdrawalUpdateWithoutCreatedByInputSchema = z$2.object({
  dateTime: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  inventoryItem: z$2.lazy(() => InventoryItemUpdateOneRequiredWithoutInventoryWithdrawalNestedInputSchema).optional(),
  recipe: z$2.lazy(() => RecipeUpdateOneWithoutInventoryWithdrawalNestedInputSchema).optional()
}).strict();
var InventoryWithdrawalUncheckedUpdateWithoutCreatedByInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  inventoryItemId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  dateTime: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var InventoryWithdrawalUncheckedUpdateManyWithoutCreatedByInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  inventoryItemId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  dateTime: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var ChecklistCompleteUpdateWithoutCompletedByInputSchema = z$2.object({
  date: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  notes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  checklist: z$2.lazy(() => QualityChecklistUpdateOneRequiredWithoutCompletionsNestedInputSchema).optional(),
  items: z$2.lazy(() => ChecklistItemCompleteUpdateManyWithoutChecklistCompleteNestedInputSchema).optional()
}).strict();
var ChecklistCompleteUncheckedUpdateWithoutCompletedByInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  checklistId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  notes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  items: z$2.lazy(() => ChecklistItemCompleteUncheckedUpdateManyWithoutChecklistCompleteNestedInputSchema).optional()
}).strict();
var ChecklistCompleteUncheckedUpdateManyWithoutCompletedByInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  checklistId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  notes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var CustomerFeedbackUpdateWithoutRespondedByInputSchema = z$2.object({
  rating: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  comment: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  source: z$2.union([z$2.lazy(() => FeedbackSourceSchema), z$2.lazy(() => EnumFeedbackSourceFieldUpdateOperationsInputSchema)]).optional(),
  tags: z$2.union([z$2.lazy(() => CustomerFeedbackUpdatetagsInputSchema), z$2.string().array()]).optional(),
  status: z$2.union([z$2.lazy(() => FeedbackStatusSchema), z$2.lazy(() => EnumFeedbackStatusFieldUpdateOperationsInputSchema)]).optional(),
  responseText: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  respondedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: z$2.lazy(() => RestaurantUpdateOneRequiredWithoutQustomerFeedbackNestedInputSchema).optional(),
  menuItem: z$2.lazy(() => MenuItemUpdateOneWithoutFeedbackNestedInputSchema).optional()
}).strict();
var CustomerFeedbackUncheckedUpdateWithoutRespondedByInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  menuItemId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  rating: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  comment: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  source: z$2.union([z$2.lazy(() => FeedbackSourceSchema), z$2.lazy(() => EnumFeedbackSourceFieldUpdateOperationsInputSchema)]).optional(),
  tags: z$2.union([z$2.lazy(() => CustomerFeedbackUpdatetagsInputSchema), z$2.string().array()]).optional(),
  status: z$2.union([z$2.lazy(() => FeedbackStatusSchema), z$2.lazy(() => EnumFeedbackStatusFieldUpdateOperationsInputSchema)]).optional(),
  responseText: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  respondedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var CustomerFeedbackUncheckedUpdateManyWithoutRespondedByInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  menuItemId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  rating: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  comment: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  source: z$2.union([z$2.lazy(() => FeedbackSourceSchema), z$2.lazy(() => EnumFeedbackSourceFieldUpdateOperationsInputSchema)]).optional(),
  tags: z$2.union([z$2.lazy(() => CustomerFeedbackUpdatetagsInputSchema), z$2.string().array()]).optional(),
  status: z$2.union([z$2.lazy(() => FeedbackStatusSchema), z$2.lazy(() => EnumFeedbackStatusFieldUpdateOperationsInputSchema)]).optional(),
  responseText: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  respondedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var RecipeVersionUpdateWithoutCreatedByInputSchema = z$2.object({
  versionNumber: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  changes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isActive: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  approvedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  recipe: z$2.lazy(() => RecipeUpdateOneRequiredWithoutVersionsNestedInputSchema).optional(),
  ingredients: z$2.lazy(() => RecipeIngredientUpdateManyWithoutRecipeVersionNestedInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionUpdateManyWithoutRecipeVersionNestedInputSchema).optional(),
  approvedBy: z$2.lazy(() => UserUpdateOneWithoutRecipeVersionsApprovedNestedInputSchema).optional()
}).strict();
var RecipeVersionUncheckedUpdateWithoutCreatedByInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  versionNumber: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  changes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isActive: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  approvedById: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  approvedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  ingredients: z$2.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutRecipeVersionNestedInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionUncheckedUpdateManyWithoutRecipeVersionNestedInputSchema).optional()
}).strict();
var RecipeVersionUncheckedUpdateManyWithoutCreatedByInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  versionNumber: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  changes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isActive: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  approvedById: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  approvedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var RecipeVersionUpdateWithoutApprovedByInputSchema = z$2.object({
  versionNumber: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  changes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isActive: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  approvedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  recipe: z$2.lazy(() => RecipeUpdateOneRequiredWithoutVersionsNestedInputSchema).optional(),
  ingredients: z$2.lazy(() => RecipeIngredientUpdateManyWithoutRecipeVersionNestedInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionUpdateManyWithoutRecipeVersionNestedInputSchema).optional(),
  createdBy: z$2.lazy(() => UserUpdateOneRequiredWithoutRecipeVersionsCreatedNestedInputSchema).optional()
}).strict();
var RecipeVersionUncheckedUpdateWithoutApprovedByInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  versionNumber: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  changes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isActive: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdById: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  approvedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  ingredients: z$2.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutRecipeVersionNestedInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionUncheckedUpdateManyWithoutRecipeVersionNestedInputSchema).optional()
}).strict();
var RecipeVersionUncheckedUpdateManyWithoutApprovedByInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  versionNumber: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  changes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isActive: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdById: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  approvedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var RecipeCreateManyCookBookInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  imageUrl: z$2.union([z$2.lazy(() => RecipeCreateimageUrlInputSchema), z$2.string().array()]).optional(),
  description: z$2.string().optional().nullable(),
  servings: z$2.number().int(),
  cookTime: z$2.number().int(),
  prepTime: z$2.number().int(),
  frequency: z$2.number().int().optional().nullable(),
  restaurantId: z$2.number().int(),
  foodCost: z$2.number().optional().nullable(),
  isDeleted: z$2.boolean().optional(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var RecipeUpdateWithoutCookBookInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.lazy(() => RecipeUpdateimageUrlInputSchema), z$2.string().array()]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: z$2.lazy(() => RestaurantUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  ingredients: z$2.lazy(() => RecipeIngredientUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z$2.lazy(() => MenuItemUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: z$2.lazy(() => FoodCostHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: z$2.lazy(() => PrepHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z$2.lazy(() => PrepBoardUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  MenuItemRecipe: z$2.lazy(() => MenuItemRecipeUpdateManyWithoutRecipeNestedInputSchema).optional(),
  ProductionPlanItem: z$2.lazy(() => ProductionPlanItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z$2.lazy(() => RecipeTagUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: z$2.lazy(() => RecipeVersionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipment: z$2.lazy(() => RecipeEquipmentUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionUpdateManyWithoutRecipesNestedInputSchema).optional()
}).strict();
var RecipeUncheckedUpdateWithoutCookBookInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.lazy(() => RecipeUpdateimageUrlInputSchema), z$2.string().array()]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  ingredients: z$2.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z$2.lazy(() => MenuItemUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: z$2.lazy(() => FoodCostHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: z$2.lazy(() => PrepHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z$2.lazy(() => PrepBoardUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  MenuItemRecipe: z$2.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  ProductionPlanItem: z$2.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z$2.lazy(() => RecipeTagUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: z$2.lazy(() => RecipeVersionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipment: z$2.lazy(() => RecipeEquipmentUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional()
}).strict();
var RecipeUncheckedUpdateManyWithoutCookBookInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.lazy(() => RecipeUpdateimageUrlInputSchema), z$2.string().array()]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var RecipeIngredientCreateManyRecipeInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  ingredientId: z$2.number().int(),
  quantity: z$2.number(),
  unit: z$2.string(),
  joinAt: z$2.coerce.date().optional(),
  recipeVersionId: z$2.number().int().optional().nullable()
}).strict();
var RecipeInstructionCreateManyRecipeInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  stepNumber: z$2.number().int(),
  instruction: z$2.string(),
  imageUrl: z$2.string().optional().nullable(),
  recipeVersionId: z$2.number().int().optional().nullable()
}).strict();
var FoodCostHistoryCreateManyRecipeInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  cost: z$2.number(),
  date: z$2.coerce.date(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var PrepHistoryCreateManyRecipeInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  quantity: z$2.number().int(),
  date: z$2.coerce.date(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var PrepItemCreateManyRecipeInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  prepBoardId: z$2.number().int(),
  quantity: z$2.number().int(),
  status: z$2.lazy(() => PrepStatusSchema),
  assignedToId: z$2.number().int()
}).strict();
var MenuItemRecipeCreateManyRecipeInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  menuItemId: z$2.number().int(),
  joinAt: z$2.coerce.date().optional()
}).strict();
var ProductionPlanItemCreateManyRecipeInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  productionPlanId: z$2.number().int(),
  quantity: z$2.number().int(),
  unit: z$2.string(),
  assignedToId: z$2.number().int().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var InventoryWithdrawalCreateManyRecipeInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  inventoryItemId: z$2.number().int(),
  dateTime: z$2.coerce.date(),
  quantity: z$2.number(),
  unit: z$2.string(),
  createdById: z$2.number().int(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var RecipeVersionCreateManyRecipeInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  versionNumber: z$2.number().int(),
  description: z$2.string().optional().nullable(),
  changes: z$2.string().optional().nullable(),
  isActive: z$2.boolean().optional(),
  createdById: z$2.number().int(),
  approvedById: z$2.number().int().optional().nullable(),
  approvedAt: z$2.coerce.date().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var RecipeEquipmentCreateManyRecipeInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  equipmentId: z$2.number().int(),
  notes: z$2.string().optional().nullable()
}).strict();
var RecipeIngredientUpdateWithoutRecipeInputSchema = z$2.object({
  quantity: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  joinAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  ingredient: z$2.lazy(() => IngredientUpdateOneRequiredWithoutRecipeIngredientsNestedInputSchema).optional(),
  RecipeVersion: z$2.lazy(() => RecipeVersionUpdateOneWithoutIngredientsNestedInputSchema).optional()
}).strict();
var RecipeIngredientUncheckedUpdateWithoutRecipeInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  ingredientId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  joinAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  recipeVersionId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable()
}).strict();
var RecipeIngredientUncheckedUpdateManyWithoutRecipeInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  ingredientId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  joinAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  recipeVersionId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable()
}).strict();
var RecipeInstructionUpdateWithoutRecipeInputSchema = z$2.object({
  stepNumber: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  instruction: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  RecipeVersion: z$2.lazy(() => RecipeVersionUpdateOneWithoutInstructionsNestedInputSchema).optional()
}).strict();
var RecipeInstructionUncheckedUpdateWithoutRecipeInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  stepNumber: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  instruction: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  recipeVersionId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable()
}).strict();
var RecipeInstructionUncheckedUpdateManyWithoutRecipeInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  stepNumber: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  instruction: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  recipeVersionId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable()
}).strict();
var MenuItemUpdateWithoutRecipesInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipeIds: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeIdsInputSchema), z$2.number().int().array()]).optional(),
  recipeServingsAmount: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema), z$2.number().array()]).optional(),
  recipeServingsCost: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema), z$2.number().array()]).optional(),
  allergens: z$2.union([z$2.lazy(() => MenuItemUpdateallergensInputSchema), z$2.string().array()]).optional(),
  nutritionalInfoId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  nutritionalInfo: z$2.lazy(() => NutritionalInfoUpdateOneWithoutMenuItemNestedInputSchema).optional(),
  menu: z$2.lazy(() => MenuUpdateOneRequiredWithoutMenuItemsNestedInputSchema).optional(),
  menuItemRecipe: z$2.lazy(() => MenuItemRecipeUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  nutritionalRecommendation: z$2.lazy(() => NutritionalRecommendationUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  category: z$2.lazy(() => MenuCategoryUpdateOneWithoutMenuItemsNestedInputSchema).optional(),
  feedback: z$2.lazy(() => CustomerFeedbackUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionUpdateManyWithoutMenuItemsNestedInputSchema).optional()
}).strict();
var MenuItemUncheckedUpdateWithoutRecipesInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipeIds: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeIdsInputSchema), z$2.number().int().array()]).optional(),
  recipeServingsAmount: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema), z$2.number().array()]).optional(),
  recipeServingsCost: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema), z$2.number().array()]).optional(),
  allergens: z$2.union([z$2.lazy(() => MenuItemUpdateallergensInputSchema), z$2.string().array()]).optional(),
  nutritionalInfoId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  menuId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  categoryId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  nutritionalInfo: z$2.lazy(() => NutritionalInfoUncheckedUpdateOneWithoutMenuItemNestedInputSchema).optional(),
  menuItemRecipe: z$2.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  nutritionalRecommendation: z$2.lazy(() => NutritionalRecommendationUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  feedback: z$2.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutMenuItemsNestedInputSchema).optional()
}).strict();
var MenuItemUncheckedUpdateManyWithoutRecipesInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipeIds: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeIdsInputSchema), z$2.number().int().array()]).optional(),
  recipeServingsAmount: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema), z$2.number().array()]).optional(),
  recipeServingsCost: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema), z$2.number().array()]).optional(),
  allergens: z$2.union([z$2.lazy(() => MenuItemUpdateallergensInputSchema), z$2.string().array()]).optional(),
  nutritionalInfoId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  menuId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  categoryId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable()
}).strict();
var FoodCostHistoryUpdateWithoutRecipeInputSchema = z$2.object({
  cost: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  date: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var FoodCostHistoryUncheckedUpdateWithoutRecipeInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cost: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  date: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var FoodCostHistoryUncheckedUpdateManyWithoutRecipeInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cost: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  date: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var PrepHistoryUpdateWithoutRecipeInputSchema = z$2.object({
  quantity: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var PrepHistoryUncheckedUpdateWithoutRecipeInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var PrepHistoryUncheckedUpdateManyWithoutRecipeInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var PrepBoardUpdateWithoutRecipesInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  status: z$2.union([z$2.lazy(() => PrepStatusSchema), z$2.lazy(() => EnumPrepStatusFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  prepItems: z$2.lazy(() => PrepItemUpdateManyWithoutPrepBoardNestedInputSchema).optional()
}).strict();
var PrepBoardUncheckedUpdateWithoutRecipesInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  status: z$2.union([z$2.lazy(() => PrepStatusSchema), z$2.lazy(() => EnumPrepStatusFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  prepItems: z$2.lazy(() => PrepItemUncheckedUpdateManyWithoutPrepBoardNestedInputSchema).optional()
}).strict();
var PrepBoardUncheckedUpdateManyWithoutRecipesInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  status: z$2.union([z$2.lazy(() => PrepStatusSchema), z$2.lazy(() => EnumPrepStatusFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var PrepItemUpdateWithoutRecipeInputSchema = z$2.object({
  quantity: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  status: z$2.union([z$2.lazy(() => PrepStatusSchema), z$2.lazy(() => EnumPrepStatusFieldUpdateOperationsInputSchema)]).optional(),
  prepBoard: z$2.lazy(() => PrepBoardUpdateOneRequiredWithoutPrepItemsNestedInputSchema).optional(),
  assignedTo: z$2.lazy(() => UserUpdateOneRequiredWithoutPrepItemsNestedInputSchema).optional()
}).strict();
var PrepItemUncheckedUpdateWithoutRecipeInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepBoardId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  status: z$2.union([z$2.lazy(() => PrepStatusSchema), z$2.lazy(() => EnumPrepStatusFieldUpdateOperationsInputSchema)]).optional(),
  assignedToId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var PrepItemUncheckedUpdateManyWithoutRecipeInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepBoardId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  status: z$2.union([z$2.lazy(() => PrepStatusSchema), z$2.lazy(() => EnumPrepStatusFieldUpdateOperationsInputSchema)]).optional(),
  assignedToId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var MenuItemRecipeUpdateWithoutRecipeInputSchema = z$2.object({
  joinAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  menuItem: z$2.lazy(() => MenuItemUpdateOneRequiredWithoutMenuItemRecipeNestedInputSchema).optional()
}).strict();
var MenuItemRecipeUncheckedUpdateWithoutRecipeInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  menuItemId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  joinAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var MenuItemRecipeUncheckedUpdateManyWithoutRecipeInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  menuItemId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  joinAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var ProductionPlanItemUpdateWithoutRecipeInputSchema = z$2.object({
  quantity: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  productionPlan: z$2.lazy(() => ProductionPlanUpdateOneRequiredWithoutItemsNestedInputSchema).optional(),
  assignedTo: z$2.lazy(() => UserUpdateOneWithoutProductionPlanItemNestedInputSchema).optional()
}).strict();
var ProductionPlanItemUncheckedUpdateWithoutRecipeInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  productionPlanId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  assignedToId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var ProductionPlanItemUncheckedUpdateManyWithoutRecipeInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  productionPlanId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  assignedToId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var InventoryWithdrawalUpdateWithoutRecipeInputSchema = z$2.object({
  dateTime: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  inventoryItem: z$2.lazy(() => InventoryItemUpdateOneRequiredWithoutInventoryWithdrawalNestedInputSchema).optional(),
  createdBy: z$2.lazy(() => UserUpdateOneRequiredWithoutInventoryWithdrawalNestedInputSchema).optional()
}).strict();
var InventoryWithdrawalUncheckedUpdateWithoutRecipeInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  inventoryItemId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  dateTime: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdById: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var InventoryWithdrawalUncheckedUpdateManyWithoutRecipeInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  inventoryItemId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  dateTime: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdById: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var RecipeTagUpdateWithoutRecipesInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var RecipeTagUncheckedUpdateWithoutRecipesInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var RecipeTagUncheckedUpdateManyWithoutRecipesInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var RecipeVersionUpdateWithoutRecipeInputSchema = z$2.object({
  versionNumber: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  changes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isActive: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  approvedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  ingredients: z$2.lazy(() => RecipeIngredientUpdateManyWithoutRecipeVersionNestedInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionUpdateManyWithoutRecipeVersionNestedInputSchema).optional(),
  createdBy: z$2.lazy(() => UserUpdateOneRequiredWithoutRecipeVersionsCreatedNestedInputSchema).optional(),
  approvedBy: z$2.lazy(() => UserUpdateOneWithoutRecipeVersionsApprovedNestedInputSchema).optional()
}).strict();
var RecipeVersionUncheckedUpdateWithoutRecipeInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  versionNumber: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  changes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isActive: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdById: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  approvedById: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  approvedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  ingredients: z$2.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutRecipeVersionNestedInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionUncheckedUpdateManyWithoutRecipeVersionNestedInputSchema).optional()
}).strict();
var RecipeVersionUncheckedUpdateManyWithoutRecipeInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  versionNumber: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  changes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isActive: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdById: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  approvedById: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  approvedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var RecipeEquipmentUpdateWithoutRecipeInputSchema = z$2.object({
  notes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  equipment: z$2.lazy(() => EquipmentUpdateOneRequiredWithoutRecipesNestedInputSchema).optional()
}).strict();
var RecipeEquipmentUncheckedUpdateWithoutRecipeInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  equipmentId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  notes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable()
}).strict();
var RecipeEquipmentUncheckedUpdateManyWithoutRecipeInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  equipmentId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  notes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable()
}).strict();
var DietaryRestrictionUpdateWithoutRecipesInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  icon: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  menuItems: z$2.lazy(() => MenuItemUpdateManyWithoutDietaryRestrictionsNestedInputSchema).optional(),
  ingredients: z$2.lazy(() => IngredientUpdateManyWithoutDietaryRestrictionNestedInputSchema).optional()
}).strict();
var DietaryRestrictionUncheckedUpdateWithoutRecipesInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  icon: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  menuItems: z$2.lazy(() => MenuItemUncheckedUpdateManyWithoutDietaryRestrictionsNestedInputSchema).optional(),
  ingredients: z$2.lazy(() => IngredientUncheckedUpdateManyWithoutDietaryRestrictionNestedInputSchema).optional()
}).strict();
var DietaryRestrictionUncheckedUpdateManyWithoutRecipesInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  icon: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var RecipeIngredientCreateManyIngredientInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  recipeId: z$2.number().int(),
  quantity: z$2.number(),
  unit: z$2.string(),
  joinAt: z$2.coerce.date().optional(),
  recipeVersionId: z$2.number().int().optional().nullable()
}).strict();
var InventoryItemCreateManyIngredientInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  inventoryId: z$2.number().int(),
  quantity: z$2.number(),
  unit: z$2.string(),
  minQuantity: z$2.number(),
  restockThreshold: z$2.number(),
  lastUpdatedById: z$2.number().int().optional().nullable(),
  lastUpdated: z$2.coerce.date().optional()
}).strict();
var OrderItemCreateManyIngredientInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  orderId: z$2.number().int(),
  quantity: z$2.number(),
  unit: z$2.string(),
  price: z$2.number()
}).strict();
var WasteRecordCreateManyIngredienteInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  restaurantId: z$2.number().int(),
  date: z$2.coerce.date(),
  quantity: z$2.number(),
  unit: z$2.string(),
  reason: z$2.string(),
  recordedById: z$2.number().int(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var IngredientAllergenCreateManyIngredientInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  allergenId: z$2.number().int()
}).strict();
var SupplierPriceHistoryCreateManyIngredientInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  vendorId: z$2.number().int(),
  price: z$2.number(),
  unit: z$2.string(),
  startDate: z$2.coerce.date(),
  endDate: z$2.coerce.date().optional().nullable(),
  notes: z$2.string().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var RecipeIngredientUpdateWithoutIngredientInputSchema = z$2.object({
  quantity: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  joinAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  recipe: z$2.lazy(() => RecipeUpdateOneRequiredWithoutIngredientsNestedInputSchema).optional(),
  RecipeVersion: z$2.lazy(() => RecipeVersionUpdateOneWithoutIngredientsNestedInputSchema).optional()
}).strict();
var RecipeIngredientUncheckedUpdateWithoutIngredientInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  joinAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  recipeVersionId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable()
}).strict();
var RecipeIngredientUncheckedUpdateManyWithoutIngredientInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  joinAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  recipeVersionId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable()
}).strict();
var InventoryItemUpdateWithoutIngredientInputSchema = z$2.object({
  quantity: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  minQuantity: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  restockThreshold: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  lastUpdated: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  inventory: z$2.lazy(() => InventoryUpdateOneRequiredWithoutItemsNestedInputSchema).optional(),
  lastUpdatedBy: z$2.lazy(() => UserUpdateOneWithoutInventoryUpdatesNestedInputSchema).optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUpdateManyWithoutInventoryItemNestedInputSchema).optional()
}).strict();
var InventoryItemUncheckedUpdateWithoutIngredientInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  inventoryId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  minQuantity: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  restockThreshold: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  lastUpdatedById: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  lastUpdated: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutInventoryItemNestedInputSchema).optional()
}).strict();
var InventoryItemUncheckedUpdateManyWithoutIngredientInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  inventoryId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  minQuantity: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  restockThreshold: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  lastUpdatedById: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  lastUpdated: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var OrderItemUpdateWithoutIngredientInputSchema = z$2.object({
  quantity: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  order: z$2.lazy(() => OrderUpdateOneRequiredWithoutItemsNestedInputSchema).optional()
}).strict();
var OrderItemUncheckedUpdateWithoutIngredientInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  orderId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var OrderItemUncheckedUpdateManyWithoutIngredientInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  orderId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var VendorUpdateWithoutIngredientsInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  contact: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  email: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  phone: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  orders: z$2.lazy(() => OrderUpdateManyWithoutVendorNestedInputSchema).optional(),
  supplierPriceHistory: z$2.lazy(() => SupplierPriceHistoryUpdateManyWithoutVendorNestedInputSchema).optional()
}).strict();
var VendorUncheckedUpdateWithoutIngredientsInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  contact: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  email: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  phone: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  orders: z$2.lazy(() => OrderUncheckedUpdateManyWithoutVendorNestedInputSchema).optional(),
  supplierPriceHistory: z$2.lazy(() => SupplierPriceHistoryUncheckedUpdateManyWithoutVendorNestedInputSchema).optional()
}).strict();
var VendorUncheckedUpdateManyWithoutIngredientsInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  contact: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  email: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  phone: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var WasteRecordUpdateWithoutIngredienteInputSchema = z$2.object({
  date: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  reason: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: z$2.lazy(() => RestaurantUpdateOneRequiredWithoutWasteRecordNestedInputSchema).optional(),
  recordedBy: z$2.lazy(() => UserUpdateOneRequiredWithoutWasteRecordNestedInputSchema).optional()
}).strict();
var WasteRecordUncheckedUpdateWithoutIngredienteInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  reason: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  recordedById: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var WasteRecordUncheckedUpdateManyWithoutIngredienteInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  reason: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  recordedById: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var IngredientAllergenUpdateWithoutIngredientInputSchema = z$2.object({
  allergen: z$2.lazy(() => AllergenUpdateOneRequiredWithoutIngredientsNestedInputSchema).optional()
}).strict();
var IngredientAllergenUncheckedUpdateWithoutIngredientInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  allergenId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var IngredientAllergenUncheckedUpdateManyWithoutIngredientInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  allergenId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var SupplierPriceHistoryUpdateWithoutIngredientInputSchema = z$2.object({
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  startDate: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endDate: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  notes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  vendor: z$2.lazy(() => VendorUpdateOneRequiredWithoutSupplierPriceHistoryNestedInputSchema).optional()
}).strict();
var SupplierPriceHistoryUncheckedUpdateWithoutIngredientInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  vendorId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  startDate: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endDate: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  notes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var SupplierPriceHistoryUncheckedUpdateManyWithoutIngredientInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  vendorId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  startDate: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endDate: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  notes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var InventoryItemCreateManyInventoryInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  ingredientId: z$2.number().int(),
  quantity: z$2.number(),
  unit: z$2.string(),
  minQuantity: z$2.number(),
  restockThreshold: z$2.number(),
  lastUpdatedById: z$2.number().int().optional().nullable(),
  lastUpdated: z$2.coerce.date().optional()
}).strict();
var InventoryItemUpdateWithoutInventoryInputSchema = z$2.object({
  quantity: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  minQuantity: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  restockThreshold: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  lastUpdated: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  ingredient: z$2.lazy(() => IngredientUpdateOneRequiredWithoutInventoryItemsNestedInputSchema).optional(),
  lastUpdatedBy: z$2.lazy(() => UserUpdateOneWithoutInventoryUpdatesNestedInputSchema).optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUpdateManyWithoutInventoryItemNestedInputSchema).optional()
}).strict();
var InventoryItemUncheckedUpdateWithoutInventoryInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  ingredientId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  minQuantity: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  restockThreshold: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  lastUpdatedById: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  lastUpdated: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutInventoryItemNestedInputSchema).optional()
}).strict();
var InventoryItemUncheckedUpdateManyWithoutInventoryInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  ingredientId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  minQuantity: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  restockThreshold: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  lastUpdatedById: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  lastUpdated: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var InventoryWithdrawalCreateManyInventoryItemInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  dateTime: z$2.coerce.date(),
  quantity: z$2.number(),
  unit: z$2.string(),
  recipeId: z$2.number().int().optional().nullable(),
  createdById: z$2.number().int(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var InventoryWithdrawalUpdateWithoutInventoryItemInputSchema = z$2.object({
  dateTime: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  recipe: z$2.lazy(() => RecipeUpdateOneWithoutInventoryWithdrawalNestedInputSchema).optional(),
  createdBy: z$2.lazy(() => UserUpdateOneRequiredWithoutInventoryWithdrawalNestedInputSchema).optional()
}).strict();
var InventoryWithdrawalUncheckedUpdateWithoutInventoryItemInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  dateTime: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdById: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var InventoryWithdrawalUncheckedUpdateManyWithoutInventoryItemInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  dateTime: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdById: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var OrderItemCreateManyOrderInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  ingredientId: z$2.number().int(),
  quantity: z$2.number(),
  unit: z$2.string(),
  price: z$2.number()
}).strict();
var OrderItemUpdateWithoutOrderInputSchema = z$2.object({
  quantity: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  ingredient: z$2.lazy(() => IngredientUpdateOneRequiredWithoutOrderItemsNestedInputSchema).optional()
}).strict();
var OrderItemUncheckedUpdateWithoutOrderInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  ingredientId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var OrderItemUncheckedUpdateManyWithoutOrderInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  ingredientId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var OrderCreateManyVendorInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  restaurantId: z$2.number().int(),
  status: z$2.lazy(() => OrderStatusSchema),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var SupplierPriceHistoryCreateManyVendorInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  ingredientId: z$2.number().int(),
  price: z$2.number(),
  unit: z$2.string(),
  startDate: z$2.coerce.date(),
  endDate: z$2.coerce.date().optional().nullable(),
  notes: z$2.string().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var OrderUpdateWithoutVendorInputSchema = z$2.object({
  status: z$2.union([z$2.lazy(() => OrderStatusSchema), z$2.lazy(() => EnumOrderStatusFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: z$2.lazy(() => RestaurantUpdateOneRequiredWithoutOrdersNestedInputSchema).optional(),
  items: z$2.lazy(() => OrderItemUpdateManyWithoutOrderNestedInputSchema).optional()
}).strict();
var OrderUncheckedUpdateWithoutVendorInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  status: z$2.union([z$2.lazy(() => OrderStatusSchema), z$2.lazy(() => EnumOrderStatusFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  items: z$2.lazy(() => OrderItemUncheckedUpdateManyWithoutOrderNestedInputSchema).optional()
}).strict();
var OrderUncheckedUpdateManyWithoutVendorInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  status: z$2.union([z$2.lazy(() => OrderStatusSchema), z$2.lazy(() => EnumOrderStatusFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var IngredientUpdateWithoutVendorsInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  category: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipeIngredients: z$2.lazy(() => RecipeIngredientUpdateManyWithoutIngredientNestedInputSchema).optional(),
  inventoryItems: z$2.lazy(() => InventoryItemUpdateManyWithoutIngredientNestedInputSchema).optional(),
  orderItems: z$2.lazy(() => OrderItemUpdateManyWithoutIngredientNestedInputSchema).optional(),
  WasteRecord: z$2.lazy(() => WasteRecordUpdateManyWithoutIngredienteNestedInputSchema).optional(),
  IngredientAllergen: z$2.lazy(() => IngredientAllergenUpdateManyWithoutIngredientNestedInputSchema).optional(),
  SupplierPriceHistory: z$2.lazy(() => SupplierPriceHistoryUpdateManyWithoutIngredientNestedInputSchema).optional(),
  DietaryRestriction: z$2.lazy(() => DietaryRestrictionUpdateOneWithoutIngredientsNestedInputSchema).optional()
}).strict();
var IngredientUncheckedUpdateWithoutVendorsInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  category: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  dietaryRestrictionId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  recipeIngredients: z$2.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  inventoryItems: z$2.lazy(() => InventoryItemUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  orderItems: z$2.lazy(() => OrderItemUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  WasteRecord: z$2.lazy(() => WasteRecordUncheckedUpdateManyWithoutIngredienteNestedInputSchema).optional(),
  IngredientAllergen: z$2.lazy(() => IngredientAllergenUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  SupplierPriceHistory: z$2.lazy(() => SupplierPriceHistoryUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional()
}).strict();
var IngredientUncheckedUpdateManyWithoutVendorsInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  category: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  dietaryRestrictionId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable()
}).strict();
var SupplierPriceHistoryUpdateWithoutVendorInputSchema = z$2.object({
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  startDate: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endDate: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  notes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  ingredient: z$2.lazy(() => IngredientUpdateOneRequiredWithoutSupplierPriceHistoryNestedInputSchema).optional()
}).strict();
var SupplierPriceHistoryUncheckedUpdateWithoutVendorInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  ingredientId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  startDate: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endDate: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  notes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var SupplierPriceHistoryUncheckedUpdateManyWithoutVendorInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  ingredientId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  startDate: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endDate: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  notes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var ShiftTaskCreateManyShiftInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  taskType: z$2.lazy(() => TaskTypeSchema),
  startTime: z$2.coerce.date(),
  endTime: z$2.coerce.date(),
  duration: z$2.number().int(),
  notes: z$2.string().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var ShiftTaskUpdateWithoutShiftInputSchema = z$2.object({
  taskType: z$2.union([z$2.lazy(() => TaskTypeSchema), z$2.lazy(() => EnumTaskTypeFieldUpdateOperationsInputSchema)]).optional(),
  startTime: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endTime: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  duration: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  notes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var ShiftTaskUncheckedUpdateWithoutShiftInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  taskType: z$2.union([z$2.lazy(() => TaskTypeSchema), z$2.lazy(() => EnumTaskTypeFieldUpdateOperationsInputSchema)]).optional(),
  startTime: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endTime: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  duration: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  notes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var ShiftTaskUncheckedUpdateManyWithoutShiftInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  taskType: z$2.union([z$2.lazy(() => TaskTypeSchema), z$2.lazy(() => EnumTaskTypeFieldUpdateOperationsInputSchema)]).optional(),
  startTime: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endTime: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  duration: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  notes: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var PrepItemCreateManyPrepBoardInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  recipeId: z$2.number().int(),
  quantity: z$2.number().int(),
  status: z$2.lazy(() => PrepStatusSchema),
  assignedToId: z$2.number().int()
}).strict();
var RecipeUpdateWithoutPrepBoardsInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.lazy(() => RecipeUpdateimageUrlInputSchema), z$2.string().array()]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: z$2.lazy(() => RestaurantUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  cookBook: z$2.lazy(() => CookBookUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  ingredients: z$2.lazy(() => RecipeIngredientUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z$2.lazy(() => MenuItemUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: z$2.lazy(() => FoodCostHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: z$2.lazy(() => PrepHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  MenuItemRecipe: z$2.lazy(() => MenuItemRecipeUpdateManyWithoutRecipeNestedInputSchema).optional(),
  ProductionPlanItem: z$2.lazy(() => ProductionPlanItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z$2.lazy(() => RecipeTagUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: z$2.lazy(() => RecipeVersionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipment: z$2.lazy(() => RecipeEquipmentUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionUpdateManyWithoutRecipesNestedInputSchema).optional()
}).strict();
var RecipeUncheckedUpdateWithoutPrepBoardsInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.lazy(() => RecipeUpdateimageUrlInputSchema), z$2.string().array()]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookBookId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  ingredients: z$2.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z$2.lazy(() => MenuItemUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: z$2.lazy(() => FoodCostHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: z$2.lazy(() => PrepHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  MenuItemRecipe: z$2.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  ProductionPlanItem: z$2.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z$2.lazy(() => RecipeTagUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: z$2.lazy(() => RecipeVersionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipment: z$2.lazy(() => RecipeEquipmentUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional()
}).strict();
var RecipeUncheckedUpdateManyWithoutPrepBoardsInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.lazy(() => RecipeUpdateimageUrlInputSchema), z$2.string().array()]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookBookId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var PrepItemUpdateWithoutPrepBoardInputSchema = z$2.object({
  quantity: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  status: z$2.union([z$2.lazy(() => PrepStatusSchema), z$2.lazy(() => EnumPrepStatusFieldUpdateOperationsInputSchema)]).optional(),
  recipe: z$2.lazy(() => RecipeUpdateOneRequiredWithoutPrepItemsNestedInputSchema).optional(),
  assignedTo: z$2.lazy(() => UserUpdateOneRequiredWithoutPrepItemsNestedInputSchema).optional()
}).strict();
var PrepItemUncheckedUpdateWithoutPrepBoardInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  status: z$2.union([z$2.lazy(() => PrepStatusSchema), z$2.lazy(() => EnumPrepStatusFieldUpdateOperationsInputSchema)]).optional(),
  assignedToId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var PrepItemUncheckedUpdateManyWithoutPrepBoardInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  status: z$2.union([z$2.lazy(() => PrepStatusSchema), z$2.lazy(() => EnumPrepStatusFieldUpdateOperationsInputSchema)]).optional(),
  assignedToId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var MenuItemCreateManyMenuInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  description: z$2.string().optional().nullable(),
  price: z$2.number(),
  foodCost: z$2.number(),
  recipeIds: z$2.union([z$2.lazy(() => MenuItemCreaterecipeIdsInputSchema), z$2.number().int().array()]).optional(),
  recipeServingsAmount: z$2.union([z$2.lazy(() => MenuItemCreaterecipeServingsAmountInputSchema), z$2.number().array()]).optional(),
  recipeServingsCost: z$2.union([z$2.lazy(() => MenuItemCreaterecipeServingsCostInputSchema), z$2.number().array()]).optional(),
  allergens: z$2.union([z$2.lazy(() => MenuItemCreateallergensInputSchema), z$2.string().array()]).optional(),
  nutritionalInfoId: z$2.number().int().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional(),
  categoryId: z$2.number().int().optional().nullable()
}).strict();
var MenuCategoryCreateManyMenuInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  name: z$2.string(),
  description: z$2.string().optional().nullable(),
  displayOrder: z$2.number().int(),
  isActive: z$2.boolean().optional(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var MenuItemUpdateWithoutMenuInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipeIds: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeIdsInputSchema), z$2.number().int().array()]).optional(),
  recipeServingsAmount: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema), z$2.number().array()]).optional(),
  recipeServingsCost: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema), z$2.number().array()]).optional(),
  allergens: z$2.union([z$2.lazy(() => MenuItemUpdateallergensInputSchema), z$2.string().array()]).optional(),
  nutritionalInfoId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  nutritionalInfo: z$2.lazy(() => NutritionalInfoUpdateOneWithoutMenuItemNestedInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeUpdateManyWithoutMenuItemsNestedInputSchema).optional(),
  menuItemRecipe: z$2.lazy(() => MenuItemRecipeUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  nutritionalRecommendation: z$2.lazy(() => NutritionalRecommendationUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  category: z$2.lazy(() => MenuCategoryUpdateOneWithoutMenuItemsNestedInputSchema).optional(),
  feedback: z$2.lazy(() => CustomerFeedbackUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionUpdateManyWithoutMenuItemsNestedInputSchema).optional()
}).strict();
var MenuItemUncheckedUpdateWithoutMenuInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipeIds: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeIdsInputSchema), z$2.number().int().array()]).optional(),
  recipeServingsAmount: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema), z$2.number().array()]).optional(),
  recipeServingsCost: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema), z$2.number().array()]).optional(),
  allergens: z$2.union([z$2.lazy(() => MenuItemUpdateallergensInputSchema), z$2.string().array()]).optional(),
  nutritionalInfoId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  categoryId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  nutritionalInfo: z$2.lazy(() => NutritionalInfoUncheckedUpdateOneWithoutMenuItemNestedInputSchema).optional(),
  recipes: z$2.lazy(() => RecipeUncheckedUpdateManyWithoutMenuItemsNestedInputSchema).optional(),
  menuItemRecipe: z$2.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  salesTransactions: z$2.lazy(() => SalesTransactionsUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  leftoverItem: z$2.lazy(() => LeftoverItemUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  nutritionalRecommendation: z$2.lazy(() => NutritionalRecommendationUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  feedback: z$2.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutMenuItemsNestedInputSchema).optional()
}).strict();
var MenuItemUncheckedUpdateManyWithoutMenuInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipeIds: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeIdsInputSchema), z$2.number().int().array()]).optional(),
  recipeServingsAmount: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema), z$2.number().array()]).optional(),
  recipeServingsCost: z$2.union([z$2.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema), z$2.number().array()]).optional(),
  allergens: z$2.union([z$2.lazy(() => MenuItemUpdateallergensInputSchema), z$2.string().array()]).optional(),
  nutritionalInfoId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  categoryId: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable()
}).strict();
var MenuCategoryUpdateWithoutMenuInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  displayOrder: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  isActive: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  menuItems: z$2.lazy(() => MenuItemUpdateManyWithoutCategoryNestedInputSchema).optional()
}).strict();
var MenuCategoryUncheckedUpdateWithoutMenuInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  displayOrder: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  isActive: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  menuItems: z$2.lazy(() => MenuItemUncheckedUpdateManyWithoutCategoryNestedInputSchema).optional()
}).strict();
var MenuCategoryUncheckedUpdateManyWithoutMenuInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  displayOrder: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  isActive: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var MenuItemRecipeCreateManyMenuItemInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  recipeId: z$2.number().int(),
  joinAt: z$2.coerce.date().optional()
}).strict();
var SalesTransactionsCreateManyMenuItemInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  posTransactionID: z$2.string().optional().nullable(),
  restaurantId: z$2.number().int(),
  price: z$2.number(),
  total: z$2.number(),
  transactionDate: z$2.coerce.date(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var LeftoverItemCreateManyMenuItemInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  restaurantId: z$2.number().int(),
  date: z$2.coerce.date(),
  quantity: z$2.number().int(),
  reason: z$2.string(),
  recordedById: z$2.number().int(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var NutritionalRecommendationCreateManyMenuItemInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  recommendation: z$2.string(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var CustomerFeedbackCreateManyMenuItemInputSchema = z$2.object({
  id: z$2.number().int().optional(),
  restaurantId: z$2.number().int(),
  rating: z$2.number().int(),
  comment: z$2.string().optional().nullable(),
  source: z$2.lazy(() => FeedbackSourceSchema),
  tags: z$2.union([z$2.lazy(() => CustomerFeedbackCreatetagsInputSchema), z$2.string().array()]).optional(),
  status: z$2.lazy(() => FeedbackStatusSchema).optional(),
  responseText: z$2.string().optional().nullable(),
  respondedAt: z$2.coerce.date().optional().nullable(),
  respondedById: z$2.number().int().optional().nullable(),
  createdAt: z$2.coerce.date().optional(),
  updatedAt: z$2.coerce.date().optional()
}).strict();
var RecipeUpdateWithoutMenuItemsInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.lazy(() => RecipeUpdateimageUrlInputSchema), z$2.string().array()]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: z$2.lazy(() => RestaurantUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  cookBook: z$2.lazy(() => CookBookUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  ingredients: z$2.lazy(() => RecipeIngredientUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  foodCostHistory: z$2.lazy(() => FoodCostHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: z$2.lazy(() => PrepHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z$2.lazy(() => PrepBoardUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  MenuItemRecipe: z$2.lazy(() => MenuItemRecipeUpdateManyWithoutRecipeNestedInputSchema).optional(),
  ProductionPlanItem: z$2.lazy(() => ProductionPlanItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z$2.lazy(() => RecipeTagUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: z$2.lazy(() => RecipeVersionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipment: z$2.lazy(() => RecipeEquipmentUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionUpdateManyWithoutRecipesNestedInputSchema).optional()
}).strict();
var RecipeUncheckedUpdateWithoutMenuItemsInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.lazy(() => RecipeUpdateimageUrlInputSchema), z$2.string().array()]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookBookId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  ingredients: z$2.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: z$2.lazy(() => RecipeInstructionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  foodCostHistory: z$2.lazy(() => FoodCostHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: z$2.lazy(() => PrepHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z$2.lazy(() => PrepBoardUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: z$2.lazy(() => PrepItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  MenuItemRecipe: z$2.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  ProductionPlanItem: z$2.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  InventoryWithdrawal: z$2.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z$2.lazy(() => RecipeTagUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: z$2.lazy(() => RecipeVersionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipment: z$2.lazy(() => RecipeEquipmentUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z$2.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional()
}).strict();
var RecipeUncheckedUpdateManyWithoutMenuItemsInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: z$2.union([z$2.lazy(() => RecipeUpdateimageUrlInputSchema), z$2.string().array()]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookBookId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: z$2.union([z$2.number(), z$2.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: z$2.union([z$2.boolean(), z$2.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var MenuItemRecipeUpdateWithoutMenuItemInputSchema = z$2.object({
  joinAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  recipe: z$2.lazy(() => RecipeUpdateOneRequiredWithoutMenuItemRecipeNestedInputSchema).optional()
}).strict();
var MenuItemRecipeUncheckedUpdateWithoutMenuItemInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  joinAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var MenuItemRecipeUncheckedUpdateManyWithoutMenuItemInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  joinAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var SalesTransactionsUpdateWithoutMenuItemInputSchema = z$2.object({
  posTransactionID: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  total: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  transactionDate: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: z$2.lazy(() => RestaurantUpdateOneRequiredWithoutSalesTransactionsNestedInputSchema).optional()
}).strict();
var SalesTransactionsUncheckedUpdateWithoutMenuItemInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  posTransactionID: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  total: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  transactionDate: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var SalesTransactionsUncheckedUpdateManyWithoutMenuItemInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  posTransactionID: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  price: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  total: z$2.union([z$2.number(), z$2.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  transactionDate: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var LeftoverItemUpdateWithoutMenuItemInputSchema = z$2.object({
  date: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  reason: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: z$2.lazy(() => RestaurantUpdateOneRequiredWithoutLeftoverItemNestedInputSchema).optional(),
  recordedBy: z$2.lazy(() => UserUpdateOneRequiredWithoutLeftoverItemNestedInputSchema).optional()
}).strict();
var LeftoverItemUncheckedUpdateWithoutMenuItemInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  reason: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  recordedById: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var LeftoverItemUncheckedUpdateManyWithoutMenuItemInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  quantity: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  reason: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  recordedById: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var NutritionalRecommendationUpdateWithoutMenuItemInputSchema = z$2.object({
  recommendation: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var NutritionalRecommendationUncheckedUpdateWithoutMenuItemInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recommendation: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var NutritionalRecommendationUncheckedUpdateManyWithoutMenuItemInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recommendation: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var CustomerFeedbackUpdateWithoutMenuItemInputSchema = z$2.object({
  rating: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  comment: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  source: z$2.union([z$2.lazy(() => FeedbackSourceSchema), z$2.lazy(() => EnumFeedbackSourceFieldUpdateOperationsInputSchema)]).optional(),
  tags: z$2.union([z$2.lazy(() => CustomerFeedbackUpdatetagsInputSchema), z$2.string().array()]).optional(),
  status: z$2.union([z$2.lazy(() => FeedbackStatusSchema), z$2.lazy(() => EnumFeedbackStatusFieldUpdateOperationsInputSchema)]).optional(),
  responseText: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  respondedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: z$2.lazy(() => RestaurantUpdateOneRequiredWithoutQustomerFeedbackNestedInputSchema).optional(),
  respondedBy: z$2.lazy(() => UserUpdateOneWithoutCustomerFeedbackNestedInputSchema).optional()
}).strict();
var CustomerFeedbackUncheckedUpdateWithoutMenuItemInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  rating: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  comment: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  source: z$2.union([z$2.lazy(() => FeedbackSourceSchema), z$2.lazy(() => EnumFeedbackSourceFieldUpdateOperationsInputSchema)]).optional(),
  tags: z$2.union([z$2.lazy(() => CustomerFeedbackUpdatetagsInputSchema), z$2.string().array()]).optional(),
  status: z$2.union([z$2.lazy(() => FeedbackStatusSchema), z$2.lazy(() => EnumFeedbackStatusFieldUpdateOperationsInputSchema)]).optional(),
  responseText: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  respondedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  respondedById: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var CustomerFeedbackUncheckedUpdateManyWithoutMenuItemInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  rating: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  comment: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  source: z$2.union([z$2.lazy(() => FeedbackSourceSchema), z$2.lazy(() => EnumFeedbackSourceFieldUpdateOperationsInputSchema)]).optional(),
  tags: z$2.union([z$2.lazy(() => CustomerFeedbackUpdatetagsInputSchema), z$2.string().array()]).optional(),
  status: z$2.union([z$2.lazy(() => FeedbackStatusSchema), z$2.lazy(() => EnumFeedbackStatusFieldUpdateOperationsInputSchema)]).optional(),
  responseText: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  respondedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  respondedById: z$2.union([z$2.number().int(), z$2.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var DietaryRestrictionUpdateWithoutMenuItemsInputSchema = z$2.object({
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  icon: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  recipes: z$2.lazy(() => RecipeUpdateManyWithoutDietaryRestrictionsNestedInputSchema).optional(),
  ingredients: z$2.lazy(() => IngredientUpdateManyWithoutDietaryRestrictionNestedInputSchema).optional()
}).strict();
var DietaryRestrictionUncheckedUpdateWithoutMenuItemsInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  icon: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  recipes: z$2.lazy(() => RecipeUncheckedUpdateManyWithoutDietaryRestrictionsNestedInputSchema).optional(),
  ingredients: z$2.lazy(() => IngredientUncheckedUpdateManyWithoutDietaryRestrictionNestedInputSchema).optional()
}).strict();
var DietaryRestrictionUncheckedUpdateManyWithoutMenuItemsInputSchema = z$2.object({
  id: z$2.union([z$2.number().int(), z$2.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: z$2.union([z$2.string(), z$2.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  icon: z$2.union([z$2.string(), z$2.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: z$2.union([z$2.coerce.date(), z$2.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var SalesTransactionsFindFirstArgsSchema = z$2.object({
  select: SalesTransactionsSelectSchema.optional(),
  include: SalesTransactionsIncludeSchema.optional(),
  where: SalesTransactionsWhereInputSchema.optional(),
  orderBy: z$2.union([SalesTransactionsOrderByWithRelationInputSchema.array(), SalesTransactionsOrderByWithRelationInputSchema]).optional(),
  cursor: SalesTransactionsWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([SalesTransactionsScalarFieldEnumSchema, SalesTransactionsScalarFieldEnumSchema.array()]).optional()
}).strict();
var SalesTransactionsFindFirstOrThrowArgsSchema = z$2.object({
  select: SalesTransactionsSelectSchema.optional(),
  include: SalesTransactionsIncludeSchema.optional(),
  where: SalesTransactionsWhereInputSchema.optional(),
  orderBy: z$2.union([SalesTransactionsOrderByWithRelationInputSchema.array(), SalesTransactionsOrderByWithRelationInputSchema]).optional(),
  cursor: SalesTransactionsWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([SalesTransactionsScalarFieldEnumSchema, SalesTransactionsScalarFieldEnumSchema.array()]).optional()
}).strict();
var SalesTransactionsFindManyArgsSchema = z$2.object({
  select: SalesTransactionsSelectSchema.optional(),
  include: SalesTransactionsIncludeSchema.optional(),
  where: SalesTransactionsWhereInputSchema.optional(),
  orderBy: z$2.union([SalesTransactionsOrderByWithRelationInputSchema.array(), SalesTransactionsOrderByWithRelationInputSchema]).optional(),
  cursor: SalesTransactionsWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([SalesTransactionsScalarFieldEnumSchema, SalesTransactionsScalarFieldEnumSchema.array()]).optional()
}).strict();
var SalesTransactionsAggregateArgsSchema = z$2.object({
  where: SalesTransactionsWhereInputSchema.optional(),
  orderBy: z$2.union([SalesTransactionsOrderByWithRelationInputSchema.array(), SalesTransactionsOrderByWithRelationInputSchema]).optional(),
  cursor: SalesTransactionsWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var SalesTransactionsGroupByArgsSchema = z$2.object({
  where: SalesTransactionsWhereInputSchema.optional(),
  orderBy: z$2.union([SalesTransactionsOrderByWithAggregationInputSchema.array(), SalesTransactionsOrderByWithAggregationInputSchema]).optional(),
  by: SalesTransactionsScalarFieldEnumSchema.array(),
  having: SalesTransactionsScalarWhereWithAggregatesInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var SalesTransactionsFindUniqueArgsSchema = z$2.object({
  select: SalesTransactionsSelectSchema.optional(),
  include: SalesTransactionsIncludeSchema.optional(),
  where: SalesTransactionsWhereUniqueInputSchema
}).strict();
var SalesTransactionsFindUniqueOrThrowArgsSchema = z$2.object({
  select: SalesTransactionsSelectSchema.optional(),
  include: SalesTransactionsIncludeSchema.optional(),
  where: SalesTransactionsWhereUniqueInputSchema
}).strict();
var MenuCategoryFindFirstArgsSchema = z$2.object({
  select: MenuCategorySelectSchema.optional(),
  include: MenuCategoryIncludeSchema.optional(),
  where: MenuCategoryWhereInputSchema.optional(),
  orderBy: z$2.union([MenuCategoryOrderByWithRelationInputSchema.array(), MenuCategoryOrderByWithRelationInputSchema]).optional(),
  cursor: MenuCategoryWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([MenuCategoryScalarFieldEnumSchema, MenuCategoryScalarFieldEnumSchema.array()]).optional()
}).strict();
var MenuCategoryFindFirstOrThrowArgsSchema = z$2.object({
  select: MenuCategorySelectSchema.optional(),
  include: MenuCategoryIncludeSchema.optional(),
  where: MenuCategoryWhereInputSchema.optional(),
  orderBy: z$2.union([MenuCategoryOrderByWithRelationInputSchema.array(), MenuCategoryOrderByWithRelationInputSchema]).optional(),
  cursor: MenuCategoryWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([MenuCategoryScalarFieldEnumSchema, MenuCategoryScalarFieldEnumSchema.array()]).optional()
}).strict();
var MenuCategoryFindManyArgsSchema = z$2.object({
  select: MenuCategorySelectSchema.optional(),
  include: MenuCategoryIncludeSchema.optional(),
  where: MenuCategoryWhereInputSchema.optional(),
  orderBy: z$2.union([MenuCategoryOrderByWithRelationInputSchema.array(), MenuCategoryOrderByWithRelationInputSchema]).optional(),
  cursor: MenuCategoryWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([MenuCategoryScalarFieldEnumSchema, MenuCategoryScalarFieldEnumSchema.array()]).optional()
}).strict();
var MenuCategoryAggregateArgsSchema = z$2.object({
  where: MenuCategoryWhereInputSchema.optional(),
  orderBy: z$2.union([MenuCategoryOrderByWithRelationInputSchema.array(), MenuCategoryOrderByWithRelationInputSchema]).optional(),
  cursor: MenuCategoryWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var MenuCategoryGroupByArgsSchema = z$2.object({
  where: MenuCategoryWhereInputSchema.optional(),
  orderBy: z$2.union([MenuCategoryOrderByWithAggregationInputSchema.array(), MenuCategoryOrderByWithAggregationInputSchema]).optional(),
  by: MenuCategoryScalarFieldEnumSchema.array(),
  having: MenuCategoryScalarWhereWithAggregatesInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var MenuCategoryFindUniqueArgsSchema = z$2.object({
  select: MenuCategorySelectSchema.optional(),
  include: MenuCategoryIncludeSchema.optional(),
  where: MenuCategoryWhereUniqueInputSchema
}).strict();
var MenuCategoryFindUniqueOrThrowArgsSchema = z$2.object({
  select: MenuCategorySelectSchema.optional(),
  include: MenuCategoryIncludeSchema.optional(),
  where: MenuCategoryWhereUniqueInputSchema
}).strict();
var RecipeVersionFindFirstArgsSchema = z$2.object({
  select: RecipeVersionSelectSchema.optional(),
  include: RecipeVersionIncludeSchema.optional(),
  where: RecipeVersionWhereInputSchema.optional(),
  orderBy: z$2.union([RecipeVersionOrderByWithRelationInputSchema.array(), RecipeVersionOrderByWithRelationInputSchema]).optional(),
  cursor: RecipeVersionWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([RecipeVersionScalarFieldEnumSchema, RecipeVersionScalarFieldEnumSchema.array()]).optional()
}).strict();
var RecipeVersionFindFirstOrThrowArgsSchema = z$2.object({
  select: RecipeVersionSelectSchema.optional(),
  include: RecipeVersionIncludeSchema.optional(),
  where: RecipeVersionWhereInputSchema.optional(),
  orderBy: z$2.union([RecipeVersionOrderByWithRelationInputSchema.array(), RecipeVersionOrderByWithRelationInputSchema]).optional(),
  cursor: RecipeVersionWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([RecipeVersionScalarFieldEnumSchema, RecipeVersionScalarFieldEnumSchema.array()]).optional()
}).strict();
var RecipeVersionFindManyArgsSchema = z$2.object({
  select: RecipeVersionSelectSchema.optional(),
  include: RecipeVersionIncludeSchema.optional(),
  where: RecipeVersionWhereInputSchema.optional(),
  orderBy: z$2.union([RecipeVersionOrderByWithRelationInputSchema.array(), RecipeVersionOrderByWithRelationInputSchema]).optional(),
  cursor: RecipeVersionWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([RecipeVersionScalarFieldEnumSchema, RecipeVersionScalarFieldEnumSchema.array()]).optional()
}).strict();
var RecipeVersionAggregateArgsSchema = z$2.object({
  where: RecipeVersionWhereInputSchema.optional(),
  orderBy: z$2.union([RecipeVersionOrderByWithRelationInputSchema.array(), RecipeVersionOrderByWithRelationInputSchema]).optional(),
  cursor: RecipeVersionWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var RecipeVersionGroupByArgsSchema = z$2.object({
  where: RecipeVersionWhereInputSchema.optional(),
  orderBy: z$2.union([RecipeVersionOrderByWithAggregationInputSchema.array(), RecipeVersionOrderByWithAggregationInputSchema]).optional(),
  by: RecipeVersionScalarFieldEnumSchema.array(),
  having: RecipeVersionScalarWhereWithAggregatesInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var RecipeVersionFindUniqueArgsSchema = z$2.object({
  select: RecipeVersionSelectSchema.optional(),
  include: RecipeVersionIncludeSchema.optional(),
  where: RecipeVersionWhereUniqueInputSchema
}).strict();
var RecipeVersionFindUniqueOrThrowArgsSchema = z$2.object({
  select: RecipeVersionSelectSchema.optional(),
  include: RecipeVersionIncludeSchema.optional(),
  where: RecipeVersionWhereUniqueInputSchema
}).strict();
var EquipmentFindFirstArgsSchema = z$2.object({
  select: EquipmentSelectSchema.optional(),
  include: EquipmentIncludeSchema.optional(),
  where: EquipmentWhereInputSchema.optional(),
  orderBy: z$2.union([EquipmentOrderByWithRelationInputSchema.array(), EquipmentOrderByWithRelationInputSchema]).optional(),
  cursor: EquipmentWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([EquipmentScalarFieldEnumSchema, EquipmentScalarFieldEnumSchema.array()]).optional()
}).strict();
var EquipmentFindFirstOrThrowArgsSchema = z$2.object({
  select: EquipmentSelectSchema.optional(),
  include: EquipmentIncludeSchema.optional(),
  where: EquipmentWhereInputSchema.optional(),
  orderBy: z$2.union([EquipmentOrderByWithRelationInputSchema.array(), EquipmentOrderByWithRelationInputSchema]).optional(),
  cursor: EquipmentWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([EquipmentScalarFieldEnumSchema, EquipmentScalarFieldEnumSchema.array()]).optional()
}).strict();
var EquipmentFindManyArgsSchema = z$2.object({
  select: EquipmentSelectSchema.optional(),
  include: EquipmentIncludeSchema.optional(),
  where: EquipmentWhereInputSchema.optional(),
  orderBy: z$2.union([EquipmentOrderByWithRelationInputSchema.array(), EquipmentOrderByWithRelationInputSchema]).optional(),
  cursor: EquipmentWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([EquipmentScalarFieldEnumSchema, EquipmentScalarFieldEnumSchema.array()]).optional()
}).strict();
var EquipmentAggregateArgsSchema = z$2.object({
  where: EquipmentWhereInputSchema.optional(),
  orderBy: z$2.union([EquipmentOrderByWithRelationInputSchema.array(), EquipmentOrderByWithRelationInputSchema]).optional(),
  cursor: EquipmentWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var EquipmentGroupByArgsSchema = z$2.object({
  where: EquipmentWhereInputSchema.optional(),
  orderBy: z$2.union([EquipmentOrderByWithAggregationInputSchema.array(), EquipmentOrderByWithAggregationInputSchema]).optional(),
  by: EquipmentScalarFieldEnumSchema.array(),
  having: EquipmentScalarWhereWithAggregatesInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var EquipmentFindUniqueArgsSchema = z$2.object({
  select: EquipmentSelectSchema.optional(),
  include: EquipmentIncludeSchema.optional(),
  where: EquipmentWhereUniqueInputSchema
}).strict();
var EquipmentFindUniqueOrThrowArgsSchema = z$2.object({
  select: EquipmentSelectSchema.optional(),
  include: EquipmentIncludeSchema.optional(),
  where: EquipmentWhereUniqueInputSchema
}).strict();
var RecipeEquipmentFindFirstArgsSchema = z$2.object({
  select: RecipeEquipmentSelectSchema.optional(),
  include: RecipeEquipmentIncludeSchema.optional(),
  where: RecipeEquipmentWhereInputSchema.optional(),
  orderBy: z$2.union([RecipeEquipmentOrderByWithRelationInputSchema.array(), RecipeEquipmentOrderByWithRelationInputSchema]).optional(),
  cursor: RecipeEquipmentWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([RecipeEquipmentScalarFieldEnumSchema, RecipeEquipmentScalarFieldEnumSchema.array()]).optional()
}).strict();
var RecipeEquipmentFindFirstOrThrowArgsSchema = z$2.object({
  select: RecipeEquipmentSelectSchema.optional(),
  include: RecipeEquipmentIncludeSchema.optional(),
  where: RecipeEquipmentWhereInputSchema.optional(),
  orderBy: z$2.union([RecipeEquipmentOrderByWithRelationInputSchema.array(), RecipeEquipmentOrderByWithRelationInputSchema]).optional(),
  cursor: RecipeEquipmentWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([RecipeEquipmentScalarFieldEnumSchema, RecipeEquipmentScalarFieldEnumSchema.array()]).optional()
}).strict();
var RecipeEquipmentFindManyArgsSchema = z$2.object({
  select: RecipeEquipmentSelectSchema.optional(),
  include: RecipeEquipmentIncludeSchema.optional(),
  where: RecipeEquipmentWhereInputSchema.optional(),
  orderBy: z$2.union([RecipeEquipmentOrderByWithRelationInputSchema.array(), RecipeEquipmentOrderByWithRelationInputSchema]).optional(),
  cursor: RecipeEquipmentWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([RecipeEquipmentScalarFieldEnumSchema, RecipeEquipmentScalarFieldEnumSchema.array()]).optional()
}).strict();
var RecipeEquipmentAggregateArgsSchema = z$2.object({
  where: RecipeEquipmentWhereInputSchema.optional(),
  orderBy: z$2.union([RecipeEquipmentOrderByWithRelationInputSchema.array(), RecipeEquipmentOrderByWithRelationInputSchema]).optional(),
  cursor: RecipeEquipmentWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var RecipeEquipmentGroupByArgsSchema = z$2.object({
  where: RecipeEquipmentWhereInputSchema.optional(),
  orderBy: z$2.union([RecipeEquipmentOrderByWithAggregationInputSchema.array(), RecipeEquipmentOrderByWithAggregationInputSchema]).optional(),
  by: RecipeEquipmentScalarFieldEnumSchema.array(),
  having: RecipeEquipmentScalarWhereWithAggregatesInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var RecipeEquipmentFindUniqueArgsSchema = z$2.object({
  select: RecipeEquipmentSelectSchema.optional(),
  include: RecipeEquipmentIncludeSchema.optional(),
  where: RecipeEquipmentWhereUniqueInputSchema
}).strict();
var RecipeEquipmentFindUniqueOrThrowArgsSchema = z$2.object({
  select: RecipeEquipmentSelectSchema.optional(),
  include: RecipeEquipmentIncludeSchema.optional(),
  where: RecipeEquipmentWhereUniqueInputSchema
}).strict();
var MaintenanceLogFindFirstArgsSchema = z$2.object({
  select: MaintenanceLogSelectSchema.optional(),
  include: MaintenanceLogIncludeSchema.optional(),
  where: MaintenanceLogWhereInputSchema.optional(),
  orderBy: z$2.union([MaintenanceLogOrderByWithRelationInputSchema.array(), MaintenanceLogOrderByWithRelationInputSchema]).optional(),
  cursor: MaintenanceLogWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([MaintenanceLogScalarFieldEnumSchema, MaintenanceLogScalarFieldEnumSchema.array()]).optional()
}).strict();
var MaintenanceLogFindFirstOrThrowArgsSchema = z$2.object({
  select: MaintenanceLogSelectSchema.optional(),
  include: MaintenanceLogIncludeSchema.optional(),
  where: MaintenanceLogWhereInputSchema.optional(),
  orderBy: z$2.union([MaintenanceLogOrderByWithRelationInputSchema.array(), MaintenanceLogOrderByWithRelationInputSchema]).optional(),
  cursor: MaintenanceLogWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([MaintenanceLogScalarFieldEnumSchema, MaintenanceLogScalarFieldEnumSchema.array()]).optional()
}).strict();
var MaintenanceLogFindManyArgsSchema = z$2.object({
  select: MaintenanceLogSelectSchema.optional(),
  include: MaintenanceLogIncludeSchema.optional(),
  where: MaintenanceLogWhereInputSchema.optional(),
  orderBy: z$2.union([MaintenanceLogOrderByWithRelationInputSchema.array(), MaintenanceLogOrderByWithRelationInputSchema]).optional(),
  cursor: MaintenanceLogWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([MaintenanceLogScalarFieldEnumSchema, MaintenanceLogScalarFieldEnumSchema.array()]).optional()
}).strict();
var MaintenanceLogAggregateArgsSchema = z$2.object({
  where: MaintenanceLogWhereInputSchema.optional(),
  orderBy: z$2.union([MaintenanceLogOrderByWithRelationInputSchema.array(), MaintenanceLogOrderByWithRelationInputSchema]).optional(),
  cursor: MaintenanceLogWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var MaintenanceLogGroupByArgsSchema = z$2.object({
  where: MaintenanceLogWhereInputSchema.optional(),
  orderBy: z$2.union([MaintenanceLogOrderByWithAggregationInputSchema.array(), MaintenanceLogOrderByWithAggregationInputSchema]).optional(),
  by: MaintenanceLogScalarFieldEnumSchema.array(),
  having: MaintenanceLogScalarWhereWithAggregatesInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var MaintenanceLogFindUniqueArgsSchema = z$2.object({
  select: MaintenanceLogSelectSchema.optional(),
  include: MaintenanceLogIncludeSchema.optional(),
  where: MaintenanceLogWhereUniqueInputSchema
}).strict();
var MaintenanceLogFindUniqueOrThrowArgsSchema = z$2.object({
  select: MaintenanceLogSelectSchema.optional(),
  include: MaintenanceLogIncludeSchema.optional(),
  where: MaintenanceLogWhereUniqueInputSchema
}).strict();
var QualityChecklistFindFirstArgsSchema = z$2.object({
  select: QualityChecklistSelectSchema.optional(),
  include: QualityChecklistIncludeSchema.optional(),
  where: QualityChecklistWhereInputSchema.optional(),
  orderBy: z$2.union([QualityChecklistOrderByWithRelationInputSchema.array(), QualityChecklistOrderByWithRelationInputSchema]).optional(),
  cursor: QualityChecklistWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([QualityChecklistScalarFieldEnumSchema, QualityChecklistScalarFieldEnumSchema.array()]).optional()
}).strict();
var QualityChecklistFindFirstOrThrowArgsSchema = z$2.object({
  select: QualityChecklistSelectSchema.optional(),
  include: QualityChecklistIncludeSchema.optional(),
  where: QualityChecklistWhereInputSchema.optional(),
  orderBy: z$2.union([QualityChecklistOrderByWithRelationInputSchema.array(), QualityChecklistOrderByWithRelationInputSchema]).optional(),
  cursor: QualityChecklistWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([QualityChecklistScalarFieldEnumSchema, QualityChecklistScalarFieldEnumSchema.array()]).optional()
}).strict();
var QualityChecklistFindManyArgsSchema = z$2.object({
  select: QualityChecklistSelectSchema.optional(),
  include: QualityChecklistIncludeSchema.optional(),
  where: QualityChecklistWhereInputSchema.optional(),
  orderBy: z$2.union([QualityChecklistOrderByWithRelationInputSchema.array(), QualityChecklistOrderByWithRelationInputSchema]).optional(),
  cursor: QualityChecklistWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([QualityChecklistScalarFieldEnumSchema, QualityChecklistScalarFieldEnumSchema.array()]).optional()
}).strict();
var QualityChecklistAggregateArgsSchema = z$2.object({
  where: QualityChecklistWhereInputSchema.optional(),
  orderBy: z$2.union([QualityChecklistOrderByWithRelationInputSchema.array(), QualityChecklistOrderByWithRelationInputSchema]).optional(),
  cursor: QualityChecklistWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var QualityChecklistGroupByArgsSchema = z$2.object({
  where: QualityChecklistWhereInputSchema.optional(),
  orderBy: z$2.union([QualityChecklistOrderByWithAggregationInputSchema.array(), QualityChecklistOrderByWithAggregationInputSchema]).optional(),
  by: QualityChecklistScalarFieldEnumSchema.array(),
  having: QualityChecklistScalarWhereWithAggregatesInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var QualityChecklistFindUniqueArgsSchema = z$2.object({
  select: QualityChecklistSelectSchema.optional(),
  include: QualityChecklistIncludeSchema.optional(),
  where: QualityChecklistWhereUniqueInputSchema
}).strict();
var QualityChecklistFindUniqueOrThrowArgsSchema = z$2.object({
  select: QualityChecklistSelectSchema.optional(),
  include: QualityChecklistIncludeSchema.optional(),
  where: QualityChecklistWhereUniqueInputSchema
}).strict();
var ChecklistItemFindFirstArgsSchema = z$2.object({
  select: ChecklistItemSelectSchema.optional(),
  include: ChecklistItemIncludeSchema.optional(),
  where: ChecklistItemWhereInputSchema.optional(),
  orderBy: z$2.union([ChecklistItemOrderByWithRelationInputSchema.array(), ChecklistItemOrderByWithRelationInputSchema]).optional(),
  cursor: ChecklistItemWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([ChecklistItemScalarFieldEnumSchema, ChecklistItemScalarFieldEnumSchema.array()]).optional()
}).strict();
var ChecklistItemFindFirstOrThrowArgsSchema = z$2.object({
  select: ChecklistItemSelectSchema.optional(),
  include: ChecklistItemIncludeSchema.optional(),
  where: ChecklistItemWhereInputSchema.optional(),
  orderBy: z$2.union([ChecklistItemOrderByWithRelationInputSchema.array(), ChecklistItemOrderByWithRelationInputSchema]).optional(),
  cursor: ChecklistItemWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([ChecklistItemScalarFieldEnumSchema, ChecklistItemScalarFieldEnumSchema.array()]).optional()
}).strict();
var ChecklistItemFindManyArgsSchema = z$2.object({
  select: ChecklistItemSelectSchema.optional(),
  include: ChecklistItemIncludeSchema.optional(),
  where: ChecklistItemWhereInputSchema.optional(),
  orderBy: z$2.union([ChecklistItemOrderByWithRelationInputSchema.array(), ChecklistItemOrderByWithRelationInputSchema]).optional(),
  cursor: ChecklistItemWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([ChecklistItemScalarFieldEnumSchema, ChecklistItemScalarFieldEnumSchema.array()]).optional()
}).strict();
var ChecklistItemAggregateArgsSchema = z$2.object({
  where: ChecklistItemWhereInputSchema.optional(),
  orderBy: z$2.union([ChecklistItemOrderByWithRelationInputSchema.array(), ChecklistItemOrderByWithRelationInputSchema]).optional(),
  cursor: ChecklistItemWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var ChecklistItemGroupByArgsSchema = z$2.object({
  where: ChecklistItemWhereInputSchema.optional(),
  orderBy: z$2.union([ChecklistItemOrderByWithAggregationInputSchema.array(), ChecklistItemOrderByWithAggregationInputSchema]).optional(),
  by: ChecklistItemScalarFieldEnumSchema.array(),
  having: ChecklistItemScalarWhereWithAggregatesInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var ChecklistItemFindUniqueArgsSchema = z$2.object({
  select: ChecklistItemSelectSchema.optional(),
  include: ChecklistItemIncludeSchema.optional(),
  where: ChecklistItemWhereUniqueInputSchema
}).strict();
var ChecklistItemFindUniqueOrThrowArgsSchema = z$2.object({
  select: ChecklistItemSelectSchema.optional(),
  include: ChecklistItemIncludeSchema.optional(),
  where: ChecklistItemWhereUniqueInputSchema
}).strict();
var ChecklistCompleteFindFirstArgsSchema = z$2.object({
  select: ChecklistCompleteSelectSchema.optional(),
  include: ChecklistCompleteIncludeSchema.optional(),
  where: ChecklistCompleteWhereInputSchema.optional(),
  orderBy: z$2.union([ChecklistCompleteOrderByWithRelationInputSchema.array(), ChecklistCompleteOrderByWithRelationInputSchema]).optional(),
  cursor: ChecklistCompleteWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([ChecklistCompleteScalarFieldEnumSchema, ChecklistCompleteScalarFieldEnumSchema.array()]).optional()
}).strict();
var ChecklistCompleteFindFirstOrThrowArgsSchema = z$2.object({
  select: ChecklistCompleteSelectSchema.optional(),
  include: ChecklistCompleteIncludeSchema.optional(),
  where: ChecklistCompleteWhereInputSchema.optional(),
  orderBy: z$2.union([ChecklistCompleteOrderByWithRelationInputSchema.array(), ChecklistCompleteOrderByWithRelationInputSchema]).optional(),
  cursor: ChecklistCompleteWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([ChecklistCompleteScalarFieldEnumSchema, ChecklistCompleteScalarFieldEnumSchema.array()]).optional()
}).strict();
var ChecklistCompleteFindManyArgsSchema = z$2.object({
  select: ChecklistCompleteSelectSchema.optional(),
  include: ChecklistCompleteIncludeSchema.optional(),
  where: ChecklistCompleteWhereInputSchema.optional(),
  orderBy: z$2.union([ChecklistCompleteOrderByWithRelationInputSchema.array(), ChecklistCompleteOrderByWithRelationInputSchema]).optional(),
  cursor: ChecklistCompleteWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([ChecklistCompleteScalarFieldEnumSchema, ChecklistCompleteScalarFieldEnumSchema.array()]).optional()
}).strict();
var ChecklistCompleteAggregateArgsSchema = z$2.object({
  where: ChecklistCompleteWhereInputSchema.optional(),
  orderBy: z$2.union([ChecklistCompleteOrderByWithRelationInputSchema.array(), ChecklistCompleteOrderByWithRelationInputSchema]).optional(),
  cursor: ChecklistCompleteWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var ChecklistCompleteGroupByArgsSchema = z$2.object({
  where: ChecklistCompleteWhereInputSchema.optional(),
  orderBy: z$2.union([ChecklistCompleteOrderByWithAggregationInputSchema.array(), ChecklistCompleteOrderByWithAggregationInputSchema]).optional(),
  by: ChecklistCompleteScalarFieldEnumSchema.array(),
  having: ChecklistCompleteScalarWhereWithAggregatesInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var ChecklistCompleteFindUniqueArgsSchema = z$2.object({
  select: ChecklistCompleteSelectSchema.optional(),
  include: ChecklistCompleteIncludeSchema.optional(),
  where: ChecklistCompleteWhereUniqueInputSchema
}).strict();
var ChecklistCompleteFindUniqueOrThrowArgsSchema = z$2.object({
  select: ChecklistCompleteSelectSchema.optional(),
  include: ChecklistCompleteIncludeSchema.optional(),
  where: ChecklistCompleteWhereUniqueInputSchema
}).strict();
var ChecklistItemCompleteFindFirstArgsSchema = z$2.object({
  select: ChecklistItemCompleteSelectSchema.optional(),
  include: ChecklistItemCompleteIncludeSchema.optional(),
  where: ChecklistItemCompleteWhereInputSchema.optional(),
  orderBy: z$2.union([ChecklistItemCompleteOrderByWithRelationInputSchema.array(), ChecklistItemCompleteOrderByWithRelationInputSchema]).optional(),
  cursor: ChecklistItemCompleteWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([ChecklistItemCompleteScalarFieldEnumSchema, ChecklistItemCompleteScalarFieldEnumSchema.array()]).optional()
}).strict();
var ChecklistItemCompleteFindFirstOrThrowArgsSchema = z$2.object({
  select: ChecklistItemCompleteSelectSchema.optional(),
  include: ChecklistItemCompleteIncludeSchema.optional(),
  where: ChecklistItemCompleteWhereInputSchema.optional(),
  orderBy: z$2.union([ChecklistItemCompleteOrderByWithRelationInputSchema.array(), ChecklistItemCompleteOrderByWithRelationInputSchema]).optional(),
  cursor: ChecklistItemCompleteWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([ChecklistItemCompleteScalarFieldEnumSchema, ChecklistItemCompleteScalarFieldEnumSchema.array()]).optional()
}).strict();
var ChecklistItemCompleteFindManyArgsSchema = z$2.object({
  select: ChecklistItemCompleteSelectSchema.optional(),
  include: ChecklistItemCompleteIncludeSchema.optional(),
  where: ChecklistItemCompleteWhereInputSchema.optional(),
  orderBy: z$2.union([ChecklistItemCompleteOrderByWithRelationInputSchema.array(), ChecklistItemCompleteOrderByWithRelationInputSchema]).optional(),
  cursor: ChecklistItemCompleteWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([ChecklistItemCompleteScalarFieldEnumSchema, ChecklistItemCompleteScalarFieldEnumSchema.array()]).optional()
}).strict();
var ChecklistItemCompleteAggregateArgsSchema = z$2.object({
  where: ChecklistItemCompleteWhereInputSchema.optional(),
  orderBy: z$2.union([ChecklistItemCompleteOrderByWithRelationInputSchema.array(), ChecklistItemCompleteOrderByWithRelationInputSchema]).optional(),
  cursor: ChecklistItemCompleteWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var ChecklistItemCompleteGroupByArgsSchema = z$2.object({
  where: ChecklistItemCompleteWhereInputSchema.optional(),
  orderBy: z$2.union([ChecklistItemCompleteOrderByWithAggregationInputSchema.array(), ChecklistItemCompleteOrderByWithAggregationInputSchema]).optional(),
  by: ChecklistItemCompleteScalarFieldEnumSchema.array(),
  having: ChecklistItemCompleteScalarWhereWithAggregatesInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var ChecklistItemCompleteFindUniqueArgsSchema = z$2.object({
  select: ChecklistItemCompleteSelectSchema.optional(),
  include: ChecklistItemCompleteIncludeSchema.optional(),
  where: ChecklistItemCompleteWhereUniqueInputSchema
}).strict();
var ChecklistItemCompleteFindUniqueOrThrowArgsSchema = z$2.object({
  select: ChecklistItemCompleteSelectSchema.optional(),
  include: ChecklistItemCompleteIncludeSchema.optional(),
  where: ChecklistItemCompleteWhereUniqueInputSchema
}).strict();
var SupplierPriceHistoryFindFirstArgsSchema = z$2.object({
  select: SupplierPriceHistorySelectSchema.optional(),
  include: SupplierPriceHistoryIncludeSchema.optional(),
  where: SupplierPriceHistoryWhereInputSchema.optional(),
  orderBy: z$2.union([SupplierPriceHistoryOrderByWithRelationInputSchema.array(), SupplierPriceHistoryOrderByWithRelationInputSchema]).optional(),
  cursor: SupplierPriceHistoryWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([SupplierPriceHistoryScalarFieldEnumSchema, SupplierPriceHistoryScalarFieldEnumSchema.array()]).optional()
}).strict();
var SupplierPriceHistoryFindFirstOrThrowArgsSchema = z$2.object({
  select: SupplierPriceHistorySelectSchema.optional(),
  include: SupplierPriceHistoryIncludeSchema.optional(),
  where: SupplierPriceHistoryWhereInputSchema.optional(),
  orderBy: z$2.union([SupplierPriceHistoryOrderByWithRelationInputSchema.array(), SupplierPriceHistoryOrderByWithRelationInputSchema]).optional(),
  cursor: SupplierPriceHistoryWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([SupplierPriceHistoryScalarFieldEnumSchema, SupplierPriceHistoryScalarFieldEnumSchema.array()]).optional()
}).strict();
var SupplierPriceHistoryFindManyArgsSchema = z$2.object({
  select: SupplierPriceHistorySelectSchema.optional(),
  include: SupplierPriceHistoryIncludeSchema.optional(),
  where: SupplierPriceHistoryWhereInputSchema.optional(),
  orderBy: z$2.union([SupplierPriceHistoryOrderByWithRelationInputSchema.array(), SupplierPriceHistoryOrderByWithRelationInputSchema]).optional(),
  cursor: SupplierPriceHistoryWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([SupplierPriceHistoryScalarFieldEnumSchema, SupplierPriceHistoryScalarFieldEnumSchema.array()]).optional()
}).strict();
var SupplierPriceHistoryAggregateArgsSchema = z$2.object({
  where: SupplierPriceHistoryWhereInputSchema.optional(),
  orderBy: z$2.union([SupplierPriceHistoryOrderByWithRelationInputSchema.array(), SupplierPriceHistoryOrderByWithRelationInputSchema]).optional(),
  cursor: SupplierPriceHistoryWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var SupplierPriceHistoryGroupByArgsSchema = z$2.object({
  where: SupplierPriceHistoryWhereInputSchema.optional(),
  orderBy: z$2.union([SupplierPriceHistoryOrderByWithAggregationInputSchema.array(), SupplierPriceHistoryOrderByWithAggregationInputSchema]).optional(),
  by: SupplierPriceHistoryScalarFieldEnumSchema.array(),
  having: SupplierPriceHistoryScalarWhereWithAggregatesInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var SupplierPriceHistoryFindUniqueArgsSchema = z$2.object({
  select: SupplierPriceHistorySelectSchema.optional(),
  include: SupplierPriceHistoryIncludeSchema.optional(),
  where: SupplierPriceHistoryWhereUniqueInputSchema
}).strict();
var SupplierPriceHistoryFindUniqueOrThrowArgsSchema = z$2.object({
  select: SupplierPriceHistorySelectSchema.optional(),
  include: SupplierPriceHistoryIncludeSchema.optional(),
  where: SupplierPriceHistoryWhereUniqueInputSchema
}).strict();
var CustomerFeedbackFindFirstArgsSchema = z$2.object({
  select: CustomerFeedbackSelectSchema.optional(),
  include: CustomerFeedbackIncludeSchema.optional(),
  where: CustomerFeedbackWhereInputSchema.optional(),
  orderBy: z$2.union([CustomerFeedbackOrderByWithRelationInputSchema.array(), CustomerFeedbackOrderByWithRelationInputSchema]).optional(),
  cursor: CustomerFeedbackWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([CustomerFeedbackScalarFieldEnumSchema, CustomerFeedbackScalarFieldEnumSchema.array()]).optional()
}).strict();
var CustomerFeedbackFindFirstOrThrowArgsSchema = z$2.object({
  select: CustomerFeedbackSelectSchema.optional(),
  include: CustomerFeedbackIncludeSchema.optional(),
  where: CustomerFeedbackWhereInputSchema.optional(),
  orderBy: z$2.union([CustomerFeedbackOrderByWithRelationInputSchema.array(), CustomerFeedbackOrderByWithRelationInputSchema]).optional(),
  cursor: CustomerFeedbackWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([CustomerFeedbackScalarFieldEnumSchema, CustomerFeedbackScalarFieldEnumSchema.array()]).optional()
}).strict();
var CustomerFeedbackFindManyArgsSchema = z$2.object({
  select: CustomerFeedbackSelectSchema.optional(),
  include: CustomerFeedbackIncludeSchema.optional(),
  where: CustomerFeedbackWhereInputSchema.optional(),
  orderBy: z$2.union([CustomerFeedbackOrderByWithRelationInputSchema.array(), CustomerFeedbackOrderByWithRelationInputSchema]).optional(),
  cursor: CustomerFeedbackWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([CustomerFeedbackScalarFieldEnumSchema, CustomerFeedbackScalarFieldEnumSchema.array()]).optional()
}).strict();
var CustomerFeedbackAggregateArgsSchema = z$2.object({
  where: CustomerFeedbackWhereInputSchema.optional(),
  orderBy: z$2.union([CustomerFeedbackOrderByWithRelationInputSchema.array(), CustomerFeedbackOrderByWithRelationInputSchema]).optional(),
  cursor: CustomerFeedbackWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var CustomerFeedbackGroupByArgsSchema = z$2.object({
  where: CustomerFeedbackWhereInputSchema.optional(),
  orderBy: z$2.union([CustomerFeedbackOrderByWithAggregationInputSchema.array(), CustomerFeedbackOrderByWithAggregationInputSchema]).optional(),
  by: CustomerFeedbackScalarFieldEnumSchema.array(),
  having: CustomerFeedbackScalarWhereWithAggregatesInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var CustomerFeedbackFindUniqueArgsSchema = z$2.object({
  select: CustomerFeedbackSelectSchema.optional(),
  include: CustomerFeedbackIncludeSchema.optional(),
  where: CustomerFeedbackWhereUniqueInputSchema
}).strict();
var CustomerFeedbackFindUniqueOrThrowArgsSchema = z$2.object({
  select: CustomerFeedbackSelectSchema.optional(),
  include: CustomerFeedbackIncludeSchema.optional(),
  where: CustomerFeedbackWhereUniqueInputSchema
}).strict();
var DietaryRestrictionFindFirstArgsSchema = z$2.object({
  select: DietaryRestrictionSelectSchema.optional(),
  include: DietaryRestrictionIncludeSchema.optional(),
  where: DietaryRestrictionWhereInputSchema.optional(),
  orderBy: z$2.union([DietaryRestrictionOrderByWithRelationInputSchema.array(), DietaryRestrictionOrderByWithRelationInputSchema]).optional(),
  cursor: DietaryRestrictionWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([DietaryRestrictionScalarFieldEnumSchema, DietaryRestrictionScalarFieldEnumSchema.array()]).optional()
}).strict();
var DietaryRestrictionFindFirstOrThrowArgsSchema = z$2.object({
  select: DietaryRestrictionSelectSchema.optional(),
  include: DietaryRestrictionIncludeSchema.optional(),
  where: DietaryRestrictionWhereInputSchema.optional(),
  orderBy: z$2.union([DietaryRestrictionOrderByWithRelationInputSchema.array(), DietaryRestrictionOrderByWithRelationInputSchema]).optional(),
  cursor: DietaryRestrictionWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([DietaryRestrictionScalarFieldEnumSchema, DietaryRestrictionScalarFieldEnumSchema.array()]).optional()
}).strict();
var DietaryRestrictionFindManyArgsSchema = z$2.object({
  select: DietaryRestrictionSelectSchema.optional(),
  include: DietaryRestrictionIncludeSchema.optional(),
  where: DietaryRestrictionWhereInputSchema.optional(),
  orderBy: z$2.union([DietaryRestrictionOrderByWithRelationInputSchema.array(), DietaryRestrictionOrderByWithRelationInputSchema]).optional(),
  cursor: DietaryRestrictionWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([DietaryRestrictionScalarFieldEnumSchema, DietaryRestrictionScalarFieldEnumSchema.array()]).optional()
}).strict();
var DietaryRestrictionAggregateArgsSchema = z$2.object({
  where: DietaryRestrictionWhereInputSchema.optional(),
  orderBy: z$2.union([DietaryRestrictionOrderByWithRelationInputSchema.array(), DietaryRestrictionOrderByWithRelationInputSchema]).optional(),
  cursor: DietaryRestrictionWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var DietaryRestrictionGroupByArgsSchema = z$2.object({
  where: DietaryRestrictionWhereInputSchema.optional(),
  orderBy: z$2.union([DietaryRestrictionOrderByWithAggregationInputSchema.array(), DietaryRestrictionOrderByWithAggregationInputSchema]).optional(),
  by: DietaryRestrictionScalarFieldEnumSchema.array(),
  having: DietaryRestrictionScalarWhereWithAggregatesInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var DietaryRestrictionFindUniqueArgsSchema = z$2.object({
  select: DietaryRestrictionSelectSchema.optional(),
  include: DietaryRestrictionIncludeSchema.optional(),
  where: DietaryRestrictionWhereUniqueInputSchema
}).strict();
var DietaryRestrictionFindUniqueOrThrowArgsSchema = z$2.object({
  select: DietaryRestrictionSelectSchema.optional(),
  include: DietaryRestrictionIncludeSchema.optional(),
  where: DietaryRestrictionWhereUniqueInputSchema
}).strict();
var RecipeTagFindFirstArgsSchema = z$2.object({
  select: RecipeTagSelectSchema.optional(),
  include: RecipeTagIncludeSchema.optional(),
  where: RecipeTagWhereInputSchema.optional(),
  orderBy: z$2.union([RecipeTagOrderByWithRelationInputSchema.array(), RecipeTagOrderByWithRelationInputSchema]).optional(),
  cursor: RecipeTagWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([RecipeTagScalarFieldEnumSchema, RecipeTagScalarFieldEnumSchema.array()]).optional()
}).strict();
var RecipeTagFindFirstOrThrowArgsSchema = z$2.object({
  select: RecipeTagSelectSchema.optional(),
  include: RecipeTagIncludeSchema.optional(),
  where: RecipeTagWhereInputSchema.optional(),
  orderBy: z$2.union([RecipeTagOrderByWithRelationInputSchema.array(), RecipeTagOrderByWithRelationInputSchema]).optional(),
  cursor: RecipeTagWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([RecipeTagScalarFieldEnumSchema, RecipeTagScalarFieldEnumSchema.array()]).optional()
}).strict();
var RecipeTagFindManyArgsSchema = z$2.object({
  select: RecipeTagSelectSchema.optional(),
  include: RecipeTagIncludeSchema.optional(),
  where: RecipeTagWhereInputSchema.optional(),
  orderBy: z$2.union([RecipeTagOrderByWithRelationInputSchema.array(), RecipeTagOrderByWithRelationInputSchema]).optional(),
  cursor: RecipeTagWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([RecipeTagScalarFieldEnumSchema, RecipeTagScalarFieldEnumSchema.array()]).optional()
}).strict();
var RecipeTagAggregateArgsSchema = z$2.object({
  where: RecipeTagWhereInputSchema.optional(),
  orderBy: z$2.union([RecipeTagOrderByWithRelationInputSchema.array(), RecipeTagOrderByWithRelationInputSchema]).optional(),
  cursor: RecipeTagWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var RecipeTagGroupByArgsSchema = z$2.object({
  where: RecipeTagWhereInputSchema.optional(),
  orderBy: z$2.union([RecipeTagOrderByWithAggregationInputSchema.array(), RecipeTagOrderByWithAggregationInputSchema]).optional(),
  by: RecipeTagScalarFieldEnumSchema.array(),
  having: RecipeTagScalarWhereWithAggregatesInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var RecipeTagFindUniqueArgsSchema = z$2.object({
  select: RecipeTagSelectSchema.optional(),
  include: RecipeTagIncludeSchema.optional(),
  where: RecipeTagWhereUniqueInputSchema
}).strict();
var RecipeTagFindUniqueOrThrowArgsSchema = z$2.object({
  select: RecipeTagSelectSchema.optional(),
  include: RecipeTagIncludeSchema.optional(),
  where: RecipeTagWhereUniqueInputSchema
}).strict();
var LeftoverItemFindFirstArgsSchema = z$2.object({
  select: LeftoverItemSelectSchema.optional(),
  include: LeftoverItemIncludeSchema.optional(),
  where: LeftoverItemWhereInputSchema.optional(),
  orderBy: z$2.union([LeftoverItemOrderByWithRelationInputSchema.array(), LeftoverItemOrderByWithRelationInputSchema]).optional(),
  cursor: LeftoverItemWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([LeftoverItemScalarFieldEnumSchema, LeftoverItemScalarFieldEnumSchema.array()]).optional()
}).strict();
var LeftoverItemFindFirstOrThrowArgsSchema = z$2.object({
  select: LeftoverItemSelectSchema.optional(),
  include: LeftoverItemIncludeSchema.optional(),
  where: LeftoverItemWhereInputSchema.optional(),
  orderBy: z$2.union([LeftoverItemOrderByWithRelationInputSchema.array(), LeftoverItemOrderByWithRelationInputSchema]).optional(),
  cursor: LeftoverItemWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([LeftoverItemScalarFieldEnumSchema, LeftoverItemScalarFieldEnumSchema.array()]).optional()
}).strict();
var LeftoverItemFindManyArgsSchema = z$2.object({
  select: LeftoverItemSelectSchema.optional(),
  include: LeftoverItemIncludeSchema.optional(),
  where: LeftoverItemWhereInputSchema.optional(),
  orderBy: z$2.union([LeftoverItemOrderByWithRelationInputSchema.array(), LeftoverItemOrderByWithRelationInputSchema]).optional(),
  cursor: LeftoverItemWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([LeftoverItemScalarFieldEnumSchema, LeftoverItemScalarFieldEnumSchema.array()]).optional()
}).strict();
var LeftoverItemAggregateArgsSchema = z$2.object({
  where: LeftoverItemWhereInputSchema.optional(),
  orderBy: z$2.union([LeftoverItemOrderByWithRelationInputSchema.array(), LeftoverItemOrderByWithRelationInputSchema]).optional(),
  cursor: LeftoverItemWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var LeftoverItemGroupByArgsSchema = z$2.object({
  where: LeftoverItemWhereInputSchema.optional(),
  orderBy: z$2.union([LeftoverItemOrderByWithAggregationInputSchema.array(), LeftoverItemOrderByWithAggregationInputSchema]).optional(),
  by: LeftoverItemScalarFieldEnumSchema.array(),
  having: LeftoverItemScalarWhereWithAggregatesInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var LeftoverItemFindUniqueArgsSchema = z$2.object({
  select: LeftoverItemSelectSchema.optional(),
  include: LeftoverItemIncludeSchema.optional(),
  where: LeftoverItemWhereUniqueInputSchema
}).strict();
var LeftoverItemFindUniqueOrThrowArgsSchema = z$2.object({
  select: LeftoverItemSelectSchema.optional(),
  include: LeftoverItemIncludeSchema.optional(),
  where: LeftoverItemWhereUniqueInputSchema
}).strict();
var WasteRecordFindFirstArgsSchema = z$2.object({
  select: WasteRecordSelectSchema.optional(),
  include: WasteRecordIncludeSchema.optional(),
  where: WasteRecordWhereInputSchema.optional(),
  orderBy: z$2.union([WasteRecordOrderByWithRelationInputSchema.array(), WasteRecordOrderByWithRelationInputSchema]).optional(),
  cursor: WasteRecordWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([WasteRecordScalarFieldEnumSchema, WasteRecordScalarFieldEnumSchema.array()]).optional()
}).strict();
var WasteRecordFindFirstOrThrowArgsSchema = z$2.object({
  select: WasteRecordSelectSchema.optional(),
  include: WasteRecordIncludeSchema.optional(),
  where: WasteRecordWhereInputSchema.optional(),
  orderBy: z$2.union([WasteRecordOrderByWithRelationInputSchema.array(), WasteRecordOrderByWithRelationInputSchema]).optional(),
  cursor: WasteRecordWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([WasteRecordScalarFieldEnumSchema, WasteRecordScalarFieldEnumSchema.array()]).optional()
}).strict();
var WasteRecordFindManyArgsSchema = z$2.object({
  select: WasteRecordSelectSchema.optional(),
  include: WasteRecordIncludeSchema.optional(),
  where: WasteRecordWhereInputSchema.optional(),
  orderBy: z$2.union([WasteRecordOrderByWithRelationInputSchema.array(), WasteRecordOrderByWithRelationInputSchema]).optional(),
  cursor: WasteRecordWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([WasteRecordScalarFieldEnumSchema, WasteRecordScalarFieldEnumSchema.array()]).optional()
}).strict();
var WasteRecordAggregateArgsSchema = z$2.object({
  where: WasteRecordWhereInputSchema.optional(),
  orderBy: z$2.union([WasteRecordOrderByWithRelationInputSchema.array(), WasteRecordOrderByWithRelationInputSchema]).optional(),
  cursor: WasteRecordWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var WasteRecordGroupByArgsSchema = z$2.object({
  where: WasteRecordWhereInputSchema.optional(),
  orderBy: z$2.union([WasteRecordOrderByWithAggregationInputSchema.array(), WasteRecordOrderByWithAggregationInputSchema]).optional(),
  by: WasteRecordScalarFieldEnumSchema.array(),
  having: WasteRecordScalarWhereWithAggregatesInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var WasteRecordFindUniqueArgsSchema = z$2.object({
  select: WasteRecordSelectSchema.optional(),
  include: WasteRecordIncludeSchema.optional(),
  where: WasteRecordWhereUniqueInputSchema
}).strict();
var WasteRecordFindUniqueOrThrowArgsSchema = z$2.object({
  select: WasteRecordSelectSchema.optional(),
  include: WasteRecordIncludeSchema.optional(),
  where: WasteRecordWhereUniqueInputSchema
}).strict();
var ProductionPlanFindFirstArgsSchema = z$2.object({
  select: ProductionPlanSelectSchema.optional(),
  include: ProductionPlanIncludeSchema.optional(),
  where: ProductionPlanWhereInputSchema.optional(),
  orderBy: z$2.union([ProductionPlanOrderByWithRelationInputSchema.array(), ProductionPlanOrderByWithRelationInputSchema]).optional(),
  cursor: ProductionPlanWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([ProductionPlanScalarFieldEnumSchema, ProductionPlanScalarFieldEnumSchema.array()]).optional()
}).strict();
var ProductionPlanFindFirstOrThrowArgsSchema = z$2.object({
  select: ProductionPlanSelectSchema.optional(),
  include: ProductionPlanIncludeSchema.optional(),
  where: ProductionPlanWhereInputSchema.optional(),
  orderBy: z$2.union([ProductionPlanOrderByWithRelationInputSchema.array(), ProductionPlanOrderByWithRelationInputSchema]).optional(),
  cursor: ProductionPlanWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([ProductionPlanScalarFieldEnumSchema, ProductionPlanScalarFieldEnumSchema.array()]).optional()
}).strict();
var ProductionPlanFindManyArgsSchema = z$2.object({
  select: ProductionPlanSelectSchema.optional(),
  include: ProductionPlanIncludeSchema.optional(),
  where: ProductionPlanWhereInputSchema.optional(),
  orderBy: z$2.union([ProductionPlanOrderByWithRelationInputSchema.array(), ProductionPlanOrderByWithRelationInputSchema]).optional(),
  cursor: ProductionPlanWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([ProductionPlanScalarFieldEnumSchema, ProductionPlanScalarFieldEnumSchema.array()]).optional()
}).strict();
var ProductionPlanAggregateArgsSchema = z$2.object({
  where: ProductionPlanWhereInputSchema.optional(),
  orderBy: z$2.union([ProductionPlanOrderByWithRelationInputSchema.array(), ProductionPlanOrderByWithRelationInputSchema]).optional(),
  cursor: ProductionPlanWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var ProductionPlanGroupByArgsSchema = z$2.object({
  where: ProductionPlanWhereInputSchema.optional(),
  orderBy: z$2.union([ProductionPlanOrderByWithAggregationInputSchema.array(), ProductionPlanOrderByWithAggregationInputSchema]).optional(),
  by: ProductionPlanScalarFieldEnumSchema.array(),
  having: ProductionPlanScalarWhereWithAggregatesInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var ProductionPlanFindUniqueArgsSchema = z$2.object({
  select: ProductionPlanSelectSchema.optional(),
  include: ProductionPlanIncludeSchema.optional(),
  where: ProductionPlanWhereUniqueInputSchema
}).strict();
var ProductionPlanFindUniqueOrThrowArgsSchema = z$2.object({
  select: ProductionPlanSelectSchema.optional(),
  include: ProductionPlanIncludeSchema.optional(),
  where: ProductionPlanWhereUniqueInputSchema
}).strict();
var ProductionPlanItemFindFirstArgsSchema = z$2.object({
  select: ProductionPlanItemSelectSchema.optional(),
  include: ProductionPlanItemIncludeSchema.optional(),
  where: ProductionPlanItemWhereInputSchema.optional(),
  orderBy: z$2.union([ProductionPlanItemOrderByWithRelationInputSchema.array(), ProductionPlanItemOrderByWithRelationInputSchema]).optional(),
  cursor: ProductionPlanItemWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([ProductionPlanItemScalarFieldEnumSchema, ProductionPlanItemScalarFieldEnumSchema.array()]).optional()
}).strict();
var ProductionPlanItemFindFirstOrThrowArgsSchema = z$2.object({
  select: ProductionPlanItemSelectSchema.optional(),
  include: ProductionPlanItemIncludeSchema.optional(),
  where: ProductionPlanItemWhereInputSchema.optional(),
  orderBy: z$2.union([ProductionPlanItemOrderByWithRelationInputSchema.array(), ProductionPlanItemOrderByWithRelationInputSchema]).optional(),
  cursor: ProductionPlanItemWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([ProductionPlanItemScalarFieldEnumSchema, ProductionPlanItemScalarFieldEnumSchema.array()]).optional()
}).strict();
var ProductionPlanItemFindManyArgsSchema = z$2.object({
  select: ProductionPlanItemSelectSchema.optional(),
  include: ProductionPlanItemIncludeSchema.optional(),
  where: ProductionPlanItemWhereInputSchema.optional(),
  orderBy: z$2.union([ProductionPlanItemOrderByWithRelationInputSchema.array(), ProductionPlanItemOrderByWithRelationInputSchema]).optional(),
  cursor: ProductionPlanItemWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([ProductionPlanItemScalarFieldEnumSchema, ProductionPlanItemScalarFieldEnumSchema.array()]).optional()
}).strict();
var ProductionPlanItemAggregateArgsSchema = z$2.object({
  where: ProductionPlanItemWhereInputSchema.optional(),
  orderBy: z$2.union([ProductionPlanItemOrderByWithRelationInputSchema.array(), ProductionPlanItemOrderByWithRelationInputSchema]).optional(),
  cursor: ProductionPlanItemWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var ProductionPlanItemGroupByArgsSchema = z$2.object({
  where: ProductionPlanItemWhereInputSchema.optional(),
  orderBy: z$2.union([ProductionPlanItemOrderByWithAggregationInputSchema.array(), ProductionPlanItemOrderByWithAggregationInputSchema]).optional(),
  by: ProductionPlanItemScalarFieldEnumSchema.array(),
  having: ProductionPlanItemScalarWhereWithAggregatesInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var ProductionPlanItemFindUniqueArgsSchema = z$2.object({
  select: ProductionPlanItemSelectSchema.optional(),
  include: ProductionPlanItemIncludeSchema.optional(),
  where: ProductionPlanItemWhereUniqueInputSchema
}).strict();
var ProductionPlanItemFindUniqueOrThrowArgsSchema = z$2.object({
  select: ProductionPlanItemSelectSchema.optional(),
  include: ProductionPlanItemIncludeSchema.optional(),
  where: ProductionPlanItemWhereUniqueInputSchema
}).strict();
var ShiftTaskFindFirstArgsSchema = z$2.object({
  select: ShiftTaskSelectSchema.optional(),
  include: ShiftTaskIncludeSchema.optional(),
  where: ShiftTaskWhereInputSchema.optional(),
  orderBy: z$2.union([ShiftTaskOrderByWithRelationInputSchema.array(), ShiftTaskOrderByWithRelationInputSchema]).optional(),
  cursor: ShiftTaskWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([ShiftTaskScalarFieldEnumSchema, ShiftTaskScalarFieldEnumSchema.array()]).optional()
}).strict();
var ShiftTaskFindFirstOrThrowArgsSchema = z$2.object({
  select: ShiftTaskSelectSchema.optional(),
  include: ShiftTaskIncludeSchema.optional(),
  where: ShiftTaskWhereInputSchema.optional(),
  orderBy: z$2.union([ShiftTaskOrderByWithRelationInputSchema.array(), ShiftTaskOrderByWithRelationInputSchema]).optional(),
  cursor: ShiftTaskWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([ShiftTaskScalarFieldEnumSchema, ShiftTaskScalarFieldEnumSchema.array()]).optional()
}).strict();
var ShiftTaskFindManyArgsSchema = z$2.object({
  select: ShiftTaskSelectSchema.optional(),
  include: ShiftTaskIncludeSchema.optional(),
  where: ShiftTaskWhereInputSchema.optional(),
  orderBy: z$2.union([ShiftTaskOrderByWithRelationInputSchema.array(), ShiftTaskOrderByWithRelationInputSchema]).optional(),
  cursor: ShiftTaskWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([ShiftTaskScalarFieldEnumSchema, ShiftTaskScalarFieldEnumSchema.array()]).optional()
}).strict();
var ShiftTaskAggregateArgsSchema = z$2.object({
  where: ShiftTaskWhereInputSchema.optional(),
  orderBy: z$2.union([ShiftTaskOrderByWithRelationInputSchema.array(), ShiftTaskOrderByWithRelationInputSchema]).optional(),
  cursor: ShiftTaskWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var ShiftTaskGroupByArgsSchema = z$2.object({
  where: ShiftTaskWhereInputSchema.optional(),
  orderBy: z$2.union([ShiftTaskOrderByWithAggregationInputSchema.array(), ShiftTaskOrderByWithAggregationInputSchema]).optional(),
  by: ShiftTaskScalarFieldEnumSchema.array(),
  having: ShiftTaskScalarWhereWithAggregatesInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var ShiftTaskFindUniqueArgsSchema = z$2.object({
  select: ShiftTaskSelectSchema.optional(),
  include: ShiftTaskIncludeSchema.optional(),
  where: ShiftTaskWhereUniqueInputSchema
}).strict();
var ShiftTaskFindUniqueOrThrowArgsSchema = z$2.object({
  select: ShiftTaskSelectSchema.optional(),
  include: ShiftTaskIncludeSchema.optional(),
  where: ShiftTaskWhereUniqueInputSchema
}).strict();
var AvailabilityFindFirstArgsSchema = z$2.object({
  select: AvailabilitySelectSchema.optional(),
  include: AvailabilityIncludeSchema.optional(),
  where: AvailabilityWhereInputSchema.optional(),
  orderBy: z$2.union([AvailabilityOrderByWithRelationInputSchema.array(), AvailabilityOrderByWithRelationInputSchema]).optional(),
  cursor: AvailabilityWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([AvailabilityScalarFieldEnumSchema, AvailabilityScalarFieldEnumSchema.array()]).optional()
}).strict();
var AvailabilityFindFirstOrThrowArgsSchema = z$2.object({
  select: AvailabilitySelectSchema.optional(),
  include: AvailabilityIncludeSchema.optional(),
  where: AvailabilityWhereInputSchema.optional(),
  orderBy: z$2.union([AvailabilityOrderByWithRelationInputSchema.array(), AvailabilityOrderByWithRelationInputSchema]).optional(),
  cursor: AvailabilityWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([AvailabilityScalarFieldEnumSchema, AvailabilityScalarFieldEnumSchema.array()]).optional()
}).strict();
var AvailabilityFindManyArgsSchema = z$2.object({
  select: AvailabilitySelectSchema.optional(),
  include: AvailabilityIncludeSchema.optional(),
  where: AvailabilityWhereInputSchema.optional(),
  orderBy: z$2.union([AvailabilityOrderByWithRelationInputSchema.array(), AvailabilityOrderByWithRelationInputSchema]).optional(),
  cursor: AvailabilityWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([AvailabilityScalarFieldEnumSchema, AvailabilityScalarFieldEnumSchema.array()]).optional()
}).strict();
var AvailabilityAggregateArgsSchema = z$2.object({
  where: AvailabilityWhereInputSchema.optional(),
  orderBy: z$2.union([AvailabilityOrderByWithRelationInputSchema.array(), AvailabilityOrderByWithRelationInputSchema]).optional(),
  cursor: AvailabilityWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var AvailabilityGroupByArgsSchema = z$2.object({
  where: AvailabilityWhereInputSchema.optional(),
  orderBy: z$2.union([AvailabilityOrderByWithAggregationInputSchema.array(), AvailabilityOrderByWithAggregationInputSchema]).optional(),
  by: AvailabilityScalarFieldEnumSchema.array(),
  having: AvailabilityScalarWhereWithAggregatesInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var AvailabilityFindUniqueArgsSchema = z$2.object({
  select: AvailabilitySelectSchema.optional(),
  include: AvailabilityIncludeSchema.optional(),
  where: AvailabilityWhereUniqueInputSchema
}).strict();
var AvailabilityFindUniqueOrThrowArgsSchema = z$2.object({
  select: AvailabilitySelectSchema.optional(),
  include: AvailabilityIncludeSchema.optional(),
  where: AvailabilityWhereUniqueInputSchema
}).strict();
var SchedulingConstraintFindFirstArgsSchema = z$2.object({
  select: SchedulingConstraintSelectSchema.optional(),
  include: SchedulingConstraintIncludeSchema.optional(),
  where: SchedulingConstraintWhereInputSchema.optional(),
  orderBy: z$2.union([SchedulingConstraintOrderByWithRelationInputSchema.array(), SchedulingConstraintOrderByWithRelationInputSchema]).optional(),
  cursor: SchedulingConstraintWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([SchedulingConstraintScalarFieldEnumSchema, SchedulingConstraintScalarFieldEnumSchema.array()]).optional()
}).strict();
var SchedulingConstraintFindFirstOrThrowArgsSchema = z$2.object({
  select: SchedulingConstraintSelectSchema.optional(),
  include: SchedulingConstraintIncludeSchema.optional(),
  where: SchedulingConstraintWhereInputSchema.optional(),
  orderBy: z$2.union([SchedulingConstraintOrderByWithRelationInputSchema.array(), SchedulingConstraintOrderByWithRelationInputSchema]).optional(),
  cursor: SchedulingConstraintWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([SchedulingConstraintScalarFieldEnumSchema, SchedulingConstraintScalarFieldEnumSchema.array()]).optional()
}).strict();
var SchedulingConstraintFindManyArgsSchema = z$2.object({
  select: SchedulingConstraintSelectSchema.optional(),
  include: SchedulingConstraintIncludeSchema.optional(),
  where: SchedulingConstraintWhereInputSchema.optional(),
  orderBy: z$2.union([SchedulingConstraintOrderByWithRelationInputSchema.array(), SchedulingConstraintOrderByWithRelationInputSchema]).optional(),
  cursor: SchedulingConstraintWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([SchedulingConstraintScalarFieldEnumSchema, SchedulingConstraintScalarFieldEnumSchema.array()]).optional()
}).strict();
var SchedulingConstraintAggregateArgsSchema = z$2.object({
  where: SchedulingConstraintWhereInputSchema.optional(),
  orderBy: z$2.union([SchedulingConstraintOrderByWithRelationInputSchema.array(), SchedulingConstraintOrderByWithRelationInputSchema]).optional(),
  cursor: SchedulingConstraintWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var SchedulingConstraintGroupByArgsSchema = z$2.object({
  where: SchedulingConstraintWhereInputSchema.optional(),
  orderBy: z$2.union([SchedulingConstraintOrderByWithAggregationInputSchema.array(), SchedulingConstraintOrderByWithAggregationInputSchema]).optional(),
  by: SchedulingConstraintScalarFieldEnumSchema.array(),
  having: SchedulingConstraintScalarWhereWithAggregatesInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var SchedulingConstraintFindUniqueArgsSchema = z$2.object({
  select: SchedulingConstraintSelectSchema.optional(),
  include: SchedulingConstraintIncludeSchema.optional(),
  where: SchedulingConstraintWhereUniqueInputSchema
}).strict();
var SchedulingConstraintFindUniqueOrThrowArgsSchema = z$2.object({
  select: SchedulingConstraintSelectSchema.optional(),
  include: SchedulingConstraintIncludeSchema.optional(),
  where: SchedulingConstraintWhereUniqueInputSchema
}).strict();
var InventoryWithdrawalFindFirstArgsSchema = z$2.object({
  select: InventoryWithdrawalSelectSchema.optional(),
  include: InventoryWithdrawalIncludeSchema.optional(),
  where: InventoryWithdrawalWhereInputSchema.optional(),
  orderBy: z$2.union([InventoryWithdrawalOrderByWithRelationInputSchema.array(), InventoryWithdrawalOrderByWithRelationInputSchema]).optional(),
  cursor: InventoryWithdrawalWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([InventoryWithdrawalScalarFieldEnumSchema, InventoryWithdrawalScalarFieldEnumSchema.array()]).optional()
}).strict();
var InventoryWithdrawalFindFirstOrThrowArgsSchema = z$2.object({
  select: InventoryWithdrawalSelectSchema.optional(),
  include: InventoryWithdrawalIncludeSchema.optional(),
  where: InventoryWithdrawalWhereInputSchema.optional(),
  orderBy: z$2.union([InventoryWithdrawalOrderByWithRelationInputSchema.array(), InventoryWithdrawalOrderByWithRelationInputSchema]).optional(),
  cursor: InventoryWithdrawalWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([InventoryWithdrawalScalarFieldEnumSchema, InventoryWithdrawalScalarFieldEnumSchema.array()]).optional()
}).strict();
var InventoryWithdrawalFindManyArgsSchema = z$2.object({
  select: InventoryWithdrawalSelectSchema.optional(),
  include: InventoryWithdrawalIncludeSchema.optional(),
  where: InventoryWithdrawalWhereInputSchema.optional(),
  orderBy: z$2.union([InventoryWithdrawalOrderByWithRelationInputSchema.array(), InventoryWithdrawalOrderByWithRelationInputSchema]).optional(),
  cursor: InventoryWithdrawalWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([InventoryWithdrawalScalarFieldEnumSchema, InventoryWithdrawalScalarFieldEnumSchema.array()]).optional()
}).strict();
var InventoryWithdrawalAggregateArgsSchema = z$2.object({
  where: InventoryWithdrawalWhereInputSchema.optional(),
  orderBy: z$2.union([InventoryWithdrawalOrderByWithRelationInputSchema.array(), InventoryWithdrawalOrderByWithRelationInputSchema]).optional(),
  cursor: InventoryWithdrawalWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var InventoryWithdrawalGroupByArgsSchema = z$2.object({
  where: InventoryWithdrawalWhereInputSchema.optional(),
  orderBy: z$2.union([InventoryWithdrawalOrderByWithAggregationInputSchema.array(), InventoryWithdrawalOrderByWithAggregationInputSchema]).optional(),
  by: InventoryWithdrawalScalarFieldEnumSchema.array(),
  having: InventoryWithdrawalScalarWhereWithAggregatesInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var InventoryWithdrawalFindUniqueArgsSchema = z$2.object({
  select: InventoryWithdrawalSelectSchema.optional(),
  include: InventoryWithdrawalIncludeSchema.optional(),
  where: InventoryWithdrawalWhereUniqueInputSchema
}).strict();
var InventoryWithdrawalFindUniqueOrThrowArgsSchema = z$2.object({
  select: InventoryWithdrawalSelectSchema.optional(),
  include: InventoryWithdrawalIncludeSchema.optional(),
  where: InventoryWithdrawalWhereUniqueInputSchema
}).strict();
var AllergenFindFirstArgsSchema = z$2.object({
  select: AllergenSelectSchema.optional(),
  include: AllergenIncludeSchema.optional(),
  where: AllergenWhereInputSchema.optional(),
  orderBy: z$2.union([AllergenOrderByWithRelationInputSchema.array(), AllergenOrderByWithRelationInputSchema]).optional(),
  cursor: AllergenWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([AllergenScalarFieldEnumSchema, AllergenScalarFieldEnumSchema.array()]).optional()
}).strict();
var AllergenFindFirstOrThrowArgsSchema = z$2.object({
  select: AllergenSelectSchema.optional(),
  include: AllergenIncludeSchema.optional(),
  where: AllergenWhereInputSchema.optional(),
  orderBy: z$2.union([AllergenOrderByWithRelationInputSchema.array(), AllergenOrderByWithRelationInputSchema]).optional(),
  cursor: AllergenWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([AllergenScalarFieldEnumSchema, AllergenScalarFieldEnumSchema.array()]).optional()
}).strict();
var AllergenFindManyArgsSchema = z$2.object({
  select: AllergenSelectSchema.optional(),
  include: AllergenIncludeSchema.optional(),
  where: AllergenWhereInputSchema.optional(),
  orderBy: z$2.union([AllergenOrderByWithRelationInputSchema.array(), AllergenOrderByWithRelationInputSchema]).optional(),
  cursor: AllergenWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([AllergenScalarFieldEnumSchema, AllergenScalarFieldEnumSchema.array()]).optional()
}).strict();
var AllergenAggregateArgsSchema = z$2.object({
  where: AllergenWhereInputSchema.optional(),
  orderBy: z$2.union([AllergenOrderByWithRelationInputSchema.array(), AllergenOrderByWithRelationInputSchema]).optional(),
  cursor: AllergenWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var AllergenGroupByArgsSchema = z$2.object({
  where: AllergenWhereInputSchema.optional(),
  orderBy: z$2.union([AllergenOrderByWithAggregationInputSchema.array(), AllergenOrderByWithAggregationInputSchema]).optional(),
  by: AllergenScalarFieldEnumSchema.array(),
  having: AllergenScalarWhereWithAggregatesInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var AllergenFindUniqueArgsSchema = z$2.object({
  select: AllergenSelectSchema.optional(),
  include: AllergenIncludeSchema.optional(),
  where: AllergenWhereUniqueInputSchema
}).strict();
var AllergenFindUniqueOrThrowArgsSchema = z$2.object({
  select: AllergenSelectSchema.optional(),
  include: AllergenIncludeSchema.optional(),
  where: AllergenWhereUniqueInputSchema
}).strict();
var IngredientAllergenFindFirstArgsSchema = z$2.object({
  select: IngredientAllergenSelectSchema.optional(),
  include: IngredientAllergenIncludeSchema.optional(),
  where: IngredientAllergenWhereInputSchema.optional(),
  orderBy: z$2.union([IngredientAllergenOrderByWithRelationInputSchema.array(), IngredientAllergenOrderByWithRelationInputSchema]).optional(),
  cursor: IngredientAllergenWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([IngredientAllergenScalarFieldEnumSchema, IngredientAllergenScalarFieldEnumSchema.array()]).optional()
}).strict();
var IngredientAllergenFindFirstOrThrowArgsSchema = z$2.object({
  select: IngredientAllergenSelectSchema.optional(),
  include: IngredientAllergenIncludeSchema.optional(),
  where: IngredientAllergenWhereInputSchema.optional(),
  orderBy: z$2.union([IngredientAllergenOrderByWithRelationInputSchema.array(), IngredientAllergenOrderByWithRelationInputSchema]).optional(),
  cursor: IngredientAllergenWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([IngredientAllergenScalarFieldEnumSchema, IngredientAllergenScalarFieldEnumSchema.array()]).optional()
}).strict();
var IngredientAllergenFindManyArgsSchema = z$2.object({
  select: IngredientAllergenSelectSchema.optional(),
  include: IngredientAllergenIncludeSchema.optional(),
  where: IngredientAllergenWhereInputSchema.optional(),
  orderBy: z$2.union([IngredientAllergenOrderByWithRelationInputSchema.array(), IngredientAllergenOrderByWithRelationInputSchema]).optional(),
  cursor: IngredientAllergenWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([IngredientAllergenScalarFieldEnumSchema, IngredientAllergenScalarFieldEnumSchema.array()]).optional()
}).strict();
var IngredientAllergenAggregateArgsSchema = z$2.object({
  where: IngredientAllergenWhereInputSchema.optional(),
  orderBy: z$2.union([IngredientAllergenOrderByWithRelationInputSchema.array(), IngredientAllergenOrderByWithRelationInputSchema]).optional(),
  cursor: IngredientAllergenWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var IngredientAllergenGroupByArgsSchema = z$2.object({
  where: IngredientAllergenWhereInputSchema.optional(),
  orderBy: z$2.union([IngredientAllergenOrderByWithAggregationInputSchema.array(), IngredientAllergenOrderByWithAggregationInputSchema]).optional(),
  by: IngredientAllergenScalarFieldEnumSchema.array(),
  having: IngredientAllergenScalarWhereWithAggregatesInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var IngredientAllergenFindUniqueArgsSchema = z$2.object({
  select: IngredientAllergenSelectSchema.optional(),
  include: IngredientAllergenIncludeSchema.optional(),
  where: IngredientAllergenWhereUniqueInputSchema
}).strict();
var IngredientAllergenFindUniqueOrThrowArgsSchema = z$2.object({
  select: IngredientAllergenSelectSchema.optional(),
  include: IngredientAllergenIncludeSchema.optional(),
  where: IngredientAllergenWhereUniqueInputSchema
}).strict();
var NutritionalRecommendationFindFirstArgsSchema = z$2.object({
  select: NutritionalRecommendationSelectSchema.optional(),
  include: NutritionalRecommendationIncludeSchema.optional(),
  where: NutritionalRecommendationWhereInputSchema.optional(),
  orderBy: z$2.union([NutritionalRecommendationOrderByWithRelationInputSchema.array(), NutritionalRecommendationOrderByWithRelationInputSchema]).optional(),
  cursor: NutritionalRecommendationWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([NutritionalRecommendationScalarFieldEnumSchema, NutritionalRecommendationScalarFieldEnumSchema.array()]).optional()
}).strict();
var NutritionalRecommendationFindFirstOrThrowArgsSchema = z$2.object({
  select: NutritionalRecommendationSelectSchema.optional(),
  include: NutritionalRecommendationIncludeSchema.optional(),
  where: NutritionalRecommendationWhereInputSchema.optional(),
  orderBy: z$2.union([NutritionalRecommendationOrderByWithRelationInputSchema.array(), NutritionalRecommendationOrderByWithRelationInputSchema]).optional(),
  cursor: NutritionalRecommendationWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([NutritionalRecommendationScalarFieldEnumSchema, NutritionalRecommendationScalarFieldEnumSchema.array()]).optional()
}).strict();
var NutritionalRecommendationFindManyArgsSchema = z$2.object({
  select: NutritionalRecommendationSelectSchema.optional(),
  include: NutritionalRecommendationIncludeSchema.optional(),
  where: NutritionalRecommendationWhereInputSchema.optional(),
  orderBy: z$2.union([NutritionalRecommendationOrderByWithRelationInputSchema.array(), NutritionalRecommendationOrderByWithRelationInputSchema]).optional(),
  cursor: NutritionalRecommendationWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([NutritionalRecommendationScalarFieldEnumSchema, NutritionalRecommendationScalarFieldEnumSchema.array()]).optional()
}).strict();
var NutritionalRecommendationAggregateArgsSchema = z$2.object({
  where: NutritionalRecommendationWhereInputSchema.optional(),
  orderBy: z$2.union([NutritionalRecommendationOrderByWithRelationInputSchema.array(), NutritionalRecommendationOrderByWithRelationInputSchema]).optional(),
  cursor: NutritionalRecommendationWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var NutritionalRecommendationGroupByArgsSchema = z$2.object({
  where: NutritionalRecommendationWhereInputSchema.optional(),
  orderBy: z$2.union([NutritionalRecommendationOrderByWithAggregationInputSchema.array(), NutritionalRecommendationOrderByWithAggregationInputSchema]).optional(),
  by: NutritionalRecommendationScalarFieldEnumSchema.array(),
  having: NutritionalRecommendationScalarWhereWithAggregatesInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var NutritionalRecommendationFindUniqueArgsSchema = z$2.object({
  select: NutritionalRecommendationSelectSchema.optional(),
  include: NutritionalRecommendationIncludeSchema.optional(),
  where: NutritionalRecommendationWhereUniqueInputSchema
}).strict();
var NutritionalRecommendationFindUniqueOrThrowArgsSchema = z$2.object({
  select: NutritionalRecommendationSelectSchema.optional(),
  include: NutritionalRecommendationIncludeSchema.optional(),
  where: NutritionalRecommendationWhereUniqueInputSchema
}).strict();
var EarlyAccessFindFirstArgsSchema = z$2.object({
  select: EarlyAccessSelectSchema.optional(),
  where: EarlyAccessWhereInputSchema.optional(),
  orderBy: z$2.union([EarlyAccessOrderByWithRelationInputSchema.array(), EarlyAccessOrderByWithRelationInputSchema]).optional(),
  cursor: EarlyAccessWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([EarlyAccessScalarFieldEnumSchema, EarlyAccessScalarFieldEnumSchema.array()]).optional()
}).strict();
var EarlyAccessFindFirstOrThrowArgsSchema = z$2.object({
  select: EarlyAccessSelectSchema.optional(),
  where: EarlyAccessWhereInputSchema.optional(),
  orderBy: z$2.union([EarlyAccessOrderByWithRelationInputSchema.array(), EarlyAccessOrderByWithRelationInputSchema]).optional(),
  cursor: EarlyAccessWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([EarlyAccessScalarFieldEnumSchema, EarlyAccessScalarFieldEnumSchema.array()]).optional()
}).strict();
var EarlyAccessFindManyArgsSchema = z$2.object({
  select: EarlyAccessSelectSchema.optional(),
  where: EarlyAccessWhereInputSchema.optional(),
  orderBy: z$2.union([EarlyAccessOrderByWithRelationInputSchema.array(), EarlyAccessOrderByWithRelationInputSchema]).optional(),
  cursor: EarlyAccessWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([EarlyAccessScalarFieldEnumSchema, EarlyAccessScalarFieldEnumSchema.array()]).optional()
}).strict();
var EarlyAccessAggregateArgsSchema = z$2.object({
  where: EarlyAccessWhereInputSchema.optional(),
  orderBy: z$2.union([EarlyAccessOrderByWithRelationInputSchema.array(), EarlyAccessOrderByWithRelationInputSchema]).optional(),
  cursor: EarlyAccessWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var EarlyAccessGroupByArgsSchema = z$2.object({
  where: EarlyAccessWhereInputSchema.optional(),
  orderBy: z$2.union([EarlyAccessOrderByWithAggregationInputSchema.array(), EarlyAccessOrderByWithAggregationInputSchema]).optional(),
  by: EarlyAccessScalarFieldEnumSchema.array(),
  having: EarlyAccessScalarWhereWithAggregatesInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var EarlyAccessFindUniqueArgsSchema = z$2.object({
  select: EarlyAccessSelectSchema.optional(),
  where: EarlyAccessWhereUniqueInputSchema
}).strict();
var EarlyAccessFindUniqueOrThrowArgsSchema = z$2.object({
  select: EarlyAccessSelectSchema.optional(),
  where: EarlyAccessWhereUniqueInputSchema
}).strict();
var OrganizationFindFirstArgsSchema = z$2.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  where: OrganizationWhereInputSchema.optional(),
  orderBy: z$2.union([OrganizationOrderByWithRelationInputSchema.array(), OrganizationOrderByWithRelationInputSchema]).optional(),
  cursor: OrganizationWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([OrganizationScalarFieldEnumSchema, OrganizationScalarFieldEnumSchema.array()]).optional()
}).strict();
var OrganizationFindFirstOrThrowArgsSchema = z$2.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  where: OrganizationWhereInputSchema.optional(),
  orderBy: z$2.union([OrganizationOrderByWithRelationInputSchema.array(), OrganizationOrderByWithRelationInputSchema]).optional(),
  cursor: OrganizationWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([OrganizationScalarFieldEnumSchema, OrganizationScalarFieldEnumSchema.array()]).optional()
}).strict();
var OrganizationFindManyArgsSchema = z$2.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  where: OrganizationWhereInputSchema.optional(),
  orderBy: z$2.union([OrganizationOrderByWithRelationInputSchema.array(), OrganizationOrderByWithRelationInputSchema]).optional(),
  cursor: OrganizationWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([OrganizationScalarFieldEnumSchema, OrganizationScalarFieldEnumSchema.array()]).optional()
}).strict();
var OrganizationAggregateArgsSchema = z$2.object({
  where: OrganizationWhereInputSchema.optional(),
  orderBy: z$2.union([OrganizationOrderByWithRelationInputSchema.array(), OrganizationOrderByWithRelationInputSchema]).optional(),
  cursor: OrganizationWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var OrganizationGroupByArgsSchema = z$2.object({
  where: OrganizationWhereInputSchema.optional(),
  orderBy: z$2.union([OrganizationOrderByWithAggregationInputSchema.array(), OrganizationOrderByWithAggregationInputSchema]).optional(),
  by: OrganizationScalarFieldEnumSchema.array(),
  having: OrganizationScalarWhereWithAggregatesInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var OrganizationFindUniqueArgsSchema = z$2.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  where: OrganizationWhereUniqueInputSchema
}).strict();
var OrganizationFindUniqueOrThrowArgsSchema = z$2.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  where: OrganizationWhereUniqueInputSchema
}).strict();
var RestaurantFindFirstArgsSchema = z$2.object({
  select: RestaurantSelectSchema.optional(),
  include: RestaurantIncludeSchema.optional(),
  where: RestaurantWhereInputSchema.optional(),
  orderBy: z$2.union([RestaurantOrderByWithRelationInputSchema.array(), RestaurantOrderByWithRelationInputSchema]).optional(),
  cursor: RestaurantWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([RestaurantScalarFieldEnumSchema, RestaurantScalarFieldEnumSchema.array()]).optional()
}).strict();
var RestaurantFindFirstOrThrowArgsSchema = z$2.object({
  select: RestaurantSelectSchema.optional(),
  include: RestaurantIncludeSchema.optional(),
  where: RestaurantWhereInputSchema.optional(),
  orderBy: z$2.union([RestaurantOrderByWithRelationInputSchema.array(), RestaurantOrderByWithRelationInputSchema]).optional(),
  cursor: RestaurantWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([RestaurantScalarFieldEnumSchema, RestaurantScalarFieldEnumSchema.array()]).optional()
}).strict();
var RestaurantFindManyArgsSchema = z$2.object({
  select: RestaurantSelectSchema.optional(),
  include: RestaurantIncludeSchema.optional(),
  where: RestaurantWhereInputSchema.optional(),
  orderBy: z$2.union([RestaurantOrderByWithRelationInputSchema.array(), RestaurantOrderByWithRelationInputSchema]).optional(),
  cursor: RestaurantWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([RestaurantScalarFieldEnumSchema, RestaurantScalarFieldEnumSchema.array()]).optional()
}).strict();
var RestaurantAggregateArgsSchema = z$2.object({
  where: RestaurantWhereInputSchema.optional(),
  orderBy: z$2.union([RestaurantOrderByWithRelationInputSchema.array(), RestaurantOrderByWithRelationInputSchema]).optional(),
  cursor: RestaurantWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var RestaurantGroupByArgsSchema = z$2.object({
  where: RestaurantWhereInputSchema.optional(),
  orderBy: z$2.union([RestaurantOrderByWithAggregationInputSchema.array(), RestaurantOrderByWithAggregationInputSchema]).optional(),
  by: RestaurantScalarFieldEnumSchema.array(),
  having: RestaurantScalarWhereWithAggregatesInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var RestaurantFindUniqueArgsSchema = z$2.object({
  select: RestaurantSelectSchema.optional(),
  include: RestaurantIncludeSchema.optional(),
  where: RestaurantWhereUniqueInputSchema
}).strict();
var RestaurantFindUniqueOrThrowArgsSchema = z$2.object({
  select: RestaurantSelectSchema.optional(),
  include: RestaurantIncludeSchema.optional(),
  where: RestaurantWhereUniqueInputSchema
}).strict();
var UserFindFirstArgsSchema = z$2.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereInputSchema.optional(),
  orderBy: z$2.union([UserOrderByWithRelationInputSchema.array(), UserOrderByWithRelationInputSchema]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([UserScalarFieldEnumSchema, UserScalarFieldEnumSchema.array()]).optional()
}).strict();
var UserFindFirstOrThrowArgsSchema = z$2.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereInputSchema.optional(),
  orderBy: z$2.union([UserOrderByWithRelationInputSchema.array(), UserOrderByWithRelationInputSchema]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([UserScalarFieldEnumSchema, UserScalarFieldEnumSchema.array()]).optional()
}).strict();
var UserFindManyArgsSchema = z$2.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereInputSchema.optional(),
  orderBy: z$2.union([UserOrderByWithRelationInputSchema.array(), UserOrderByWithRelationInputSchema]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([UserScalarFieldEnumSchema, UserScalarFieldEnumSchema.array()]).optional()
}).strict();
var UserAggregateArgsSchema = z$2.object({
  where: UserWhereInputSchema.optional(),
  orderBy: z$2.union([UserOrderByWithRelationInputSchema.array(), UserOrderByWithRelationInputSchema]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var UserGroupByArgsSchema = z$2.object({
  where: UserWhereInputSchema.optional(),
  orderBy: z$2.union([UserOrderByWithAggregationInputSchema.array(), UserOrderByWithAggregationInputSchema]).optional(),
  by: UserScalarFieldEnumSchema.array(),
  having: UserScalarWhereWithAggregatesInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var UserFindUniqueArgsSchema = z$2.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema
}).strict();
var UserFindUniqueOrThrowArgsSchema = z$2.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema
}).strict();
var SessionFindFirstArgsSchema = z$2.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereInputSchema.optional(),
  orderBy: z$2.union([SessionOrderByWithRelationInputSchema.array(), SessionOrderByWithRelationInputSchema]).optional(),
  cursor: SessionWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([SessionScalarFieldEnumSchema, SessionScalarFieldEnumSchema.array()]).optional()
}).strict();
var SessionFindFirstOrThrowArgsSchema = z$2.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereInputSchema.optional(),
  orderBy: z$2.union([SessionOrderByWithRelationInputSchema.array(), SessionOrderByWithRelationInputSchema]).optional(),
  cursor: SessionWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([SessionScalarFieldEnumSchema, SessionScalarFieldEnumSchema.array()]).optional()
}).strict();
var SessionFindManyArgsSchema = z$2.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereInputSchema.optional(),
  orderBy: z$2.union([SessionOrderByWithRelationInputSchema.array(), SessionOrderByWithRelationInputSchema]).optional(),
  cursor: SessionWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([SessionScalarFieldEnumSchema, SessionScalarFieldEnumSchema.array()]).optional()
}).strict();
var SessionAggregateArgsSchema = z$2.object({
  where: SessionWhereInputSchema.optional(),
  orderBy: z$2.union([SessionOrderByWithRelationInputSchema.array(), SessionOrderByWithRelationInputSchema]).optional(),
  cursor: SessionWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var SessionGroupByArgsSchema = z$2.object({
  where: SessionWhereInputSchema.optional(),
  orderBy: z$2.union([SessionOrderByWithAggregationInputSchema.array(), SessionOrderByWithAggregationInputSchema]).optional(),
  by: SessionScalarFieldEnumSchema.array(),
  having: SessionScalarWhereWithAggregatesInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var SessionFindUniqueArgsSchema = z$2.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereUniqueInputSchema
}).strict();
var SessionFindUniqueOrThrowArgsSchema = z$2.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereUniqueInputSchema
}).strict();
var CookBookFindFirstArgsSchema = z$2.object({
  select: CookBookSelectSchema.optional(),
  include: CookBookIncludeSchema.optional(),
  where: CookBookWhereInputSchema.optional(),
  orderBy: z$2.union([CookBookOrderByWithRelationInputSchema.array(), CookBookOrderByWithRelationInputSchema]).optional(),
  cursor: CookBookWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([CookBookScalarFieldEnumSchema, CookBookScalarFieldEnumSchema.array()]).optional()
}).strict();
var CookBookFindFirstOrThrowArgsSchema = z$2.object({
  select: CookBookSelectSchema.optional(),
  include: CookBookIncludeSchema.optional(),
  where: CookBookWhereInputSchema.optional(),
  orderBy: z$2.union([CookBookOrderByWithRelationInputSchema.array(), CookBookOrderByWithRelationInputSchema]).optional(),
  cursor: CookBookWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([CookBookScalarFieldEnumSchema, CookBookScalarFieldEnumSchema.array()]).optional()
}).strict();
var CookBookFindManyArgsSchema = z$2.object({
  select: CookBookSelectSchema.optional(),
  include: CookBookIncludeSchema.optional(),
  where: CookBookWhereInputSchema.optional(),
  orderBy: z$2.union([CookBookOrderByWithRelationInputSchema.array(), CookBookOrderByWithRelationInputSchema]).optional(),
  cursor: CookBookWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([CookBookScalarFieldEnumSchema, CookBookScalarFieldEnumSchema.array()]).optional()
}).strict();
var CookBookAggregateArgsSchema = z$2.object({
  where: CookBookWhereInputSchema.optional(),
  orderBy: z$2.union([CookBookOrderByWithRelationInputSchema.array(), CookBookOrderByWithRelationInputSchema]).optional(),
  cursor: CookBookWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var CookBookGroupByArgsSchema = z$2.object({
  where: CookBookWhereInputSchema.optional(),
  orderBy: z$2.union([CookBookOrderByWithAggregationInputSchema.array(), CookBookOrderByWithAggregationInputSchema]).optional(),
  by: CookBookScalarFieldEnumSchema.array(),
  having: CookBookScalarWhereWithAggregatesInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var CookBookFindUniqueArgsSchema = z$2.object({
  select: CookBookSelectSchema.optional(),
  include: CookBookIncludeSchema.optional(),
  where: CookBookWhereUniqueInputSchema
}).strict();
var CookBookFindUniqueOrThrowArgsSchema = z$2.object({
  select: CookBookSelectSchema.optional(),
  include: CookBookIncludeSchema.optional(),
  where: CookBookWhereUniqueInputSchema
}).strict();
var RecipeFindFirstArgsSchema = z$2.object({
  select: RecipeSelectSchema.optional(),
  include: RecipeIncludeSchema.optional(),
  where: RecipeWhereInputSchema.optional(),
  orderBy: z$2.union([RecipeOrderByWithRelationInputSchema.array(), RecipeOrderByWithRelationInputSchema]).optional(),
  cursor: RecipeWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([RecipeScalarFieldEnumSchema, RecipeScalarFieldEnumSchema.array()]).optional()
}).strict();
var RecipeFindFirstOrThrowArgsSchema = z$2.object({
  select: RecipeSelectSchema.optional(),
  include: RecipeIncludeSchema.optional(),
  where: RecipeWhereInputSchema.optional(),
  orderBy: z$2.union([RecipeOrderByWithRelationInputSchema.array(), RecipeOrderByWithRelationInputSchema]).optional(),
  cursor: RecipeWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([RecipeScalarFieldEnumSchema, RecipeScalarFieldEnumSchema.array()]).optional()
}).strict();
var RecipeFindManyArgsSchema = z$2.object({
  select: RecipeSelectSchema.optional(),
  include: RecipeIncludeSchema.optional(),
  where: RecipeWhereInputSchema.optional(),
  orderBy: z$2.union([RecipeOrderByWithRelationInputSchema.array(), RecipeOrderByWithRelationInputSchema]).optional(),
  cursor: RecipeWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([RecipeScalarFieldEnumSchema, RecipeScalarFieldEnumSchema.array()]).optional()
}).strict();
var RecipeAggregateArgsSchema = z$2.object({
  where: RecipeWhereInputSchema.optional(),
  orderBy: z$2.union([RecipeOrderByWithRelationInputSchema.array(), RecipeOrderByWithRelationInputSchema]).optional(),
  cursor: RecipeWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var RecipeGroupByArgsSchema = z$2.object({
  where: RecipeWhereInputSchema.optional(),
  orderBy: z$2.union([RecipeOrderByWithAggregationInputSchema.array(), RecipeOrderByWithAggregationInputSchema]).optional(),
  by: RecipeScalarFieldEnumSchema.array(),
  having: RecipeScalarWhereWithAggregatesInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var RecipeFindUniqueArgsSchema = z$2.object({
  select: RecipeSelectSchema.optional(),
  include: RecipeIncludeSchema.optional(),
  where: RecipeWhereUniqueInputSchema
}).strict();
var RecipeFindUniqueOrThrowArgsSchema = z$2.object({
  select: RecipeSelectSchema.optional(),
  include: RecipeIncludeSchema.optional(),
  where: RecipeWhereUniqueInputSchema
}).strict();
var IngredientFindFirstArgsSchema = z$2.object({
  select: IngredientSelectSchema.optional(),
  include: IngredientIncludeSchema.optional(),
  where: IngredientWhereInputSchema.optional(),
  orderBy: z$2.union([IngredientOrderByWithRelationInputSchema.array(), IngredientOrderByWithRelationInputSchema]).optional(),
  cursor: IngredientWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([IngredientScalarFieldEnumSchema, IngredientScalarFieldEnumSchema.array()]).optional()
}).strict();
var IngredientFindFirstOrThrowArgsSchema = z$2.object({
  select: IngredientSelectSchema.optional(),
  include: IngredientIncludeSchema.optional(),
  where: IngredientWhereInputSchema.optional(),
  orderBy: z$2.union([IngredientOrderByWithRelationInputSchema.array(), IngredientOrderByWithRelationInputSchema]).optional(),
  cursor: IngredientWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([IngredientScalarFieldEnumSchema, IngredientScalarFieldEnumSchema.array()]).optional()
}).strict();
var IngredientFindManyArgsSchema = z$2.object({
  select: IngredientSelectSchema.optional(),
  include: IngredientIncludeSchema.optional(),
  where: IngredientWhereInputSchema.optional(),
  orderBy: z$2.union([IngredientOrderByWithRelationInputSchema.array(), IngredientOrderByWithRelationInputSchema]).optional(),
  cursor: IngredientWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([IngredientScalarFieldEnumSchema, IngredientScalarFieldEnumSchema.array()]).optional()
}).strict();
var IngredientAggregateArgsSchema = z$2.object({
  where: IngredientWhereInputSchema.optional(),
  orderBy: z$2.union([IngredientOrderByWithRelationInputSchema.array(), IngredientOrderByWithRelationInputSchema]).optional(),
  cursor: IngredientWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var IngredientGroupByArgsSchema = z$2.object({
  where: IngredientWhereInputSchema.optional(),
  orderBy: z$2.union([IngredientOrderByWithAggregationInputSchema.array(), IngredientOrderByWithAggregationInputSchema]).optional(),
  by: IngredientScalarFieldEnumSchema.array(),
  having: IngredientScalarWhereWithAggregatesInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var IngredientFindUniqueArgsSchema = z$2.object({
  select: IngredientSelectSchema.optional(),
  include: IngredientIncludeSchema.optional(),
  where: IngredientWhereUniqueInputSchema
}).strict();
var IngredientFindUniqueOrThrowArgsSchema = z$2.object({
  select: IngredientSelectSchema.optional(),
  include: IngredientIncludeSchema.optional(),
  where: IngredientWhereUniqueInputSchema
}).strict();
var RecipeIngredientFindFirstArgsSchema = z$2.object({
  select: RecipeIngredientSelectSchema.optional(),
  include: RecipeIngredientIncludeSchema.optional(),
  where: RecipeIngredientWhereInputSchema.optional(),
  orderBy: z$2.union([RecipeIngredientOrderByWithRelationInputSchema.array(), RecipeIngredientOrderByWithRelationInputSchema]).optional(),
  cursor: RecipeIngredientWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([RecipeIngredientScalarFieldEnumSchema, RecipeIngredientScalarFieldEnumSchema.array()]).optional()
}).strict();
var RecipeIngredientFindFirstOrThrowArgsSchema = z$2.object({
  select: RecipeIngredientSelectSchema.optional(),
  include: RecipeIngredientIncludeSchema.optional(),
  where: RecipeIngredientWhereInputSchema.optional(),
  orderBy: z$2.union([RecipeIngredientOrderByWithRelationInputSchema.array(), RecipeIngredientOrderByWithRelationInputSchema]).optional(),
  cursor: RecipeIngredientWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([RecipeIngredientScalarFieldEnumSchema, RecipeIngredientScalarFieldEnumSchema.array()]).optional()
}).strict();
var RecipeIngredientFindManyArgsSchema = z$2.object({
  select: RecipeIngredientSelectSchema.optional(),
  include: RecipeIngredientIncludeSchema.optional(),
  where: RecipeIngredientWhereInputSchema.optional(),
  orderBy: z$2.union([RecipeIngredientOrderByWithRelationInputSchema.array(), RecipeIngredientOrderByWithRelationInputSchema]).optional(),
  cursor: RecipeIngredientWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([RecipeIngredientScalarFieldEnumSchema, RecipeIngredientScalarFieldEnumSchema.array()]).optional()
}).strict();
var RecipeIngredientAggregateArgsSchema = z$2.object({
  where: RecipeIngredientWhereInputSchema.optional(),
  orderBy: z$2.union([RecipeIngredientOrderByWithRelationInputSchema.array(), RecipeIngredientOrderByWithRelationInputSchema]).optional(),
  cursor: RecipeIngredientWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var RecipeIngredientGroupByArgsSchema = z$2.object({
  where: RecipeIngredientWhereInputSchema.optional(),
  orderBy: z$2.union([RecipeIngredientOrderByWithAggregationInputSchema.array(), RecipeIngredientOrderByWithAggregationInputSchema]).optional(),
  by: RecipeIngredientScalarFieldEnumSchema.array(),
  having: RecipeIngredientScalarWhereWithAggregatesInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var RecipeIngredientFindUniqueArgsSchema = z$2.object({
  select: RecipeIngredientSelectSchema.optional(),
  include: RecipeIngredientIncludeSchema.optional(),
  where: RecipeIngredientWhereUniqueInputSchema
}).strict();
var RecipeIngredientFindUniqueOrThrowArgsSchema = z$2.object({
  select: RecipeIngredientSelectSchema.optional(),
  include: RecipeIngredientIncludeSchema.optional(),
  where: RecipeIngredientWhereUniqueInputSchema
}).strict();
var RecipeInstructionFindFirstArgsSchema = z$2.object({
  select: RecipeInstructionSelectSchema.optional(),
  include: RecipeInstructionIncludeSchema.optional(),
  where: RecipeInstructionWhereInputSchema.optional(),
  orderBy: z$2.union([RecipeInstructionOrderByWithRelationInputSchema.array(), RecipeInstructionOrderByWithRelationInputSchema]).optional(),
  cursor: RecipeInstructionWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([RecipeInstructionScalarFieldEnumSchema, RecipeInstructionScalarFieldEnumSchema.array()]).optional()
}).strict();
var RecipeInstructionFindFirstOrThrowArgsSchema = z$2.object({
  select: RecipeInstructionSelectSchema.optional(),
  include: RecipeInstructionIncludeSchema.optional(),
  where: RecipeInstructionWhereInputSchema.optional(),
  orderBy: z$2.union([RecipeInstructionOrderByWithRelationInputSchema.array(), RecipeInstructionOrderByWithRelationInputSchema]).optional(),
  cursor: RecipeInstructionWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([RecipeInstructionScalarFieldEnumSchema, RecipeInstructionScalarFieldEnumSchema.array()]).optional()
}).strict();
var RecipeInstructionFindManyArgsSchema = z$2.object({
  select: RecipeInstructionSelectSchema.optional(),
  include: RecipeInstructionIncludeSchema.optional(),
  where: RecipeInstructionWhereInputSchema.optional(),
  orderBy: z$2.union([RecipeInstructionOrderByWithRelationInputSchema.array(), RecipeInstructionOrderByWithRelationInputSchema]).optional(),
  cursor: RecipeInstructionWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([RecipeInstructionScalarFieldEnumSchema, RecipeInstructionScalarFieldEnumSchema.array()]).optional()
}).strict();
var RecipeInstructionAggregateArgsSchema = z$2.object({
  where: RecipeInstructionWhereInputSchema.optional(),
  orderBy: z$2.union([RecipeInstructionOrderByWithRelationInputSchema.array(), RecipeInstructionOrderByWithRelationInputSchema]).optional(),
  cursor: RecipeInstructionWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var RecipeInstructionGroupByArgsSchema = z$2.object({
  where: RecipeInstructionWhereInputSchema.optional(),
  orderBy: z$2.union([RecipeInstructionOrderByWithAggregationInputSchema.array(), RecipeInstructionOrderByWithAggregationInputSchema]).optional(),
  by: RecipeInstructionScalarFieldEnumSchema.array(),
  having: RecipeInstructionScalarWhereWithAggregatesInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var RecipeInstructionFindUniqueArgsSchema = z$2.object({
  select: RecipeInstructionSelectSchema.optional(),
  include: RecipeInstructionIncludeSchema.optional(),
  where: RecipeInstructionWhereUniqueInputSchema
}).strict();
var RecipeInstructionFindUniqueOrThrowArgsSchema = z$2.object({
  select: RecipeInstructionSelectSchema.optional(),
  include: RecipeInstructionIncludeSchema.optional(),
  where: RecipeInstructionWhereUniqueInputSchema
}).strict();
var InventoryFindFirstArgsSchema = z$2.object({
  select: InventorySelectSchema.optional(),
  include: InventoryIncludeSchema.optional(),
  where: InventoryWhereInputSchema.optional(),
  orderBy: z$2.union([InventoryOrderByWithRelationInputSchema.array(), InventoryOrderByWithRelationInputSchema]).optional(),
  cursor: InventoryWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([InventoryScalarFieldEnumSchema, InventoryScalarFieldEnumSchema.array()]).optional()
}).strict();
var InventoryFindFirstOrThrowArgsSchema = z$2.object({
  select: InventorySelectSchema.optional(),
  include: InventoryIncludeSchema.optional(),
  where: InventoryWhereInputSchema.optional(),
  orderBy: z$2.union([InventoryOrderByWithRelationInputSchema.array(), InventoryOrderByWithRelationInputSchema]).optional(),
  cursor: InventoryWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([InventoryScalarFieldEnumSchema, InventoryScalarFieldEnumSchema.array()]).optional()
}).strict();
var InventoryFindManyArgsSchema = z$2.object({
  select: InventorySelectSchema.optional(),
  include: InventoryIncludeSchema.optional(),
  where: InventoryWhereInputSchema.optional(),
  orderBy: z$2.union([InventoryOrderByWithRelationInputSchema.array(), InventoryOrderByWithRelationInputSchema]).optional(),
  cursor: InventoryWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([InventoryScalarFieldEnumSchema, InventoryScalarFieldEnumSchema.array()]).optional()
}).strict();
var InventoryAggregateArgsSchema = z$2.object({
  where: InventoryWhereInputSchema.optional(),
  orderBy: z$2.union([InventoryOrderByWithRelationInputSchema.array(), InventoryOrderByWithRelationInputSchema]).optional(),
  cursor: InventoryWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var InventoryGroupByArgsSchema = z$2.object({
  where: InventoryWhereInputSchema.optional(),
  orderBy: z$2.union([InventoryOrderByWithAggregationInputSchema.array(), InventoryOrderByWithAggregationInputSchema]).optional(),
  by: InventoryScalarFieldEnumSchema.array(),
  having: InventoryScalarWhereWithAggregatesInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var InventoryFindUniqueArgsSchema = z$2.object({
  select: InventorySelectSchema.optional(),
  include: InventoryIncludeSchema.optional(),
  where: InventoryWhereUniqueInputSchema
}).strict();
var InventoryFindUniqueOrThrowArgsSchema = z$2.object({
  select: InventorySelectSchema.optional(),
  include: InventoryIncludeSchema.optional(),
  where: InventoryWhereUniqueInputSchema
}).strict();
var InventoryItemFindFirstArgsSchema = z$2.object({
  select: InventoryItemSelectSchema.optional(),
  include: InventoryItemIncludeSchema.optional(),
  where: InventoryItemWhereInputSchema.optional(),
  orderBy: z$2.union([InventoryItemOrderByWithRelationInputSchema.array(), InventoryItemOrderByWithRelationInputSchema]).optional(),
  cursor: InventoryItemWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([InventoryItemScalarFieldEnumSchema, InventoryItemScalarFieldEnumSchema.array()]).optional()
}).strict();
var InventoryItemFindFirstOrThrowArgsSchema = z$2.object({
  select: InventoryItemSelectSchema.optional(),
  include: InventoryItemIncludeSchema.optional(),
  where: InventoryItemWhereInputSchema.optional(),
  orderBy: z$2.union([InventoryItemOrderByWithRelationInputSchema.array(), InventoryItemOrderByWithRelationInputSchema]).optional(),
  cursor: InventoryItemWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([InventoryItemScalarFieldEnumSchema, InventoryItemScalarFieldEnumSchema.array()]).optional()
}).strict();
var InventoryItemFindManyArgsSchema = z$2.object({
  select: InventoryItemSelectSchema.optional(),
  include: InventoryItemIncludeSchema.optional(),
  where: InventoryItemWhereInputSchema.optional(),
  orderBy: z$2.union([InventoryItemOrderByWithRelationInputSchema.array(), InventoryItemOrderByWithRelationInputSchema]).optional(),
  cursor: InventoryItemWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([InventoryItemScalarFieldEnumSchema, InventoryItemScalarFieldEnumSchema.array()]).optional()
}).strict();
var InventoryItemAggregateArgsSchema = z$2.object({
  where: InventoryItemWhereInputSchema.optional(),
  orderBy: z$2.union([InventoryItemOrderByWithRelationInputSchema.array(), InventoryItemOrderByWithRelationInputSchema]).optional(),
  cursor: InventoryItemWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var InventoryItemGroupByArgsSchema = z$2.object({
  where: InventoryItemWhereInputSchema.optional(),
  orderBy: z$2.union([InventoryItemOrderByWithAggregationInputSchema.array(), InventoryItemOrderByWithAggregationInputSchema]).optional(),
  by: InventoryItemScalarFieldEnumSchema.array(),
  having: InventoryItemScalarWhereWithAggregatesInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var InventoryItemFindUniqueArgsSchema = z$2.object({
  select: InventoryItemSelectSchema.optional(),
  include: InventoryItemIncludeSchema.optional(),
  where: InventoryItemWhereUniqueInputSchema
}).strict();
var InventoryItemFindUniqueOrThrowArgsSchema = z$2.object({
  select: InventoryItemSelectSchema.optional(),
  include: InventoryItemIncludeSchema.optional(),
  where: InventoryItemWhereUniqueInputSchema
}).strict();
var OrderFindFirstArgsSchema = z$2.object({
  select: OrderSelectSchema.optional(),
  include: OrderIncludeSchema.optional(),
  where: OrderWhereInputSchema.optional(),
  orderBy: z$2.union([OrderOrderByWithRelationInputSchema.array(), OrderOrderByWithRelationInputSchema]).optional(),
  cursor: OrderWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([OrderScalarFieldEnumSchema, OrderScalarFieldEnumSchema.array()]).optional()
}).strict();
var OrderFindFirstOrThrowArgsSchema = z$2.object({
  select: OrderSelectSchema.optional(),
  include: OrderIncludeSchema.optional(),
  where: OrderWhereInputSchema.optional(),
  orderBy: z$2.union([OrderOrderByWithRelationInputSchema.array(), OrderOrderByWithRelationInputSchema]).optional(),
  cursor: OrderWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([OrderScalarFieldEnumSchema, OrderScalarFieldEnumSchema.array()]).optional()
}).strict();
var OrderFindManyArgsSchema = z$2.object({
  select: OrderSelectSchema.optional(),
  include: OrderIncludeSchema.optional(),
  where: OrderWhereInputSchema.optional(),
  orderBy: z$2.union([OrderOrderByWithRelationInputSchema.array(), OrderOrderByWithRelationInputSchema]).optional(),
  cursor: OrderWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([OrderScalarFieldEnumSchema, OrderScalarFieldEnumSchema.array()]).optional()
}).strict();
var OrderAggregateArgsSchema = z$2.object({
  where: OrderWhereInputSchema.optional(),
  orderBy: z$2.union([OrderOrderByWithRelationInputSchema.array(), OrderOrderByWithRelationInputSchema]).optional(),
  cursor: OrderWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var OrderGroupByArgsSchema = z$2.object({
  where: OrderWhereInputSchema.optional(),
  orderBy: z$2.union([OrderOrderByWithAggregationInputSchema.array(), OrderOrderByWithAggregationInputSchema]).optional(),
  by: OrderScalarFieldEnumSchema.array(),
  having: OrderScalarWhereWithAggregatesInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var OrderFindUniqueArgsSchema = z$2.object({
  select: OrderSelectSchema.optional(),
  include: OrderIncludeSchema.optional(),
  where: OrderWhereUniqueInputSchema
}).strict();
var OrderFindUniqueOrThrowArgsSchema = z$2.object({
  select: OrderSelectSchema.optional(),
  include: OrderIncludeSchema.optional(),
  where: OrderWhereUniqueInputSchema
}).strict();
var OrderItemFindFirstArgsSchema = z$2.object({
  select: OrderItemSelectSchema.optional(),
  include: OrderItemIncludeSchema.optional(),
  where: OrderItemWhereInputSchema.optional(),
  orderBy: z$2.union([OrderItemOrderByWithRelationInputSchema.array(), OrderItemOrderByWithRelationInputSchema]).optional(),
  cursor: OrderItemWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([OrderItemScalarFieldEnumSchema, OrderItemScalarFieldEnumSchema.array()]).optional()
}).strict();
var OrderItemFindFirstOrThrowArgsSchema = z$2.object({
  select: OrderItemSelectSchema.optional(),
  include: OrderItemIncludeSchema.optional(),
  where: OrderItemWhereInputSchema.optional(),
  orderBy: z$2.union([OrderItemOrderByWithRelationInputSchema.array(), OrderItemOrderByWithRelationInputSchema]).optional(),
  cursor: OrderItemWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([OrderItemScalarFieldEnumSchema, OrderItemScalarFieldEnumSchema.array()]).optional()
}).strict();
var OrderItemFindManyArgsSchema = z$2.object({
  select: OrderItemSelectSchema.optional(),
  include: OrderItemIncludeSchema.optional(),
  where: OrderItemWhereInputSchema.optional(),
  orderBy: z$2.union([OrderItemOrderByWithRelationInputSchema.array(), OrderItemOrderByWithRelationInputSchema]).optional(),
  cursor: OrderItemWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([OrderItemScalarFieldEnumSchema, OrderItemScalarFieldEnumSchema.array()]).optional()
}).strict();
var OrderItemAggregateArgsSchema = z$2.object({
  where: OrderItemWhereInputSchema.optional(),
  orderBy: z$2.union([OrderItemOrderByWithRelationInputSchema.array(), OrderItemOrderByWithRelationInputSchema]).optional(),
  cursor: OrderItemWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var OrderItemGroupByArgsSchema = z$2.object({
  where: OrderItemWhereInputSchema.optional(),
  orderBy: z$2.union([OrderItemOrderByWithAggregationInputSchema.array(), OrderItemOrderByWithAggregationInputSchema]).optional(),
  by: OrderItemScalarFieldEnumSchema.array(),
  having: OrderItemScalarWhereWithAggregatesInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var OrderItemFindUniqueArgsSchema = z$2.object({
  select: OrderItemSelectSchema.optional(),
  include: OrderItemIncludeSchema.optional(),
  where: OrderItemWhereUniqueInputSchema
}).strict();
var OrderItemFindUniqueOrThrowArgsSchema = z$2.object({
  select: OrderItemSelectSchema.optional(),
  include: OrderItemIncludeSchema.optional(),
  where: OrderItemWhereUniqueInputSchema
}).strict();
var VendorFindFirstArgsSchema = z$2.object({
  select: VendorSelectSchema.optional(),
  include: VendorIncludeSchema.optional(),
  where: VendorWhereInputSchema.optional(),
  orderBy: z$2.union([VendorOrderByWithRelationInputSchema.array(), VendorOrderByWithRelationInputSchema]).optional(),
  cursor: VendorWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([VendorScalarFieldEnumSchema, VendorScalarFieldEnumSchema.array()]).optional()
}).strict();
var VendorFindFirstOrThrowArgsSchema = z$2.object({
  select: VendorSelectSchema.optional(),
  include: VendorIncludeSchema.optional(),
  where: VendorWhereInputSchema.optional(),
  orderBy: z$2.union([VendorOrderByWithRelationInputSchema.array(), VendorOrderByWithRelationInputSchema]).optional(),
  cursor: VendorWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([VendorScalarFieldEnumSchema, VendorScalarFieldEnumSchema.array()]).optional()
}).strict();
var VendorFindManyArgsSchema = z$2.object({
  select: VendorSelectSchema.optional(),
  include: VendorIncludeSchema.optional(),
  where: VendorWhereInputSchema.optional(),
  orderBy: z$2.union([VendorOrderByWithRelationInputSchema.array(), VendorOrderByWithRelationInputSchema]).optional(),
  cursor: VendorWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([VendorScalarFieldEnumSchema, VendorScalarFieldEnumSchema.array()]).optional()
}).strict();
var VendorAggregateArgsSchema = z$2.object({
  where: VendorWhereInputSchema.optional(),
  orderBy: z$2.union([VendorOrderByWithRelationInputSchema.array(), VendorOrderByWithRelationInputSchema]).optional(),
  cursor: VendorWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var VendorGroupByArgsSchema = z$2.object({
  where: VendorWhereInputSchema.optional(),
  orderBy: z$2.union([VendorOrderByWithAggregationInputSchema.array(), VendorOrderByWithAggregationInputSchema]).optional(),
  by: VendorScalarFieldEnumSchema.array(),
  having: VendorScalarWhereWithAggregatesInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var VendorFindUniqueArgsSchema = z$2.object({
  select: VendorSelectSchema.optional(),
  include: VendorIncludeSchema.optional(),
  where: VendorWhereUniqueInputSchema
}).strict();
var VendorFindUniqueOrThrowArgsSchema = z$2.object({
  select: VendorSelectSchema.optional(),
  include: VendorIncludeSchema.optional(),
  where: VendorWhereUniqueInputSchema
}).strict();
var ShiftFindFirstArgsSchema = z$2.object({
  select: ShiftSelectSchema.optional(),
  include: ShiftIncludeSchema.optional(),
  where: ShiftWhereInputSchema.optional(),
  orderBy: z$2.union([ShiftOrderByWithRelationInputSchema.array(), ShiftOrderByWithRelationInputSchema]).optional(),
  cursor: ShiftWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([ShiftScalarFieldEnumSchema, ShiftScalarFieldEnumSchema.array()]).optional()
}).strict();
var ShiftFindFirstOrThrowArgsSchema = z$2.object({
  select: ShiftSelectSchema.optional(),
  include: ShiftIncludeSchema.optional(),
  where: ShiftWhereInputSchema.optional(),
  orderBy: z$2.union([ShiftOrderByWithRelationInputSchema.array(), ShiftOrderByWithRelationInputSchema]).optional(),
  cursor: ShiftWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([ShiftScalarFieldEnumSchema, ShiftScalarFieldEnumSchema.array()]).optional()
}).strict();
var ShiftFindManyArgsSchema = z$2.object({
  select: ShiftSelectSchema.optional(),
  include: ShiftIncludeSchema.optional(),
  where: ShiftWhereInputSchema.optional(),
  orderBy: z$2.union([ShiftOrderByWithRelationInputSchema.array(), ShiftOrderByWithRelationInputSchema]).optional(),
  cursor: ShiftWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([ShiftScalarFieldEnumSchema, ShiftScalarFieldEnumSchema.array()]).optional()
}).strict();
var ShiftAggregateArgsSchema = z$2.object({
  where: ShiftWhereInputSchema.optional(),
  orderBy: z$2.union([ShiftOrderByWithRelationInputSchema.array(), ShiftOrderByWithRelationInputSchema]).optional(),
  cursor: ShiftWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var ShiftGroupByArgsSchema = z$2.object({
  where: ShiftWhereInputSchema.optional(),
  orderBy: z$2.union([ShiftOrderByWithAggregationInputSchema.array(), ShiftOrderByWithAggregationInputSchema]).optional(),
  by: ShiftScalarFieldEnumSchema.array(),
  having: ShiftScalarWhereWithAggregatesInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var ShiftFindUniqueArgsSchema = z$2.object({
  select: ShiftSelectSchema.optional(),
  include: ShiftIncludeSchema.optional(),
  where: ShiftWhereUniqueInputSchema
}).strict();
var ShiftFindUniqueOrThrowArgsSchema = z$2.object({
  select: ShiftSelectSchema.optional(),
  include: ShiftIncludeSchema.optional(),
  where: ShiftWhereUniqueInputSchema
}).strict();
var PrepBoardFindFirstArgsSchema = z$2.object({
  select: PrepBoardSelectSchema.optional(),
  include: PrepBoardIncludeSchema.optional(),
  where: PrepBoardWhereInputSchema.optional(),
  orderBy: z$2.union([PrepBoardOrderByWithRelationInputSchema.array(), PrepBoardOrderByWithRelationInputSchema]).optional(),
  cursor: PrepBoardWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([PrepBoardScalarFieldEnumSchema, PrepBoardScalarFieldEnumSchema.array()]).optional()
}).strict();
var PrepBoardFindFirstOrThrowArgsSchema = z$2.object({
  select: PrepBoardSelectSchema.optional(),
  include: PrepBoardIncludeSchema.optional(),
  where: PrepBoardWhereInputSchema.optional(),
  orderBy: z$2.union([PrepBoardOrderByWithRelationInputSchema.array(), PrepBoardOrderByWithRelationInputSchema]).optional(),
  cursor: PrepBoardWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([PrepBoardScalarFieldEnumSchema, PrepBoardScalarFieldEnumSchema.array()]).optional()
}).strict();
var PrepBoardFindManyArgsSchema = z$2.object({
  select: PrepBoardSelectSchema.optional(),
  include: PrepBoardIncludeSchema.optional(),
  where: PrepBoardWhereInputSchema.optional(),
  orderBy: z$2.union([PrepBoardOrderByWithRelationInputSchema.array(), PrepBoardOrderByWithRelationInputSchema]).optional(),
  cursor: PrepBoardWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([PrepBoardScalarFieldEnumSchema, PrepBoardScalarFieldEnumSchema.array()]).optional()
}).strict();
var PrepBoardAggregateArgsSchema = z$2.object({
  where: PrepBoardWhereInputSchema.optional(),
  orderBy: z$2.union([PrepBoardOrderByWithRelationInputSchema.array(), PrepBoardOrderByWithRelationInputSchema]).optional(),
  cursor: PrepBoardWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var PrepBoardGroupByArgsSchema = z$2.object({
  where: PrepBoardWhereInputSchema.optional(),
  orderBy: z$2.union([PrepBoardOrderByWithAggregationInputSchema.array(), PrepBoardOrderByWithAggregationInputSchema]).optional(),
  by: PrepBoardScalarFieldEnumSchema.array(),
  having: PrepBoardScalarWhereWithAggregatesInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var PrepBoardFindUniqueArgsSchema = z$2.object({
  select: PrepBoardSelectSchema.optional(),
  include: PrepBoardIncludeSchema.optional(),
  where: PrepBoardWhereUniqueInputSchema
}).strict();
var PrepBoardFindUniqueOrThrowArgsSchema = z$2.object({
  select: PrepBoardSelectSchema.optional(),
  include: PrepBoardIncludeSchema.optional(),
  where: PrepBoardWhereUniqueInputSchema
}).strict();
var PrepItemFindFirstArgsSchema = z$2.object({
  select: PrepItemSelectSchema.optional(),
  include: PrepItemIncludeSchema.optional(),
  where: PrepItemWhereInputSchema.optional(),
  orderBy: z$2.union([PrepItemOrderByWithRelationInputSchema.array(), PrepItemOrderByWithRelationInputSchema]).optional(),
  cursor: PrepItemWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([PrepItemScalarFieldEnumSchema, PrepItemScalarFieldEnumSchema.array()]).optional()
}).strict();
var PrepItemFindFirstOrThrowArgsSchema = z$2.object({
  select: PrepItemSelectSchema.optional(),
  include: PrepItemIncludeSchema.optional(),
  where: PrepItemWhereInputSchema.optional(),
  orderBy: z$2.union([PrepItemOrderByWithRelationInputSchema.array(), PrepItemOrderByWithRelationInputSchema]).optional(),
  cursor: PrepItemWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([PrepItemScalarFieldEnumSchema, PrepItemScalarFieldEnumSchema.array()]).optional()
}).strict();
var PrepItemFindManyArgsSchema = z$2.object({
  select: PrepItemSelectSchema.optional(),
  include: PrepItemIncludeSchema.optional(),
  where: PrepItemWhereInputSchema.optional(),
  orderBy: z$2.union([PrepItemOrderByWithRelationInputSchema.array(), PrepItemOrderByWithRelationInputSchema]).optional(),
  cursor: PrepItemWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([PrepItemScalarFieldEnumSchema, PrepItemScalarFieldEnumSchema.array()]).optional()
}).strict();
var PrepItemAggregateArgsSchema = z$2.object({
  where: PrepItemWhereInputSchema.optional(),
  orderBy: z$2.union([PrepItemOrderByWithRelationInputSchema.array(), PrepItemOrderByWithRelationInputSchema]).optional(),
  cursor: PrepItemWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var PrepItemGroupByArgsSchema = z$2.object({
  where: PrepItemWhereInputSchema.optional(),
  orderBy: z$2.union([PrepItemOrderByWithAggregationInputSchema.array(), PrepItemOrderByWithAggregationInputSchema]).optional(),
  by: PrepItemScalarFieldEnumSchema.array(),
  having: PrepItemScalarWhereWithAggregatesInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var PrepItemFindUniqueArgsSchema = z$2.object({
  select: PrepItemSelectSchema.optional(),
  include: PrepItemIncludeSchema.optional(),
  where: PrepItemWhereUniqueInputSchema
}).strict();
var PrepItemFindUniqueOrThrowArgsSchema = z$2.object({
  select: PrepItemSelectSchema.optional(),
  include: PrepItemIncludeSchema.optional(),
  where: PrepItemWhereUniqueInputSchema
}).strict();
var PasswordResetFindFirstArgsSchema = z$2.object({
  select: PasswordResetSelectSchema.optional(),
  include: PasswordResetIncludeSchema.optional(),
  where: PasswordResetWhereInputSchema.optional(),
  orderBy: z$2.union([PasswordResetOrderByWithRelationInputSchema.array(), PasswordResetOrderByWithRelationInputSchema]).optional(),
  cursor: PasswordResetWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([PasswordResetScalarFieldEnumSchema, PasswordResetScalarFieldEnumSchema.array()]).optional()
}).strict();
var PasswordResetFindFirstOrThrowArgsSchema = z$2.object({
  select: PasswordResetSelectSchema.optional(),
  include: PasswordResetIncludeSchema.optional(),
  where: PasswordResetWhereInputSchema.optional(),
  orderBy: z$2.union([PasswordResetOrderByWithRelationInputSchema.array(), PasswordResetOrderByWithRelationInputSchema]).optional(),
  cursor: PasswordResetWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([PasswordResetScalarFieldEnumSchema, PasswordResetScalarFieldEnumSchema.array()]).optional()
}).strict();
var PasswordResetFindManyArgsSchema = z$2.object({
  select: PasswordResetSelectSchema.optional(),
  include: PasswordResetIncludeSchema.optional(),
  where: PasswordResetWhereInputSchema.optional(),
  orderBy: z$2.union([PasswordResetOrderByWithRelationInputSchema.array(), PasswordResetOrderByWithRelationInputSchema]).optional(),
  cursor: PasswordResetWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([PasswordResetScalarFieldEnumSchema, PasswordResetScalarFieldEnumSchema.array()]).optional()
}).strict();
var PasswordResetAggregateArgsSchema = z$2.object({
  where: PasswordResetWhereInputSchema.optional(),
  orderBy: z$2.union([PasswordResetOrderByWithRelationInputSchema.array(), PasswordResetOrderByWithRelationInputSchema]).optional(),
  cursor: PasswordResetWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var PasswordResetGroupByArgsSchema = z$2.object({
  where: PasswordResetWhereInputSchema.optional(),
  orderBy: z$2.union([PasswordResetOrderByWithAggregationInputSchema.array(), PasswordResetOrderByWithAggregationInputSchema]).optional(),
  by: PasswordResetScalarFieldEnumSchema.array(),
  having: PasswordResetScalarWhereWithAggregatesInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var PasswordResetFindUniqueArgsSchema = z$2.object({
  select: PasswordResetSelectSchema.optional(),
  include: PasswordResetIncludeSchema.optional(),
  where: PasswordResetWhereUniqueInputSchema
}).strict();
var PasswordResetFindUniqueOrThrowArgsSchema = z$2.object({
  select: PasswordResetSelectSchema.optional(),
  include: PasswordResetIncludeSchema.optional(),
  where: PasswordResetWhereUniqueInputSchema
}).strict();
var MenuFindFirstArgsSchema = z$2.object({
  select: MenuSelectSchema.optional(),
  include: MenuIncludeSchema.optional(),
  where: MenuWhereInputSchema.optional(),
  orderBy: z$2.union([MenuOrderByWithRelationInputSchema.array(), MenuOrderByWithRelationInputSchema]).optional(),
  cursor: MenuWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([MenuScalarFieldEnumSchema, MenuScalarFieldEnumSchema.array()]).optional()
}).strict();
var MenuFindFirstOrThrowArgsSchema = z$2.object({
  select: MenuSelectSchema.optional(),
  include: MenuIncludeSchema.optional(),
  where: MenuWhereInputSchema.optional(),
  orderBy: z$2.union([MenuOrderByWithRelationInputSchema.array(), MenuOrderByWithRelationInputSchema]).optional(),
  cursor: MenuWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([MenuScalarFieldEnumSchema, MenuScalarFieldEnumSchema.array()]).optional()
}).strict();
var MenuFindManyArgsSchema = z$2.object({
  select: MenuSelectSchema.optional(),
  include: MenuIncludeSchema.optional(),
  where: MenuWhereInputSchema.optional(),
  orderBy: z$2.union([MenuOrderByWithRelationInputSchema.array(), MenuOrderByWithRelationInputSchema]).optional(),
  cursor: MenuWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([MenuScalarFieldEnumSchema, MenuScalarFieldEnumSchema.array()]).optional()
}).strict();
var MenuAggregateArgsSchema = z$2.object({
  where: MenuWhereInputSchema.optional(),
  orderBy: z$2.union([MenuOrderByWithRelationInputSchema.array(), MenuOrderByWithRelationInputSchema]).optional(),
  cursor: MenuWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var MenuGroupByArgsSchema = z$2.object({
  where: MenuWhereInputSchema.optional(),
  orderBy: z$2.union([MenuOrderByWithAggregationInputSchema.array(), MenuOrderByWithAggregationInputSchema]).optional(),
  by: MenuScalarFieldEnumSchema.array(),
  having: MenuScalarWhereWithAggregatesInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var MenuFindUniqueArgsSchema = z$2.object({
  select: MenuSelectSchema.optional(),
  include: MenuIncludeSchema.optional(),
  where: MenuWhereUniqueInputSchema
}).strict();
var MenuFindUniqueOrThrowArgsSchema = z$2.object({
  select: MenuSelectSchema.optional(),
  include: MenuIncludeSchema.optional(),
  where: MenuWhereUniqueInputSchema
}).strict();
var MenuItemRecipeFindFirstArgsSchema = z$2.object({
  select: MenuItemRecipeSelectSchema.optional(),
  include: MenuItemRecipeIncludeSchema.optional(),
  where: MenuItemRecipeWhereInputSchema.optional(),
  orderBy: z$2.union([MenuItemRecipeOrderByWithRelationInputSchema.array(), MenuItemRecipeOrderByWithRelationInputSchema]).optional(),
  cursor: MenuItemRecipeWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([MenuItemRecipeScalarFieldEnumSchema, MenuItemRecipeScalarFieldEnumSchema.array()]).optional()
}).strict();
var MenuItemRecipeFindFirstOrThrowArgsSchema = z$2.object({
  select: MenuItemRecipeSelectSchema.optional(),
  include: MenuItemRecipeIncludeSchema.optional(),
  where: MenuItemRecipeWhereInputSchema.optional(),
  orderBy: z$2.union([MenuItemRecipeOrderByWithRelationInputSchema.array(), MenuItemRecipeOrderByWithRelationInputSchema]).optional(),
  cursor: MenuItemRecipeWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([MenuItemRecipeScalarFieldEnumSchema, MenuItemRecipeScalarFieldEnumSchema.array()]).optional()
}).strict();
var MenuItemRecipeFindManyArgsSchema = z$2.object({
  select: MenuItemRecipeSelectSchema.optional(),
  include: MenuItemRecipeIncludeSchema.optional(),
  where: MenuItemRecipeWhereInputSchema.optional(),
  orderBy: z$2.union([MenuItemRecipeOrderByWithRelationInputSchema.array(), MenuItemRecipeOrderByWithRelationInputSchema]).optional(),
  cursor: MenuItemRecipeWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([MenuItemRecipeScalarFieldEnumSchema, MenuItemRecipeScalarFieldEnumSchema.array()]).optional()
}).strict();
var MenuItemRecipeAggregateArgsSchema = z$2.object({
  where: MenuItemRecipeWhereInputSchema.optional(),
  orderBy: z$2.union([MenuItemRecipeOrderByWithRelationInputSchema.array(), MenuItemRecipeOrderByWithRelationInputSchema]).optional(),
  cursor: MenuItemRecipeWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var MenuItemRecipeGroupByArgsSchema = z$2.object({
  where: MenuItemRecipeWhereInputSchema.optional(),
  orderBy: z$2.union([MenuItemRecipeOrderByWithAggregationInputSchema.array(), MenuItemRecipeOrderByWithAggregationInputSchema]).optional(),
  by: MenuItemRecipeScalarFieldEnumSchema.array(),
  having: MenuItemRecipeScalarWhereWithAggregatesInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var MenuItemRecipeFindUniqueArgsSchema = z$2.object({
  select: MenuItemRecipeSelectSchema.optional(),
  include: MenuItemRecipeIncludeSchema.optional(),
  where: MenuItemRecipeWhereUniqueInputSchema
}).strict();
var MenuItemRecipeFindUniqueOrThrowArgsSchema = z$2.object({
  select: MenuItemRecipeSelectSchema.optional(),
  include: MenuItemRecipeIncludeSchema.optional(),
  where: MenuItemRecipeWhereUniqueInputSchema
}).strict();
var MenuItemFindFirstArgsSchema = z$2.object({
  select: MenuItemSelectSchema.optional(),
  include: MenuItemIncludeSchema.optional(),
  where: MenuItemWhereInputSchema.optional(),
  orderBy: z$2.union([MenuItemOrderByWithRelationInputSchema.array(), MenuItemOrderByWithRelationInputSchema]).optional(),
  cursor: MenuItemWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([MenuItemScalarFieldEnumSchema, MenuItemScalarFieldEnumSchema.array()]).optional()
}).strict();
var MenuItemFindFirstOrThrowArgsSchema = z$2.object({
  select: MenuItemSelectSchema.optional(),
  include: MenuItemIncludeSchema.optional(),
  where: MenuItemWhereInputSchema.optional(),
  orderBy: z$2.union([MenuItemOrderByWithRelationInputSchema.array(), MenuItemOrderByWithRelationInputSchema]).optional(),
  cursor: MenuItemWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([MenuItemScalarFieldEnumSchema, MenuItemScalarFieldEnumSchema.array()]).optional()
}).strict();
var MenuItemFindManyArgsSchema = z$2.object({
  select: MenuItemSelectSchema.optional(),
  include: MenuItemIncludeSchema.optional(),
  where: MenuItemWhereInputSchema.optional(),
  orderBy: z$2.union([MenuItemOrderByWithRelationInputSchema.array(), MenuItemOrderByWithRelationInputSchema]).optional(),
  cursor: MenuItemWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([MenuItemScalarFieldEnumSchema, MenuItemScalarFieldEnumSchema.array()]).optional()
}).strict();
var MenuItemAggregateArgsSchema = z$2.object({
  where: MenuItemWhereInputSchema.optional(),
  orderBy: z$2.union([MenuItemOrderByWithRelationInputSchema.array(), MenuItemOrderByWithRelationInputSchema]).optional(),
  cursor: MenuItemWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var MenuItemGroupByArgsSchema = z$2.object({
  where: MenuItemWhereInputSchema.optional(),
  orderBy: z$2.union([MenuItemOrderByWithAggregationInputSchema.array(), MenuItemOrderByWithAggregationInputSchema]).optional(),
  by: MenuItemScalarFieldEnumSchema.array(),
  having: MenuItemScalarWhereWithAggregatesInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var MenuItemFindUniqueArgsSchema = z$2.object({
  select: MenuItemSelectSchema.optional(),
  include: MenuItemIncludeSchema.optional(),
  where: MenuItemWhereUniqueInputSchema
}).strict();
var MenuItemFindUniqueOrThrowArgsSchema = z$2.object({
  select: MenuItemSelectSchema.optional(),
  include: MenuItemIncludeSchema.optional(),
  where: MenuItemWhereUniqueInputSchema
}).strict();
var NutritionalInfoFindFirstArgsSchema = z$2.object({
  select: NutritionalInfoSelectSchema.optional(),
  include: NutritionalInfoIncludeSchema.optional(),
  where: NutritionalInfoWhereInputSchema.optional(),
  orderBy: z$2.union([NutritionalInfoOrderByWithRelationInputSchema.array(), NutritionalInfoOrderByWithRelationInputSchema]).optional(),
  cursor: NutritionalInfoWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([NutritionalInfoScalarFieldEnumSchema, NutritionalInfoScalarFieldEnumSchema.array()]).optional()
}).strict();
var NutritionalInfoFindFirstOrThrowArgsSchema = z$2.object({
  select: NutritionalInfoSelectSchema.optional(),
  include: NutritionalInfoIncludeSchema.optional(),
  where: NutritionalInfoWhereInputSchema.optional(),
  orderBy: z$2.union([NutritionalInfoOrderByWithRelationInputSchema.array(), NutritionalInfoOrderByWithRelationInputSchema]).optional(),
  cursor: NutritionalInfoWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([NutritionalInfoScalarFieldEnumSchema, NutritionalInfoScalarFieldEnumSchema.array()]).optional()
}).strict();
var NutritionalInfoFindManyArgsSchema = z$2.object({
  select: NutritionalInfoSelectSchema.optional(),
  include: NutritionalInfoIncludeSchema.optional(),
  where: NutritionalInfoWhereInputSchema.optional(),
  orderBy: z$2.union([NutritionalInfoOrderByWithRelationInputSchema.array(), NutritionalInfoOrderByWithRelationInputSchema]).optional(),
  cursor: NutritionalInfoWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([NutritionalInfoScalarFieldEnumSchema, NutritionalInfoScalarFieldEnumSchema.array()]).optional()
}).strict();
var NutritionalInfoAggregateArgsSchema = z$2.object({
  where: NutritionalInfoWhereInputSchema.optional(),
  orderBy: z$2.union([NutritionalInfoOrderByWithRelationInputSchema.array(), NutritionalInfoOrderByWithRelationInputSchema]).optional(),
  cursor: NutritionalInfoWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var NutritionalInfoGroupByArgsSchema = z$2.object({
  where: NutritionalInfoWhereInputSchema.optional(),
  orderBy: z$2.union([NutritionalInfoOrderByWithAggregationInputSchema.array(), NutritionalInfoOrderByWithAggregationInputSchema]).optional(),
  by: NutritionalInfoScalarFieldEnumSchema.array(),
  having: NutritionalInfoScalarWhereWithAggregatesInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var NutritionalInfoFindUniqueArgsSchema = z$2.object({
  select: NutritionalInfoSelectSchema.optional(),
  include: NutritionalInfoIncludeSchema.optional(),
  where: NutritionalInfoWhereUniqueInputSchema
}).strict();
var NutritionalInfoFindUniqueOrThrowArgsSchema = z$2.object({
  select: NutritionalInfoSelectSchema.optional(),
  include: NutritionalInfoIncludeSchema.optional(),
  where: NutritionalInfoWhereUniqueInputSchema
}).strict();
var FoodCostHistoryFindFirstArgsSchema = z$2.object({
  select: FoodCostHistorySelectSchema.optional(),
  include: FoodCostHistoryIncludeSchema.optional(),
  where: FoodCostHistoryWhereInputSchema.optional(),
  orderBy: z$2.union([FoodCostHistoryOrderByWithRelationInputSchema.array(), FoodCostHistoryOrderByWithRelationInputSchema]).optional(),
  cursor: FoodCostHistoryWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([FoodCostHistoryScalarFieldEnumSchema, FoodCostHistoryScalarFieldEnumSchema.array()]).optional()
}).strict();
var FoodCostHistoryFindFirstOrThrowArgsSchema = z$2.object({
  select: FoodCostHistorySelectSchema.optional(),
  include: FoodCostHistoryIncludeSchema.optional(),
  where: FoodCostHistoryWhereInputSchema.optional(),
  orderBy: z$2.union([FoodCostHistoryOrderByWithRelationInputSchema.array(), FoodCostHistoryOrderByWithRelationInputSchema]).optional(),
  cursor: FoodCostHistoryWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([FoodCostHistoryScalarFieldEnumSchema, FoodCostHistoryScalarFieldEnumSchema.array()]).optional()
}).strict();
var FoodCostHistoryFindManyArgsSchema = z$2.object({
  select: FoodCostHistorySelectSchema.optional(),
  include: FoodCostHistoryIncludeSchema.optional(),
  where: FoodCostHistoryWhereInputSchema.optional(),
  orderBy: z$2.union([FoodCostHistoryOrderByWithRelationInputSchema.array(), FoodCostHistoryOrderByWithRelationInputSchema]).optional(),
  cursor: FoodCostHistoryWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([FoodCostHistoryScalarFieldEnumSchema, FoodCostHistoryScalarFieldEnumSchema.array()]).optional()
}).strict();
var FoodCostHistoryAggregateArgsSchema = z$2.object({
  where: FoodCostHistoryWhereInputSchema.optional(),
  orderBy: z$2.union([FoodCostHistoryOrderByWithRelationInputSchema.array(), FoodCostHistoryOrderByWithRelationInputSchema]).optional(),
  cursor: FoodCostHistoryWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var FoodCostHistoryGroupByArgsSchema = z$2.object({
  where: FoodCostHistoryWhereInputSchema.optional(),
  orderBy: z$2.union([FoodCostHistoryOrderByWithAggregationInputSchema.array(), FoodCostHistoryOrderByWithAggregationInputSchema]).optional(),
  by: FoodCostHistoryScalarFieldEnumSchema.array(),
  having: FoodCostHistoryScalarWhereWithAggregatesInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var FoodCostHistoryFindUniqueArgsSchema = z$2.object({
  select: FoodCostHistorySelectSchema.optional(),
  include: FoodCostHistoryIncludeSchema.optional(),
  where: FoodCostHistoryWhereUniqueInputSchema
}).strict();
var FoodCostHistoryFindUniqueOrThrowArgsSchema = z$2.object({
  select: FoodCostHistorySelectSchema.optional(),
  include: FoodCostHistoryIncludeSchema.optional(),
  where: FoodCostHistoryWhereUniqueInputSchema
}).strict();
var PrepHistoryFindFirstArgsSchema = z$2.object({
  select: PrepHistorySelectSchema.optional(),
  include: PrepHistoryIncludeSchema.optional(),
  where: PrepHistoryWhereInputSchema.optional(),
  orderBy: z$2.union([PrepHistoryOrderByWithRelationInputSchema.array(), PrepHistoryOrderByWithRelationInputSchema]).optional(),
  cursor: PrepHistoryWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([PrepHistoryScalarFieldEnumSchema, PrepHistoryScalarFieldEnumSchema.array()]).optional()
}).strict();
var PrepHistoryFindFirstOrThrowArgsSchema = z$2.object({
  select: PrepHistorySelectSchema.optional(),
  include: PrepHistoryIncludeSchema.optional(),
  where: PrepHistoryWhereInputSchema.optional(),
  orderBy: z$2.union([PrepHistoryOrderByWithRelationInputSchema.array(), PrepHistoryOrderByWithRelationInputSchema]).optional(),
  cursor: PrepHistoryWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([PrepHistoryScalarFieldEnumSchema, PrepHistoryScalarFieldEnumSchema.array()]).optional()
}).strict();
var PrepHistoryFindManyArgsSchema = z$2.object({
  select: PrepHistorySelectSchema.optional(),
  include: PrepHistoryIncludeSchema.optional(),
  where: PrepHistoryWhereInputSchema.optional(),
  orderBy: z$2.union([PrepHistoryOrderByWithRelationInputSchema.array(), PrepHistoryOrderByWithRelationInputSchema]).optional(),
  cursor: PrepHistoryWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional(),
  distinct: z$2.union([PrepHistoryScalarFieldEnumSchema, PrepHistoryScalarFieldEnumSchema.array()]).optional()
}).strict();
var PrepHistoryAggregateArgsSchema = z$2.object({
  where: PrepHistoryWhereInputSchema.optional(),
  orderBy: z$2.union([PrepHistoryOrderByWithRelationInputSchema.array(), PrepHistoryOrderByWithRelationInputSchema]).optional(),
  cursor: PrepHistoryWhereUniqueInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var PrepHistoryGroupByArgsSchema = z$2.object({
  where: PrepHistoryWhereInputSchema.optional(),
  orderBy: z$2.union([PrepHistoryOrderByWithAggregationInputSchema.array(), PrepHistoryOrderByWithAggregationInputSchema]).optional(),
  by: PrepHistoryScalarFieldEnumSchema.array(),
  having: PrepHistoryScalarWhereWithAggregatesInputSchema.optional(),
  take: z$2.number().optional(),
  skip: z$2.number().optional()
}).strict();
var PrepHistoryFindUniqueArgsSchema = z$2.object({
  select: PrepHistorySelectSchema.optional(),
  include: PrepHistoryIncludeSchema.optional(),
  where: PrepHistoryWhereUniqueInputSchema
}).strict();
var PrepHistoryFindUniqueOrThrowArgsSchema = z$2.object({
  select: PrepHistorySelectSchema.optional(),
  include: PrepHistoryIncludeSchema.optional(),
  where: PrepHistoryWhereUniqueInputSchema
}).strict();
var SalesTransactionsCreateArgsSchema = z$2.object({
  select: SalesTransactionsSelectSchema.optional(),
  include: SalesTransactionsIncludeSchema.optional(),
  data: z$2.union([SalesTransactionsCreateInputSchema, SalesTransactionsUncheckedCreateInputSchema])
}).strict();
var SalesTransactionsUpsertArgsSchema = z$2.object({
  select: SalesTransactionsSelectSchema.optional(),
  include: SalesTransactionsIncludeSchema.optional(),
  where: SalesTransactionsWhereUniqueInputSchema,
  create: z$2.union([SalesTransactionsCreateInputSchema, SalesTransactionsUncheckedCreateInputSchema]),
  update: z$2.union([SalesTransactionsUpdateInputSchema, SalesTransactionsUncheckedUpdateInputSchema])
}).strict();
var SalesTransactionsCreateManyArgsSchema = z$2.object({
  data: z$2.union([SalesTransactionsCreateManyInputSchema, SalesTransactionsCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var SalesTransactionsCreateManyAndReturnArgsSchema = z$2.object({
  data: z$2.union([SalesTransactionsCreateManyInputSchema, SalesTransactionsCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var SalesTransactionsDeleteArgsSchema = z$2.object({
  select: SalesTransactionsSelectSchema.optional(),
  include: SalesTransactionsIncludeSchema.optional(),
  where: SalesTransactionsWhereUniqueInputSchema
}).strict();
var SalesTransactionsUpdateArgsSchema = z$2.object({
  select: SalesTransactionsSelectSchema.optional(),
  include: SalesTransactionsIncludeSchema.optional(),
  data: z$2.union([SalesTransactionsUpdateInputSchema, SalesTransactionsUncheckedUpdateInputSchema]),
  where: SalesTransactionsWhereUniqueInputSchema
}).strict();
var SalesTransactionsUpdateManyArgsSchema = z$2.object({
  data: z$2.union([SalesTransactionsUpdateManyMutationInputSchema, SalesTransactionsUncheckedUpdateManyInputSchema]),
  where: SalesTransactionsWhereInputSchema.optional()
}).strict();
var SalesTransactionsDeleteManyArgsSchema = z$2.object({
  where: SalesTransactionsWhereInputSchema.optional()
}).strict();
var MenuCategoryCreateArgsSchema = z$2.object({
  select: MenuCategorySelectSchema.optional(),
  include: MenuCategoryIncludeSchema.optional(),
  data: z$2.union([MenuCategoryCreateInputSchema, MenuCategoryUncheckedCreateInputSchema])
}).strict();
var MenuCategoryUpsertArgsSchema = z$2.object({
  select: MenuCategorySelectSchema.optional(),
  include: MenuCategoryIncludeSchema.optional(),
  where: MenuCategoryWhereUniqueInputSchema,
  create: z$2.union([MenuCategoryCreateInputSchema, MenuCategoryUncheckedCreateInputSchema]),
  update: z$2.union([MenuCategoryUpdateInputSchema, MenuCategoryUncheckedUpdateInputSchema])
}).strict();
var MenuCategoryCreateManyArgsSchema = z$2.object({
  data: z$2.union([MenuCategoryCreateManyInputSchema, MenuCategoryCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var MenuCategoryCreateManyAndReturnArgsSchema = z$2.object({
  data: z$2.union([MenuCategoryCreateManyInputSchema, MenuCategoryCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var MenuCategoryDeleteArgsSchema = z$2.object({
  select: MenuCategorySelectSchema.optional(),
  include: MenuCategoryIncludeSchema.optional(),
  where: MenuCategoryWhereUniqueInputSchema
}).strict();
var MenuCategoryUpdateArgsSchema = z$2.object({
  select: MenuCategorySelectSchema.optional(),
  include: MenuCategoryIncludeSchema.optional(),
  data: z$2.union([MenuCategoryUpdateInputSchema, MenuCategoryUncheckedUpdateInputSchema]),
  where: MenuCategoryWhereUniqueInputSchema
}).strict();
var MenuCategoryUpdateManyArgsSchema = z$2.object({
  data: z$2.union([MenuCategoryUpdateManyMutationInputSchema, MenuCategoryUncheckedUpdateManyInputSchema]),
  where: MenuCategoryWhereInputSchema.optional()
}).strict();
var MenuCategoryDeleteManyArgsSchema = z$2.object({
  where: MenuCategoryWhereInputSchema.optional()
}).strict();
var RecipeVersionCreateArgsSchema = z$2.object({
  select: RecipeVersionSelectSchema.optional(),
  include: RecipeVersionIncludeSchema.optional(),
  data: z$2.union([RecipeVersionCreateInputSchema, RecipeVersionUncheckedCreateInputSchema])
}).strict();
var RecipeVersionUpsertArgsSchema = z$2.object({
  select: RecipeVersionSelectSchema.optional(),
  include: RecipeVersionIncludeSchema.optional(),
  where: RecipeVersionWhereUniqueInputSchema,
  create: z$2.union([RecipeVersionCreateInputSchema, RecipeVersionUncheckedCreateInputSchema]),
  update: z$2.union([RecipeVersionUpdateInputSchema, RecipeVersionUncheckedUpdateInputSchema])
}).strict();
var RecipeVersionCreateManyArgsSchema = z$2.object({
  data: z$2.union([RecipeVersionCreateManyInputSchema, RecipeVersionCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var RecipeVersionCreateManyAndReturnArgsSchema = z$2.object({
  data: z$2.union([RecipeVersionCreateManyInputSchema, RecipeVersionCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var RecipeVersionDeleteArgsSchema = z$2.object({
  select: RecipeVersionSelectSchema.optional(),
  include: RecipeVersionIncludeSchema.optional(),
  where: RecipeVersionWhereUniqueInputSchema
}).strict();
var RecipeVersionUpdateArgsSchema = z$2.object({
  select: RecipeVersionSelectSchema.optional(),
  include: RecipeVersionIncludeSchema.optional(),
  data: z$2.union([RecipeVersionUpdateInputSchema, RecipeVersionUncheckedUpdateInputSchema]),
  where: RecipeVersionWhereUniqueInputSchema
}).strict();
var RecipeVersionUpdateManyArgsSchema = z$2.object({
  data: z$2.union([RecipeVersionUpdateManyMutationInputSchema, RecipeVersionUncheckedUpdateManyInputSchema]),
  where: RecipeVersionWhereInputSchema.optional()
}).strict();
var RecipeVersionDeleteManyArgsSchema = z$2.object({
  where: RecipeVersionWhereInputSchema.optional()
}).strict();
var EquipmentCreateArgsSchema = z$2.object({
  select: EquipmentSelectSchema.optional(),
  include: EquipmentIncludeSchema.optional(),
  data: z$2.union([EquipmentCreateInputSchema, EquipmentUncheckedCreateInputSchema])
}).strict();
var EquipmentUpsertArgsSchema = z$2.object({
  select: EquipmentSelectSchema.optional(),
  include: EquipmentIncludeSchema.optional(),
  where: EquipmentWhereUniqueInputSchema,
  create: z$2.union([EquipmentCreateInputSchema, EquipmentUncheckedCreateInputSchema]),
  update: z$2.union([EquipmentUpdateInputSchema, EquipmentUncheckedUpdateInputSchema])
}).strict();
var EquipmentCreateManyArgsSchema = z$2.object({
  data: z$2.union([EquipmentCreateManyInputSchema, EquipmentCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var EquipmentCreateManyAndReturnArgsSchema = z$2.object({
  data: z$2.union([EquipmentCreateManyInputSchema, EquipmentCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var EquipmentDeleteArgsSchema = z$2.object({
  select: EquipmentSelectSchema.optional(),
  include: EquipmentIncludeSchema.optional(),
  where: EquipmentWhereUniqueInputSchema
}).strict();
var EquipmentUpdateArgsSchema = z$2.object({
  select: EquipmentSelectSchema.optional(),
  include: EquipmentIncludeSchema.optional(),
  data: z$2.union([EquipmentUpdateInputSchema, EquipmentUncheckedUpdateInputSchema]),
  where: EquipmentWhereUniqueInputSchema
}).strict();
var EquipmentUpdateManyArgsSchema = z$2.object({
  data: z$2.union([EquipmentUpdateManyMutationInputSchema, EquipmentUncheckedUpdateManyInputSchema]),
  where: EquipmentWhereInputSchema.optional()
}).strict();
var EquipmentDeleteManyArgsSchema = z$2.object({
  where: EquipmentWhereInputSchema.optional()
}).strict();
var RecipeEquipmentCreateArgsSchema = z$2.object({
  select: RecipeEquipmentSelectSchema.optional(),
  include: RecipeEquipmentIncludeSchema.optional(),
  data: z$2.union([RecipeEquipmentCreateInputSchema, RecipeEquipmentUncheckedCreateInputSchema])
}).strict();
var RecipeEquipmentUpsertArgsSchema = z$2.object({
  select: RecipeEquipmentSelectSchema.optional(),
  include: RecipeEquipmentIncludeSchema.optional(),
  where: RecipeEquipmentWhereUniqueInputSchema,
  create: z$2.union([RecipeEquipmentCreateInputSchema, RecipeEquipmentUncheckedCreateInputSchema]),
  update: z$2.union([RecipeEquipmentUpdateInputSchema, RecipeEquipmentUncheckedUpdateInputSchema])
}).strict();
var RecipeEquipmentCreateManyArgsSchema = z$2.object({
  data: z$2.union([RecipeEquipmentCreateManyInputSchema, RecipeEquipmentCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var RecipeEquipmentCreateManyAndReturnArgsSchema = z$2.object({
  data: z$2.union([RecipeEquipmentCreateManyInputSchema, RecipeEquipmentCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var RecipeEquipmentDeleteArgsSchema = z$2.object({
  select: RecipeEquipmentSelectSchema.optional(),
  include: RecipeEquipmentIncludeSchema.optional(),
  where: RecipeEquipmentWhereUniqueInputSchema
}).strict();
var RecipeEquipmentUpdateArgsSchema = z$2.object({
  select: RecipeEquipmentSelectSchema.optional(),
  include: RecipeEquipmentIncludeSchema.optional(),
  data: z$2.union([RecipeEquipmentUpdateInputSchema, RecipeEquipmentUncheckedUpdateInputSchema]),
  where: RecipeEquipmentWhereUniqueInputSchema
}).strict();
var RecipeEquipmentUpdateManyArgsSchema = z$2.object({
  data: z$2.union([RecipeEquipmentUpdateManyMutationInputSchema, RecipeEquipmentUncheckedUpdateManyInputSchema]),
  where: RecipeEquipmentWhereInputSchema.optional()
}).strict();
var RecipeEquipmentDeleteManyArgsSchema = z$2.object({
  where: RecipeEquipmentWhereInputSchema.optional()
}).strict();
var MaintenanceLogCreateArgsSchema = z$2.object({
  select: MaintenanceLogSelectSchema.optional(),
  include: MaintenanceLogIncludeSchema.optional(),
  data: z$2.union([MaintenanceLogCreateInputSchema, MaintenanceLogUncheckedCreateInputSchema])
}).strict();
var MaintenanceLogUpsertArgsSchema = z$2.object({
  select: MaintenanceLogSelectSchema.optional(),
  include: MaintenanceLogIncludeSchema.optional(),
  where: MaintenanceLogWhereUniqueInputSchema,
  create: z$2.union([MaintenanceLogCreateInputSchema, MaintenanceLogUncheckedCreateInputSchema]),
  update: z$2.union([MaintenanceLogUpdateInputSchema, MaintenanceLogUncheckedUpdateInputSchema])
}).strict();
var MaintenanceLogCreateManyArgsSchema = z$2.object({
  data: z$2.union([MaintenanceLogCreateManyInputSchema, MaintenanceLogCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var MaintenanceLogCreateManyAndReturnArgsSchema = z$2.object({
  data: z$2.union([MaintenanceLogCreateManyInputSchema, MaintenanceLogCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var MaintenanceLogDeleteArgsSchema = z$2.object({
  select: MaintenanceLogSelectSchema.optional(),
  include: MaintenanceLogIncludeSchema.optional(),
  where: MaintenanceLogWhereUniqueInputSchema
}).strict();
var MaintenanceLogUpdateArgsSchema = z$2.object({
  select: MaintenanceLogSelectSchema.optional(),
  include: MaintenanceLogIncludeSchema.optional(),
  data: z$2.union([MaintenanceLogUpdateInputSchema, MaintenanceLogUncheckedUpdateInputSchema]),
  where: MaintenanceLogWhereUniqueInputSchema
}).strict();
var MaintenanceLogUpdateManyArgsSchema = z$2.object({
  data: z$2.union([MaintenanceLogUpdateManyMutationInputSchema, MaintenanceLogUncheckedUpdateManyInputSchema]),
  where: MaintenanceLogWhereInputSchema.optional()
}).strict();
var MaintenanceLogDeleteManyArgsSchema = z$2.object({
  where: MaintenanceLogWhereInputSchema.optional()
}).strict();
var QualityChecklistCreateArgsSchema = z$2.object({
  select: QualityChecklistSelectSchema.optional(),
  include: QualityChecklistIncludeSchema.optional(),
  data: z$2.union([QualityChecklistCreateInputSchema, QualityChecklistUncheckedCreateInputSchema])
}).strict();
var QualityChecklistUpsertArgsSchema = z$2.object({
  select: QualityChecklistSelectSchema.optional(),
  include: QualityChecklistIncludeSchema.optional(),
  where: QualityChecklistWhereUniqueInputSchema,
  create: z$2.union([QualityChecklistCreateInputSchema, QualityChecklistUncheckedCreateInputSchema]),
  update: z$2.union([QualityChecklistUpdateInputSchema, QualityChecklistUncheckedUpdateInputSchema])
}).strict();
var QualityChecklistCreateManyArgsSchema = z$2.object({
  data: z$2.union([QualityChecklistCreateManyInputSchema, QualityChecklistCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var QualityChecklistCreateManyAndReturnArgsSchema = z$2.object({
  data: z$2.union([QualityChecklistCreateManyInputSchema, QualityChecklistCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var QualityChecklistDeleteArgsSchema = z$2.object({
  select: QualityChecklistSelectSchema.optional(),
  include: QualityChecklistIncludeSchema.optional(),
  where: QualityChecklistWhereUniqueInputSchema
}).strict();
var QualityChecklistUpdateArgsSchema = z$2.object({
  select: QualityChecklistSelectSchema.optional(),
  include: QualityChecklistIncludeSchema.optional(),
  data: z$2.union([QualityChecklistUpdateInputSchema, QualityChecklistUncheckedUpdateInputSchema]),
  where: QualityChecklistWhereUniqueInputSchema
}).strict();
var QualityChecklistUpdateManyArgsSchema = z$2.object({
  data: z$2.union([QualityChecklistUpdateManyMutationInputSchema, QualityChecklistUncheckedUpdateManyInputSchema]),
  where: QualityChecklistWhereInputSchema.optional()
}).strict();
var QualityChecklistDeleteManyArgsSchema = z$2.object({
  where: QualityChecklistWhereInputSchema.optional()
}).strict();
var ChecklistItemCreateArgsSchema = z$2.object({
  select: ChecklistItemSelectSchema.optional(),
  include: ChecklistItemIncludeSchema.optional(),
  data: z$2.union([ChecklistItemCreateInputSchema, ChecklistItemUncheckedCreateInputSchema])
}).strict();
var ChecklistItemUpsertArgsSchema = z$2.object({
  select: ChecklistItemSelectSchema.optional(),
  include: ChecklistItemIncludeSchema.optional(),
  where: ChecklistItemWhereUniqueInputSchema,
  create: z$2.union([ChecklistItemCreateInputSchema, ChecklistItemUncheckedCreateInputSchema]),
  update: z$2.union([ChecklistItemUpdateInputSchema, ChecklistItemUncheckedUpdateInputSchema])
}).strict();
var ChecklistItemCreateManyArgsSchema = z$2.object({
  data: z$2.union([ChecklistItemCreateManyInputSchema, ChecklistItemCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var ChecklistItemCreateManyAndReturnArgsSchema = z$2.object({
  data: z$2.union([ChecklistItemCreateManyInputSchema, ChecklistItemCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var ChecklistItemDeleteArgsSchema = z$2.object({
  select: ChecklistItemSelectSchema.optional(),
  include: ChecklistItemIncludeSchema.optional(),
  where: ChecklistItemWhereUniqueInputSchema
}).strict();
var ChecklistItemUpdateArgsSchema = z$2.object({
  select: ChecklistItemSelectSchema.optional(),
  include: ChecklistItemIncludeSchema.optional(),
  data: z$2.union([ChecklistItemUpdateInputSchema, ChecklistItemUncheckedUpdateInputSchema]),
  where: ChecklistItemWhereUniqueInputSchema
}).strict();
var ChecklistItemUpdateManyArgsSchema = z$2.object({
  data: z$2.union([ChecklistItemUpdateManyMutationInputSchema, ChecklistItemUncheckedUpdateManyInputSchema]),
  where: ChecklistItemWhereInputSchema.optional()
}).strict();
var ChecklistItemDeleteManyArgsSchema = z$2.object({
  where: ChecklistItemWhereInputSchema.optional()
}).strict();
var ChecklistCompleteCreateArgsSchema = z$2.object({
  select: ChecklistCompleteSelectSchema.optional(),
  include: ChecklistCompleteIncludeSchema.optional(),
  data: z$2.union([ChecklistCompleteCreateInputSchema, ChecklistCompleteUncheckedCreateInputSchema])
}).strict();
var ChecklistCompleteUpsertArgsSchema = z$2.object({
  select: ChecklistCompleteSelectSchema.optional(),
  include: ChecklistCompleteIncludeSchema.optional(),
  where: ChecklistCompleteWhereUniqueInputSchema,
  create: z$2.union([ChecklistCompleteCreateInputSchema, ChecklistCompleteUncheckedCreateInputSchema]),
  update: z$2.union([ChecklistCompleteUpdateInputSchema, ChecklistCompleteUncheckedUpdateInputSchema])
}).strict();
var ChecklistCompleteCreateManyArgsSchema = z$2.object({
  data: z$2.union([ChecklistCompleteCreateManyInputSchema, ChecklistCompleteCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var ChecklistCompleteCreateManyAndReturnArgsSchema = z$2.object({
  data: z$2.union([ChecklistCompleteCreateManyInputSchema, ChecklistCompleteCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var ChecklistCompleteDeleteArgsSchema = z$2.object({
  select: ChecklistCompleteSelectSchema.optional(),
  include: ChecklistCompleteIncludeSchema.optional(),
  where: ChecklistCompleteWhereUniqueInputSchema
}).strict();
var ChecklistCompleteUpdateArgsSchema = z$2.object({
  select: ChecklistCompleteSelectSchema.optional(),
  include: ChecklistCompleteIncludeSchema.optional(),
  data: z$2.union([ChecklistCompleteUpdateInputSchema, ChecklistCompleteUncheckedUpdateInputSchema]),
  where: ChecklistCompleteWhereUniqueInputSchema
}).strict();
var ChecklistCompleteUpdateManyArgsSchema = z$2.object({
  data: z$2.union([ChecklistCompleteUpdateManyMutationInputSchema, ChecklistCompleteUncheckedUpdateManyInputSchema]),
  where: ChecklistCompleteWhereInputSchema.optional()
}).strict();
var ChecklistCompleteDeleteManyArgsSchema = z$2.object({
  where: ChecklistCompleteWhereInputSchema.optional()
}).strict();
var ChecklistItemCompleteCreateArgsSchema = z$2.object({
  select: ChecklistItemCompleteSelectSchema.optional(),
  include: ChecklistItemCompleteIncludeSchema.optional(),
  data: z$2.union([ChecklistItemCompleteCreateInputSchema, ChecklistItemCompleteUncheckedCreateInputSchema])
}).strict();
var ChecklistItemCompleteUpsertArgsSchema = z$2.object({
  select: ChecklistItemCompleteSelectSchema.optional(),
  include: ChecklistItemCompleteIncludeSchema.optional(),
  where: ChecklistItemCompleteWhereUniqueInputSchema,
  create: z$2.union([ChecklistItemCompleteCreateInputSchema, ChecklistItemCompleteUncheckedCreateInputSchema]),
  update: z$2.union([ChecklistItemCompleteUpdateInputSchema, ChecklistItemCompleteUncheckedUpdateInputSchema])
}).strict();
var ChecklistItemCompleteCreateManyArgsSchema = z$2.object({
  data: z$2.union([ChecklistItemCompleteCreateManyInputSchema, ChecklistItemCompleteCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var ChecklistItemCompleteCreateManyAndReturnArgsSchema = z$2.object({
  data: z$2.union([ChecklistItemCompleteCreateManyInputSchema, ChecklistItemCompleteCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var ChecklistItemCompleteDeleteArgsSchema = z$2.object({
  select: ChecklistItemCompleteSelectSchema.optional(),
  include: ChecklistItemCompleteIncludeSchema.optional(),
  where: ChecklistItemCompleteWhereUniqueInputSchema
}).strict();
var ChecklistItemCompleteUpdateArgsSchema = z$2.object({
  select: ChecklistItemCompleteSelectSchema.optional(),
  include: ChecklistItemCompleteIncludeSchema.optional(),
  data: z$2.union([ChecklistItemCompleteUpdateInputSchema, ChecklistItemCompleteUncheckedUpdateInputSchema]),
  where: ChecklistItemCompleteWhereUniqueInputSchema
}).strict();
var ChecklistItemCompleteUpdateManyArgsSchema = z$2.object({
  data: z$2.union([ChecklistItemCompleteUpdateManyMutationInputSchema, ChecklistItemCompleteUncheckedUpdateManyInputSchema]),
  where: ChecklistItemCompleteWhereInputSchema.optional()
}).strict();
var ChecklistItemCompleteDeleteManyArgsSchema = z$2.object({
  where: ChecklistItemCompleteWhereInputSchema.optional()
}).strict();
var SupplierPriceHistoryCreateArgsSchema = z$2.object({
  select: SupplierPriceHistorySelectSchema.optional(),
  include: SupplierPriceHistoryIncludeSchema.optional(),
  data: z$2.union([SupplierPriceHistoryCreateInputSchema, SupplierPriceHistoryUncheckedCreateInputSchema])
}).strict();
var SupplierPriceHistoryUpsertArgsSchema = z$2.object({
  select: SupplierPriceHistorySelectSchema.optional(),
  include: SupplierPriceHistoryIncludeSchema.optional(),
  where: SupplierPriceHistoryWhereUniqueInputSchema,
  create: z$2.union([SupplierPriceHistoryCreateInputSchema, SupplierPriceHistoryUncheckedCreateInputSchema]),
  update: z$2.union([SupplierPriceHistoryUpdateInputSchema, SupplierPriceHistoryUncheckedUpdateInputSchema])
}).strict();
var SupplierPriceHistoryCreateManyArgsSchema = z$2.object({
  data: z$2.union([SupplierPriceHistoryCreateManyInputSchema, SupplierPriceHistoryCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var SupplierPriceHistoryCreateManyAndReturnArgsSchema = z$2.object({
  data: z$2.union([SupplierPriceHistoryCreateManyInputSchema, SupplierPriceHistoryCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var SupplierPriceHistoryDeleteArgsSchema = z$2.object({
  select: SupplierPriceHistorySelectSchema.optional(),
  include: SupplierPriceHistoryIncludeSchema.optional(),
  where: SupplierPriceHistoryWhereUniqueInputSchema
}).strict();
var SupplierPriceHistoryUpdateArgsSchema = z$2.object({
  select: SupplierPriceHistorySelectSchema.optional(),
  include: SupplierPriceHistoryIncludeSchema.optional(),
  data: z$2.union([SupplierPriceHistoryUpdateInputSchema, SupplierPriceHistoryUncheckedUpdateInputSchema]),
  where: SupplierPriceHistoryWhereUniqueInputSchema
}).strict();
var SupplierPriceHistoryUpdateManyArgsSchema = z$2.object({
  data: z$2.union([SupplierPriceHistoryUpdateManyMutationInputSchema, SupplierPriceHistoryUncheckedUpdateManyInputSchema]),
  where: SupplierPriceHistoryWhereInputSchema.optional()
}).strict();
var SupplierPriceHistoryDeleteManyArgsSchema = z$2.object({
  where: SupplierPriceHistoryWhereInputSchema.optional()
}).strict();
var CustomerFeedbackCreateArgsSchema = z$2.object({
  select: CustomerFeedbackSelectSchema.optional(),
  include: CustomerFeedbackIncludeSchema.optional(),
  data: z$2.union([CustomerFeedbackCreateInputSchema, CustomerFeedbackUncheckedCreateInputSchema])
}).strict();
var CustomerFeedbackUpsertArgsSchema = z$2.object({
  select: CustomerFeedbackSelectSchema.optional(),
  include: CustomerFeedbackIncludeSchema.optional(),
  where: CustomerFeedbackWhereUniqueInputSchema,
  create: z$2.union([CustomerFeedbackCreateInputSchema, CustomerFeedbackUncheckedCreateInputSchema]),
  update: z$2.union([CustomerFeedbackUpdateInputSchema, CustomerFeedbackUncheckedUpdateInputSchema])
}).strict();
var CustomerFeedbackCreateManyArgsSchema = z$2.object({
  data: z$2.union([CustomerFeedbackCreateManyInputSchema, CustomerFeedbackCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var CustomerFeedbackCreateManyAndReturnArgsSchema = z$2.object({
  data: z$2.union([CustomerFeedbackCreateManyInputSchema, CustomerFeedbackCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var CustomerFeedbackDeleteArgsSchema = z$2.object({
  select: CustomerFeedbackSelectSchema.optional(),
  include: CustomerFeedbackIncludeSchema.optional(),
  where: CustomerFeedbackWhereUniqueInputSchema
}).strict();
var CustomerFeedbackUpdateArgsSchema = z$2.object({
  select: CustomerFeedbackSelectSchema.optional(),
  include: CustomerFeedbackIncludeSchema.optional(),
  data: z$2.union([CustomerFeedbackUpdateInputSchema, CustomerFeedbackUncheckedUpdateInputSchema]),
  where: CustomerFeedbackWhereUniqueInputSchema
}).strict();
var CustomerFeedbackUpdateManyArgsSchema = z$2.object({
  data: z$2.union([CustomerFeedbackUpdateManyMutationInputSchema, CustomerFeedbackUncheckedUpdateManyInputSchema]),
  where: CustomerFeedbackWhereInputSchema.optional()
}).strict();
var CustomerFeedbackDeleteManyArgsSchema = z$2.object({
  where: CustomerFeedbackWhereInputSchema.optional()
}).strict();
var DietaryRestrictionCreateArgsSchema = z$2.object({
  select: DietaryRestrictionSelectSchema.optional(),
  include: DietaryRestrictionIncludeSchema.optional(),
  data: z$2.union([DietaryRestrictionCreateInputSchema, DietaryRestrictionUncheckedCreateInputSchema])
}).strict();
var DietaryRestrictionUpsertArgsSchema = z$2.object({
  select: DietaryRestrictionSelectSchema.optional(),
  include: DietaryRestrictionIncludeSchema.optional(),
  where: DietaryRestrictionWhereUniqueInputSchema,
  create: z$2.union([DietaryRestrictionCreateInputSchema, DietaryRestrictionUncheckedCreateInputSchema]),
  update: z$2.union([DietaryRestrictionUpdateInputSchema, DietaryRestrictionUncheckedUpdateInputSchema])
}).strict();
var DietaryRestrictionCreateManyArgsSchema = z$2.object({
  data: z$2.union([DietaryRestrictionCreateManyInputSchema, DietaryRestrictionCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var DietaryRestrictionCreateManyAndReturnArgsSchema = z$2.object({
  data: z$2.union([DietaryRestrictionCreateManyInputSchema, DietaryRestrictionCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var DietaryRestrictionDeleteArgsSchema = z$2.object({
  select: DietaryRestrictionSelectSchema.optional(),
  include: DietaryRestrictionIncludeSchema.optional(),
  where: DietaryRestrictionWhereUniqueInputSchema
}).strict();
var DietaryRestrictionUpdateArgsSchema = z$2.object({
  select: DietaryRestrictionSelectSchema.optional(),
  include: DietaryRestrictionIncludeSchema.optional(),
  data: z$2.union([DietaryRestrictionUpdateInputSchema, DietaryRestrictionUncheckedUpdateInputSchema]),
  where: DietaryRestrictionWhereUniqueInputSchema
}).strict();
var DietaryRestrictionUpdateManyArgsSchema = z$2.object({
  data: z$2.union([DietaryRestrictionUpdateManyMutationInputSchema, DietaryRestrictionUncheckedUpdateManyInputSchema]),
  where: DietaryRestrictionWhereInputSchema.optional()
}).strict();
var DietaryRestrictionDeleteManyArgsSchema = z$2.object({
  where: DietaryRestrictionWhereInputSchema.optional()
}).strict();
var RecipeTagCreateArgsSchema = z$2.object({
  select: RecipeTagSelectSchema.optional(),
  include: RecipeTagIncludeSchema.optional(),
  data: z$2.union([RecipeTagCreateInputSchema, RecipeTagUncheckedCreateInputSchema])
}).strict();
var RecipeTagUpsertArgsSchema = z$2.object({
  select: RecipeTagSelectSchema.optional(),
  include: RecipeTagIncludeSchema.optional(),
  where: RecipeTagWhereUniqueInputSchema,
  create: z$2.union([RecipeTagCreateInputSchema, RecipeTagUncheckedCreateInputSchema]),
  update: z$2.union([RecipeTagUpdateInputSchema, RecipeTagUncheckedUpdateInputSchema])
}).strict();
var RecipeTagCreateManyArgsSchema = z$2.object({
  data: z$2.union([RecipeTagCreateManyInputSchema, RecipeTagCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var RecipeTagCreateManyAndReturnArgsSchema = z$2.object({
  data: z$2.union([RecipeTagCreateManyInputSchema, RecipeTagCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var RecipeTagDeleteArgsSchema = z$2.object({
  select: RecipeTagSelectSchema.optional(),
  include: RecipeTagIncludeSchema.optional(),
  where: RecipeTagWhereUniqueInputSchema
}).strict();
var RecipeTagUpdateArgsSchema = z$2.object({
  select: RecipeTagSelectSchema.optional(),
  include: RecipeTagIncludeSchema.optional(),
  data: z$2.union([RecipeTagUpdateInputSchema, RecipeTagUncheckedUpdateInputSchema]),
  where: RecipeTagWhereUniqueInputSchema
}).strict();
var RecipeTagUpdateManyArgsSchema = z$2.object({
  data: z$2.union([RecipeTagUpdateManyMutationInputSchema, RecipeTagUncheckedUpdateManyInputSchema]),
  where: RecipeTagWhereInputSchema.optional()
}).strict();
var RecipeTagDeleteManyArgsSchema = z$2.object({
  where: RecipeTagWhereInputSchema.optional()
}).strict();
var LeftoverItemCreateArgsSchema = z$2.object({
  select: LeftoverItemSelectSchema.optional(),
  include: LeftoverItemIncludeSchema.optional(),
  data: z$2.union([LeftoverItemCreateInputSchema, LeftoverItemUncheckedCreateInputSchema])
}).strict();
var LeftoverItemUpsertArgsSchema = z$2.object({
  select: LeftoverItemSelectSchema.optional(),
  include: LeftoverItemIncludeSchema.optional(),
  where: LeftoverItemWhereUniqueInputSchema,
  create: z$2.union([LeftoverItemCreateInputSchema, LeftoverItemUncheckedCreateInputSchema]),
  update: z$2.union([LeftoverItemUpdateInputSchema, LeftoverItemUncheckedUpdateInputSchema])
}).strict();
var LeftoverItemCreateManyArgsSchema = z$2.object({
  data: z$2.union([LeftoverItemCreateManyInputSchema, LeftoverItemCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var LeftoverItemCreateManyAndReturnArgsSchema = z$2.object({
  data: z$2.union([LeftoverItemCreateManyInputSchema, LeftoverItemCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var LeftoverItemDeleteArgsSchema = z$2.object({
  select: LeftoverItemSelectSchema.optional(),
  include: LeftoverItemIncludeSchema.optional(),
  where: LeftoverItemWhereUniqueInputSchema
}).strict();
var LeftoverItemUpdateArgsSchema = z$2.object({
  select: LeftoverItemSelectSchema.optional(),
  include: LeftoverItemIncludeSchema.optional(),
  data: z$2.union([LeftoverItemUpdateInputSchema, LeftoverItemUncheckedUpdateInputSchema]),
  where: LeftoverItemWhereUniqueInputSchema
}).strict();
var LeftoverItemUpdateManyArgsSchema = z$2.object({
  data: z$2.union([LeftoverItemUpdateManyMutationInputSchema, LeftoverItemUncheckedUpdateManyInputSchema]),
  where: LeftoverItemWhereInputSchema.optional()
}).strict();
var LeftoverItemDeleteManyArgsSchema = z$2.object({
  where: LeftoverItemWhereInputSchema.optional()
}).strict();
var WasteRecordCreateArgsSchema = z$2.object({
  select: WasteRecordSelectSchema.optional(),
  include: WasteRecordIncludeSchema.optional(),
  data: z$2.union([WasteRecordCreateInputSchema, WasteRecordUncheckedCreateInputSchema])
}).strict();
var WasteRecordUpsertArgsSchema = z$2.object({
  select: WasteRecordSelectSchema.optional(),
  include: WasteRecordIncludeSchema.optional(),
  where: WasteRecordWhereUniqueInputSchema,
  create: z$2.union([WasteRecordCreateInputSchema, WasteRecordUncheckedCreateInputSchema]),
  update: z$2.union([WasteRecordUpdateInputSchema, WasteRecordUncheckedUpdateInputSchema])
}).strict();
var WasteRecordCreateManyArgsSchema = z$2.object({
  data: z$2.union([WasteRecordCreateManyInputSchema, WasteRecordCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var WasteRecordCreateManyAndReturnArgsSchema = z$2.object({
  data: z$2.union([WasteRecordCreateManyInputSchema, WasteRecordCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var WasteRecordDeleteArgsSchema = z$2.object({
  select: WasteRecordSelectSchema.optional(),
  include: WasteRecordIncludeSchema.optional(),
  where: WasteRecordWhereUniqueInputSchema
}).strict();
var WasteRecordUpdateArgsSchema = z$2.object({
  select: WasteRecordSelectSchema.optional(),
  include: WasteRecordIncludeSchema.optional(),
  data: z$2.union([WasteRecordUpdateInputSchema, WasteRecordUncheckedUpdateInputSchema]),
  where: WasteRecordWhereUniqueInputSchema
}).strict();
var WasteRecordUpdateManyArgsSchema = z$2.object({
  data: z$2.union([WasteRecordUpdateManyMutationInputSchema, WasteRecordUncheckedUpdateManyInputSchema]),
  where: WasteRecordWhereInputSchema.optional()
}).strict();
var WasteRecordDeleteManyArgsSchema = z$2.object({
  where: WasteRecordWhereInputSchema.optional()
}).strict();
var ProductionPlanCreateArgsSchema = z$2.object({
  select: ProductionPlanSelectSchema.optional(),
  include: ProductionPlanIncludeSchema.optional(),
  data: z$2.union([ProductionPlanCreateInputSchema, ProductionPlanUncheckedCreateInputSchema])
}).strict();
var ProductionPlanUpsertArgsSchema = z$2.object({
  select: ProductionPlanSelectSchema.optional(),
  include: ProductionPlanIncludeSchema.optional(),
  where: ProductionPlanWhereUniqueInputSchema,
  create: z$2.union([ProductionPlanCreateInputSchema, ProductionPlanUncheckedCreateInputSchema]),
  update: z$2.union([ProductionPlanUpdateInputSchema, ProductionPlanUncheckedUpdateInputSchema])
}).strict();
var ProductionPlanCreateManyArgsSchema = z$2.object({
  data: z$2.union([ProductionPlanCreateManyInputSchema, ProductionPlanCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var ProductionPlanCreateManyAndReturnArgsSchema = z$2.object({
  data: z$2.union([ProductionPlanCreateManyInputSchema, ProductionPlanCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var ProductionPlanDeleteArgsSchema = z$2.object({
  select: ProductionPlanSelectSchema.optional(),
  include: ProductionPlanIncludeSchema.optional(),
  where: ProductionPlanWhereUniqueInputSchema
}).strict();
var ProductionPlanUpdateArgsSchema = z$2.object({
  select: ProductionPlanSelectSchema.optional(),
  include: ProductionPlanIncludeSchema.optional(),
  data: z$2.union([ProductionPlanUpdateInputSchema, ProductionPlanUncheckedUpdateInputSchema]),
  where: ProductionPlanWhereUniqueInputSchema
}).strict();
var ProductionPlanUpdateManyArgsSchema = z$2.object({
  data: z$2.union([ProductionPlanUpdateManyMutationInputSchema, ProductionPlanUncheckedUpdateManyInputSchema]),
  where: ProductionPlanWhereInputSchema.optional()
}).strict();
var ProductionPlanDeleteManyArgsSchema = z$2.object({
  where: ProductionPlanWhereInputSchema.optional()
}).strict();
var ProductionPlanItemCreateArgsSchema = z$2.object({
  select: ProductionPlanItemSelectSchema.optional(),
  include: ProductionPlanItemIncludeSchema.optional(),
  data: z$2.union([ProductionPlanItemCreateInputSchema, ProductionPlanItemUncheckedCreateInputSchema])
}).strict();
var ProductionPlanItemUpsertArgsSchema = z$2.object({
  select: ProductionPlanItemSelectSchema.optional(),
  include: ProductionPlanItemIncludeSchema.optional(),
  where: ProductionPlanItemWhereUniqueInputSchema,
  create: z$2.union([ProductionPlanItemCreateInputSchema, ProductionPlanItemUncheckedCreateInputSchema]),
  update: z$2.union([ProductionPlanItemUpdateInputSchema, ProductionPlanItemUncheckedUpdateInputSchema])
}).strict();
var ProductionPlanItemCreateManyArgsSchema = z$2.object({
  data: z$2.union([ProductionPlanItemCreateManyInputSchema, ProductionPlanItemCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var ProductionPlanItemCreateManyAndReturnArgsSchema = z$2.object({
  data: z$2.union([ProductionPlanItemCreateManyInputSchema, ProductionPlanItemCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var ProductionPlanItemDeleteArgsSchema = z$2.object({
  select: ProductionPlanItemSelectSchema.optional(),
  include: ProductionPlanItemIncludeSchema.optional(),
  where: ProductionPlanItemWhereUniqueInputSchema
}).strict();
var ProductionPlanItemUpdateArgsSchema = z$2.object({
  select: ProductionPlanItemSelectSchema.optional(),
  include: ProductionPlanItemIncludeSchema.optional(),
  data: z$2.union([ProductionPlanItemUpdateInputSchema, ProductionPlanItemUncheckedUpdateInputSchema]),
  where: ProductionPlanItemWhereUniqueInputSchema
}).strict();
var ProductionPlanItemUpdateManyArgsSchema = z$2.object({
  data: z$2.union([ProductionPlanItemUpdateManyMutationInputSchema, ProductionPlanItemUncheckedUpdateManyInputSchema]),
  where: ProductionPlanItemWhereInputSchema.optional()
}).strict();
var ProductionPlanItemDeleteManyArgsSchema = z$2.object({
  where: ProductionPlanItemWhereInputSchema.optional()
}).strict();
var ShiftTaskCreateArgsSchema = z$2.object({
  select: ShiftTaskSelectSchema.optional(),
  include: ShiftTaskIncludeSchema.optional(),
  data: z$2.union([ShiftTaskCreateInputSchema, ShiftTaskUncheckedCreateInputSchema])
}).strict();
var ShiftTaskUpsertArgsSchema = z$2.object({
  select: ShiftTaskSelectSchema.optional(),
  include: ShiftTaskIncludeSchema.optional(),
  where: ShiftTaskWhereUniqueInputSchema,
  create: z$2.union([ShiftTaskCreateInputSchema, ShiftTaskUncheckedCreateInputSchema]),
  update: z$2.union([ShiftTaskUpdateInputSchema, ShiftTaskUncheckedUpdateInputSchema])
}).strict();
var ShiftTaskCreateManyArgsSchema = z$2.object({
  data: z$2.union([ShiftTaskCreateManyInputSchema, ShiftTaskCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var ShiftTaskCreateManyAndReturnArgsSchema = z$2.object({
  data: z$2.union([ShiftTaskCreateManyInputSchema, ShiftTaskCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var ShiftTaskDeleteArgsSchema = z$2.object({
  select: ShiftTaskSelectSchema.optional(),
  include: ShiftTaskIncludeSchema.optional(),
  where: ShiftTaskWhereUniqueInputSchema
}).strict();
var ShiftTaskUpdateArgsSchema = z$2.object({
  select: ShiftTaskSelectSchema.optional(),
  include: ShiftTaskIncludeSchema.optional(),
  data: z$2.union([ShiftTaskUpdateInputSchema, ShiftTaskUncheckedUpdateInputSchema]),
  where: ShiftTaskWhereUniqueInputSchema
}).strict();
var ShiftTaskUpdateManyArgsSchema = z$2.object({
  data: z$2.union([ShiftTaskUpdateManyMutationInputSchema, ShiftTaskUncheckedUpdateManyInputSchema]),
  where: ShiftTaskWhereInputSchema.optional()
}).strict();
var ShiftTaskDeleteManyArgsSchema = z$2.object({
  where: ShiftTaskWhereInputSchema.optional()
}).strict();
var AvailabilityCreateArgsSchema = z$2.object({
  select: AvailabilitySelectSchema.optional(),
  include: AvailabilityIncludeSchema.optional(),
  data: z$2.union([AvailabilityCreateInputSchema, AvailabilityUncheckedCreateInputSchema])
}).strict();
var AvailabilityUpsertArgsSchema = z$2.object({
  select: AvailabilitySelectSchema.optional(),
  include: AvailabilityIncludeSchema.optional(),
  where: AvailabilityWhereUniqueInputSchema,
  create: z$2.union([AvailabilityCreateInputSchema, AvailabilityUncheckedCreateInputSchema]),
  update: z$2.union([AvailabilityUpdateInputSchema, AvailabilityUncheckedUpdateInputSchema])
}).strict();
var AvailabilityCreateManyArgsSchema = z$2.object({
  data: z$2.union([AvailabilityCreateManyInputSchema, AvailabilityCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var AvailabilityCreateManyAndReturnArgsSchema = z$2.object({
  data: z$2.union([AvailabilityCreateManyInputSchema, AvailabilityCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var AvailabilityDeleteArgsSchema = z$2.object({
  select: AvailabilitySelectSchema.optional(),
  include: AvailabilityIncludeSchema.optional(),
  where: AvailabilityWhereUniqueInputSchema
}).strict();
var AvailabilityUpdateArgsSchema = z$2.object({
  select: AvailabilitySelectSchema.optional(),
  include: AvailabilityIncludeSchema.optional(),
  data: z$2.union([AvailabilityUpdateInputSchema, AvailabilityUncheckedUpdateInputSchema]),
  where: AvailabilityWhereUniqueInputSchema
}).strict();
var AvailabilityUpdateManyArgsSchema = z$2.object({
  data: z$2.union([AvailabilityUpdateManyMutationInputSchema, AvailabilityUncheckedUpdateManyInputSchema]),
  where: AvailabilityWhereInputSchema.optional()
}).strict();
var AvailabilityDeleteManyArgsSchema = z$2.object({
  where: AvailabilityWhereInputSchema.optional()
}).strict();
var SchedulingConstraintCreateArgsSchema = z$2.object({
  select: SchedulingConstraintSelectSchema.optional(),
  include: SchedulingConstraintIncludeSchema.optional(),
  data: z$2.union([SchedulingConstraintCreateInputSchema, SchedulingConstraintUncheckedCreateInputSchema])
}).strict();
var SchedulingConstraintUpsertArgsSchema = z$2.object({
  select: SchedulingConstraintSelectSchema.optional(),
  include: SchedulingConstraintIncludeSchema.optional(),
  where: SchedulingConstraintWhereUniqueInputSchema,
  create: z$2.union([SchedulingConstraintCreateInputSchema, SchedulingConstraintUncheckedCreateInputSchema]),
  update: z$2.union([SchedulingConstraintUpdateInputSchema, SchedulingConstraintUncheckedUpdateInputSchema])
}).strict();
var SchedulingConstraintCreateManyArgsSchema = z$2.object({
  data: z$2.union([SchedulingConstraintCreateManyInputSchema, SchedulingConstraintCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var SchedulingConstraintCreateManyAndReturnArgsSchema = z$2.object({
  data: z$2.union([SchedulingConstraintCreateManyInputSchema, SchedulingConstraintCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var SchedulingConstraintDeleteArgsSchema = z$2.object({
  select: SchedulingConstraintSelectSchema.optional(),
  include: SchedulingConstraintIncludeSchema.optional(),
  where: SchedulingConstraintWhereUniqueInputSchema
}).strict();
var SchedulingConstraintUpdateArgsSchema = z$2.object({
  select: SchedulingConstraintSelectSchema.optional(),
  include: SchedulingConstraintIncludeSchema.optional(),
  data: z$2.union([SchedulingConstraintUpdateInputSchema, SchedulingConstraintUncheckedUpdateInputSchema]),
  where: SchedulingConstraintWhereUniqueInputSchema
}).strict();
var SchedulingConstraintUpdateManyArgsSchema = z$2.object({
  data: z$2.union([SchedulingConstraintUpdateManyMutationInputSchema, SchedulingConstraintUncheckedUpdateManyInputSchema]),
  where: SchedulingConstraintWhereInputSchema.optional()
}).strict();
var SchedulingConstraintDeleteManyArgsSchema = z$2.object({
  where: SchedulingConstraintWhereInputSchema.optional()
}).strict();
var InventoryWithdrawalCreateArgsSchema = z$2.object({
  select: InventoryWithdrawalSelectSchema.optional(),
  include: InventoryWithdrawalIncludeSchema.optional(),
  data: z$2.union([InventoryWithdrawalCreateInputSchema, InventoryWithdrawalUncheckedCreateInputSchema])
}).strict();
var InventoryWithdrawalUpsertArgsSchema = z$2.object({
  select: InventoryWithdrawalSelectSchema.optional(),
  include: InventoryWithdrawalIncludeSchema.optional(),
  where: InventoryWithdrawalWhereUniqueInputSchema,
  create: z$2.union([InventoryWithdrawalCreateInputSchema, InventoryWithdrawalUncheckedCreateInputSchema]),
  update: z$2.union([InventoryWithdrawalUpdateInputSchema, InventoryWithdrawalUncheckedUpdateInputSchema])
}).strict();
var InventoryWithdrawalCreateManyArgsSchema = z$2.object({
  data: z$2.union([InventoryWithdrawalCreateManyInputSchema, InventoryWithdrawalCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var InventoryWithdrawalCreateManyAndReturnArgsSchema = z$2.object({
  data: z$2.union([InventoryWithdrawalCreateManyInputSchema, InventoryWithdrawalCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var InventoryWithdrawalDeleteArgsSchema = z$2.object({
  select: InventoryWithdrawalSelectSchema.optional(),
  include: InventoryWithdrawalIncludeSchema.optional(),
  where: InventoryWithdrawalWhereUniqueInputSchema
}).strict();
var InventoryWithdrawalUpdateArgsSchema = z$2.object({
  select: InventoryWithdrawalSelectSchema.optional(),
  include: InventoryWithdrawalIncludeSchema.optional(),
  data: z$2.union([InventoryWithdrawalUpdateInputSchema, InventoryWithdrawalUncheckedUpdateInputSchema]),
  where: InventoryWithdrawalWhereUniqueInputSchema
}).strict();
var InventoryWithdrawalUpdateManyArgsSchema = z$2.object({
  data: z$2.union([InventoryWithdrawalUpdateManyMutationInputSchema, InventoryWithdrawalUncheckedUpdateManyInputSchema]),
  where: InventoryWithdrawalWhereInputSchema.optional()
}).strict();
var InventoryWithdrawalDeleteManyArgsSchema = z$2.object({
  where: InventoryWithdrawalWhereInputSchema.optional()
}).strict();
var AllergenCreateArgsSchema = z$2.object({
  select: AllergenSelectSchema.optional(),
  include: AllergenIncludeSchema.optional(),
  data: z$2.union([AllergenCreateInputSchema, AllergenUncheckedCreateInputSchema])
}).strict();
var AllergenUpsertArgsSchema = z$2.object({
  select: AllergenSelectSchema.optional(),
  include: AllergenIncludeSchema.optional(),
  where: AllergenWhereUniqueInputSchema,
  create: z$2.union([AllergenCreateInputSchema, AllergenUncheckedCreateInputSchema]),
  update: z$2.union([AllergenUpdateInputSchema, AllergenUncheckedUpdateInputSchema])
}).strict();
var AllergenCreateManyArgsSchema = z$2.object({
  data: z$2.union([AllergenCreateManyInputSchema, AllergenCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var AllergenCreateManyAndReturnArgsSchema = z$2.object({
  data: z$2.union([AllergenCreateManyInputSchema, AllergenCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var AllergenDeleteArgsSchema = z$2.object({
  select: AllergenSelectSchema.optional(),
  include: AllergenIncludeSchema.optional(),
  where: AllergenWhereUniqueInputSchema
}).strict();
var AllergenUpdateArgsSchema = z$2.object({
  select: AllergenSelectSchema.optional(),
  include: AllergenIncludeSchema.optional(),
  data: z$2.union([AllergenUpdateInputSchema, AllergenUncheckedUpdateInputSchema]),
  where: AllergenWhereUniqueInputSchema
}).strict();
var AllergenUpdateManyArgsSchema = z$2.object({
  data: z$2.union([AllergenUpdateManyMutationInputSchema, AllergenUncheckedUpdateManyInputSchema]),
  where: AllergenWhereInputSchema.optional()
}).strict();
var AllergenDeleteManyArgsSchema = z$2.object({
  where: AllergenWhereInputSchema.optional()
}).strict();
var IngredientAllergenCreateArgsSchema = z$2.object({
  select: IngredientAllergenSelectSchema.optional(),
  include: IngredientAllergenIncludeSchema.optional(),
  data: z$2.union([IngredientAllergenCreateInputSchema, IngredientAllergenUncheckedCreateInputSchema])
}).strict();
var IngredientAllergenUpsertArgsSchema = z$2.object({
  select: IngredientAllergenSelectSchema.optional(),
  include: IngredientAllergenIncludeSchema.optional(),
  where: IngredientAllergenWhereUniqueInputSchema,
  create: z$2.union([IngredientAllergenCreateInputSchema, IngredientAllergenUncheckedCreateInputSchema]),
  update: z$2.union([IngredientAllergenUpdateInputSchema, IngredientAllergenUncheckedUpdateInputSchema])
}).strict();
var IngredientAllergenCreateManyArgsSchema = z$2.object({
  data: z$2.union([IngredientAllergenCreateManyInputSchema, IngredientAllergenCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var IngredientAllergenCreateManyAndReturnArgsSchema = z$2.object({
  data: z$2.union([IngredientAllergenCreateManyInputSchema, IngredientAllergenCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var IngredientAllergenDeleteArgsSchema = z$2.object({
  select: IngredientAllergenSelectSchema.optional(),
  include: IngredientAllergenIncludeSchema.optional(),
  where: IngredientAllergenWhereUniqueInputSchema
}).strict();
var IngredientAllergenUpdateArgsSchema = z$2.object({
  select: IngredientAllergenSelectSchema.optional(),
  include: IngredientAllergenIncludeSchema.optional(),
  data: z$2.union([IngredientAllergenUpdateInputSchema, IngredientAllergenUncheckedUpdateInputSchema]),
  where: IngredientAllergenWhereUniqueInputSchema
}).strict();
var IngredientAllergenUpdateManyArgsSchema = z$2.object({
  data: z$2.union([IngredientAllergenUpdateManyMutationInputSchema, IngredientAllergenUncheckedUpdateManyInputSchema]),
  where: IngredientAllergenWhereInputSchema.optional()
}).strict();
var IngredientAllergenDeleteManyArgsSchema = z$2.object({
  where: IngredientAllergenWhereInputSchema.optional()
}).strict();
var NutritionalRecommendationCreateArgsSchema = z$2.object({
  select: NutritionalRecommendationSelectSchema.optional(),
  include: NutritionalRecommendationIncludeSchema.optional(),
  data: z$2.union([NutritionalRecommendationCreateInputSchema, NutritionalRecommendationUncheckedCreateInputSchema])
}).strict();
var NutritionalRecommendationUpsertArgsSchema = z$2.object({
  select: NutritionalRecommendationSelectSchema.optional(),
  include: NutritionalRecommendationIncludeSchema.optional(),
  where: NutritionalRecommendationWhereUniqueInputSchema,
  create: z$2.union([NutritionalRecommendationCreateInputSchema, NutritionalRecommendationUncheckedCreateInputSchema]),
  update: z$2.union([NutritionalRecommendationUpdateInputSchema, NutritionalRecommendationUncheckedUpdateInputSchema])
}).strict();
var NutritionalRecommendationCreateManyArgsSchema = z$2.object({
  data: z$2.union([NutritionalRecommendationCreateManyInputSchema, NutritionalRecommendationCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var NutritionalRecommendationCreateManyAndReturnArgsSchema = z$2.object({
  data: z$2.union([NutritionalRecommendationCreateManyInputSchema, NutritionalRecommendationCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var NutritionalRecommendationDeleteArgsSchema = z$2.object({
  select: NutritionalRecommendationSelectSchema.optional(),
  include: NutritionalRecommendationIncludeSchema.optional(),
  where: NutritionalRecommendationWhereUniqueInputSchema
}).strict();
var NutritionalRecommendationUpdateArgsSchema = z$2.object({
  select: NutritionalRecommendationSelectSchema.optional(),
  include: NutritionalRecommendationIncludeSchema.optional(),
  data: z$2.union([NutritionalRecommendationUpdateInputSchema, NutritionalRecommendationUncheckedUpdateInputSchema]),
  where: NutritionalRecommendationWhereUniqueInputSchema
}).strict();
var NutritionalRecommendationUpdateManyArgsSchema = z$2.object({
  data: z$2.union([NutritionalRecommendationUpdateManyMutationInputSchema, NutritionalRecommendationUncheckedUpdateManyInputSchema]),
  where: NutritionalRecommendationWhereInputSchema.optional()
}).strict();
var NutritionalRecommendationDeleteManyArgsSchema = z$2.object({
  where: NutritionalRecommendationWhereInputSchema.optional()
}).strict();
var EarlyAccessCreateArgsSchema = z$2.object({
  select: EarlyAccessSelectSchema.optional(),
  data: z$2.union([EarlyAccessCreateInputSchema, EarlyAccessUncheckedCreateInputSchema])
}).strict();
var EarlyAccessUpsertArgsSchema = z$2.object({
  select: EarlyAccessSelectSchema.optional(),
  where: EarlyAccessWhereUniqueInputSchema,
  create: z$2.union([EarlyAccessCreateInputSchema, EarlyAccessUncheckedCreateInputSchema]),
  update: z$2.union([EarlyAccessUpdateInputSchema, EarlyAccessUncheckedUpdateInputSchema])
}).strict();
var EarlyAccessCreateManyArgsSchema = z$2.object({
  data: z$2.union([EarlyAccessCreateManyInputSchema, EarlyAccessCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var EarlyAccessCreateManyAndReturnArgsSchema = z$2.object({
  data: z$2.union([EarlyAccessCreateManyInputSchema, EarlyAccessCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var EarlyAccessDeleteArgsSchema = z$2.object({
  select: EarlyAccessSelectSchema.optional(),
  where: EarlyAccessWhereUniqueInputSchema
}).strict();
var EarlyAccessUpdateArgsSchema = z$2.object({
  select: EarlyAccessSelectSchema.optional(),
  data: z$2.union([EarlyAccessUpdateInputSchema, EarlyAccessUncheckedUpdateInputSchema]),
  where: EarlyAccessWhereUniqueInputSchema
}).strict();
var EarlyAccessUpdateManyArgsSchema = z$2.object({
  data: z$2.union([EarlyAccessUpdateManyMutationInputSchema, EarlyAccessUncheckedUpdateManyInputSchema]),
  where: EarlyAccessWhereInputSchema.optional()
}).strict();
var EarlyAccessDeleteManyArgsSchema = z$2.object({
  where: EarlyAccessWhereInputSchema.optional()
}).strict();
var OrganizationCreateArgsSchema = z$2.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  data: z$2.union([OrganizationCreateInputSchema, OrganizationUncheckedCreateInputSchema])
}).strict();
var OrganizationUpsertArgsSchema = z$2.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  where: OrganizationWhereUniqueInputSchema,
  create: z$2.union([OrganizationCreateInputSchema, OrganizationUncheckedCreateInputSchema]),
  update: z$2.union([OrganizationUpdateInputSchema, OrganizationUncheckedUpdateInputSchema])
}).strict();
var OrganizationCreateManyArgsSchema = z$2.object({
  data: z$2.union([OrganizationCreateManyInputSchema, OrganizationCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var OrganizationCreateManyAndReturnArgsSchema = z$2.object({
  data: z$2.union([OrganizationCreateManyInputSchema, OrganizationCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var OrganizationDeleteArgsSchema = z$2.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  where: OrganizationWhereUniqueInputSchema
}).strict();
var OrganizationUpdateArgsSchema = z$2.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  data: z$2.union([OrganizationUpdateInputSchema, OrganizationUncheckedUpdateInputSchema]),
  where: OrganizationWhereUniqueInputSchema
}).strict();
var OrganizationUpdateManyArgsSchema = z$2.object({
  data: z$2.union([OrganizationUpdateManyMutationInputSchema, OrganizationUncheckedUpdateManyInputSchema]),
  where: OrganizationWhereInputSchema.optional()
}).strict();
var OrganizationDeleteManyArgsSchema = z$2.object({
  where: OrganizationWhereInputSchema.optional()
}).strict();
var RestaurantCreateArgsSchema = z$2.object({
  select: RestaurantSelectSchema.optional(),
  include: RestaurantIncludeSchema.optional(),
  data: z$2.union([RestaurantCreateInputSchema, RestaurantUncheckedCreateInputSchema])
}).strict();
var RestaurantUpsertArgsSchema = z$2.object({
  select: RestaurantSelectSchema.optional(),
  include: RestaurantIncludeSchema.optional(),
  where: RestaurantWhereUniqueInputSchema,
  create: z$2.union([RestaurantCreateInputSchema, RestaurantUncheckedCreateInputSchema]),
  update: z$2.union([RestaurantUpdateInputSchema, RestaurantUncheckedUpdateInputSchema])
}).strict();
var RestaurantCreateManyArgsSchema = z$2.object({
  data: z$2.union([RestaurantCreateManyInputSchema, RestaurantCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var RestaurantCreateManyAndReturnArgsSchema = z$2.object({
  data: z$2.union([RestaurantCreateManyInputSchema, RestaurantCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var RestaurantDeleteArgsSchema = z$2.object({
  select: RestaurantSelectSchema.optional(),
  include: RestaurantIncludeSchema.optional(),
  where: RestaurantWhereUniqueInputSchema
}).strict();
var RestaurantUpdateArgsSchema = z$2.object({
  select: RestaurantSelectSchema.optional(),
  include: RestaurantIncludeSchema.optional(),
  data: z$2.union([RestaurantUpdateInputSchema, RestaurantUncheckedUpdateInputSchema]),
  where: RestaurantWhereUniqueInputSchema
}).strict();
var RestaurantUpdateManyArgsSchema = z$2.object({
  data: z$2.union([RestaurantUpdateManyMutationInputSchema, RestaurantUncheckedUpdateManyInputSchema]),
  where: RestaurantWhereInputSchema.optional()
}).strict();
var RestaurantDeleteManyArgsSchema = z$2.object({
  where: RestaurantWhereInputSchema.optional()
}).strict();
var UserCreateArgsSchema = z$2.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  data: z$2.union([UserCreateInputSchema, UserUncheckedCreateInputSchema])
}).strict();
var UserUpsertArgsSchema = z$2.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema,
  create: z$2.union([UserCreateInputSchema, UserUncheckedCreateInputSchema]),
  update: z$2.union([UserUpdateInputSchema, UserUncheckedUpdateInputSchema])
}).strict();
var UserCreateManyArgsSchema = z$2.object({
  data: z$2.union([UserCreateManyInputSchema, UserCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var UserCreateManyAndReturnArgsSchema = z$2.object({
  data: z$2.union([UserCreateManyInputSchema, UserCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var UserDeleteArgsSchema = z$2.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema
}).strict();
var UserUpdateArgsSchema = z$2.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  data: z$2.union([UserUpdateInputSchema, UserUncheckedUpdateInputSchema]),
  where: UserWhereUniqueInputSchema
}).strict();
var UserUpdateManyArgsSchema = z$2.object({
  data: z$2.union([UserUpdateManyMutationInputSchema, UserUncheckedUpdateManyInputSchema]),
  where: UserWhereInputSchema.optional()
}).strict();
var UserDeleteManyArgsSchema = z$2.object({
  where: UserWhereInputSchema.optional()
}).strict();
var SessionCreateArgsSchema = z$2.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  data: z$2.union([SessionCreateInputSchema, SessionUncheckedCreateInputSchema])
}).strict();
var SessionUpsertArgsSchema = z$2.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereUniqueInputSchema,
  create: z$2.union([SessionCreateInputSchema, SessionUncheckedCreateInputSchema]),
  update: z$2.union([SessionUpdateInputSchema, SessionUncheckedUpdateInputSchema])
}).strict();
var SessionCreateManyArgsSchema = z$2.object({
  data: z$2.union([SessionCreateManyInputSchema, SessionCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var SessionCreateManyAndReturnArgsSchema = z$2.object({
  data: z$2.union([SessionCreateManyInputSchema, SessionCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var SessionDeleteArgsSchema = z$2.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereUniqueInputSchema
}).strict();
var SessionUpdateArgsSchema = z$2.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  data: z$2.union([SessionUpdateInputSchema, SessionUncheckedUpdateInputSchema]),
  where: SessionWhereUniqueInputSchema
}).strict();
var SessionUpdateManyArgsSchema = z$2.object({
  data: z$2.union([SessionUpdateManyMutationInputSchema, SessionUncheckedUpdateManyInputSchema]),
  where: SessionWhereInputSchema.optional()
}).strict();
var SessionDeleteManyArgsSchema = z$2.object({
  where: SessionWhereInputSchema.optional()
}).strict();
var CookBookCreateArgsSchema = z$2.object({
  select: CookBookSelectSchema.optional(),
  include: CookBookIncludeSchema.optional(),
  data: z$2.union([CookBookCreateInputSchema, CookBookUncheckedCreateInputSchema])
}).strict();
var CookBookUpsertArgsSchema = z$2.object({
  select: CookBookSelectSchema.optional(),
  include: CookBookIncludeSchema.optional(),
  where: CookBookWhereUniqueInputSchema,
  create: z$2.union([CookBookCreateInputSchema, CookBookUncheckedCreateInputSchema]),
  update: z$2.union([CookBookUpdateInputSchema, CookBookUncheckedUpdateInputSchema])
}).strict();
var CookBookCreateManyArgsSchema = z$2.object({
  data: z$2.union([CookBookCreateManyInputSchema, CookBookCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var CookBookCreateManyAndReturnArgsSchema = z$2.object({
  data: z$2.union([CookBookCreateManyInputSchema, CookBookCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var CookBookDeleteArgsSchema = z$2.object({
  select: CookBookSelectSchema.optional(),
  include: CookBookIncludeSchema.optional(),
  where: CookBookWhereUniqueInputSchema
}).strict();
var CookBookUpdateArgsSchema = z$2.object({
  select: CookBookSelectSchema.optional(),
  include: CookBookIncludeSchema.optional(),
  data: z$2.union([CookBookUpdateInputSchema, CookBookUncheckedUpdateInputSchema]),
  where: CookBookWhereUniqueInputSchema
}).strict();
var CookBookUpdateManyArgsSchema = z$2.object({
  data: z$2.union([CookBookUpdateManyMutationInputSchema, CookBookUncheckedUpdateManyInputSchema]),
  where: CookBookWhereInputSchema.optional()
}).strict();
var CookBookDeleteManyArgsSchema = z$2.object({
  where: CookBookWhereInputSchema.optional()
}).strict();
var RecipeCreateArgsSchema = z$2.object({
  select: RecipeSelectSchema.optional(),
  include: RecipeIncludeSchema.optional(),
  data: z$2.union([RecipeCreateInputSchema, RecipeUncheckedCreateInputSchema])
}).strict();
var RecipeUpsertArgsSchema = z$2.object({
  select: RecipeSelectSchema.optional(),
  include: RecipeIncludeSchema.optional(),
  where: RecipeWhereUniqueInputSchema,
  create: z$2.union([RecipeCreateInputSchema, RecipeUncheckedCreateInputSchema]),
  update: z$2.union([RecipeUpdateInputSchema, RecipeUncheckedUpdateInputSchema])
}).strict();
var RecipeCreateManyArgsSchema = z$2.object({
  data: z$2.union([RecipeCreateManyInputSchema, RecipeCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var RecipeCreateManyAndReturnArgsSchema = z$2.object({
  data: z$2.union([RecipeCreateManyInputSchema, RecipeCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var RecipeDeleteArgsSchema = z$2.object({
  select: RecipeSelectSchema.optional(),
  include: RecipeIncludeSchema.optional(),
  where: RecipeWhereUniqueInputSchema
}).strict();
var RecipeUpdateArgsSchema = z$2.object({
  select: RecipeSelectSchema.optional(),
  include: RecipeIncludeSchema.optional(),
  data: z$2.union([RecipeUpdateInputSchema, RecipeUncheckedUpdateInputSchema]),
  where: RecipeWhereUniqueInputSchema
}).strict();
var RecipeUpdateManyArgsSchema = z$2.object({
  data: z$2.union([RecipeUpdateManyMutationInputSchema, RecipeUncheckedUpdateManyInputSchema]),
  where: RecipeWhereInputSchema.optional()
}).strict();
var RecipeDeleteManyArgsSchema = z$2.object({
  where: RecipeWhereInputSchema.optional()
}).strict();
var IngredientCreateArgsSchema = z$2.object({
  select: IngredientSelectSchema.optional(),
  include: IngredientIncludeSchema.optional(),
  data: z$2.union([IngredientCreateInputSchema, IngredientUncheckedCreateInputSchema])
}).strict();
var IngredientUpsertArgsSchema = z$2.object({
  select: IngredientSelectSchema.optional(),
  include: IngredientIncludeSchema.optional(),
  where: IngredientWhereUniqueInputSchema,
  create: z$2.union([IngredientCreateInputSchema, IngredientUncheckedCreateInputSchema]),
  update: z$2.union([IngredientUpdateInputSchema, IngredientUncheckedUpdateInputSchema])
}).strict();
var IngredientCreateManyArgsSchema = z$2.object({
  data: z$2.union([IngredientCreateManyInputSchema, IngredientCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var IngredientCreateManyAndReturnArgsSchema = z$2.object({
  data: z$2.union([IngredientCreateManyInputSchema, IngredientCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var IngredientDeleteArgsSchema = z$2.object({
  select: IngredientSelectSchema.optional(),
  include: IngredientIncludeSchema.optional(),
  where: IngredientWhereUniqueInputSchema
}).strict();
var IngredientUpdateArgsSchema = z$2.object({
  select: IngredientSelectSchema.optional(),
  include: IngredientIncludeSchema.optional(),
  data: z$2.union([IngredientUpdateInputSchema, IngredientUncheckedUpdateInputSchema]),
  where: IngredientWhereUniqueInputSchema
}).strict();
var IngredientUpdateManyArgsSchema = z$2.object({
  data: z$2.union([IngredientUpdateManyMutationInputSchema, IngredientUncheckedUpdateManyInputSchema]),
  where: IngredientWhereInputSchema.optional()
}).strict();
var IngredientDeleteManyArgsSchema = z$2.object({
  where: IngredientWhereInputSchema.optional()
}).strict();
var RecipeIngredientCreateArgsSchema = z$2.object({
  select: RecipeIngredientSelectSchema.optional(),
  include: RecipeIngredientIncludeSchema.optional(),
  data: z$2.union([RecipeIngredientCreateInputSchema, RecipeIngredientUncheckedCreateInputSchema])
}).strict();
var RecipeIngredientUpsertArgsSchema = z$2.object({
  select: RecipeIngredientSelectSchema.optional(),
  include: RecipeIngredientIncludeSchema.optional(),
  where: RecipeIngredientWhereUniqueInputSchema,
  create: z$2.union([RecipeIngredientCreateInputSchema, RecipeIngredientUncheckedCreateInputSchema]),
  update: z$2.union([RecipeIngredientUpdateInputSchema, RecipeIngredientUncheckedUpdateInputSchema])
}).strict();
var RecipeIngredientCreateManyArgsSchema = z$2.object({
  data: z$2.union([RecipeIngredientCreateManyInputSchema, RecipeIngredientCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var RecipeIngredientCreateManyAndReturnArgsSchema = z$2.object({
  data: z$2.union([RecipeIngredientCreateManyInputSchema, RecipeIngredientCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var RecipeIngredientDeleteArgsSchema = z$2.object({
  select: RecipeIngredientSelectSchema.optional(),
  include: RecipeIngredientIncludeSchema.optional(),
  where: RecipeIngredientWhereUniqueInputSchema
}).strict();
var RecipeIngredientUpdateArgsSchema = z$2.object({
  select: RecipeIngredientSelectSchema.optional(),
  include: RecipeIngredientIncludeSchema.optional(),
  data: z$2.union([RecipeIngredientUpdateInputSchema, RecipeIngredientUncheckedUpdateInputSchema]),
  where: RecipeIngredientWhereUniqueInputSchema
}).strict();
var RecipeIngredientUpdateManyArgsSchema = z$2.object({
  data: z$2.union([RecipeIngredientUpdateManyMutationInputSchema, RecipeIngredientUncheckedUpdateManyInputSchema]),
  where: RecipeIngredientWhereInputSchema.optional()
}).strict();
var RecipeIngredientDeleteManyArgsSchema = z$2.object({
  where: RecipeIngredientWhereInputSchema.optional()
}).strict();
var RecipeInstructionCreateArgsSchema = z$2.object({
  select: RecipeInstructionSelectSchema.optional(),
  include: RecipeInstructionIncludeSchema.optional(),
  data: z$2.union([RecipeInstructionCreateInputSchema, RecipeInstructionUncheckedCreateInputSchema])
}).strict();
var RecipeInstructionUpsertArgsSchema = z$2.object({
  select: RecipeInstructionSelectSchema.optional(),
  include: RecipeInstructionIncludeSchema.optional(),
  where: RecipeInstructionWhereUniqueInputSchema,
  create: z$2.union([RecipeInstructionCreateInputSchema, RecipeInstructionUncheckedCreateInputSchema]),
  update: z$2.union([RecipeInstructionUpdateInputSchema, RecipeInstructionUncheckedUpdateInputSchema])
}).strict();
var RecipeInstructionCreateManyArgsSchema = z$2.object({
  data: z$2.union([RecipeInstructionCreateManyInputSchema, RecipeInstructionCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var RecipeInstructionCreateManyAndReturnArgsSchema = z$2.object({
  data: z$2.union([RecipeInstructionCreateManyInputSchema, RecipeInstructionCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var RecipeInstructionDeleteArgsSchema = z$2.object({
  select: RecipeInstructionSelectSchema.optional(),
  include: RecipeInstructionIncludeSchema.optional(),
  where: RecipeInstructionWhereUniqueInputSchema
}).strict();
var RecipeInstructionUpdateArgsSchema = z$2.object({
  select: RecipeInstructionSelectSchema.optional(),
  include: RecipeInstructionIncludeSchema.optional(),
  data: z$2.union([RecipeInstructionUpdateInputSchema, RecipeInstructionUncheckedUpdateInputSchema]),
  where: RecipeInstructionWhereUniqueInputSchema
}).strict();
var RecipeInstructionUpdateManyArgsSchema = z$2.object({
  data: z$2.union([RecipeInstructionUpdateManyMutationInputSchema, RecipeInstructionUncheckedUpdateManyInputSchema]),
  where: RecipeInstructionWhereInputSchema.optional()
}).strict();
var RecipeInstructionDeleteManyArgsSchema = z$2.object({
  where: RecipeInstructionWhereInputSchema.optional()
}).strict();
var InventoryCreateArgsSchema = z$2.object({
  select: InventorySelectSchema.optional(),
  include: InventoryIncludeSchema.optional(),
  data: z$2.union([InventoryCreateInputSchema, InventoryUncheckedCreateInputSchema])
}).strict();
var InventoryUpsertArgsSchema = z$2.object({
  select: InventorySelectSchema.optional(),
  include: InventoryIncludeSchema.optional(),
  where: InventoryWhereUniqueInputSchema,
  create: z$2.union([InventoryCreateInputSchema, InventoryUncheckedCreateInputSchema]),
  update: z$2.union([InventoryUpdateInputSchema, InventoryUncheckedUpdateInputSchema])
}).strict();
var InventoryCreateManyArgsSchema = z$2.object({
  data: z$2.union([InventoryCreateManyInputSchema, InventoryCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var InventoryCreateManyAndReturnArgsSchema = z$2.object({
  data: z$2.union([InventoryCreateManyInputSchema, InventoryCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var InventoryDeleteArgsSchema = z$2.object({
  select: InventorySelectSchema.optional(),
  include: InventoryIncludeSchema.optional(),
  where: InventoryWhereUniqueInputSchema
}).strict();
var InventoryUpdateArgsSchema = z$2.object({
  select: InventorySelectSchema.optional(),
  include: InventoryIncludeSchema.optional(),
  data: z$2.union([InventoryUpdateInputSchema, InventoryUncheckedUpdateInputSchema]),
  where: InventoryWhereUniqueInputSchema
}).strict();
var InventoryUpdateManyArgsSchema = z$2.object({
  data: z$2.union([InventoryUpdateManyMutationInputSchema, InventoryUncheckedUpdateManyInputSchema]),
  where: InventoryWhereInputSchema.optional()
}).strict();
var InventoryDeleteManyArgsSchema = z$2.object({
  where: InventoryWhereInputSchema.optional()
}).strict();
var InventoryItemCreateArgsSchema = z$2.object({
  select: InventoryItemSelectSchema.optional(),
  include: InventoryItemIncludeSchema.optional(),
  data: z$2.union([InventoryItemCreateInputSchema, InventoryItemUncheckedCreateInputSchema])
}).strict();
var InventoryItemUpsertArgsSchema = z$2.object({
  select: InventoryItemSelectSchema.optional(),
  include: InventoryItemIncludeSchema.optional(),
  where: InventoryItemWhereUniqueInputSchema,
  create: z$2.union([InventoryItemCreateInputSchema, InventoryItemUncheckedCreateInputSchema]),
  update: z$2.union([InventoryItemUpdateInputSchema, InventoryItemUncheckedUpdateInputSchema])
}).strict();
var InventoryItemCreateManyArgsSchema = z$2.object({
  data: z$2.union([InventoryItemCreateManyInputSchema, InventoryItemCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var InventoryItemCreateManyAndReturnArgsSchema = z$2.object({
  data: z$2.union([InventoryItemCreateManyInputSchema, InventoryItemCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var InventoryItemDeleteArgsSchema = z$2.object({
  select: InventoryItemSelectSchema.optional(),
  include: InventoryItemIncludeSchema.optional(),
  where: InventoryItemWhereUniqueInputSchema
}).strict();
var InventoryItemUpdateArgsSchema = z$2.object({
  select: InventoryItemSelectSchema.optional(),
  include: InventoryItemIncludeSchema.optional(),
  data: z$2.union([InventoryItemUpdateInputSchema, InventoryItemUncheckedUpdateInputSchema]),
  where: InventoryItemWhereUniqueInputSchema
}).strict();
var InventoryItemUpdateManyArgsSchema = z$2.object({
  data: z$2.union([InventoryItemUpdateManyMutationInputSchema, InventoryItemUncheckedUpdateManyInputSchema]),
  where: InventoryItemWhereInputSchema.optional()
}).strict();
var InventoryItemDeleteManyArgsSchema = z$2.object({
  where: InventoryItemWhereInputSchema.optional()
}).strict();
var OrderCreateArgsSchema = z$2.object({
  select: OrderSelectSchema.optional(),
  include: OrderIncludeSchema.optional(),
  data: z$2.union([OrderCreateInputSchema, OrderUncheckedCreateInputSchema])
}).strict();
var OrderUpsertArgsSchema = z$2.object({
  select: OrderSelectSchema.optional(),
  include: OrderIncludeSchema.optional(),
  where: OrderWhereUniqueInputSchema,
  create: z$2.union([OrderCreateInputSchema, OrderUncheckedCreateInputSchema]),
  update: z$2.union([OrderUpdateInputSchema, OrderUncheckedUpdateInputSchema])
}).strict();
var OrderCreateManyArgsSchema = z$2.object({
  data: z$2.union([OrderCreateManyInputSchema, OrderCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var OrderCreateManyAndReturnArgsSchema = z$2.object({
  data: z$2.union([OrderCreateManyInputSchema, OrderCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var OrderDeleteArgsSchema = z$2.object({
  select: OrderSelectSchema.optional(),
  include: OrderIncludeSchema.optional(),
  where: OrderWhereUniqueInputSchema
}).strict();
var OrderUpdateArgsSchema = z$2.object({
  select: OrderSelectSchema.optional(),
  include: OrderIncludeSchema.optional(),
  data: z$2.union([OrderUpdateInputSchema, OrderUncheckedUpdateInputSchema]),
  where: OrderWhereUniqueInputSchema
}).strict();
var OrderUpdateManyArgsSchema = z$2.object({
  data: z$2.union([OrderUpdateManyMutationInputSchema, OrderUncheckedUpdateManyInputSchema]),
  where: OrderWhereInputSchema.optional()
}).strict();
var OrderDeleteManyArgsSchema = z$2.object({
  where: OrderWhereInputSchema.optional()
}).strict();
var OrderItemCreateArgsSchema = z$2.object({
  select: OrderItemSelectSchema.optional(),
  include: OrderItemIncludeSchema.optional(),
  data: z$2.union([OrderItemCreateInputSchema, OrderItemUncheckedCreateInputSchema])
}).strict();
var OrderItemUpsertArgsSchema = z$2.object({
  select: OrderItemSelectSchema.optional(),
  include: OrderItemIncludeSchema.optional(),
  where: OrderItemWhereUniqueInputSchema,
  create: z$2.union([OrderItemCreateInputSchema, OrderItemUncheckedCreateInputSchema]),
  update: z$2.union([OrderItemUpdateInputSchema, OrderItemUncheckedUpdateInputSchema])
}).strict();
var OrderItemCreateManyArgsSchema = z$2.object({
  data: z$2.union([OrderItemCreateManyInputSchema, OrderItemCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var OrderItemCreateManyAndReturnArgsSchema = z$2.object({
  data: z$2.union([OrderItemCreateManyInputSchema, OrderItemCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var OrderItemDeleteArgsSchema = z$2.object({
  select: OrderItemSelectSchema.optional(),
  include: OrderItemIncludeSchema.optional(),
  where: OrderItemWhereUniqueInputSchema
}).strict();
var OrderItemUpdateArgsSchema = z$2.object({
  select: OrderItemSelectSchema.optional(),
  include: OrderItemIncludeSchema.optional(),
  data: z$2.union([OrderItemUpdateInputSchema, OrderItemUncheckedUpdateInputSchema]),
  where: OrderItemWhereUniqueInputSchema
}).strict();
var OrderItemUpdateManyArgsSchema = z$2.object({
  data: z$2.union([OrderItemUpdateManyMutationInputSchema, OrderItemUncheckedUpdateManyInputSchema]),
  where: OrderItemWhereInputSchema.optional()
}).strict();
var OrderItemDeleteManyArgsSchema = z$2.object({
  where: OrderItemWhereInputSchema.optional()
}).strict();
var VendorCreateArgsSchema = z$2.object({
  select: VendorSelectSchema.optional(),
  include: VendorIncludeSchema.optional(),
  data: z$2.union([VendorCreateInputSchema, VendorUncheckedCreateInputSchema])
}).strict();
var VendorUpsertArgsSchema = z$2.object({
  select: VendorSelectSchema.optional(),
  include: VendorIncludeSchema.optional(),
  where: VendorWhereUniqueInputSchema,
  create: z$2.union([VendorCreateInputSchema, VendorUncheckedCreateInputSchema]),
  update: z$2.union([VendorUpdateInputSchema, VendorUncheckedUpdateInputSchema])
}).strict();
var VendorCreateManyArgsSchema = z$2.object({
  data: z$2.union([VendorCreateManyInputSchema, VendorCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var VendorCreateManyAndReturnArgsSchema = z$2.object({
  data: z$2.union([VendorCreateManyInputSchema, VendorCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var VendorDeleteArgsSchema = z$2.object({
  select: VendorSelectSchema.optional(),
  include: VendorIncludeSchema.optional(),
  where: VendorWhereUniqueInputSchema
}).strict();
var VendorUpdateArgsSchema = z$2.object({
  select: VendorSelectSchema.optional(),
  include: VendorIncludeSchema.optional(),
  data: z$2.union([VendorUpdateInputSchema, VendorUncheckedUpdateInputSchema]),
  where: VendorWhereUniqueInputSchema
}).strict();
var VendorUpdateManyArgsSchema = z$2.object({
  data: z$2.union([VendorUpdateManyMutationInputSchema, VendorUncheckedUpdateManyInputSchema]),
  where: VendorWhereInputSchema.optional()
}).strict();
var VendorDeleteManyArgsSchema = z$2.object({
  where: VendorWhereInputSchema.optional()
}).strict();
var ShiftCreateArgsSchema = z$2.object({
  select: ShiftSelectSchema.optional(),
  include: ShiftIncludeSchema.optional(),
  data: z$2.union([ShiftCreateInputSchema, ShiftUncheckedCreateInputSchema])
}).strict();
var ShiftUpsertArgsSchema = z$2.object({
  select: ShiftSelectSchema.optional(),
  include: ShiftIncludeSchema.optional(),
  where: ShiftWhereUniqueInputSchema,
  create: z$2.union([ShiftCreateInputSchema, ShiftUncheckedCreateInputSchema]),
  update: z$2.union([ShiftUpdateInputSchema, ShiftUncheckedUpdateInputSchema])
}).strict();
var ShiftCreateManyArgsSchema = z$2.object({
  data: z$2.union([ShiftCreateManyInputSchema, ShiftCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var ShiftCreateManyAndReturnArgsSchema = z$2.object({
  data: z$2.union([ShiftCreateManyInputSchema, ShiftCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var ShiftDeleteArgsSchema = z$2.object({
  select: ShiftSelectSchema.optional(),
  include: ShiftIncludeSchema.optional(),
  where: ShiftWhereUniqueInputSchema
}).strict();
var ShiftUpdateArgsSchema = z$2.object({
  select: ShiftSelectSchema.optional(),
  include: ShiftIncludeSchema.optional(),
  data: z$2.union([ShiftUpdateInputSchema, ShiftUncheckedUpdateInputSchema]),
  where: ShiftWhereUniqueInputSchema
}).strict();
var ShiftUpdateManyArgsSchema = z$2.object({
  data: z$2.union([ShiftUpdateManyMutationInputSchema, ShiftUncheckedUpdateManyInputSchema]),
  where: ShiftWhereInputSchema.optional()
}).strict();
var ShiftDeleteManyArgsSchema = z$2.object({
  where: ShiftWhereInputSchema.optional()
}).strict();
var PrepBoardCreateArgsSchema = z$2.object({
  select: PrepBoardSelectSchema.optional(),
  include: PrepBoardIncludeSchema.optional(),
  data: z$2.union([PrepBoardCreateInputSchema, PrepBoardUncheckedCreateInputSchema])
}).strict();
var PrepBoardUpsertArgsSchema = z$2.object({
  select: PrepBoardSelectSchema.optional(),
  include: PrepBoardIncludeSchema.optional(),
  where: PrepBoardWhereUniqueInputSchema,
  create: z$2.union([PrepBoardCreateInputSchema, PrepBoardUncheckedCreateInputSchema]),
  update: z$2.union([PrepBoardUpdateInputSchema, PrepBoardUncheckedUpdateInputSchema])
}).strict();
var PrepBoardCreateManyArgsSchema = z$2.object({
  data: z$2.union([PrepBoardCreateManyInputSchema, PrepBoardCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var PrepBoardCreateManyAndReturnArgsSchema = z$2.object({
  data: z$2.union([PrepBoardCreateManyInputSchema, PrepBoardCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var PrepBoardDeleteArgsSchema = z$2.object({
  select: PrepBoardSelectSchema.optional(),
  include: PrepBoardIncludeSchema.optional(),
  where: PrepBoardWhereUniqueInputSchema
}).strict();
var PrepBoardUpdateArgsSchema = z$2.object({
  select: PrepBoardSelectSchema.optional(),
  include: PrepBoardIncludeSchema.optional(),
  data: z$2.union([PrepBoardUpdateInputSchema, PrepBoardUncheckedUpdateInputSchema]),
  where: PrepBoardWhereUniqueInputSchema
}).strict();
var PrepBoardUpdateManyArgsSchema = z$2.object({
  data: z$2.union([PrepBoardUpdateManyMutationInputSchema, PrepBoardUncheckedUpdateManyInputSchema]),
  where: PrepBoardWhereInputSchema.optional()
}).strict();
var PrepBoardDeleteManyArgsSchema = z$2.object({
  where: PrepBoardWhereInputSchema.optional()
}).strict();
var PrepItemCreateArgsSchema = z$2.object({
  select: PrepItemSelectSchema.optional(),
  include: PrepItemIncludeSchema.optional(),
  data: z$2.union([PrepItemCreateInputSchema, PrepItemUncheckedCreateInputSchema])
}).strict();
var PrepItemUpsertArgsSchema = z$2.object({
  select: PrepItemSelectSchema.optional(),
  include: PrepItemIncludeSchema.optional(),
  where: PrepItemWhereUniqueInputSchema,
  create: z$2.union([PrepItemCreateInputSchema, PrepItemUncheckedCreateInputSchema]),
  update: z$2.union([PrepItemUpdateInputSchema, PrepItemUncheckedUpdateInputSchema])
}).strict();
var PrepItemCreateManyArgsSchema = z$2.object({
  data: z$2.union([PrepItemCreateManyInputSchema, PrepItemCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var PrepItemCreateManyAndReturnArgsSchema = z$2.object({
  data: z$2.union([PrepItemCreateManyInputSchema, PrepItemCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var PrepItemDeleteArgsSchema = z$2.object({
  select: PrepItemSelectSchema.optional(),
  include: PrepItemIncludeSchema.optional(),
  where: PrepItemWhereUniqueInputSchema
}).strict();
var PrepItemUpdateArgsSchema = z$2.object({
  select: PrepItemSelectSchema.optional(),
  include: PrepItemIncludeSchema.optional(),
  data: z$2.union([PrepItemUpdateInputSchema, PrepItemUncheckedUpdateInputSchema]),
  where: PrepItemWhereUniqueInputSchema
}).strict();
var PrepItemUpdateManyArgsSchema = z$2.object({
  data: z$2.union([PrepItemUpdateManyMutationInputSchema, PrepItemUncheckedUpdateManyInputSchema]),
  where: PrepItemWhereInputSchema.optional()
}).strict();
var PrepItemDeleteManyArgsSchema = z$2.object({
  where: PrepItemWhereInputSchema.optional()
}).strict();
var PasswordResetCreateArgsSchema = z$2.object({
  select: PasswordResetSelectSchema.optional(),
  include: PasswordResetIncludeSchema.optional(),
  data: z$2.union([PasswordResetCreateInputSchema, PasswordResetUncheckedCreateInputSchema])
}).strict();
var PasswordResetUpsertArgsSchema = z$2.object({
  select: PasswordResetSelectSchema.optional(),
  include: PasswordResetIncludeSchema.optional(),
  where: PasswordResetWhereUniqueInputSchema,
  create: z$2.union([PasswordResetCreateInputSchema, PasswordResetUncheckedCreateInputSchema]),
  update: z$2.union([PasswordResetUpdateInputSchema, PasswordResetUncheckedUpdateInputSchema])
}).strict();
var PasswordResetCreateManyArgsSchema = z$2.object({
  data: z$2.union([PasswordResetCreateManyInputSchema, PasswordResetCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var PasswordResetCreateManyAndReturnArgsSchema = z$2.object({
  data: z$2.union([PasswordResetCreateManyInputSchema, PasswordResetCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var PasswordResetDeleteArgsSchema = z$2.object({
  select: PasswordResetSelectSchema.optional(),
  include: PasswordResetIncludeSchema.optional(),
  where: PasswordResetWhereUniqueInputSchema
}).strict();
var PasswordResetUpdateArgsSchema = z$2.object({
  select: PasswordResetSelectSchema.optional(),
  include: PasswordResetIncludeSchema.optional(),
  data: z$2.union([PasswordResetUpdateInputSchema, PasswordResetUncheckedUpdateInputSchema]),
  where: PasswordResetWhereUniqueInputSchema
}).strict();
var PasswordResetUpdateManyArgsSchema = z$2.object({
  data: z$2.union([PasswordResetUpdateManyMutationInputSchema, PasswordResetUncheckedUpdateManyInputSchema]),
  where: PasswordResetWhereInputSchema.optional()
}).strict();
var PasswordResetDeleteManyArgsSchema = z$2.object({
  where: PasswordResetWhereInputSchema.optional()
}).strict();
var MenuCreateArgsSchema = z$2.object({
  select: MenuSelectSchema.optional(),
  include: MenuIncludeSchema.optional(),
  data: z$2.union([MenuCreateInputSchema, MenuUncheckedCreateInputSchema])
}).strict();
var MenuUpsertArgsSchema = z$2.object({
  select: MenuSelectSchema.optional(),
  include: MenuIncludeSchema.optional(),
  where: MenuWhereUniqueInputSchema,
  create: z$2.union([MenuCreateInputSchema, MenuUncheckedCreateInputSchema]),
  update: z$2.union([MenuUpdateInputSchema, MenuUncheckedUpdateInputSchema])
}).strict();
var MenuCreateManyArgsSchema = z$2.object({
  data: z$2.union([MenuCreateManyInputSchema, MenuCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var MenuCreateManyAndReturnArgsSchema = z$2.object({
  data: z$2.union([MenuCreateManyInputSchema, MenuCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var MenuDeleteArgsSchema = z$2.object({
  select: MenuSelectSchema.optional(),
  include: MenuIncludeSchema.optional(),
  where: MenuWhereUniqueInputSchema
}).strict();
var MenuUpdateArgsSchema = z$2.object({
  select: MenuSelectSchema.optional(),
  include: MenuIncludeSchema.optional(),
  data: z$2.union([MenuUpdateInputSchema, MenuUncheckedUpdateInputSchema]),
  where: MenuWhereUniqueInputSchema
}).strict();
var MenuUpdateManyArgsSchema = z$2.object({
  data: z$2.union([MenuUpdateManyMutationInputSchema, MenuUncheckedUpdateManyInputSchema]),
  where: MenuWhereInputSchema.optional()
}).strict();
var MenuDeleteManyArgsSchema = z$2.object({
  where: MenuWhereInputSchema.optional()
}).strict();
var MenuItemRecipeCreateArgsSchema = z$2.object({
  select: MenuItemRecipeSelectSchema.optional(),
  include: MenuItemRecipeIncludeSchema.optional(),
  data: z$2.union([MenuItemRecipeCreateInputSchema, MenuItemRecipeUncheckedCreateInputSchema])
}).strict();
var MenuItemRecipeUpsertArgsSchema = z$2.object({
  select: MenuItemRecipeSelectSchema.optional(),
  include: MenuItemRecipeIncludeSchema.optional(),
  where: MenuItemRecipeWhereUniqueInputSchema,
  create: z$2.union([MenuItemRecipeCreateInputSchema, MenuItemRecipeUncheckedCreateInputSchema]),
  update: z$2.union([MenuItemRecipeUpdateInputSchema, MenuItemRecipeUncheckedUpdateInputSchema])
}).strict();
var MenuItemRecipeCreateManyArgsSchema = z$2.object({
  data: z$2.union([MenuItemRecipeCreateManyInputSchema, MenuItemRecipeCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var MenuItemRecipeCreateManyAndReturnArgsSchema = z$2.object({
  data: z$2.union([MenuItemRecipeCreateManyInputSchema, MenuItemRecipeCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var MenuItemRecipeDeleteArgsSchema = z$2.object({
  select: MenuItemRecipeSelectSchema.optional(),
  include: MenuItemRecipeIncludeSchema.optional(),
  where: MenuItemRecipeWhereUniqueInputSchema
}).strict();
var MenuItemRecipeUpdateArgsSchema = z$2.object({
  select: MenuItemRecipeSelectSchema.optional(),
  include: MenuItemRecipeIncludeSchema.optional(),
  data: z$2.union([MenuItemRecipeUpdateInputSchema, MenuItemRecipeUncheckedUpdateInputSchema]),
  where: MenuItemRecipeWhereUniqueInputSchema
}).strict();
var MenuItemRecipeUpdateManyArgsSchema = z$2.object({
  data: z$2.union([MenuItemRecipeUpdateManyMutationInputSchema, MenuItemRecipeUncheckedUpdateManyInputSchema]),
  where: MenuItemRecipeWhereInputSchema.optional()
}).strict();
var MenuItemRecipeDeleteManyArgsSchema = z$2.object({
  where: MenuItemRecipeWhereInputSchema.optional()
}).strict();
var MenuItemCreateArgsSchema = z$2.object({
  select: MenuItemSelectSchema.optional(),
  include: MenuItemIncludeSchema.optional(),
  data: z$2.union([MenuItemCreateInputSchema, MenuItemUncheckedCreateInputSchema])
}).strict();
var MenuItemUpsertArgsSchema = z$2.object({
  select: MenuItemSelectSchema.optional(),
  include: MenuItemIncludeSchema.optional(),
  where: MenuItemWhereUniqueInputSchema,
  create: z$2.union([MenuItemCreateInputSchema, MenuItemUncheckedCreateInputSchema]),
  update: z$2.union([MenuItemUpdateInputSchema, MenuItemUncheckedUpdateInputSchema])
}).strict();
var MenuItemCreateManyArgsSchema = z$2.object({
  data: z$2.union([MenuItemCreateManyInputSchema, MenuItemCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var MenuItemCreateManyAndReturnArgsSchema = z$2.object({
  data: z$2.union([MenuItemCreateManyInputSchema, MenuItemCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var MenuItemDeleteArgsSchema = z$2.object({
  select: MenuItemSelectSchema.optional(),
  include: MenuItemIncludeSchema.optional(),
  where: MenuItemWhereUniqueInputSchema
}).strict();
var MenuItemUpdateArgsSchema = z$2.object({
  select: MenuItemSelectSchema.optional(),
  include: MenuItemIncludeSchema.optional(),
  data: z$2.union([MenuItemUpdateInputSchema, MenuItemUncheckedUpdateInputSchema]),
  where: MenuItemWhereUniqueInputSchema
}).strict();
var MenuItemUpdateManyArgsSchema = z$2.object({
  data: z$2.union([MenuItemUpdateManyMutationInputSchema, MenuItemUncheckedUpdateManyInputSchema]),
  where: MenuItemWhereInputSchema.optional()
}).strict();
var MenuItemDeleteManyArgsSchema = z$2.object({
  where: MenuItemWhereInputSchema.optional()
}).strict();
var NutritionalInfoCreateArgsSchema = z$2.object({
  select: NutritionalInfoSelectSchema.optional(),
  include: NutritionalInfoIncludeSchema.optional(),
  data: z$2.union([NutritionalInfoCreateInputSchema, NutritionalInfoUncheckedCreateInputSchema])
}).strict();
var NutritionalInfoUpsertArgsSchema = z$2.object({
  select: NutritionalInfoSelectSchema.optional(),
  include: NutritionalInfoIncludeSchema.optional(),
  where: NutritionalInfoWhereUniqueInputSchema,
  create: z$2.union([NutritionalInfoCreateInputSchema, NutritionalInfoUncheckedCreateInputSchema]),
  update: z$2.union([NutritionalInfoUpdateInputSchema, NutritionalInfoUncheckedUpdateInputSchema])
}).strict();
var NutritionalInfoCreateManyArgsSchema = z$2.object({
  data: z$2.union([NutritionalInfoCreateManyInputSchema, NutritionalInfoCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var NutritionalInfoCreateManyAndReturnArgsSchema = z$2.object({
  data: z$2.union([NutritionalInfoCreateManyInputSchema, NutritionalInfoCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var NutritionalInfoDeleteArgsSchema = z$2.object({
  select: NutritionalInfoSelectSchema.optional(),
  include: NutritionalInfoIncludeSchema.optional(),
  where: NutritionalInfoWhereUniqueInputSchema
}).strict();
var NutritionalInfoUpdateArgsSchema = z$2.object({
  select: NutritionalInfoSelectSchema.optional(),
  include: NutritionalInfoIncludeSchema.optional(),
  data: z$2.union([NutritionalInfoUpdateInputSchema, NutritionalInfoUncheckedUpdateInputSchema]),
  where: NutritionalInfoWhereUniqueInputSchema
}).strict();
var NutritionalInfoUpdateManyArgsSchema = z$2.object({
  data: z$2.union([NutritionalInfoUpdateManyMutationInputSchema, NutritionalInfoUncheckedUpdateManyInputSchema]),
  where: NutritionalInfoWhereInputSchema.optional()
}).strict();
var NutritionalInfoDeleteManyArgsSchema = z$2.object({
  where: NutritionalInfoWhereInputSchema.optional()
}).strict();
var FoodCostHistoryCreateArgsSchema = z$2.object({
  select: FoodCostHistorySelectSchema.optional(),
  include: FoodCostHistoryIncludeSchema.optional(),
  data: z$2.union([FoodCostHistoryCreateInputSchema, FoodCostHistoryUncheckedCreateInputSchema])
}).strict();
var FoodCostHistoryUpsertArgsSchema = z$2.object({
  select: FoodCostHistorySelectSchema.optional(),
  include: FoodCostHistoryIncludeSchema.optional(),
  where: FoodCostHistoryWhereUniqueInputSchema,
  create: z$2.union([FoodCostHistoryCreateInputSchema, FoodCostHistoryUncheckedCreateInputSchema]),
  update: z$2.union([FoodCostHistoryUpdateInputSchema, FoodCostHistoryUncheckedUpdateInputSchema])
}).strict();
var FoodCostHistoryCreateManyArgsSchema = z$2.object({
  data: z$2.union([FoodCostHistoryCreateManyInputSchema, FoodCostHistoryCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var FoodCostHistoryCreateManyAndReturnArgsSchema = z$2.object({
  data: z$2.union([FoodCostHistoryCreateManyInputSchema, FoodCostHistoryCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var FoodCostHistoryDeleteArgsSchema = z$2.object({
  select: FoodCostHistorySelectSchema.optional(),
  include: FoodCostHistoryIncludeSchema.optional(),
  where: FoodCostHistoryWhereUniqueInputSchema
}).strict();
var FoodCostHistoryUpdateArgsSchema = z$2.object({
  select: FoodCostHistorySelectSchema.optional(),
  include: FoodCostHistoryIncludeSchema.optional(),
  data: z$2.union([FoodCostHistoryUpdateInputSchema, FoodCostHistoryUncheckedUpdateInputSchema]),
  where: FoodCostHistoryWhereUniqueInputSchema
}).strict();
var FoodCostHistoryUpdateManyArgsSchema = z$2.object({
  data: z$2.union([FoodCostHistoryUpdateManyMutationInputSchema, FoodCostHistoryUncheckedUpdateManyInputSchema]),
  where: FoodCostHistoryWhereInputSchema.optional()
}).strict();
var FoodCostHistoryDeleteManyArgsSchema = z$2.object({
  where: FoodCostHistoryWhereInputSchema.optional()
}).strict();
var PrepHistoryCreateArgsSchema = z$2.object({
  select: PrepHistorySelectSchema.optional(),
  include: PrepHistoryIncludeSchema.optional(),
  data: z$2.union([PrepHistoryCreateInputSchema, PrepHistoryUncheckedCreateInputSchema])
}).strict();
var PrepHistoryUpsertArgsSchema = z$2.object({
  select: PrepHistorySelectSchema.optional(),
  include: PrepHistoryIncludeSchema.optional(),
  where: PrepHistoryWhereUniqueInputSchema,
  create: z$2.union([PrepHistoryCreateInputSchema, PrepHistoryUncheckedCreateInputSchema]),
  update: z$2.union([PrepHistoryUpdateInputSchema, PrepHistoryUncheckedUpdateInputSchema])
}).strict();
var PrepHistoryCreateManyArgsSchema = z$2.object({
  data: z$2.union([PrepHistoryCreateManyInputSchema, PrepHistoryCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var PrepHistoryCreateManyAndReturnArgsSchema = z$2.object({
  data: z$2.union([PrepHistoryCreateManyInputSchema, PrepHistoryCreateManyInputSchema.array()]),
  skipDuplicates: z$2.boolean().optional()
}).strict();
var PrepHistoryDeleteArgsSchema = z$2.object({
  select: PrepHistorySelectSchema.optional(),
  include: PrepHistoryIncludeSchema.optional(),
  where: PrepHistoryWhereUniqueInputSchema
}).strict();
var PrepHistoryUpdateArgsSchema = z$2.object({
  select: PrepHistorySelectSchema.optional(),
  include: PrepHistoryIncludeSchema.optional(),
  data: z$2.union([PrepHistoryUpdateInputSchema, PrepHistoryUncheckedUpdateInputSchema]),
  where: PrepHistoryWhereUniqueInputSchema
}).strict();
var PrepHistoryUpdateManyArgsSchema = z$2.object({
  data: z$2.union([PrepHistoryUpdateManyMutationInputSchema, PrepHistoryUncheckedUpdateManyInputSchema]),
  where: PrepHistoryWhereInputSchema.optional()
}).strict();
var PrepHistoryDeleteManyArgsSchema = z$2.object({
  where: PrepHistoryWhereInputSchema.optional()
}).strict();
var util$1;
(function(util2) {
  util2.assertEqual = (val) => val;
  function assertIs(_arg) {
  }
  util2.assertIs = assertIs;
  function assertNever(_x) {
    throw new Error();
  }
  util2.assertNever = assertNever;
  util2.arrayToEnum = (items) => {
    const obj = {};
    for (const item of items) {
      obj[item] = item;
    }
    return obj;
  };
  util2.getValidEnumValues = (obj) => {
    const validKeys = util2.objectKeys(obj).filter((k) => typeof obj[obj[k]] !== "number");
    const filtered = {};
    for (const k of validKeys) {
      filtered[k] = obj[k];
    }
    return util2.objectValues(filtered);
  };
  util2.objectValues = (obj) => {
    return util2.objectKeys(obj).map(function(e) {
      return obj[e];
    });
  };
  util2.objectKeys = typeof Object.keys === "function" ? (obj) => Object.keys(obj) : (object) => {
    const keys = [];
    for (const key in object) {
      if (Object.prototype.hasOwnProperty.call(object, key)) {
        keys.push(key);
      }
    }
    return keys;
  };
  util2.find = (arr, checker) => {
    for (const item of arr) {
      if (checker(item))
        return item;
    }
    return void 0;
  };
  util2.isInteger = typeof Number.isInteger === "function" ? (val) => Number.isInteger(val) : (val) => typeof val === "number" && isFinite(val) && Math.floor(val) === val;
  function joinValues(array, separator = " | ") {
    return array.map((val) => typeof val === "string" ? `'${val}'` : val).join(separator);
  }
  util2.joinValues = joinValues;
  util2.jsonStringifyReplacer = (_, value) => {
    if (typeof value === "bigint") {
      return value.toString();
    }
    return value;
  };
})(util$1 || (util$1 = {}));
var objectUtil$1;
(function(objectUtil2) {
  objectUtil2.mergeShapes = (first, second) => {
    return {
      ...first,
      ...second
      // second overwrites first
    };
  };
})(objectUtil$1 || (objectUtil$1 = {}));
var ZodParsedType$1 = util$1.arrayToEnum([
  "string",
  "nan",
  "number",
  "integer",
  "float",
  "boolean",
  "date",
  "bigint",
  "symbol",
  "function",
  "undefined",
  "null",
  "array",
  "object",
  "unknown",
  "promise",
  "void",
  "never",
  "map",
  "set"
]);
var getParsedType$1 = (data) => {
  const t = typeof data;
  switch (t) {
    case "undefined":
      return ZodParsedType$1.undefined;
    case "string":
      return ZodParsedType$1.string;
    case "number":
      return isNaN(data) ? ZodParsedType$1.nan : ZodParsedType$1.number;
    case "boolean":
      return ZodParsedType$1.boolean;
    case "function":
      return ZodParsedType$1.function;
    case "bigint":
      return ZodParsedType$1.bigint;
    case "symbol":
      return ZodParsedType$1.symbol;
    case "object":
      if (Array.isArray(data)) {
        return ZodParsedType$1.array;
      }
      if (data === null) {
        return ZodParsedType$1.null;
      }
      if (data.then && typeof data.then === "function" && data.catch && typeof data.catch === "function") {
        return ZodParsedType$1.promise;
      }
      if (typeof Map !== "undefined" && data instanceof Map) {
        return ZodParsedType$1.map;
      }
      if (typeof Set !== "undefined" && data instanceof Set) {
        return ZodParsedType$1.set;
      }
      if (typeof Date !== "undefined" && data instanceof Date) {
        return ZodParsedType$1.date;
      }
      return ZodParsedType$1.object;
    default:
      return ZodParsedType$1.unknown;
  }
};
var ZodIssueCode$1 = util$1.arrayToEnum([
  "invalid_type",
  "invalid_literal",
  "custom",
  "invalid_union",
  "invalid_union_discriminator",
  "invalid_enum_value",
  "unrecognized_keys",
  "invalid_arguments",
  "invalid_return_type",
  "invalid_date",
  "invalid_string",
  "too_small",
  "too_big",
  "invalid_intersection_types",
  "not_multiple_of",
  "not_finite"
]);
var quotelessJson$1 = (obj) => {
  const json = JSON.stringify(obj, null, 2);
  return json.replace(/"([^"]+)":/g, "$1:");
};
var ZodError$1 = class _ZodError extends Error {
  constructor(issues) {
    super();
    this.issues = [];
    this.addIssue = (sub) => {
      this.issues = [...this.issues, sub];
    };
    this.addIssues = (subs = []) => {
      this.issues = [...this.issues, ...subs];
    };
    const actualProto = new.target.prototype;
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(this, actualProto);
    } else {
      this.__proto__ = actualProto;
    }
    this.name = "ZodError";
    this.issues = issues;
  }
  get errors() {
    return this.issues;
  }
  format(_mapper) {
    const mapper = _mapper || function(issue) {
      return issue.message;
    };
    const fieldErrors = { _errors: [] };
    const processError = (error) => {
      for (const issue of error.issues) {
        if (issue.code === "invalid_union") {
          issue.unionErrors.map(processError);
        } else if (issue.code === "invalid_return_type") {
          processError(issue.returnTypeError);
        } else if (issue.code === "invalid_arguments") {
          processError(issue.argumentsError);
        } else if (issue.path.length === 0) {
          fieldErrors._errors.push(mapper(issue));
        } else {
          let curr = fieldErrors;
          let i = 0;
          while (i < issue.path.length) {
            const el = issue.path[i];
            const terminal = i === issue.path.length - 1;
            if (!terminal) {
              curr[el] = curr[el] || { _errors: [] };
            } else {
              curr[el] = curr[el] || { _errors: [] };
              curr[el]._errors.push(mapper(issue));
            }
            curr = curr[el];
            i++;
          }
        }
      }
    };
    processError(this);
    return fieldErrors;
  }
  static assert(value) {
    if (!(value instanceof _ZodError)) {
      throw new Error(`Not a ZodError: ${value}`);
    }
  }
  toString() {
    return this.message;
  }
  get message() {
    return JSON.stringify(this.issues, util$1.jsonStringifyReplacer, 2);
  }
  get isEmpty() {
    return this.issues.length === 0;
  }
  flatten(mapper = (issue) => issue.message) {
    const fieldErrors = {};
    const formErrors = [];
    for (const sub of this.issues) {
      if (sub.path.length > 0) {
        fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];
        fieldErrors[sub.path[0]].push(mapper(sub));
      } else {
        formErrors.push(mapper(sub));
      }
    }
    return { formErrors, fieldErrors };
  }
  get formErrors() {
    return this.flatten();
  }
};
ZodError$1.create = (issues) => {
  const error = new ZodError$1(issues);
  return error;
};
var errorMap$1 = (issue, _ctx) => {
  let message;
  switch (issue.code) {
    case ZodIssueCode$1.invalid_type:
      if (issue.received === ZodParsedType$1.undefined) {
        message = "Required";
      } else {
        message = `Expected ${issue.expected}, received ${issue.received}`;
      }
      break;
    case ZodIssueCode$1.invalid_literal:
      message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util$1.jsonStringifyReplacer)}`;
      break;
    case ZodIssueCode$1.unrecognized_keys:
      message = `Unrecognized key(s) in object: ${util$1.joinValues(issue.keys, ", ")}`;
      break;
    case ZodIssueCode$1.invalid_union:
      message = `Invalid input`;
      break;
    case ZodIssueCode$1.invalid_union_discriminator:
      message = `Invalid discriminator value. Expected ${util$1.joinValues(issue.options)}`;
      break;
    case ZodIssueCode$1.invalid_enum_value:
      message = `Invalid enum value. Expected ${util$1.joinValues(issue.options)}, received '${issue.received}'`;
      break;
    case ZodIssueCode$1.invalid_arguments:
      message = `Invalid function arguments`;
      break;
    case ZodIssueCode$1.invalid_return_type:
      message = `Invalid function return type`;
      break;
    case ZodIssueCode$1.invalid_date:
      message = `Invalid date`;
      break;
    case ZodIssueCode$1.invalid_string:
      if (typeof issue.validation === "object") {
        if ("includes" in issue.validation) {
          message = `Invalid input: must include "${issue.validation.includes}"`;
          if (typeof issue.validation.position === "number") {
            message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;
          }
        } else if ("startsWith" in issue.validation) {
          message = `Invalid input: must start with "${issue.validation.startsWith}"`;
        } else if ("endsWith" in issue.validation) {
          message = `Invalid input: must end with "${issue.validation.endsWith}"`;
        } else {
          util$1.assertNever(issue.validation);
        }
      } else if (issue.validation !== "regex") {
        message = `Invalid ${issue.validation}`;
      } else {
        message = "Invalid";
      }
      break;
    case ZodIssueCode$1.too_small:
      if (issue.type === "array")
        message = `Array must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;
      else if (issue.type === "string")
        message = `String must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;
      else if (issue.type === "number")
        message = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;
      else if (issue.type === "date")
        message = `Date must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${new Date(Number(issue.minimum))}`;
      else
        message = "Invalid input";
      break;
    case ZodIssueCode$1.too_big:
      if (issue.type === "array")
        message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;
      else if (issue.type === "string")
        message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;
      else if (issue.type === "number")
        message = `Number must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
      else if (issue.type === "bigint")
        message = `BigInt must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
      else if (issue.type === "date")
        message = `Date must be ${issue.exact ? `exactly` : issue.inclusive ? `smaller than or equal to` : `smaller than`} ${new Date(Number(issue.maximum))}`;
      else
        message = "Invalid input";
      break;
    case ZodIssueCode$1.custom:
      message = `Invalid input`;
      break;
    case ZodIssueCode$1.invalid_intersection_types:
      message = `Intersection results could not be merged`;
      break;
    case ZodIssueCode$1.not_multiple_of:
      message = `Number must be a multiple of ${issue.multipleOf}`;
      break;
    case ZodIssueCode$1.not_finite:
      message = "Number must be finite";
      break;
    default:
      message = _ctx.defaultError;
      util$1.assertNever(issue);
  }
  return { message };
};
var overrideErrorMap$1 = errorMap$1;
function setErrorMap$1(map) {
  overrideErrorMap$1 = map;
}
function getErrorMap$1() {
  return overrideErrorMap$1;
}
var makeIssue$1 = (params) => {
  const { data, path, errorMaps, issueData } = params;
  const fullPath = [...path, ...issueData.path || []];
  const fullIssue = {
    ...issueData,
    path: fullPath
  };
  if (issueData.message !== void 0) {
    return {
      ...issueData,
      path: fullPath,
      message: issueData.message
    };
  }
  let errorMessage = "";
  const maps = errorMaps.filter((m) => !!m).slice().reverse();
  for (const map of maps) {
    errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;
  }
  return {
    ...issueData,
    path: fullPath,
    message: errorMessage
  };
};
var EMPTY_PATH$1 = [];
function addIssueToContext$1(ctx, issueData) {
  const overrideMap = getErrorMap$1();
  const issue = makeIssue$1({
    issueData,
    data: ctx.data,
    path: ctx.path,
    errorMaps: [
      ctx.common.contextualErrorMap,
      ctx.schemaErrorMap,
      overrideMap,
      overrideMap === errorMap$1 ? void 0 : errorMap$1
      // then global default map
    ].filter((x) => !!x)
  });
  ctx.common.issues.push(issue);
}
var ParseStatus$1 = class _ParseStatus {
  constructor() {
    this.value = "valid";
  }
  dirty() {
    if (this.value === "valid")
      this.value = "dirty";
  }
  abort() {
    if (this.value !== "aborted")
      this.value = "aborted";
  }
  static mergeArray(status, results) {
    const arrayValue = [];
    for (const s of results) {
      if (s.status === "aborted")
        return INVALID$1;
      if (s.status === "dirty")
        status.dirty();
      arrayValue.push(s.value);
    }
    return { status: status.value, value: arrayValue };
  }
  static async mergeObjectAsync(status, pairs) {
    const syncPairs = [];
    for (const pair of pairs) {
      const key = await pair.key;
      const value = await pair.value;
      syncPairs.push({
        key,
        value
      });
    }
    return _ParseStatus.mergeObjectSync(status, syncPairs);
  }
  static mergeObjectSync(status, pairs) {
    const finalObject = {};
    for (const pair of pairs) {
      const { key, value } = pair;
      if (key.status === "aborted")
        return INVALID$1;
      if (value.status === "aborted")
        return INVALID$1;
      if (key.status === "dirty")
        status.dirty();
      if (value.status === "dirty")
        status.dirty();
      if (key.value !== "__proto__" && (typeof value.value !== "undefined" || pair.alwaysSet)) {
        finalObject[key.value] = value.value;
      }
    }
    return { status: status.value, value: finalObject };
  }
};
var INVALID$1 = Object.freeze({
  status: "aborted"
});
var DIRTY$1 = (value) => ({ status: "dirty", value });
var OK$1 = (value) => ({ status: "valid", value });
var isAborted$1 = (x) => x.status === "aborted";
var isDirty$1 = (x) => x.status === "dirty";
var isValid$1 = (x) => x.status === "valid";
var isAsync$1 = (x) => typeof Promise !== "undefined" && x instanceof Promise;
function __classPrivateFieldGet$1(receiver, state, kind, f) {
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return state.get(receiver);
}
function __classPrivateFieldSet$1(receiver, state, value, kind, f) {
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return state.set(receiver, value), value;
}
var errorUtil$1;
(function(errorUtil2) {
  errorUtil2.errToObj = (message) => typeof message === "string" ? { message } : message || {};
  errorUtil2.toString = (message) => typeof message === "string" ? message : message === null || message === void 0 ? void 0 : message.message;
})(errorUtil$1 || (errorUtil$1 = {}));
var _ZodEnum_cache$1;
var _ZodNativeEnum_cache$1;
var ParseInputLazyPath$1 = class ParseInputLazyPath {
  constructor(parent, value, path, key) {
    this._cachedPath = [];
    this.parent = parent;
    this.data = value;
    this._path = path;
    this._key = key;
  }
  get path() {
    if (!this._cachedPath.length) {
      if (this._key instanceof Array) {
        this._cachedPath.push(...this._path, ...this._key);
      } else {
        this._cachedPath.push(...this._path, this._key);
      }
    }
    return this._cachedPath;
  }
};
var handleResult$1 = (ctx, result) => {
  if (isValid$1(result)) {
    return { success: true, data: result.value };
  } else {
    if (!ctx.common.issues.length) {
      throw new Error("Validation failed but no issues detected.");
    }
    return {
      success: false,
      get error() {
        if (this._error)
          return this._error;
        const error = new ZodError$1(ctx.common.issues);
        this._error = error;
        return this._error;
      }
    };
  }
};
function processCreateParams$1(params) {
  if (!params)
    return {};
  const { errorMap: errorMap2, invalid_type_error, required_error, description } = params;
  if (errorMap2 && (invalid_type_error || required_error)) {
    throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);
  }
  if (errorMap2)
    return { errorMap: errorMap2, description };
  const customMap = (iss, ctx) => {
    var _a, _b;
    const { message } = params;
    if (iss.code === "invalid_enum_value") {
      return { message: message !== null && message !== void 0 ? message : ctx.defaultError };
    }
    if (typeof ctx.data === "undefined") {
      return { message: (_a = message !== null && message !== void 0 ? message : required_error) !== null && _a !== void 0 ? _a : ctx.defaultError };
    }
    if (iss.code !== "invalid_type")
      return { message: ctx.defaultError };
    return { message: (_b = message !== null && message !== void 0 ? message : invalid_type_error) !== null && _b !== void 0 ? _b : ctx.defaultError };
  };
  return { errorMap: customMap, description };
}
var ZodType$1 = class ZodType {
  constructor(def) {
    this.spa = this.safeParseAsync;
    this._def = def;
    this.parse = this.parse.bind(this);
    this.safeParse = this.safeParse.bind(this);
    this.parseAsync = this.parseAsync.bind(this);
    this.safeParseAsync = this.safeParseAsync.bind(this);
    this.spa = this.spa.bind(this);
    this.refine = this.refine.bind(this);
    this.refinement = this.refinement.bind(this);
    this.superRefine = this.superRefine.bind(this);
    this.optional = this.optional.bind(this);
    this.nullable = this.nullable.bind(this);
    this.nullish = this.nullish.bind(this);
    this.array = this.array.bind(this);
    this.promise = this.promise.bind(this);
    this.or = this.or.bind(this);
    this.and = this.and.bind(this);
    this.transform = this.transform.bind(this);
    this.brand = this.brand.bind(this);
    this.default = this.default.bind(this);
    this.catch = this.catch.bind(this);
    this.describe = this.describe.bind(this);
    this.pipe = this.pipe.bind(this);
    this.readonly = this.readonly.bind(this);
    this.isNullable = this.isNullable.bind(this);
    this.isOptional = this.isOptional.bind(this);
  }
  get description() {
    return this._def.description;
  }
  _getType(input) {
    return getParsedType$1(input.data);
  }
  _getOrReturnCtx(input, ctx) {
    return ctx || {
      common: input.parent.common,
      data: input.data,
      parsedType: getParsedType$1(input.data),
      schemaErrorMap: this._def.errorMap,
      path: input.path,
      parent: input.parent
    };
  }
  _processInputParams(input) {
    return {
      status: new ParseStatus$1(),
      ctx: {
        common: input.parent.common,
        data: input.data,
        parsedType: getParsedType$1(input.data),
        schemaErrorMap: this._def.errorMap,
        path: input.path,
        parent: input.parent
      }
    };
  }
  _parseSync(input) {
    const result = this._parse(input);
    if (isAsync$1(result)) {
      throw new Error("Synchronous parse encountered promise.");
    }
    return result;
  }
  _parseAsync(input) {
    const result = this._parse(input);
    return Promise.resolve(result);
  }
  parse(data, params) {
    const result = this.safeParse(data, params);
    if (result.success)
      return result.data;
    throw result.error;
  }
  safeParse(data, params) {
    var _a;
    const ctx = {
      common: {
        issues: [],
        async: (_a = params === null || params === void 0 ? void 0 : params.async) !== null && _a !== void 0 ? _a : false,
        contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap
      },
      path: (params === null || params === void 0 ? void 0 : params.path) || [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data,
      parsedType: getParsedType$1(data)
    };
    const result = this._parseSync({ data, path: ctx.path, parent: ctx });
    return handleResult$1(ctx, result);
  }
  async parseAsync(data, params) {
    const result = await this.safeParseAsync(data, params);
    if (result.success)
      return result.data;
    throw result.error;
  }
  async safeParseAsync(data, params) {
    const ctx = {
      common: {
        issues: [],
        contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,
        async: true
      },
      path: (params === null || params === void 0 ? void 0 : params.path) || [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data,
      parsedType: getParsedType$1(data)
    };
    const maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx });
    const result = await (isAsync$1(maybeAsyncResult) ? maybeAsyncResult : Promise.resolve(maybeAsyncResult));
    return handleResult$1(ctx, result);
  }
  refine(check, message) {
    const getIssueProperties = (val) => {
      if (typeof message === "string" || typeof message === "undefined") {
        return { message };
      } else if (typeof message === "function") {
        return message(val);
      } else {
        return message;
      }
    };
    return this._refinement((val, ctx) => {
      const result = check(val);
      const setError = () => ctx.addIssue({
        code: ZodIssueCode$1.custom,
        ...getIssueProperties(val)
      });
      if (typeof Promise !== "undefined" && result instanceof Promise) {
        return result.then((data) => {
          if (!data) {
            setError();
            return false;
          } else {
            return true;
          }
        });
      }
      if (!result) {
        setError();
        return false;
      } else {
        return true;
      }
    });
  }
  refinement(check, refinementData) {
    return this._refinement((val, ctx) => {
      if (!check(val)) {
        ctx.addIssue(typeof refinementData === "function" ? refinementData(val, ctx) : refinementData);
        return false;
      } else {
        return true;
      }
    });
  }
  _refinement(refinement) {
    return new ZodEffects$1({
      schema: this,
      typeName: ZodFirstPartyTypeKind$1.ZodEffects,
      effect: { type: "refinement", refinement }
    });
  }
  superRefine(refinement) {
    return this._refinement(refinement);
  }
  optional() {
    return ZodOptional$1.create(this, this._def);
  }
  nullable() {
    return ZodNullable$1.create(this, this._def);
  }
  nullish() {
    return this.nullable().optional();
  }
  array() {
    return ZodArray$1.create(this, this._def);
  }
  promise() {
    return ZodPromise$1.create(this, this._def);
  }
  or(option) {
    return ZodUnion$1.create([this, option], this._def);
  }
  and(incoming) {
    return ZodIntersection$1.create(this, incoming, this._def);
  }
  transform(transform) {
    return new ZodEffects$1({
      ...processCreateParams$1(this._def),
      schema: this,
      typeName: ZodFirstPartyTypeKind$1.ZodEffects,
      effect: { type: "transform", transform }
    });
  }
  default(def) {
    const defaultValueFunc = typeof def === "function" ? def : () => def;
    return new ZodDefault$1({
      ...processCreateParams$1(this._def),
      innerType: this,
      defaultValue: defaultValueFunc,
      typeName: ZodFirstPartyTypeKind$1.ZodDefault
    });
  }
  brand() {
    return new ZodBranded$1({
      typeName: ZodFirstPartyTypeKind$1.ZodBranded,
      type: this,
      ...processCreateParams$1(this._def)
    });
  }
  catch(def) {
    const catchValueFunc = typeof def === "function" ? def : () => def;
    return new ZodCatch$1({
      ...processCreateParams$1(this._def),
      innerType: this,
      catchValue: catchValueFunc,
      typeName: ZodFirstPartyTypeKind$1.ZodCatch
    });
  }
  describe(description) {
    const This = this.constructor;
    return new This({
      ...this._def,
      description
    });
  }
  pipe(target) {
    return ZodPipeline$1.create(this, target);
  }
  readonly() {
    return ZodReadonly$1.create(this);
  }
  isOptional() {
    return this.safeParse(void 0).success;
  }
  isNullable() {
    return this.safeParse(null).success;
  }
};
var cuidRegex$1 = /^c[^\s-]{8,}$/i;
var cuid2Regex$1 = /^[0-9a-z]+$/;
var ulidRegex$1 = /^[0-9A-HJKMNP-TV-Z]{26}$/;
var uuidRegex$1 = /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i;
var nanoidRegex$1 = /^[a-z0-9_-]{21}$/i;
var durationRegex$1 = /^[-+]?P(?!$)(?:(?:[-+]?\d+Y)|(?:[-+]?\d+[.,]\d+Y$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:(?:[-+]?\d+W)|(?:[-+]?\d+[.,]\d+W$))?(?:(?:[-+]?\d+D)|(?:[-+]?\d+[.,]\d+D$))?(?:T(?=[\d+-])(?:(?:[-+]?\d+H)|(?:[-+]?\d+[.,]\d+H$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:[-+]?\d+(?:[.,]\d+)?S)?)??$/;
var emailRegex$1 = /^(?!\.)(?!.*\.\.)([A-Z0-9_'+\-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i;
var _emojiRegex$1 = `^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$`;
var emojiRegex$1;
var ipv4Regex$1 = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/;
var ipv6Regex$1 = /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/;
var base64Regex$1 = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;
var dateRegexSource$1 = `((\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\d|30)|(02)-(0[1-9]|1\\d|2[0-8])))`;
var dateRegex$1 = new RegExp(`^${dateRegexSource$1}$`);
function timeRegexSource$1(args) {
  let regex = `([01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d`;
  if (args.precision) {
    regex = `${regex}\\.\\d{${args.precision}}`;
  } else if (args.precision == null) {
    regex = `${regex}(\\.\\d+)?`;
  }
  return regex;
}
function timeRegex$1(args) {
  return new RegExp(`^${timeRegexSource$1(args)}$`);
}
function datetimeRegex$1(args) {
  let regex = `${dateRegexSource$1}T${timeRegexSource$1(args)}`;
  const opts = [];
  opts.push(args.local ? `Z?` : `Z`);
  if (args.offset)
    opts.push(`([+-]\\d{2}:?\\d{2})`);
  regex = `${regex}(${opts.join("|")})`;
  return new RegExp(`^${regex}$`);
}
function isValidIP$1(ip, version) {
  if ((version === "v4" || !version) && ipv4Regex$1.test(ip)) {
    return true;
  }
  if ((version === "v6" || !version) && ipv6Regex$1.test(ip)) {
    return true;
  }
  return false;
}
var ZodString$1 = class _ZodString extends ZodType$1 {
  _parse(input) {
    if (this._def.coerce) {
      input.data = String(input.data);
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType$1.string) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext$1(ctx2, {
        code: ZodIssueCode$1.invalid_type,
        expected: ZodParsedType$1.string,
        received: ctx2.parsedType
      });
      return INVALID$1;
    }
    const status = new ParseStatus$1();
    let ctx = void 0;
    for (const check of this._def.checks) {
      if (check.kind === "min") {
        if (input.data.length < check.value) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext$1(ctx, {
            code: ZodIssueCode$1.too_small,
            minimum: check.value,
            type: "string",
            inclusive: true,
            exact: false,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "max") {
        if (input.data.length > check.value) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext$1(ctx, {
            code: ZodIssueCode$1.too_big,
            maximum: check.value,
            type: "string",
            inclusive: true,
            exact: false,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "length") {
        const tooBig = input.data.length > check.value;
        const tooSmall = input.data.length < check.value;
        if (tooBig || tooSmall) {
          ctx = this._getOrReturnCtx(input, ctx);
          if (tooBig) {
            addIssueToContext$1(ctx, {
              code: ZodIssueCode$1.too_big,
              maximum: check.value,
              type: "string",
              inclusive: true,
              exact: true,
              message: check.message
            });
          } else if (tooSmall) {
            addIssueToContext$1(ctx, {
              code: ZodIssueCode$1.too_small,
              minimum: check.value,
              type: "string",
              inclusive: true,
              exact: true,
              message: check.message
            });
          }
          status.dirty();
        }
      } else if (check.kind === "email") {
        if (!emailRegex$1.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext$1(ctx, {
            validation: "email",
            code: ZodIssueCode$1.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "emoji") {
        if (!emojiRegex$1) {
          emojiRegex$1 = new RegExp(_emojiRegex$1, "u");
        }
        if (!emojiRegex$1.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext$1(ctx, {
            validation: "emoji",
            code: ZodIssueCode$1.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "uuid") {
        if (!uuidRegex$1.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext$1(ctx, {
            validation: "uuid",
            code: ZodIssueCode$1.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "nanoid") {
        if (!nanoidRegex$1.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext$1(ctx, {
            validation: "nanoid",
            code: ZodIssueCode$1.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "cuid") {
        if (!cuidRegex$1.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext$1(ctx, {
            validation: "cuid",
            code: ZodIssueCode$1.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "cuid2") {
        if (!cuid2Regex$1.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext$1(ctx, {
            validation: "cuid2",
            code: ZodIssueCode$1.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "ulid") {
        if (!ulidRegex$1.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext$1(ctx, {
            validation: "ulid",
            code: ZodIssueCode$1.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "url") {
        try {
          new URL(input.data);
        } catch (_a) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext$1(ctx, {
            validation: "url",
            code: ZodIssueCode$1.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "regex") {
        check.regex.lastIndex = 0;
        const testResult = check.regex.test(input.data);
        if (!testResult) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext$1(ctx, {
            validation: "regex",
            code: ZodIssueCode$1.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "trim") {
        input.data = input.data.trim();
      } else if (check.kind === "includes") {
        if (!input.data.includes(check.value, check.position)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext$1(ctx, {
            code: ZodIssueCode$1.invalid_string,
            validation: { includes: check.value, position: check.position },
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "toLowerCase") {
        input.data = input.data.toLowerCase();
      } else if (check.kind === "toUpperCase") {
        input.data = input.data.toUpperCase();
      } else if (check.kind === "startsWith") {
        if (!input.data.startsWith(check.value)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext$1(ctx, {
            code: ZodIssueCode$1.invalid_string,
            validation: { startsWith: check.value },
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "endsWith") {
        if (!input.data.endsWith(check.value)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext$1(ctx, {
            code: ZodIssueCode$1.invalid_string,
            validation: { endsWith: check.value },
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "datetime") {
        const regex = datetimeRegex$1(check);
        if (!regex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext$1(ctx, {
            code: ZodIssueCode$1.invalid_string,
            validation: "datetime",
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "date") {
        const regex = dateRegex$1;
        if (!regex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext$1(ctx, {
            code: ZodIssueCode$1.invalid_string,
            validation: "date",
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "time") {
        const regex = timeRegex$1(check);
        if (!regex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext$1(ctx, {
            code: ZodIssueCode$1.invalid_string,
            validation: "time",
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "duration") {
        if (!durationRegex$1.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext$1(ctx, {
            validation: "duration",
            code: ZodIssueCode$1.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "ip") {
        if (!isValidIP$1(input.data, check.version)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext$1(ctx, {
            validation: "ip",
            code: ZodIssueCode$1.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "base64") {
        if (!base64Regex$1.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext$1(ctx, {
            validation: "base64",
            code: ZodIssueCode$1.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else {
        util$1.assertNever(check);
      }
    }
    return { status: status.value, value: input.data };
  }
  _regex(regex, validation, message) {
    return this.refinement((data) => regex.test(data), {
      validation,
      code: ZodIssueCode$1.invalid_string,
      ...errorUtil$1.errToObj(message)
    });
  }
  _addCheck(check) {
    return new _ZodString({
      ...this._def,
      checks: [...this._def.checks, check]
    });
  }
  email(message) {
    return this._addCheck({ kind: "email", ...errorUtil$1.errToObj(message) });
  }
  url(message) {
    return this._addCheck({ kind: "url", ...errorUtil$1.errToObj(message) });
  }
  emoji(message) {
    return this._addCheck({ kind: "emoji", ...errorUtil$1.errToObj(message) });
  }
  uuid(message) {
    return this._addCheck({ kind: "uuid", ...errorUtil$1.errToObj(message) });
  }
  nanoid(message) {
    return this._addCheck({ kind: "nanoid", ...errorUtil$1.errToObj(message) });
  }
  cuid(message) {
    return this._addCheck({ kind: "cuid", ...errorUtil$1.errToObj(message) });
  }
  cuid2(message) {
    return this._addCheck({ kind: "cuid2", ...errorUtil$1.errToObj(message) });
  }
  ulid(message) {
    return this._addCheck({ kind: "ulid", ...errorUtil$1.errToObj(message) });
  }
  base64(message) {
    return this._addCheck({ kind: "base64", ...errorUtil$1.errToObj(message) });
  }
  ip(options) {
    return this._addCheck({ kind: "ip", ...errorUtil$1.errToObj(options) });
  }
  datetime(options) {
    var _a, _b;
    if (typeof options === "string") {
      return this._addCheck({
        kind: "datetime",
        precision: null,
        offset: false,
        local: false,
        message: options
      });
    }
    return this._addCheck({
      kind: "datetime",
      precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === "undefined" ? null : options === null || options === void 0 ? void 0 : options.precision,
      offset: (_a = options === null || options === void 0 ? void 0 : options.offset) !== null && _a !== void 0 ? _a : false,
      local: (_b = options === null || options === void 0 ? void 0 : options.local) !== null && _b !== void 0 ? _b : false,
      ...errorUtil$1.errToObj(options === null || options === void 0 ? void 0 : options.message)
    });
  }
  date(message) {
    return this._addCheck({ kind: "date", message });
  }
  time(options) {
    if (typeof options === "string") {
      return this._addCheck({
        kind: "time",
        precision: null,
        message: options
      });
    }
    return this._addCheck({
      kind: "time",
      precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === "undefined" ? null : options === null || options === void 0 ? void 0 : options.precision,
      ...errorUtil$1.errToObj(options === null || options === void 0 ? void 0 : options.message)
    });
  }
  duration(message) {
    return this._addCheck({ kind: "duration", ...errorUtil$1.errToObj(message) });
  }
  regex(regex, message) {
    return this._addCheck({
      kind: "regex",
      regex,
      ...errorUtil$1.errToObj(message)
    });
  }
  includes(value, options) {
    return this._addCheck({
      kind: "includes",
      value,
      position: options === null || options === void 0 ? void 0 : options.position,
      ...errorUtil$1.errToObj(options === null || options === void 0 ? void 0 : options.message)
    });
  }
  startsWith(value, message) {
    return this._addCheck({
      kind: "startsWith",
      value,
      ...errorUtil$1.errToObj(message)
    });
  }
  endsWith(value, message) {
    return this._addCheck({
      kind: "endsWith",
      value,
      ...errorUtil$1.errToObj(message)
    });
  }
  min(minLength, message) {
    return this._addCheck({
      kind: "min",
      value: minLength,
      ...errorUtil$1.errToObj(message)
    });
  }
  max(maxLength, message) {
    return this._addCheck({
      kind: "max",
      value: maxLength,
      ...errorUtil$1.errToObj(message)
    });
  }
  length(len, message) {
    return this._addCheck({
      kind: "length",
      value: len,
      ...errorUtil$1.errToObj(message)
    });
  }
  /**
   * @deprecated Use z.string().min(1) instead.
   * @see {@link ZodString.min}
   */
  nonempty(message) {
    return this.min(1, errorUtil$1.errToObj(message));
  }
  trim() {
    return new _ZodString({
      ...this._def,
      checks: [...this._def.checks, { kind: "trim" }]
    });
  }
  toLowerCase() {
    return new _ZodString({
      ...this._def,
      checks: [...this._def.checks, { kind: "toLowerCase" }]
    });
  }
  toUpperCase() {
    return new _ZodString({
      ...this._def,
      checks: [...this._def.checks, { kind: "toUpperCase" }]
    });
  }
  get isDatetime() {
    return !!this._def.checks.find((ch) => ch.kind === "datetime");
  }
  get isDate() {
    return !!this._def.checks.find((ch) => ch.kind === "date");
  }
  get isTime() {
    return !!this._def.checks.find((ch) => ch.kind === "time");
  }
  get isDuration() {
    return !!this._def.checks.find((ch) => ch.kind === "duration");
  }
  get isEmail() {
    return !!this._def.checks.find((ch) => ch.kind === "email");
  }
  get isURL() {
    return !!this._def.checks.find((ch) => ch.kind === "url");
  }
  get isEmoji() {
    return !!this._def.checks.find((ch) => ch.kind === "emoji");
  }
  get isUUID() {
    return !!this._def.checks.find((ch) => ch.kind === "uuid");
  }
  get isNANOID() {
    return !!this._def.checks.find((ch) => ch.kind === "nanoid");
  }
  get isCUID() {
    return !!this._def.checks.find((ch) => ch.kind === "cuid");
  }
  get isCUID2() {
    return !!this._def.checks.find((ch) => ch.kind === "cuid2");
  }
  get isULID() {
    return !!this._def.checks.find((ch) => ch.kind === "ulid");
  }
  get isIP() {
    return !!this._def.checks.find((ch) => ch.kind === "ip");
  }
  get isBase64() {
    return !!this._def.checks.find((ch) => ch.kind === "base64");
  }
  get minLength() {
    let min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      }
    }
    return min;
  }
  get maxLength() {
    let max = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "max") {
        if (max === null || ch.value < max)
          max = ch.value;
      }
    }
    return max;
  }
};
ZodString$1.create = (params) => {
  var _a;
  return new ZodString$1({
    checks: [],
    typeName: ZodFirstPartyTypeKind$1.ZodString,
    coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,
    ...processCreateParams$1(params)
  });
};
function floatSafeRemainder$1(val, step) {
  const valDecCount = (val.toString().split(".")[1] || "").length;
  const stepDecCount = (step.toString().split(".")[1] || "").length;
  const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;
  const valInt = parseInt(val.toFixed(decCount).replace(".", ""));
  const stepInt = parseInt(step.toFixed(decCount).replace(".", ""));
  return valInt % stepInt / Math.pow(10, decCount);
}
var ZodNumber$1 = class _ZodNumber extends ZodType$1 {
  constructor() {
    super(...arguments);
    this.min = this.gte;
    this.max = this.lte;
    this.step = this.multipleOf;
  }
  _parse(input) {
    if (this._def.coerce) {
      input.data = Number(input.data);
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType$1.number) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext$1(ctx2, {
        code: ZodIssueCode$1.invalid_type,
        expected: ZodParsedType$1.number,
        received: ctx2.parsedType
      });
      return INVALID$1;
    }
    let ctx = void 0;
    const status = new ParseStatus$1();
    for (const check of this._def.checks) {
      if (check.kind === "int") {
        if (!util$1.isInteger(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext$1(ctx, {
            code: ZodIssueCode$1.invalid_type,
            expected: "integer",
            received: "float",
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "min") {
        const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
        if (tooSmall) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext$1(ctx, {
            code: ZodIssueCode$1.too_small,
            minimum: check.value,
            type: "number",
            inclusive: check.inclusive,
            exact: false,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "max") {
        const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
        if (tooBig) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext$1(ctx, {
            code: ZodIssueCode$1.too_big,
            maximum: check.value,
            type: "number",
            inclusive: check.inclusive,
            exact: false,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "multipleOf") {
        if (floatSafeRemainder$1(input.data, check.value) !== 0) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext$1(ctx, {
            code: ZodIssueCode$1.not_multiple_of,
            multipleOf: check.value,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "finite") {
        if (!Number.isFinite(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext$1(ctx, {
            code: ZodIssueCode$1.not_finite,
            message: check.message
          });
          status.dirty();
        }
      } else {
        util$1.assertNever(check);
      }
    }
    return { status: status.value, value: input.data };
  }
  gte(value, message) {
    return this.setLimit("min", value, true, errorUtil$1.toString(message));
  }
  gt(value, message) {
    return this.setLimit("min", value, false, errorUtil$1.toString(message));
  }
  lte(value, message) {
    return this.setLimit("max", value, true, errorUtil$1.toString(message));
  }
  lt(value, message) {
    return this.setLimit("max", value, false, errorUtil$1.toString(message));
  }
  setLimit(kind, value, inclusive, message) {
    return new _ZodNumber({
      ...this._def,
      checks: [
        ...this._def.checks,
        {
          kind,
          value,
          inclusive,
          message: errorUtil$1.toString(message)
        }
      ]
    });
  }
  _addCheck(check) {
    return new _ZodNumber({
      ...this._def,
      checks: [...this._def.checks, check]
    });
  }
  int(message) {
    return this._addCheck({
      kind: "int",
      message: errorUtil$1.toString(message)
    });
  }
  positive(message) {
    return this._addCheck({
      kind: "min",
      value: 0,
      inclusive: false,
      message: errorUtil$1.toString(message)
    });
  }
  negative(message) {
    return this._addCheck({
      kind: "max",
      value: 0,
      inclusive: false,
      message: errorUtil$1.toString(message)
    });
  }
  nonpositive(message) {
    return this._addCheck({
      kind: "max",
      value: 0,
      inclusive: true,
      message: errorUtil$1.toString(message)
    });
  }
  nonnegative(message) {
    return this._addCheck({
      kind: "min",
      value: 0,
      inclusive: true,
      message: errorUtil$1.toString(message)
    });
  }
  multipleOf(value, message) {
    return this._addCheck({
      kind: "multipleOf",
      value,
      message: errorUtil$1.toString(message)
    });
  }
  finite(message) {
    return this._addCheck({
      kind: "finite",
      message: errorUtil$1.toString(message)
    });
  }
  safe(message) {
    return this._addCheck({
      kind: "min",
      inclusive: true,
      value: Number.MIN_SAFE_INTEGER,
      message: errorUtil$1.toString(message)
    })._addCheck({
      kind: "max",
      inclusive: true,
      value: Number.MAX_SAFE_INTEGER,
      message: errorUtil$1.toString(message)
    });
  }
  get minValue() {
    let min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      }
    }
    return min;
  }
  get maxValue() {
    let max = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "max") {
        if (max === null || ch.value < max)
          max = ch.value;
      }
    }
    return max;
  }
  get isInt() {
    return !!this._def.checks.find((ch) => ch.kind === "int" || ch.kind === "multipleOf" && util$1.isInteger(ch.value));
  }
  get isFinite() {
    let max = null, min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "finite" || ch.kind === "int" || ch.kind === "multipleOf") {
        return true;
      } else if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      } else if (ch.kind === "max") {
        if (max === null || ch.value < max)
          max = ch.value;
      }
    }
    return Number.isFinite(min) && Number.isFinite(max);
  }
};
ZodNumber$1.create = (params) => {
  return new ZodNumber$1({
    checks: [],
    typeName: ZodFirstPartyTypeKind$1.ZodNumber,
    coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
    ...processCreateParams$1(params)
  });
};
var ZodBigInt$1 = class _ZodBigInt extends ZodType$1 {
  constructor() {
    super(...arguments);
    this.min = this.gte;
    this.max = this.lte;
  }
  _parse(input) {
    if (this._def.coerce) {
      input.data = BigInt(input.data);
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType$1.bigint) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext$1(ctx2, {
        code: ZodIssueCode$1.invalid_type,
        expected: ZodParsedType$1.bigint,
        received: ctx2.parsedType
      });
      return INVALID$1;
    }
    let ctx = void 0;
    const status = new ParseStatus$1();
    for (const check of this._def.checks) {
      if (check.kind === "min") {
        const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
        if (tooSmall) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext$1(ctx, {
            code: ZodIssueCode$1.too_small,
            type: "bigint",
            minimum: check.value,
            inclusive: check.inclusive,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "max") {
        const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
        if (tooBig) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext$1(ctx, {
            code: ZodIssueCode$1.too_big,
            type: "bigint",
            maximum: check.value,
            inclusive: check.inclusive,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "multipleOf") {
        if (input.data % check.value !== BigInt(0)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext$1(ctx, {
            code: ZodIssueCode$1.not_multiple_of,
            multipleOf: check.value,
            message: check.message
          });
          status.dirty();
        }
      } else {
        util$1.assertNever(check);
      }
    }
    return { status: status.value, value: input.data };
  }
  gte(value, message) {
    return this.setLimit("min", value, true, errorUtil$1.toString(message));
  }
  gt(value, message) {
    return this.setLimit("min", value, false, errorUtil$1.toString(message));
  }
  lte(value, message) {
    return this.setLimit("max", value, true, errorUtil$1.toString(message));
  }
  lt(value, message) {
    return this.setLimit("max", value, false, errorUtil$1.toString(message));
  }
  setLimit(kind, value, inclusive, message) {
    return new _ZodBigInt({
      ...this._def,
      checks: [
        ...this._def.checks,
        {
          kind,
          value,
          inclusive,
          message: errorUtil$1.toString(message)
        }
      ]
    });
  }
  _addCheck(check) {
    return new _ZodBigInt({
      ...this._def,
      checks: [...this._def.checks, check]
    });
  }
  positive(message) {
    return this._addCheck({
      kind: "min",
      value: BigInt(0),
      inclusive: false,
      message: errorUtil$1.toString(message)
    });
  }
  negative(message) {
    return this._addCheck({
      kind: "max",
      value: BigInt(0),
      inclusive: false,
      message: errorUtil$1.toString(message)
    });
  }
  nonpositive(message) {
    return this._addCheck({
      kind: "max",
      value: BigInt(0),
      inclusive: true,
      message: errorUtil$1.toString(message)
    });
  }
  nonnegative(message) {
    return this._addCheck({
      kind: "min",
      value: BigInt(0),
      inclusive: true,
      message: errorUtil$1.toString(message)
    });
  }
  multipleOf(value, message) {
    return this._addCheck({
      kind: "multipleOf",
      value,
      message: errorUtil$1.toString(message)
    });
  }
  get minValue() {
    let min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      }
    }
    return min;
  }
  get maxValue() {
    let max = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "max") {
        if (max === null || ch.value < max)
          max = ch.value;
      }
    }
    return max;
  }
};
ZodBigInt$1.create = (params) => {
  var _a;
  return new ZodBigInt$1({
    checks: [],
    typeName: ZodFirstPartyTypeKind$1.ZodBigInt,
    coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,
    ...processCreateParams$1(params)
  });
};
var ZodBoolean$1 = class ZodBoolean extends ZodType$1 {
  _parse(input) {
    if (this._def.coerce) {
      input.data = Boolean(input.data);
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType$1.boolean) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext$1(ctx, {
        code: ZodIssueCode$1.invalid_type,
        expected: ZodParsedType$1.boolean,
        received: ctx.parsedType
      });
      return INVALID$1;
    }
    return OK$1(input.data);
  }
};
ZodBoolean$1.create = (params) => {
  return new ZodBoolean$1({
    typeName: ZodFirstPartyTypeKind$1.ZodBoolean,
    coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
    ...processCreateParams$1(params)
  });
};
var ZodDate$1 = class _ZodDate extends ZodType$1 {
  _parse(input) {
    if (this._def.coerce) {
      input.data = new Date(input.data);
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType$1.date) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext$1(ctx2, {
        code: ZodIssueCode$1.invalid_type,
        expected: ZodParsedType$1.date,
        received: ctx2.parsedType
      });
      return INVALID$1;
    }
    if (isNaN(input.data.getTime())) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext$1(ctx2, {
        code: ZodIssueCode$1.invalid_date
      });
      return INVALID$1;
    }
    const status = new ParseStatus$1();
    let ctx = void 0;
    for (const check of this._def.checks) {
      if (check.kind === "min") {
        if (input.data.getTime() < check.value) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext$1(ctx, {
            code: ZodIssueCode$1.too_small,
            message: check.message,
            inclusive: true,
            exact: false,
            minimum: check.value,
            type: "date"
          });
          status.dirty();
        }
      } else if (check.kind === "max") {
        if (input.data.getTime() > check.value) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext$1(ctx, {
            code: ZodIssueCode$1.too_big,
            message: check.message,
            inclusive: true,
            exact: false,
            maximum: check.value,
            type: "date"
          });
          status.dirty();
        }
      } else {
        util$1.assertNever(check);
      }
    }
    return {
      status: status.value,
      value: new Date(input.data.getTime())
    };
  }
  _addCheck(check) {
    return new _ZodDate({
      ...this._def,
      checks: [...this._def.checks, check]
    });
  }
  min(minDate, message) {
    return this._addCheck({
      kind: "min",
      value: minDate.getTime(),
      message: errorUtil$1.toString(message)
    });
  }
  max(maxDate, message) {
    return this._addCheck({
      kind: "max",
      value: maxDate.getTime(),
      message: errorUtil$1.toString(message)
    });
  }
  get minDate() {
    let min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      }
    }
    return min != null ? new Date(min) : null;
  }
  get maxDate() {
    let max = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "max") {
        if (max === null || ch.value < max)
          max = ch.value;
      }
    }
    return max != null ? new Date(max) : null;
  }
};
ZodDate$1.create = (params) => {
  return new ZodDate$1({
    checks: [],
    coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
    typeName: ZodFirstPartyTypeKind$1.ZodDate,
    ...processCreateParams$1(params)
  });
};
var ZodSymbol$1 = class ZodSymbol extends ZodType$1 {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType$1.symbol) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext$1(ctx, {
        code: ZodIssueCode$1.invalid_type,
        expected: ZodParsedType$1.symbol,
        received: ctx.parsedType
      });
      return INVALID$1;
    }
    return OK$1(input.data);
  }
};
ZodSymbol$1.create = (params) => {
  return new ZodSymbol$1({
    typeName: ZodFirstPartyTypeKind$1.ZodSymbol,
    ...processCreateParams$1(params)
  });
};
var ZodUndefined$1 = class ZodUndefined extends ZodType$1 {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType$1.undefined) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext$1(ctx, {
        code: ZodIssueCode$1.invalid_type,
        expected: ZodParsedType$1.undefined,
        received: ctx.parsedType
      });
      return INVALID$1;
    }
    return OK$1(input.data);
  }
};
ZodUndefined$1.create = (params) => {
  return new ZodUndefined$1({
    typeName: ZodFirstPartyTypeKind$1.ZodUndefined,
    ...processCreateParams$1(params)
  });
};
var ZodNull$1 = class ZodNull extends ZodType$1 {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType$1.null) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext$1(ctx, {
        code: ZodIssueCode$1.invalid_type,
        expected: ZodParsedType$1.null,
        received: ctx.parsedType
      });
      return INVALID$1;
    }
    return OK$1(input.data);
  }
};
ZodNull$1.create = (params) => {
  return new ZodNull$1({
    typeName: ZodFirstPartyTypeKind$1.ZodNull,
    ...processCreateParams$1(params)
  });
};
var ZodAny$1 = class ZodAny extends ZodType$1 {
  constructor() {
    super(...arguments);
    this._any = true;
  }
  _parse(input) {
    return OK$1(input.data);
  }
};
ZodAny$1.create = (params) => {
  return new ZodAny$1({
    typeName: ZodFirstPartyTypeKind$1.ZodAny,
    ...processCreateParams$1(params)
  });
};
var ZodUnknown$1 = class ZodUnknown extends ZodType$1 {
  constructor() {
    super(...arguments);
    this._unknown = true;
  }
  _parse(input) {
    return OK$1(input.data);
  }
};
ZodUnknown$1.create = (params) => {
  return new ZodUnknown$1({
    typeName: ZodFirstPartyTypeKind$1.ZodUnknown,
    ...processCreateParams$1(params)
  });
};
var ZodNever$1 = class ZodNever extends ZodType$1 {
  _parse(input) {
    const ctx = this._getOrReturnCtx(input);
    addIssueToContext$1(ctx, {
      code: ZodIssueCode$1.invalid_type,
      expected: ZodParsedType$1.never,
      received: ctx.parsedType
    });
    return INVALID$1;
  }
};
ZodNever$1.create = (params) => {
  return new ZodNever$1({
    typeName: ZodFirstPartyTypeKind$1.ZodNever,
    ...processCreateParams$1(params)
  });
};
var ZodVoid$1 = class ZodVoid extends ZodType$1 {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType$1.undefined) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext$1(ctx, {
        code: ZodIssueCode$1.invalid_type,
        expected: ZodParsedType$1.void,
        received: ctx.parsedType
      });
      return INVALID$1;
    }
    return OK$1(input.data);
  }
};
ZodVoid$1.create = (params) => {
  return new ZodVoid$1({
    typeName: ZodFirstPartyTypeKind$1.ZodVoid,
    ...processCreateParams$1(params)
  });
};
var ZodArray$1 = class _ZodArray extends ZodType$1 {
  _parse(input) {
    const { ctx, status } = this._processInputParams(input);
    const def = this._def;
    if (ctx.parsedType !== ZodParsedType$1.array) {
      addIssueToContext$1(ctx, {
        code: ZodIssueCode$1.invalid_type,
        expected: ZodParsedType$1.array,
        received: ctx.parsedType
      });
      return INVALID$1;
    }
    if (def.exactLength !== null) {
      const tooBig = ctx.data.length > def.exactLength.value;
      const tooSmall = ctx.data.length < def.exactLength.value;
      if (tooBig || tooSmall) {
        addIssueToContext$1(ctx, {
          code: tooBig ? ZodIssueCode$1.too_big : ZodIssueCode$1.too_small,
          minimum: tooSmall ? def.exactLength.value : void 0,
          maximum: tooBig ? def.exactLength.value : void 0,
          type: "array",
          inclusive: true,
          exact: true,
          message: def.exactLength.message
        });
        status.dirty();
      }
    }
    if (def.minLength !== null) {
      if (ctx.data.length < def.minLength.value) {
        addIssueToContext$1(ctx, {
          code: ZodIssueCode$1.too_small,
          minimum: def.minLength.value,
          type: "array",
          inclusive: true,
          exact: false,
          message: def.minLength.message
        });
        status.dirty();
      }
    }
    if (def.maxLength !== null) {
      if (ctx.data.length > def.maxLength.value) {
        addIssueToContext$1(ctx, {
          code: ZodIssueCode$1.too_big,
          maximum: def.maxLength.value,
          type: "array",
          inclusive: true,
          exact: false,
          message: def.maxLength.message
        });
        status.dirty();
      }
    }
    if (ctx.common.async) {
      return Promise.all([...ctx.data].map((item, i) => {
        return def.type._parseAsync(new ParseInputLazyPath$1(ctx, item, ctx.path, i));
      })).then((result2) => {
        return ParseStatus$1.mergeArray(status, result2);
      });
    }
    const result = [...ctx.data].map((item, i) => {
      return def.type._parseSync(new ParseInputLazyPath$1(ctx, item, ctx.path, i));
    });
    return ParseStatus$1.mergeArray(status, result);
  }
  get element() {
    return this._def.type;
  }
  min(minLength, message) {
    return new _ZodArray({
      ...this._def,
      minLength: { value: minLength, message: errorUtil$1.toString(message) }
    });
  }
  max(maxLength, message) {
    return new _ZodArray({
      ...this._def,
      maxLength: { value: maxLength, message: errorUtil$1.toString(message) }
    });
  }
  length(len, message) {
    return new _ZodArray({
      ...this._def,
      exactLength: { value: len, message: errorUtil$1.toString(message) }
    });
  }
  nonempty(message) {
    return this.min(1, message);
  }
};
ZodArray$1.create = (schema, params) => {
  return new ZodArray$1({
    type: schema,
    minLength: null,
    maxLength: null,
    exactLength: null,
    typeName: ZodFirstPartyTypeKind$1.ZodArray,
    ...processCreateParams$1(params)
  });
};
function deepPartialify$1(schema) {
  if (schema instanceof ZodObject$1) {
    const newShape = {};
    for (const key in schema.shape) {
      const fieldSchema = schema.shape[key];
      newShape[key] = ZodOptional$1.create(deepPartialify$1(fieldSchema));
    }
    return new ZodObject$1({
      ...schema._def,
      shape: () => newShape
    });
  } else if (schema instanceof ZodArray$1) {
    return new ZodArray$1({
      ...schema._def,
      type: deepPartialify$1(schema.element)
    });
  } else if (schema instanceof ZodOptional$1) {
    return ZodOptional$1.create(deepPartialify$1(schema.unwrap()));
  } else if (schema instanceof ZodNullable$1) {
    return ZodNullable$1.create(deepPartialify$1(schema.unwrap()));
  } else if (schema instanceof ZodTuple$1) {
    return ZodTuple$1.create(schema.items.map((item) => deepPartialify$1(item)));
  } else {
    return schema;
  }
}
var ZodObject$1 = class _ZodObject extends ZodType$1 {
  constructor() {
    super(...arguments);
    this._cached = null;
    this.nonstrict = this.passthrough;
    this.augment = this.extend;
  }
  _getCached() {
    if (this._cached !== null)
      return this._cached;
    const shape = this._def.shape();
    const keys = util$1.objectKeys(shape);
    return this._cached = { shape, keys };
  }
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType$1.object) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext$1(ctx2, {
        code: ZodIssueCode$1.invalid_type,
        expected: ZodParsedType$1.object,
        received: ctx2.parsedType
      });
      return INVALID$1;
    }
    const { status, ctx } = this._processInputParams(input);
    const { shape, keys: shapeKeys } = this._getCached();
    const extraKeys = [];
    if (!(this._def.catchall instanceof ZodNever$1 && this._def.unknownKeys === "strip")) {
      for (const key in ctx.data) {
        if (!shapeKeys.includes(key)) {
          extraKeys.push(key);
        }
      }
    }
    const pairs = [];
    for (const key of shapeKeys) {
      const keyValidator = shape[key];
      const value = ctx.data[key];
      pairs.push({
        key: { status: "valid", value: key },
        value: keyValidator._parse(new ParseInputLazyPath$1(ctx, value, ctx.path, key)),
        alwaysSet: key in ctx.data
      });
    }
    if (this._def.catchall instanceof ZodNever$1) {
      const unknownKeys = this._def.unknownKeys;
      if (unknownKeys === "passthrough") {
        for (const key of extraKeys) {
          pairs.push({
            key: { status: "valid", value: key },
            value: { status: "valid", value: ctx.data[key] }
          });
        }
      } else if (unknownKeys === "strict") {
        if (extraKeys.length > 0) {
          addIssueToContext$1(ctx, {
            code: ZodIssueCode$1.unrecognized_keys,
            keys: extraKeys
          });
          status.dirty();
        }
      } else if (unknownKeys === "strip")
        ;
      else {
        throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);
      }
    } else {
      const catchall = this._def.catchall;
      for (const key of extraKeys) {
        const value = ctx.data[key];
        pairs.push({
          key: { status: "valid", value: key },
          value: catchall._parse(
            new ParseInputLazyPath$1(ctx, value, ctx.path, key)
            //, ctx.child(key), value, getParsedType(value)
          ),
          alwaysSet: key in ctx.data
        });
      }
    }
    if (ctx.common.async) {
      return Promise.resolve().then(async () => {
        const syncPairs = [];
        for (const pair of pairs) {
          const key = await pair.key;
          const value = await pair.value;
          syncPairs.push({
            key,
            value,
            alwaysSet: pair.alwaysSet
          });
        }
        return syncPairs;
      }).then((syncPairs) => {
        return ParseStatus$1.mergeObjectSync(status, syncPairs);
      });
    } else {
      return ParseStatus$1.mergeObjectSync(status, pairs);
    }
  }
  get shape() {
    return this._def.shape();
  }
  strict(message) {
    errorUtil$1.errToObj;
    return new _ZodObject({
      ...this._def,
      unknownKeys: "strict",
      ...message !== void 0 ? {
        errorMap: (issue, ctx) => {
          var _a, _b, _c, _d;
          const defaultError = (_c = (_b = (_a = this._def).errorMap) === null || _b === void 0 ? void 0 : _b.call(_a, issue, ctx).message) !== null && _c !== void 0 ? _c : ctx.defaultError;
          if (issue.code === "unrecognized_keys")
            return {
              message: (_d = errorUtil$1.errToObj(message).message) !== null && _d !== void 0 ? _d : defaultError
            };
          return {
            message: defaultError
          };
        }
      } : {}
    });
  }
  strip() {
    return new _ZodObject({
      ...this._def,
      unknownKeys: "strip"
    });
  }
  passthrough() {
    return new _ZodObject({
      ...this._def,
      unknownKeys: "passthrough"
    });
  }
  // const AugmentFactory =
  //   <Def extends ZodObjectDef>(def: Def) =>
  //   <Augmentation extends ZodRawShape>(
  //     augmentation: Augmentation
  //   ): ZodObject<
  //     extendShape<ReturnType<Def["shape"]>, Augmentation>,
  //     Def["unknownKeys"],
  //     Def["catchall"]
  //   > => {
  //     return new ZodObject({
  //       ...def,
  //       shape: () => ({
  //         ...def.shape(),
  //         ...augmentation,
  //       }),
  //     }) as any;
  //   };
  extend(augmentation) {
    return new _ZodObject({
      ...this._def,
      shape: () => ({
        ...this._def.shape(),
        ...augmentation
      })
    });
  }
  /**
   * Prior to zod@1.0.12 there was a bug in the
   * inferred type of merged objects. Please
   * upgrade if you are experiencing issues.
   */
  merge(merging) {
    const merged = new _ZodObject({
      unknownKeys: merging._def.unknownKeys,
      catchall: merging._def.catchall,
      shape: () => ({
        ...this._def.shape(),
        ...merging._def.shape()
      }),
      typeName: ZodFirstPartyTypeKind$1.ZodObject
    });
    return merged;
  }
  // merge<
  //   Incoming extends AnyZodObject,
  //   Augmentation extends Incoming["shape"],
  //   NewOutput extends {
  //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation
  //       ? Augmentation[k]["_output"]
  //       : k extends keyof Output
  //       ? Output[k]
  //       : never;
  //   },
  //   NewInput extends {
  //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation
  //       ? Augmentation[k]["_input"]
  //       : k extends keyof Input
  //       ? Input[k]
  //       : never;
  //   }
  // >(
  //   merging: Incoming
  // ): ZodObject<
  //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
  //   Incoming["_def"]["unknownKeys"],
  //   Incoming["_def"]["catchall"],
  //   NewOutput,
  //   NewInput
  // > {
  //   const merged: any = new ZodObject({
  //     unknownKeys: merging._def.unknownKeys,
  //     catchall: merging._def.catchall,
  //     shape: () =>
  //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
  //     typeName: ZodFirstPartyTypeKind.ZodObject,
  //   }) as any;
  //   return merged;
  // }
  setKey(key, schema) {
    return this.augment({ [key]: schema });
  }
  // merge<Incoming extends AnyZodObject>(
  //   merging: Incoming
  // ): //ZodObject<T & Incoming["_shape"], UnknownKeys, Catchall> = (merging) => {
  // ZodObject<
  //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
  //   Incoming["_def"]["unknownKeys"],
  //   Incoming["_def"]["catchall"]
  // > {
  //   // const mergedShape = objectUtil.mergeShapes(
  //   //   this._def.shape(),
  //   //   merging._def.shape()
  //   // );
  //   const merged: any = new ZodObject({
  //     unknownKeys: merging._def.unknownKeys,
  //     catchall: merging._def.catchall,
  //     shape: () =>
  //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
  //     typeName: ZodFirstPartyTypeKind.ZodObject,
  //   }) as any;
  //   return merged;
  // }
  catchall(index) {
    return new _ZodObject({
      ...this._def,
      catchall: index
    });
  }
  pick(mask) {
    const shape = {};
    util$1.objectKeys(mask).forEach((key) => {
      if (mask[key] && this.shape[key]) {
        shape[key] = this.shape[key];
      }
    });
    return new _ZodObject({
      ...this._def,
      shape: () => shape
    });
  }
  omit(mask) {
    const shape = {};
    util$1.objectKeys(this.shape).forEach((key) => {
      if (!mask[key]) {
        shape[key] = this.shape[key];
      }
    });
    return new _ZodObject({
      ...this._def,
      shape: () => shape
    });
  }
  /**
   * @deprecated
   */
  deepPartial() {
    return deepPartialify$1(this);
  }
  partial(mask) {
    const newShape = {};
    util$1.objectKeys(this.shape).forEach((key) => {
      const fieldSchema = this.shape[key];
      if (mask && !mask[key]) {
        newShape[key] = fieldSchema;
      } else {
        newShape[key] = fieldSchema.optional();
      }
    });
    return new _ZodObject({
      ...this._def,
      shape: () => newShape
    });
  }
  required(mask) {
    const newShape = {};
    util$1.objectKeys(this.shape).forEach((key) => {
      if (mask && !mask[key]) {
        newShape[key] = this.shape[key];
      } else {
        const fieldSchema = this.shape[key];
        let newField = fieldSchema;
        while (newField instanceof ZodOptional$1) {
          newField = newField._def.innerType;
        }
        newShape[key] = newField;
      }
    });
    return new _ZodObject({
      ...this._def,
      shape: () => newShape
    });
  }
  keyof() {
    return createZodEnum$1(util$1.objectKeys(this.shape));
  }
};
ZodObject$1.create = (shape, params) => {
  return new ZodObject$1({
    shape: () => shape,
    unknownKeys: "strip",
    catchall: ZodNever$1.create(),
    typeName: ZodFirstPartyTypeKind$1.ZodObject,
    ...processCreateParams$1(params)
  });
};
ZodObject$1.strictCreate = (shape, params) => {
  return new ZodObject$1({
    shape: () => shape,
    unknownKeys: "strict",
    catchall: ZodNever$1.create(),
    typeName: ZodFirstPartyTypeKind$1.ZodObject,
    ...processCreateParams$1(params)
  });
};
ZodObject$1.lazycreate = (shape, params) => {
  return new ZodObject$1({
    shape,
    unknownKeys: "strip",
    catchall: ZodNever$1.create(),
    typeName: ZodFirstPartyTypeKind$1.ZodObject,
    ...processCreateParams$1(params)
  });
};
var ZodUnion$1 = class ZodUnion extends ZodType$1 {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    const options = this._def.options;
    function handleResults(results) {
      for (const result of results) {
        if (result.result.status === "valid") {
          return result.result;
        }
      }
      for (const result of results) {
        if (result.result.status === "dirty") {
          ctx.common.issues.push(...result.ctx.common.issues);
          return result.result;
        }
      }
      const unionErrors = results.map((result) => new ZodError$1(result.ctx.common.issues));
      addIssueToContext$1(ctx, {
        code: ZodIssueCode$1.invalid_union,
        unionErrors
      });
      return INVALID$1;
    }
    if (ctx.common.async) {
      return Promise.all(options.map(async (option) => {
        const childCtx = {
          ...ctx,
          common: {
            ...ctx.common,
            issues: []
          },
          parent: null
        };
        return {
          result: await option._parseAsync({
            data: ctx.data,
            path: ctx.path,
            parent: childCtx
          }),
          ctx: childCtx
        };
      })).then(handleResults);
    } else {
      let dirty = void 0;
      const issues = [];
      for (const option of options) {
        const childCtx = {
          ...ctx,
          common: {
            ...ctx.common,
            issues: []
          },
          parent: null
        };
        const result = option._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: childCtx
        });
        if (result.status === "valid") {
          return result;
        } else if (result.status === "dirty" && !dirty) {
          dirty = { result, ctx: childCtx };
        }
        if (childCtx.common.issues.length) {
          issues.push(childCtx.common.issues);
        }
      }
      if (dirty) {
        ctx.common.issues.push(...dirty.ctx.common.issues);
        return dirty.result;
      }
      const unionErrors = issues.map((issues2) => new ZodError$1(issues2));
      addIssueToContext$1(ctx, {
        code: ZodIssueCode$1.invalid_union,
        unionErrors
      });
      return INVALID$1;
    }
  }
  get options() {
    return this._def.options;
  }
};
ZodUnion$1.create = (types, params) => {
  return new ZodUnion$1({
    options: types,
    typeName: ZodFirstPartyTypeKind$1.ZodUnion,
    ...processCreateParams$1(params)
  });
};
var getDiscriminator$1 = (type) => {
  if (type instanceof ZodLazy$1) {
    return getDiscriminator$1(type.schema);
  } else if (type instanceof ZodEffects$1) {
    return getDiscriminator$1(type.innerType());
  } else if (type instanceof ZodLiteral$1) {
    return [type.value];
  } else if (type instanceof ZodEnum$1) {
    return type.options;
  } else if (type instanceof ZodNativeEnum$1) {
    return util$1.objectValues(type.enum);
  } else if (type instanceof ZodDefault$1) {
    return getDiscriminator$1(type._def.innerType);
  } else if (type instanceof ZodUndefined$1) {
    return [void 0];
  } else if (type instanceof ZodNull$1) {
    return [null];
  } else if (type instanceof ZodOptional$1) {
    return [void 0, ...getDiscriminator$1(type.unwrap())];
  } else if (type instanceof ZodNullable$1) {
    return [null, ...getDiscriminator$1(type.unwrap())];
  } else if (type instanceof ZodBranded$1) {
    return getDiscriminator$1(type.unwrap());
  } else if (type instanceof ZodReadonly$1) {
    return getDiscriminator$1(type.unwrap());
  } else if (type instanceof ZodCatch$1) {
    return getDiscriminator$1(type._def.innerType);
  } else {
    return [];
  }
};
var ZodDiscriminatedUnion$1 = class _ZodDiscriminatedUnion extends ZodType$1 {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType$1.object) {
      addIssueToContext$1(ctx, {
        code: ZodIssueCode$1.invalid_type,
        expected: ZodParsedType$1.object,
        received: ctx.parsedType
      });
      return INVALID$1;
    }
    const discriminator = this.discriminator;
    const discriminatorValue = ctx.data[discriminator];
    const option = this.optionsMap.get(discriminatorValue);
    if (!option) {
      addIssueToContext$1(ctx, {
        code: ZodIssueCode$1.invalid_union_discriminator,
        options: Array.from(this.optionsMap.keys()),
        path: [discriminator]
      });
      return INVALID$1;
    }
    if (ctx.common.async) {
      return option._parseAsync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      });
    } else {
      return option._parseSync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      });
    }
  }
  get discriminator() {
    return this._def.discriminator;
  }
  get options() {
    return this._def.options;
  }
  get optionsMap() {
    return this._def.optionsMap;
  }
  /**
   * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.
   * However, it only allows a union of objects, all of which need to share a discriminator property. This property must
   * have a different value for each object in the union.
   * @param discriminator the name of the discriminator property
   * @param types an array of object schemas
   * @param params
   */
  static create(discriminator, options, params) {
    const optionsMap = /* @__PURE__ */ new Map();
    for (const type of options) {
      const discriminatorValues = getDiscriminator$1(type.shape[discriminator]);
      if (!discriminatorValues.length) {
        throw new Error(`A discriminator value for key \`${discriminator}\` could not be extracted from all schema options`);
      }
      for (const value of discriminatorValues) {
        if (optionsMap.has(value)) {
          throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);
        }
        optionsMap.set(value, type);
      }
    }
    return new _ZodDiscriminatedUnion({
      typeName: ZodFirstPartyTypeKind$1.ZodDiscriminatedUnion,
      discriminator,
      options,
      optionsMap,
      ...processCreateParams$1(params)
    });
  }
};
function mergeValues$1(a, b) {
  const aType = getParsedType$1(a);
  const bType = getParsedType$1(b);
  if (a === b) {
    return { valid: true, data: a };
  } else if (aType === ZodParsedType$1.object && bType === ZodParsedType$1.object) {
    const bKeys = util$1.objectKeys(b);
    const sharedKeys = util$1.objectKeys(a).filter((key) => bKeys.indexOf(key) !== -1);
    const newObj = { ...a, ...b };
    for (const key of sharedKeys) {
      const sharedValue = mergeValues$1(a[key], b[key]);
      if (!sharedValue.valid) {
        return { valid: false };
      }
      newObj[key] = sharedValue.data;
    }
    return { valid: true, data: newObj };
  } else if (aType === ZodParsedType$1.array && bType === ZodParsedType$1.array) {
    if (a.length !== b.length) {
      return { valid: false };
    }
    const newArray = [];
    for (let index = 0; index < a.length; index++) {
      const itemA = a[index];
      const itemB = b[index];
      const sharedValue = mergeValues$1(itemA, itemB);
      if (!sharedValue.valid) {
        return { valid: false };
      }
      newArray.push(sharedValue.data);
    }
    return { valid: true, data: newArray };
  } else if (aType === ZodParsedType$1.date && bType === ZodParsedType$1.date && +a === +b) {
    return { valid: true, data: a };
  } else {
    return { valid: false };
  }
}
var ZodIntersection$1 = class ZodIntersection extends ZodType$1 {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    const handleParsed = (parsedLeft, parsedRight) => {
      if (isAborted$1(parsedLeft) || isAborted$1(parsedRight)) {
        return INVALID$1;
      }
      const merged = mergeValues$1(parsedLeft.value, parsedRight.value);
      if (!merged.valid) {
        addIssueToContext$1(ctx, {
          code: ZodIssueCode$1.invalid_intersection_types
        });
        return INVALID$1;
      }
      if (isDirty$1(parsedLeft) || isDirty$1(parsedRight)) {
        status.dirty();
      }
      return { status: status.value, value: merged.data };
    };
    if (ctx.common.async) {
      return Promise.all([
        this._def.left._parseAsync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        }),
        this._def.right._parseAsync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        })
      ]).then(([left, right]) => handleParsed(left, right));
    } else {
      return handleParsed(this._def.left._parseSync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      }), this._def.right._parseSync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      }));
    }
  }
};
ZodIntersection$1.create = (left, right, params) => {
  return new ZodIntersection$1({
    left,
    right,
    typeName: ZodFirstPartyTypeKind$1.ZodIntersection,
    ...processCreateParams$1(params)
  });
};
var ZodTuple$1 = class _ZodTuple extends ZodType$1 {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType$1.array) {
      addIssueToContext$1(ctx, {
        code: ZodIssueCode$1.invalid_type,
        expected: ZodParsedType$1.array,
        received: ctx.parsedType
      });
      return INVALID$1;
    }
    if (ctx.data.length < this._def.items.length) {
      addIssueToContext$1(ctx, {
        code: ZodIssueCode$1.too_small,
        minimum: this._def.items.length,
        inclusive: true,
        exact: false,
        type: "array"
      });
      return INVALID$1;
    }
    const rest = this._def.rest;
    if (!rest && ctx.data.length > this._def.items.length) {
      addIssueToContext$1(ctx, {
        code: ZodIssueCode$1.too_big,
        maximum: this._def.items.length,
        inclusive: true,
        exact: false,
        type: "array"
      });
      status.dirty();
    }
    const items = [...ctx.data].map((item, itemIndex) => {
      const schema = this._def.items[itemIndex] || this._def.rest;
      if (!schema)
        return null;
      return schema._parse(new ParseInputLazyPath$1(ctx, item, ctx.path, itemIndex));
    }).filter((x) => !!x);
    if (ctx.common.async) {
      return Promise.all(items).then((results) => {
        return ParseStatus$1.mergeArray(status, results);
      });
    } else {
      return ParseStatus$1.mergeArray(status, items);
    }
  }
  get items() {
    return this._def.items;
  }
  rest(rest) {
    return new _ZodTuple({
      ...this._def,
      rest
    });
  }
};
ZodTuple$1.create = (schemas, params) => {
  if (!Array.isArray(schemas)) {
    throw new Error("You must pass an array of schemas to z.tuple([ ... ])");
  }
  return new ZodTuple$1({
    items: schemas,
    typeName: ZodFirstPartyTypeKind$1.ZodTuple,
    rest: null,
    ...processCreateParams$1(params)
  });
};
var ZodRecord$1 = class _ZodRecord extends ZodType$1 {
  get keySchema() {
    return this._def.keyType;
  }
  get valueSchema() {
    return this._def.valueType;
  }
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType$1.object) {
      addIssueToContext$1(ctx, {
        code: ZodIssueCode$1.invalid_type,
        expected: ZodParsedType$1.object,
        received: ctx.parsedType
      });
      return INVALID$1;
    }
    const pairs = [];
    const keyType = this._def.keyType;
    const valueType = this._def.valueType;
    for (const key in ctx.data) {
      pairs.push({
        key: keyType._parse(new ParseInputLazyPath$1(ctx, key, ctx.path, key)),
        value: valueType._parse(new ParseInputLazyPath$1(ctx, ctx.data[key], ctx.path, key)),
        alwaysSet: key in ctx.data
      });
    }
    if (ctx.common.async) {
      return ParseStatus$1.mergeObjectAsync(status, pairs);
    } else {
      return ParseStatus$1.mergeObjectSync(status, pairs);
    }
  }
  get element() {
    return this._def.valueType;
  }
  static create(first, second, third) {
    if (second instanceof ZodType$1) {
      return new _ZodRecord({
        keyType: first,
        valueType: second,
        typeName: ZodFirstPartyTypeKind$1.ZodRecord,
        ...processCreateParams$1(third)
      });
    }
    return new _ZodRecord({
      keyType: ZodString$1.create(),
      valueType: first,
      typeName: ZodFirstPartyTypeKind$1.ZodRecord,
      ...processCreateParams$1(second)
    });
  }
};
var ZodMap$1 = class ZodMap extends ZodType$1 {
  get keySchema() {
    return this._def.keyType;
  }
  get valueSchema() {
    return this._def.valueType;
  }
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType$1.map) {
      addIssueToContext$1(ctx, {
        code: ZodIssueCode$1.invalid_type,
        expected: ZodParsedType$1.map,
        received: ctx.parsedType
      });
      return INVALID$1;
    }
    const keyType = this._def.keyType;
    const valueType = this._def.valueType;
    const pairs = [...ctx.data.entries()].map(([key, value], index) => {
      return {
        key: keyType._parse(new ParseInputLazyPath$1(ctx, key, ctx.path, [index, "key"])),
        value: valueType._parse(new ParseInputLazyPath$1(ctx, value, ctx.path, [index, "value"]))
      };
    });
    if (ctx.common.async) {
      const finalMap = /* @__PURE__ */ new Map();
      return Promise.resolve().then(async () => {
        for (const pair of pairs) {
          const key = await pair.key;
          const value = await pair.value;
          if (key.status === "aborted" || value.status === "aborted") {
            return INVALID$1;
          }
          if (key.status === "dirty" || value.status === "dirty") {
            status.dirty();
          }
          finalMap.set(key.value, value.value);
        }
        return { status: status.value, value: finalMap };
      });
    } else {
      const finalMap = /* @__PURE__ */ new Map();
      for (const pair of pairs) {
        const key = pair.key;
        const value = pair.value;
        if (key.status === "aborted" || value.status === "aborted") {
          return INVALID$1;
        }
        if (key.status === "dirty" || value.status === "dirty") {
          status.dirty();
        }
        finalMap.set(key.value, value.value);
      }
      return { status: status.value, value: finalMap };
    }
  }
};
ZodMap$1.create = (keyType, valueType, params) => {
  return new ZodMap$1({
    valueType,
    keyType,
    typeName: ZodFirstPartyTypeKind$1.ZodMap,
    ...processCreateParams$1(params)
  });
};
var ZodSet$1 = class _ZodSet extends ZodType$1 {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType$1.set) {
      addIssueToContext$1(ctx, {
        code: ZodIssueCode$1.invalid_type,
        expected: ZodParsedType$1.set,
        received: ctx.parsedType
      });
      return INVALID$1;
    }
    const def = this._def;
    if (def.minSize !== null) {
      if (ctx.data.size < def.minSize.value) {
        addIssueToContext$1(ctx, {
          code: ZodIssueCode$1.too_small,
          minimum: def.minSize.value,
          type: "set",
          inclusive: true,
          exact: false,
          message: def.minSize.message
        });
        status.dirty();
      }
    }
    if (def.maxSize !== null) {
      if (ctx.data.size > def.maxSize.value) {
        addIssueToContext$1(ctx, {
          code: ZodIssueCode$1.too_big,
          maximum: def.maxSize.value,
          type: "set",
          inclusive: true,
          exact: false,
          message: def.maxSize.message
        });
        status.dirty();
      }
    }
    const valueType = this._def.valueType;
    function finalizeSet(elements2) {
      const parsedSet = /* @__PURE__ */ new Set();
      for (const element of elements2) {
        if (element.status === "aborted")
          return INVALID$1;
        if (element.status === "dirty")
          status.dirty();
        parsedSet.add(element.value);
      }
      return { status: status.value, value: parsedSet };
    }
    const elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath$1(ctx, item, ctx.path, i)));
    if (ctx.common.async) {
      return Promise.all(elements).then((elements2) => finalizeSet(elements2));
    } else {
      return finalizeSet(elements);
    }
  }
  min(minSize, message) {
    return new _ZodSet({
      ...this._def,
      minSize: { value: minSize, message: errorUtil$1.toString(message) }
    });
  }
  max(maxSize, message) {
    return new _ZodSet({
      ...this._def,
      maxSize: { value: maxSize, message: errorUtil$1.toString(message) }
    });
  }
  size(size, message) {
    return this.min(size, message).max(size, message);
  }
  nonempty(message) {
    return this.min(1, message);
  }
};
ZodSet$1.create = (valueType, params) => {
  return new ZodSet$1({
    valueType,
    minSize: null,
    maxSize: null,
    typeName: ZodFirstPartyTypeKind$1.ZodSet,
    ...processCreateParams$1(params)
  });
};
var ZodFunction$1 = class _ZodFunction extends ZodType$1 {
  constructor() {
    super(...arguments);
    this.validate = this.implement;
  }
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType$1.function) {
      addIssueToContext$1(ctx, {
        code: ZodIssueCode$1.invalid_type,
        expected: ZodParsedType$1.function,
        received: ctx.parsedType
      });
      return INVALID$1;
    }
    function makeArgsIssue(args, error) {
      return makeIssue$1({
        data: args,
        path: ctx.path,
        errorMaps: [
          ctx.common.contextualErrorMap,
          ctx.schemaErrorMap,
          getErrorMap$1(),
          errorMap$1
        ].filter((x) => !!x),
        issueData: {
          code: ZodIssueCode$1.invalid_arguments,
          argumentsError: error
        }
      });
    }
    function makeReturnsIssue(returns, error) {
      return makeIssue$1({
        data: returns,
        path: ctx.path,
        errorMaps: [
          ctx.common.contextualErrorMap,
          ctx.schemaErrorMap,
          getErrorMap$1(),
          errorMap$1
        ].filter((x) => !!x),
        issueData: {
          code: ZodIssueCode$1.invalid_return_type,
          returnTypeError: error
        }
      });
    }
    const params = { errorMap: ctx.common.contextualErrorMap };
    const fn = ctx.data;
    if (this._def.returns instanceof ZodPromise$1) {
      const me = this;
      return OK$1(async function(...args) {
        const error = new ZodError$1([]);
        const parsedArgs = await me._def.args.parseAsync(args, params).catch((e) => {
          error.addIssue(makeArgsIssue(args, e));
          throw error;
        });
        const result = await Reflect.apply(fn, this, parsedArgs);
        const parsedReturns = await me._def.returns._def.type.parseAsync(result, params).catch((e) => {
          error.addIssue(makeReturnsIssue(result, e));
          throw error;
        });
        return parsedReturns;
      });
    } else {
      const me = this;
      return OK$1(function(...args) {
        const parsedArgs = me._def.args.safeParse(args, params);
        if (!parsedArgs.success) {
          throw new ZodError$1([makeArgsIssue(args, parsedArgs.error)]);
        }
        const result = Reflect.apply(fn, this, parsedArgs.data);
        const parsedReturns = me._def.returns.safeParse(result, params);
        if (!parsedReturns.success) {
          throw new ZodError$1([makeReturnsIssue(result, parsedReturns.error)]);
        }
        return parsedReturns.data;
      });
    }
  }
  parameters() {
    return this._def.args;
  }
  returnType() {
    return this._def.returns;
  }
  args(...items) {
    return new _ZodFunction({
      ...this._def,
      args: ZodTuple$1.create(items).rest(ZodUnknown$1.create())
    });
  }
  returns(returnType) {
    return new _ZodFunction({
      ...this._def,
      returns: returnType
    });
  }
  implement(func) {
    const validatedFunc = this.parse(func);
    return validatedFunc;
  }
  strictImplement(func) {
    const validatedFunc = this.parse(func);
    return validatedFunc;
  }
  static create(args, returns, params) {
    return new _ZodFunction({
      args: args ? args : ZodTuple$1.create([]).rest(ZodUnknown$1.create()),
      returns: returns || ZodUnknown$1.create(),
      typeName: ZodFirstPartyTypeKind$1.ZodFunction,
      ...processCreateParams$1(params)
    });
  }
};
var ZodLazy$1 = class ZodLazy extends ZodType$1 {
  get schema() {
    return this._def.getter();
  }
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    const lazySchema = this._def.getter();
    return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });
  }
};
ZodLazy$1.create = (getter, params) => {
  return new ZodLazy$1({
    getter,
    typeName: ZodFirstPartyTypeKind$1.ZodLazy,
    ...processCreateParams$1(params)
  });
};
var ZodLiteral$1 = class ZodLiteral extends ZodType$1 {
  _parse(input) {
    if (input.data !== this._def.value) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext$1(ctx, {
        received: ctx.data,
        code: ZodIssueCode$1.invalid_literal,
        expected: this._def.value
      });
      return INVALID$1;
    }
    return { status: "valid", value: input.data };
  }
  get value() {
    return this._def.value;
  }
};
ZodLiteral$1.create = (value, params) => {
  return new ZodLiteral$1({
    value,
    typeName: ZodFirstPartyTypeKind$1.ZodLiteral,
    ...processCreateParams$1(params)
  });
};
function createZodEnum$1(values, params) {
  return new ZodEnum$1({
    values,
    typeName: ZodFirstPartyTypeKind$1.ZodEnum,
    ...processCreateParams$1(params)
  });
}
var ZodEnum$1 = class _ZodEnum extends ZodType$1 {
  constructor() {
    super(...arguments);
    _ZodEnum_cache$1.set(this, void 0);
  }
  _parse(input) {
    if (typeof input.data !== "string") {
      const ctx = this._getOrReturnCtx(input);
      const expectedValues = this._def.values;
      addIssueToContext$1(ctx, {
        expected: util$1.joinValues(expectedValues),
        received: ctx.parsedType,
        code: ZodIssueCode$1.invalid_type
      });
      return INVALID$1;
    }
    if (!__classPrivateFieldGet$1(this, _ZodEnum_cache$1)) {
      __classPrivateFieldSet$1(this, _ZodEnum_cache$1, new Set(this._def.values));
    }
    if (!__classPrivateFieldGet$1(this, _ZodEnum_cache$1).has(input.data)) {
      const ctx = this._getOrReturnCtx(input);
      const expectedValues = this._def.values;
      addIssueToContext$1(ctx, {
        received: ctx.data,
        code: ZodIssueCode$1.invalid_enum_value,
        options: expectedValues
      });
      return INVALID$1;
    }
    return OK$1(input.data);
  }
  get options() {
    return this._def.values;
  }
  get enum() {
    const enumValues = {};
    for (const val of this._def.values) {
      enumValues[val] = val;
    }
    return enumValues;
  }
  get Values() {
    const enumValues = {};
    for (const val of this._def.values) {
      enumValues[val] = val;
    }
    return enumValues;
  }
  get Enum() {
    const enumValues = {};
    for (const val of this._def.values) {
      enumValues[val] = val;
    }
    return enumValues;
  }
  extract(values, newDef = this._def) {
    return _ZodEnum.create(values, {
      ...this._def,
      ...newDef
    });
  }
  exclude(values, newDef = this._def) {
    return _ZodEnum.create(this.options.filter((opt) => !values.includes(opt)), {
      ...this._def,
      ...newDef
    });
  }
};
_ZodEnum_cache$1 = /* @__PURE__ */ new WeakMap();
ZodEnum$1.create = createZodEnum$1;
var ZodNativeEnum$1 = class ZodNativeEnum extends ZodType$1 {
  constructor() {
    super(...arguments);
    _ZodNativeEnum_cache$1.set(this, void 0);
  }
  _parse(input) {
    const nativeEnumValues = util$1.getValidEnumValues(this._def.values);
    const ctx = this._getOrReturnCtx(input);
    if (ctx.parsedType !== ZodParsedType$1.string && ctx.parsedType !== ZodParsedType$1.number) {
      const expectedValues = util$1.objectValues(nativeEnumValues);
      addIssueToContext$1(ctx, {
        expected: util$1.joinValues(expectedValues),
        received: ctx.parsedType,
        code: ZodIssueCode$1.invalid_type
      });
      return INVALID$1;
    }
    if (!__classPrivateFieldGet$1(this, _ZodNativeEnum_cache$1)) {
      __classPrivateFieldSet$1(this, _ZodNativeEnum_cache$1, new Set(util$1.getValidEnumValues(this._def.values)));
    }
    if (!__classPrivateFieldGet$1(this, _ZodNativeEnum_cache$1).has(input.data)) {
      const expectedValues = util$1.objectValues(nativeEnumValues);
      addIssueToContext$1(ctx, {
        received: ctx.data,
        code: ZodIssueCode$1.invalid_enum_value,
        options: expectedValues
      });
      return INVALID$1;
    }
    return OK$1(input.data);
  }
  get enum() {
    return this._def.values;
  }
};
_ZodNativeEnum_cache$1 = /* @__PURE__ */ new WeakMap();
ZodNativeEnum$1.create = (values, params) => {
  return new ZodNativeEnum$1({
    values,
    typeName: ZodFirstPartyTypeKind$1.ZodNativeEnum,
    ...processCreateParams$1(params)
  });
};
var ZodPromise$1 = class ZodPromise extends ZodType$1 {
  unwrap() {
    return this._def.type;
  }
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType$1.promise && ctx.common.async === false) {
      addIssueToContext$1(ctx, {
        code: ZodIssueCode$1.invalid_type,
        expected: ZodParsedType$1.promise,
        received: ctx.parsedType
      });
      return INVALID$1;
    }
    const promisified = ctx.parsedType === ZodParsedType$1.promise ? ctx.data : Promise.resolve(ctx.data);
    return OK$1(promisified.then((data) => {
      return this._def.type.parseAsync(data, {
        path: ctx.path,
        errorMap: ctx.common.contextualErrorMap
      });
    }));
  }
};
ZodPromise$1.create = (schema, params) => {
  return new ZodPromise$1({
    type: schema,
    typeName: ZodFirstPartyTypeKind$1.ZodPromise,
    ...processCreateParams$1(params)
  });
};
var ZodEffects$1 = class ZodEffects extends ZodType$1 {
  innerType() {
    return this._def.schema;
  }
  sourceType() {
    return this._def.schema._def.typeName === ZodFirstPartyTypeKind$1.ZodEffects ? this._def.schema.sourceType() : this._def.schema;
  }
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    const effect = this._def.effect || null;
    const checkCtx = {
      addIssue: (arg) => {
        addIssueToContext$1(ctx, arg);
        if (arg.fatal) {
          status.abort();
        } else {
          status.dirty();
        }
      },
      get path() {
        return ctx.path;
      }
    };
    checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);
    if (effect.type === "preprocess") {
      const processed = effect.transform(ctx.data, checkCtx);
      if (ctx.common.async) {
        return Promise.resolve(processed).then(async (processed2) => {
          if (status.value === "aborted")
            return INVALID$1;
          const result = await this._def.schema._parseAsync({
            data: processed2,
            path: ctx.path,
            parent: ctx
          });
          if (result.status === "aborted")
            return INVALID$1;
          if (result.status === "dirty")
            return DIRTY$1(result.value);
          if (status.value === "dirty")
            return DIRTY$1(result.value);
          return result;
        });
      } else {
        if (status.value === "aborted")
          return INVALID$1;
        const result = this._def.schema._parseSync({
          data: processed,
          path: ctx.path,
          parent: ctx
        });
        if (result.status === "aborted")
          return INVALID$1;
        if (result.status === "dirty")
          return DIRTY$1(result.value);
        if (status.value === "dirty")
          return DIRTY$1(result.value);
        return result;
      }
    }
    if (effect.type === "refinement") {
      const executeRefinement = (acc) => {
        const result = effect.refinement(acc, checkCtx);
        if (ctx.common.async) {
          return Promise.resolve(result);
        }
        if (result instanceof Promise) {
          throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
        }
        return acc;
      };
      if (ctx.common.async === false) {
        const inner = this._def.schema._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
        if (inner.status === "aborted")
          return INVALID$1;
        if (inner.status === "dirty")
          status.dirty();
        executeRefinement(inner.value);
        return { status: status.value, value: inner.value };
      } else {
        return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((inner) => {
          if (inner.status === "aborted")
            return INVALID$1;
          if (inner.status === "dirty")
            status.dirty();
          return executeRefinement(inner.value).then(() => {
            return { status: status.value, value: inner.value };
          });
        });
      }
    }
    if (effect.type === "transform") {
      if (ctx.common.async === false) {
        const base = this._def.schema._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
        if (!isValid$1(base))
          return base;
        const result = effect.transform(base.value, checkCtx);
        if (result instanceof Promise) {
          throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);
        }
        return { status: status.value, value: result };
      } else {
        return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((base) => {
          if (!isValid$1(base))
            return base;
          return Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({ status: status.value, value: result }));
        });
      }
    }
    util$1.assertNever(effect);
  }
};
ZodEffects$1.create = (schema, effect, params) => {
  return new ZodEffects$1({
    schema,
    typeName: ZodFirstPartyTypeKind$1.ZodEffects,
    effect,
    ...processCreateParams$1(params)
  });
};
ZodEffects$1.createWithPreprocess = (preprocess, schema, params) => {
  return new ZodEffects$1({
    schema,
    effect: { type: "preprocess", transform: preprocess },
    typeName: ZodFirstPartyTypeKind$1.ZodEffects,
    ...processCreateParams$1(params)
  });
};
var ZodOptional$1 = class ZodOptional extends ZodType$1 {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType === ZodParsedType$1.undefined) {
      return OK$1(void 0);
    }
    return this._def.innerType._parse(input);
  }
  unwrap() {
    return this._def.innerType;
  }
};
ZodOptional$1.create = (type, params) => {
  return new ZodOptional$1({
    innerType: type,
    typeName: ZodFirstPartyTypeKind$1.ZodOptional,
    ...processCreateParams$1(params)
  });
};
var ZodNullable$1 = class ZodNullable extends ZodType$1 {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType === ZodParsedType$1.null) {
      return OK$1(null);
    }
    return this._def.innerType._parse(input);
  }
  unwrap() {
    return this._def.innerType;
  }
};
ZodNullable$1.create = (type, params) => {
  return new ZodNullable$1({
    innerType: type,
    typeName: ZodFirstPartyTypeKind$1.ZodNullable,
    ...processCreateParams$1(params)
  });
};
var ZodDefault$1 = class ZodDefault extends ZodType$1 {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    let data = ctx.data;
    if (ctx.parsedType === ZodParsedType$1.undefined) {
      data = this._def.defaultValue();
    }
    return this._def.innerType._parse({
      data,
      path: ctx.path,
      parent: ctx
    });
  }
  removeDefault() {
    return this._def.innerType;
  }
};
ZodDefault$1.create = (type, params) => {
  return new ZodDefault$1({
    innerType: type,
    typeName: ZodFirstPartyTypeKind$1.ZodDefault,
    defaultValue: typeof params.default === "function" ? params.default : () => params.default,
    ...processCreateParams$1(params)
  });
};
var ZodCatch$1 = class ZodCatch extends ZodType$1 {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    const newCtx = {
      ...ctx,
      common: {
        ...ctx.common,
        issues: []
      }
    };
    const result = this._def.innerType._parse({
      data: newCtx.data,
      path: newCtx.path,
      parent: {
        ...newCtx
      }
    });
    if (isAsync$1(result)) {
      return result.then((result2) => {
        return {
          status: "valid",
          value: result2.status === "valid" ? result2.value : this._def.catchValue({
            get error() {
              return new ZodError$1(newCtx.common.issues);
            },
            input: newCtx.data
          })
        };
      });
    } else {
      return {
        status: "valid",
        value: result.status === "valid" ? result.value : this._def.catchValue({
          get error() {
            return new ZodError$1(newCtx.common.issues);
          },
          input: newCtx.data
        })
      };
    }
  }
  removeCatch() {
    return this._def.innerType;
  }
};
ZodCatch$1.create = (type, params) => {
  return new ZodCatch$1({
    innerType: type,
    typeName: ZodFirstPartyTypeKind$1.ZodCatch,
    catchValue: typeof params.catch === "function" ? params.catch : () => params.catch,
    ...processCreateParams$1(params)
  });
};
var ZodNaN$1 = class ZodNaN extends ZodType$1 {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType$1.nan) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext$1(ctx, {
        code: ZodIssueCode$1.invalid_type,
        expected: ZodParsedType$1.nan,
        received: ctx.parsedType
      });
      return INVALID$1;
    }
    return { status: "valid", value: input.data };
  }
};
ZodNaN$1.create = (params) => {
  return new ZodNaN$1({
    typeName: ZodFirstPartyTypeKind$1.ZodNaN,
    ...processCreateParams$1(params)
  });
};
var BRAND$1 = Symbol("zod_brand");
var ZodBranded$1 = class ZodBranded extends ZodType$1 {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    const data = ctx.data;
    return this._def.type._parse({
      data,
      path: ctx.path,
      parent: ctx
    });
  }
  unwrap() {
    return this._def.type;
  }
};
var ZodPipeline$1 = class _ZodPipeline extends ZodType$1 {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.common.async) {
      const handleAsync = async () => {
        const inResult = await this._def.in._parseAsync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
        if (inResult.status === "aborted")
          return INVALID$1;
        if (inResult.status === "dirty") {
          status.dirty();
          return DIRTY$1(inResult.value);
        } else {
          return this._def.out._parseAsync({
            data: inResult.value,
            path: ctx.path,
            parent: ctx
          });
        }
      };
      return handleAsync();
    } else {
      const inResult = this._def.in._parseSync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      });
      if (inResult.status === "aborted")
        return INVALID$1;
      if (inResult.status === "dirty") {
        status.dirty();
        return {
          status: "dirty",
          value: inResult.value
        };
      } else {
        return this._def.out._parseSync({
          data: inResult.value,
          path: ctx.path,
          parent: ctx
        });
      }
    }
  }
  static create(a, b) {
    return new _ZodPipeline({
      in: a,
      out: b,
      typeName: ZodFirstPartyTypeKind$1.ZodPipeline
    });
  }
};
var ZodReadonly$1 = class ZodReadonly extends ZodType$1 {
  _parse(input) {
    const result = this._def.innerType._parse(input);
    const freeze = (data) => {
      if (isValid$1(data)) {
        data.value = Object.freeze(data.value);
      }
      return data;
    };
    return isAsync$1(result) ? result.then((data) => freeze(data)) : freeze(result);
  }
  unwrap() {
    return this._def.innerType;
  }
};
ZodReadonly$1.create = (type, params) => {
  return new ZodReadonly$1({
    innerType: type,
    typeName: ZodFirstPartyTypeKind$1.ZodReadonly,
    ...processCreateParams$1(params)
  });
};
function custom$1(check, params = {}, fatal) {
  if (check)
    return ZodAny$1.create().superRefine((data, ctx) => {
      var _a, _b;
      if (!check(data)) {
        const p = typeof params === "function" ? params(data) : typeof params === "string" ? { message: params } : params;
        const _fatal = (_b = (_a = p.fatal) !== null && _a !== void 0 ? _a : fatal) !== null && _b !== void 0 ? _b : true;
        const p2 = typeof p === "string" ? { message: p } : p;
        ctx.addIssue({ code: "custom", ...p2, fatal: _fatal });
      }
    });
  return ZodAny$1.create();
}
var late$1 = {
  object: ZodObject$1.lazycreate
};
var ZodFirstPartyTypeKind$1;
(function(ZodFirstPartyTypeKind2) {
  ZodFirstPartyTypeKind2["ZodString"] = "ZodString";
  ZodFirstPartyTypeKind2["ZodNumber"] = "ZodNumber";
  ZodFirstPartyTypeKind2["ZodNaN"] = "ZodNaN";
  ZodFirstPartyTypeKind2["ZodBigInt"] = "ZodBigInt";
  ZodFirstPartyTypeKind2["ZodBoolean"] = "ZodBoolean";
  ZodFirstPartyTypeKind2["ZodDate"] = "ZodDate";
  ZodFirstPartyTypeKind2["ZodSymbol"] = "ZodSymbol";
  ZodFirstPartyTypeKind2["ZodUndefined"] = "ZodUndefined";
  ZodFirstPartyTypeKind2["ZodNull"] = "ZodNull";
  ZodFirstPartyTypeKind2["ZodAny"] = "ZodAny";
  ZodFirstPartyTypeKind2["ZodUnknown"] = "ZodUnknown";
  ZodFirstPartyTypeKind2["ZodNever"] = "ZodNever";
  ZodFirstPartyTypeKind2["ZodVoid"] = "ZodVoid";
  ZodFirstPartyTypeKind2["ZodArray"] = "ZodArray";
  ZodFirstPartyTypeKind2["ZodObject"] = "ZodObject";
  ZodFirstPartyTypeKind2["ZodUnion"] = "ZodUnion";
  ZodFirstPartyTypeKind2["ZodDiscriminatedUnion"] = "ZodDiscriminatedUnion";
  ZodFirstPartyTypeKind2["ZodIntersection"] = "ZodIntersection";
  ZodFirstPartyTypeKind2["ZodTuple"] = "ZodTuple";
  ZodFirstPartyTypeKind2["ZodRecord"] = "ZodRecord";
  ZodFirstPartyTypeKind2["ZodMap"] = "ZodMap";
  ZodFirstPartyTypeKind2["ZodSet"] = "ZodSet";
  ZodFirstPartyTypeKind2["ZodFunction"] = "ZodFunction";
  ZodFirstPartyTypeKind2["ZodLazy"] = "ZodLazy";
  ZodFirstPartyTypeKind2["ZodLiteral"] = "ZodLiteral";
  ZodFirstPartyTypeKind2["ZodEnum"] = "ZodEnum";
  ZodFirstPartyTypeKind2["ZodEffects"] = "ZodEffects";
  ZodFirstPartyTypeKind2["ZodNativeEnum"] = "ZodNativeEnum";
  ZodFirstPartyTypeKind2["ZodOptional"] = "ZodOptional";
  ZodFirstPartyTypeKind2["ZodNullable"] = "ZodNullable";
  ZodFirstPartyTypeKind2["ZodDefault"] = "ZodDefault";
  ZodFirstPartyTypeKind2["ZodCatch"] = "ZodCatch";
  ZodFirstPartyTypeKind2["ZodPromise"] = "ZodPromise";
  ZodFirstPartyTypeKind2["ZodBranded"] = "ZodBranded";
  ZodFirstPartyTypeKind2["ZodPipeline"] = "ZodPipeline";
  ZodFirstPartyTypeKind2["ZodReadonly"] = "ZodReadonly";
})(ZodFirstPartyTypeKind$1 || (ZodFirstPartyTypeKind$1 = {}));
var instanceOfType$1 = (cls, params = {
  message: `Input not instance of ${cls.name}`
}) => custom$1((data) => data instanceof cls, params);
var stringType$1 = ZodString$1.create;
var numberType$1 = ZodNumber$1.create;
var nanType$1 = ZodNaN$1.create;
var bigIntType$1 = ZodBigInt$1.create;
var booleanType$1 = ZodBoolean$1.create;
var dateType$1 = ZodDate$1.create;
var symbolType$1 = ZodSymbol$1.create;
var undefinedType$1 = ZodUndefined$1.create;
var nullType$1 = ZodNull$1.create;
var anyType$1 = ZodAny$1.create;
var unknownType$1 = ZodUnknown$1.create;
var neverType$1 = ZodNever$1.create;
var voidType$1 = ZodVoid$1.create;
var arrayType$1 = ZodArray$1.create;
var objectType$1 = ZodObject$1.create;
var strictObjectType$1 = ZodObject$1.strictCreate;
var unionType$1 = ZodUnion$1.create;
var discriminatedUnionType$1 = ZodDiscriminatedUnion$1.create;
var intersectionType$1 = ZodIntersection$1.create;
var tupleType$1 = ZodTuple$1.create;
var recordType$1 = ZodRecord$1.create;
var mapType$1 = ZodMap$1.create;
var setType$1 = ZodSet$1.create;
var functionType$1 = ZodFunction$1.create;
var lazyType$1 = ZodLazy$1.create;
var literalType$1 = ZodLiteral$1.create;
var enumType$1 = ZodEnum$1.create;
var nativeEnumType$1 = ZodNativeEnum$1.create;
var promiseType$1 = ZodPromise$1.create;
var effectsType$1 = ZodEffects$1.create;
var optionalType$1 = ZodOptional$1.create;
var nullableType$1 = ZodNullable$1.create;
var preprocessType$1 = ZodEffects$1.createWithPreprocess;
var pipelineType$1 = ZodPipeline$1.create;
var ostring$1 = () => stringType$1().optional();
var onumber$1 = () => numberType$1().optional();
var oboolean$1 = () => booleanType$1().optional();
var coerce$1 = {
  string: (arg) => ZodString$1.create({ ...arg, coerce: true }),
  number: (arg) => ZodNumber$1.create({ ...arg, coerce: true }),
  boolean: (arg) => ZodBoolean$1.create({
    ...arg,
    coerce: true
  }),
  bigint: (arg) => ZodBigInt$1.create({ ...arg, coerce: true }),
  date: (arg) => ZodDate$1.create({ ...arg, coerce: true })
};
var NEVER$1 = INVALID$1;
var z$1 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  defaultErrorMap: errorMap$1,
  setErrorMap: setErrorMap$1,
  getErrorMap: getErrorMap$1,
  makeIssue: makeIssue$1,
  EMPTY_PATH: EMPTY_PATH$1,
  addIssueToContext: addIssueToContext$1,
  ParseStatus: ParseStatus$1,
  INVALID: INVALID$1,
  DIRTY: DIRTY$1,
  OK: OK$1,
  isAborted: isAborted$1,
  isDirty: isDirty$1,
  isValid: isValid$1,
  isAsync: isAsync$1,
  get util() {
    return util$1;
  },
  get objectUtil() {
    return objectUtil$1;
  },
  ZodParsedType: ZodParsedType$1,
  getParsedType: getParsedType$1,
  ZodType: ZodType$1,
  datetimeRegex: datetimeRegex$1,
  ZodString: ZodString$1,
  ZodNumber: ZodNumber$1,
  ZodBigInt: ZodBigInt$1,
  ZodBoolean: ZodBoolean$1,
  ZodDate: ZodDate$1,
  ZodSymbol: ZodSymbol$1,
  ZodUndefined: ZodUndefined$1,
  ZodNull: ZodNull$1,
  ZodAny: ZodAny$1,
  ZodUnknown: ZodUnknown$1,
  ZodNever: ZodNever$1,
  ZodVoid: ZodVoid$1,
  ZodArray: ZodArray$1,
  ZodObject: ZodObject$1,
  ZodUnion: ZodUnion$1,
  ZodDiscriminatedUnion: ZodDiscriminatedUnion$1,
  ZodIntersection: ZodIntersection$1,
  ZodTuple: ZodTuple$1,
  ZodRecord: ZodRecord$1,
  ZodMap: ZodMap$1,
  ZodSet: ZodSet$1,
  ZodFunction: ZodFunction$1,
  ZodLazy: ZodLazy$1,
  ZodLiteral: ZodLiteral$1,
  ZodEnum: ZodEnum$1,
  ZodNativeEnum: ZodNativeEnum$1,
  ZodPromise: ZodPromise$1,
  ZodEffects: ZodEffects$1,
  ZodTransformer: ZodEffects$1,
  ZodOptional: ZodOptional$1,
  ZodNullable: ZodNullable$1,
  ZodDefault: ZodDefault$1,
  ZodCatch: ZodCatch$1,
  ZodNaN: ZodNaN$1,
  BRAND: BRAND$1,
  ZodBranded: ZodBranded$1,
  ZodPipeline: ZodPipeline$1,
  ZodReadonly: ZodReadonly$1,
  custom: custom$1,
  Schema: ZodType$1,
  ZodSchema: ZodType$1,
  late: late$1,
  get ZodFirstPartyTypeKind() {
    return ZodFirstPartyTypeKind$1;
  },
  coerce: coerce$1,
  any: anyType$1,
  array: arrayType$1,
  bigint: bigIntType$1,
  boolean: booleanType$1,
  date: dateType$1,
  discriminatedUnion: discriminatedUnionType$1,
  effect: effectsType$1,
  "enum": enumType$1,
  "function": functionType$1,
  "instanceof": instanceOfType$1,
  intersection: intersectionType$1,
  lazy: lazyType$1,
  literal: literalType$1,
  map: mapType$1,
  nan: nanType$1,
  nativeEnum: nativeEnumType$1,
  never: neverType$1,
  "null": nullType$1,
  nullable: nullableType$1,
  number: numberType$1,
  object: objectType$1,
  oboolean: oboolean$1,
  onumber: onumber$1,
  optional: optionalType$1,
  ostring: ostring$1,
  pipeline: pipelineType$1,
  preprocess: preprocessType$1,
  promise: promiseType$1,
  record: recordType$1,
  set: setType$1,
  strictObject: strictObjectType$1,
  string: stringType$1,
  symbol: symbolType$1,
  transformer: effectsType$1,
  tuple: tupleType$1,
  "undefined": undefinedType$1,
  union: unionType$1,
  unknown: unknownType$1,
  "void": voidType$1,
  NEVER: NEVER$1,
  ZodIssueCode: ZodIssueCode$1,
  quotelessJson: quotelessJson$1,
  ZodError: ZodError$1
});
var UserRoleEnum$1 = z$1.enum(["ADMIN", "MANAGER", "CHEF", "STAFF"]);
var UserSchema$1 = z$1.object({
  id: z$1.number(),
  email: z$1.string().email(),
  firstName: z$1.string(),
  lastName: z$1.string(),
  passwordHash: z$1.string(),
  role: UserRoleEnum$1,
  restaurantId: z$1.number(),
  createdAt: z$1.date(),
  updatedAt: z$1.date()
});
var UserCreateSchema$1 = UserSchema$1.omit({ id: true, createdAt: true, updatedAt: true });
UserCreateSchema$1.partial();
zod_exports.ShiftStatusSchema;
zod_exports.ShiftCreateInputSchema;
z$1.object({
  id: z$1.number(),
  restaurantId: z$1.number()
});
z$1.object({
  id: z$1.number(),
  inventoryId: z$1.number(),
  ingredientId: z$1.number(),
  quantity: z$1.number(),
  unit: z$1.string(),
  minQuantity: z$1.number(),
  lastUpdated: z$1.date()
});
var RecipeIngredientCreateSchema$1 = z$1.object({
  ingredientId: z$1.number(),
  quantity: z$1.string(),
  unit: z$1.string()
});
z$1.object({
  id: z$1.number(),
  stepNumber: z$1.number(),
  instruction: z$1.string(),
  // This will be encrypted
  imageUrl: z$1.string().nullable(),
  createdAt: z$1.date().optional().nullable(),
  updatedAt: z$1.date().optional().nullable(),
  isDeleted: z$1.boolean(),
  deleted: z$1.date().nullable()
});
var RecipeInstructionCreateSchema$1 = z$1.object({
  stepNumber: z$1.number(),
  instruction: z$1.string(),
  imageUrl: z$1.string().optional()
});
var RecipeCreateSchema$1 = z$1.object({
  name: z$1.string(),
  imageUrl: z$1.array(z$1.string()),
  description: z$1.string().optional(),
  servings: z$1.number(),
  cookTime: z$1.number(),
  restaurantId: z$1.number(),
  cookBookId: z$1.number(),
  ingredients: z$1.array(RecipeIngredientCreateSchema$1),
  instructions: z$1.array(RecipeInstructionCreateSchema$1)
});
z$1.object({
  id: z$1.number().optional(),
  name: z$1.string().optional(),
  imageUrl: z$1.string().optional() || z$1.array(z$1.string()).optional(),
  description: z$1.string().optional().nullish(),
  servings: z$1.number(),
  cookTime: z$1.number(),
  prepTime: z$1.number(),
  frequency: z$1.number().optional().nullable(),
  foodCost: z$1.number().optional().nullable(),
  restaurantId: z$1.number().optional().nullable(),
  cookBookId: z$1.number().optional().nullable(),
  isDeleted: z$1.boolean().default(false).optional(),
  ingredients: z$1.array(RecipeIngredientCreateSchema$1),
  instructions: z$1.array(RecipeInstructionCreateSchema$1)
});
RecipeCreateSchema$1.partial();
var OrderItemSchema$1 = z$1.object({
  id: z$1.number(),
  orderId: z$1.number(),
  ingredientId: z$1.number(),
  quantity: z$1.number(),
  unit: z$1.string(),
  price: z$1.number()
});
OrderItemSchema$1.omit({ id: true });
OrderItemSchema$1.partial().omit({ id: true, orderId: true });
var OrderStatusEnum$1 = z$1.enum(["PENDING", "APPROVED", "ORDERED", "RECEIVED", "CANCELLED"]);
var VendorSchema$1 = z$1.object({
  id: z$1.number(),
  name: z$1.string()
  // Add other relevant fields
});
var OrderSchema$1 = z$1.object({
  id: z$1.number(),
  restaurantId: z$1.number(),
  vendorId: z$1.number(),
  vendor: VendorSchema$1,
  status: OrderStatusEnum$1,
  items: z$1.array(OrderItemSchema$1),
  createdAt: z$1.date(),
  updatedAt: z$1.date()
});
var OrderCreateSchema$1 = OrderSchema$1.omit({
  id: true,
  createdAt: true,
  updatedAt: true
});
var OrderUpdateSchema$1 = OrderCreateSchema$1.partial();
z$1.object({
  id: z$1.number(),
  name: z$1.string(),
  category: z$1.string()
});
var OrganizationSchema = z$1.object({
  id: z$1.number(),
  name: z$1.string(),
  imageUrl: z$1.string().optional().nullable(),
  createdAt: z$1.date(),
  updatedAt: z$1.date()
});
var OrganizationCreateSchema = OrganizationSchema.omit({
  id: true,
  createdAt: true,
  updatedAt: true
});
var OrganizationUpdateSchema = OrganizationCreateSchema.partial();
var VendorSchema2$1 = z$1.object({
  id: z$1.number(),
  name: z$1.string(),
  contact: z$1.string(),
  email: z$1.string().email(),
  phone: z$1.string(),
  orders: z$1.array(OrderUpdateSchema$1),
  //   ingredients: z.array(OrderUpdateSchema),
  createdAt: z$1.date(),
  updatedAt: z$1.date()
});
var VendorCreateSchema$1 = VendorSchema2$1.omit({
  id: true,
  createdAt: true,
  updatedAt: true,
  orders: true
  //   ingredients: true
});
VendorCreateSchema$1.partial();
var HttpStatus$1 = {
  INTERNAL_SERVER_ERROR: 500,
  OK: 200,
  BAD_REQUEST: 400,
  CREATED: 201
};
var MessageSchema$1 = z$1.object({
  message: z$1.string()
});
z$1.object({
  status: z$1.literal(HttpStatus$1.INTERNAL_SERVER_ERROR),
  body: MessageSchema$1
});
z$1.discriminatedUnion("status", [
  z$1.object({
    status: z$1.literal(HttpStatus$1.OK),
    body: z$1.object({
      access_token: z$1.string(),
      session_token: z$1.string()
    })
  }),
  z$1.object({
    status: z$1.literal(HttpStatus$1.INTERNAL_SERVER_ERROR),
    body: MessageSchema$1
  })
]);
z$1.discriminatedUnion("status", [
  z$1.object({
    status: z$1.literal(HttpStatus$1.CREATED),
    body: zod_exports.UserSchema.omit({ passwordHash: true })
  }),
  z$1.object({
    status: z$1.literal(HttpStatus$1.BAD_REQUEST),
    body: MessageSchema$1
  })
]);
z$1.discriminatedUnion("status", [
  z$1.object({
    status: z$1.literal(HttpStatus$1.OK),
    body: MessageSchema$1
  }),
  z$1.object({
    status: z$1.literal(HttpStatus$1.BAD_REQUEST),
    body: MessageSchema$1
  })
]);
z$1.discriminatedUnion("status", [
  z$1.object({
    status: z$1.literal(HttpStatus$1.OK),
    body: MessageSchema$1
  }),
  z$1.object({
    status: z$1.literal(HttpStatus$1.BAD_REQUEST),
    body: MessageSchema$1
  })
]);
var util;
(function(util2) {
  util2.assertEqual = (val) => val;
  function assertIs(_arg) {
  }
  util2.assertIs = assertIs;
  function assertNever(_x) {
    throw new Error();
  }
  util2.assertNever = assertNever;
  util2.arrayToEnum = (items) => {
    const obj = {};
    for (const item of items) {
      obj[item] = item;
    }
    return obj;
  };
  util2.getValidEnumValues = (obj) => {
    const validKeys = util2.objectKeys(obj).filter((k) => typeof obj[obj[k]] !== "number");
    const filtered = {};
    for (const k of validKeys) {
      filtered[k] = obj[k];
    }
    return util2.objectValues(filtered);
  };
  util2.objectValues = (obj) => {
    return util2.objectKeys(obj).map(function(e) {
      return obj[e];
    });
  };
  util2.objectKeys = typeof Object.keys === "function" ? (obj) => Object.keys(obj) : (object) => {
    const keys = [];
    for (const key in object) {
      if (Object.prototype.hasOwnProperty.call(object, key)) {
        keys.push(key);
      }
    }
    return keys;
  };
  util2.find = (arr, checker) => {
    for (const item of arr) {
      if (checker(item))
        return item;
    }
    return void 0;
  };
  util2.isInteger = typeof Number.isInteger === "function" ? (val) => Number.isInteger(val) : (val) => typeof val === "number" && isFinite(val) && Math.floor(val) === val;
  function joinValues(array2, separator = " | ") {
    return array2.map((val) => typeof val === "string" ? `'${val}'` : val).join(separator);
  }
  util2.joinValues = joinValues;
  util2.jsonStringifyReplacer = (_, value) => {
    if (typeof value === "bigint") {
      return value.toString();
    }
    return value;
  };
})(util || (util = {}));
var objectUtil;
(function(objectUtil2) {
  objectUtil2.mergeShapes = (first, second) => {
    return {
      ...first,
      ...second
      // second overwrites first
    };
  };
})(objectUtil || (objectUtil = {}));
var ZodParsedType = util.arrayToEnum([
  "string",
  "nan",
  "number",
  "integer",
  "float",
  "boolean",
  "date",
  "bigint",
  "symbol",
  "function",
  "undefined",
  "null",
  "array",
  "object",
  "unknown",
  "promise",
  "void",
  "never",
  "map",
  "set"
]);
var getParsedType = (data) => {
  const t = typeof data;
  switch (t) {
    case "undefined":
      return ZodParsedType.undefined;
    case "string":
      return ZodParsedType.string;
    case "number":
      return isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;
    case "boolean":
      return ZodParsedType.boolean;
    case "function":
      return ZodParsedType.function;
    case "bigint":
      return ZodParsedType.bigint;
    case "symbol":
      return ZodParsedType.symbol;
    case "object":
      if (Array.isArray(data)) {
        return ZodParsedType.array;
      }
      if (data === null) {
        return ZodParsedType.null;
      }
      if (data.then && typeof data.then === "function" && data.catch && typeof data.catch === "function") {
        return ZodParsedType.promise;
      }
      if (typeof Map !== "undefined" && data instanceof Map) {
        return ZodParsedType.map;
      }
      if (typeof Set !== "undefined" && data instanceof Set) {
        return ZodParsedType.set;
      }
      if (typeof Date !== "undefined" && data instanceof Date) {
        return ZodParsedType.date;
      }
      return ZodParsedType.object;
    default:
      return ZodParsedType.unknown;
  }
};
var ZodIssueCode = util.arrayToEnum([
  "invalid_type",
  "invalid_literal",
  "custom",
  "invalid_union",
  "invalid_union_discriminator",
  "invalid_enum_value",
  "unrecognized_keys",
  "invalid_arguments",
  "invalid_return_type",
  "invalid_date",
  "invalid_string",
  "too_small",
  "too_big",
  "invalid_intersection_types",
  "not_multiple_of",
  "not_finite"
]);
var quotelessJson = (obj) => {
  const json = JSON.stringify(obj, null, 2);
  return json.replace(/"([^"]+)":/g, "$1:");
};
var ZodError = class _ZodError2 extends Error {
  constructor(issues) {
    super();
    this.issues = [];
    this.addIssue = (sub) => {
      this.issues = [...this.issues, sub];
    };
    this.addIssues = (subs = []) => {
      this.issues = [...this.issues, ...subs];
    };
    const actualProto = new.target.prototype;
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(this, actualProto);
    } else {
      this.__proto__ = actualProto;
    }
    this.name = "ZodError";
    this.issues = issues;
  }
  get errors() {
    return this.issues;
  }
  format(_mapper) {
    const mapper = _mapper || function(issue) {
      return issue.message;
    };
    const fieldErrors = { _errors: [] };
    const processError = (error) => {
      for (const issue of error.issues) {
        if (issue.code === "invalid_union") {
          issue.unionErrors.map(processError);
        } else if (issue.code === "invalid_return_type") {
          processError(issue.returnTypeError);
        } else if (issue.code === "invalid_arguments") {
          processError(issue.argumentsError);
        } else if (issue.path.length === 0) {
          fieldErrors._errors.push(mapper(issue));
        } else {
          let curr = fieldErrors;
          let i = 0;
          while (i < issue.path.length) {
            const el = issue.path[i];
            const terminal = i === issue.path.length - 1;
            if (!terminal) {
              curr[el] = curr[el] || { _errors: [] };
            } else {
              curr[el] = curr[el] || { _errors: [] };
              curr[el]._errors.push(mapper(issue));
            }
            curr = curr[el];
            i++;
          }
        }
      }
    };
    processError(this);
    return fieldErrors;
  }
  static assert(value) {
    if (!(value instanceof _ZodError2)) {
      throw new Error(`Not a ZodError: ${value}`);
    }
  }
  toString() {
    return this.message;
  }
  get message() {
    return JSON.stringify(this.issues, util.jsonStringifyReplacer, 2);
  }
  get isEmpty() {
    return this.issues.length === 0;
  }
  flatten(mapper = (issue) => issue.message) {
    const fieldErrors = {};
    const formErrors = [];
    for (const sub of this.issues) {
      if (sub.path.length > 0) {
        fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];
        fieldErrors[sub.path[0]].push(mapper(sub));
      } else {
        formErrors.push(mapper(sub));
      }
    }
    return { formErrors, fieldErrors };
  }
  get formErrors() {
    return this.flatten();
  }
};
ZodError.create = (issues) => {
  const error = new ZodError(issues);
  return error;
};
var errorMap = (issue, _ctx) => {
  let message;
  switch (issue.code) {
    case ZodIssueCode.invalid_type:
      if (issue.received === ZodParsedType.undefined) {
        message = "Required";
      } else {
        message = `Expected ${issue.expected}, received ${issue.received}`;
      }
      break;
    case ZodIssueCode.invalid_literal:
      message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util.jsonStringifyReplacer)}`;
      break;
    case ZodIssueCode.unrecognized_keys:
      message = `Unrecognized key(s) in object: ${util.joinValues(issue.keys, ", ")}`;
      break;
    case ZodIssueCode.invalid_union:
      message = `Invalid input`;
      break;
    case ZodIssueCode.invalid_union_discriminator:
      message = `Invalid discriminator value. Expected ${util.joinValues(issue.options)}`;
      break;
    case ZodIssueCode.invalid_enum_value:
      message = `Invalid enum value. Expected ${util.joinValues(issue.options)}, received '${issue.received}'`;
      break;
    case ZodIssueCode.invalid_arguments:
      message = `Invalid function arguments`;
      break;
    case ZodIssueCode.invalid_return_type:
      message = `Invalid function return type`;
      break;
    case ZodIssueCode.invalid_date:
      message = `Invalid date`;
      break;
    case ZodIssueCode.invalid_string:
      if (typeof issue.validation === "object") {
        if ("includes" in issue.validation) {
          message = `Invalid input: must include "${issue.validation.includes}"`;
          if (typeof issue.validation.position === "number") {
            message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;
          }
        } else if ("startsWith" in issue.validation) {
          message = `Invalid input: must start with "${issue.validation.startsWith}"`;
        } else if ("endsWith" in issue.validation) {
          message = `Invalid input: must end with "${issue.validation.endsWith}"`;
        } else {
          util.assertNever(issue.validation);
        }
      } else if (issue.validation !== "regex") {
        message = `Invalid ${issue.validation}`;
      } else {
        message = "Invalid";
      }
      break;
    case ZodIssueCode.too_small:
      if (issue.type === "array")
        message = `Array must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;
      else if (issue.type === "string")
        message = `String must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;
      else if (issue.type === "number")
        message = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;
      else if (issue.type === "date")
        message = `Date must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${new Date(Number(issue.minimum))}`;
      else
        message = "Invalid input";
      break;
    case ZodIssueCode.too_big:
      if (issue.type === "array")
        message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;
      else if (issue.type === "string")
        message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;
      else if (issue.type === "number")
        message = `Number must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
      else if (issue.type === "bigint")
        message = `BigInt must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
      else if (issue.type === "date")
        message = `Date must be ${issue.exact ? `exactly` : issue.inclusive ? `smaller than or equal to` : `smaller than`} ${new Date(Number(issue.maximum))}`;
      else
        message = "Invalid input";
      break;
    case ZodIssueCode.custom:
      message = `Invalid input`;
      break;
    case ZodIssueCode.invalid_intersection_types:
      message = `Intersection results could not be merged`;
      break;
    case ZodIssueCode.not_multiple_of:
      message = `Number must be a multiple of ${issue.multipleOf}`;
      break;
    case ZodIssueCode.not_finite:
      message = "Number must be finite";
      break;
    default:
      message = _ctx.defaultError;
      util.assertNever(issue);
  }
  return { message };
};
var overrideErrorMap = errorMap;
function setErrorMap(map) {
  overrideErrorMap = map;
}
function getErrorMap() {
  return overrideErrorMap;
}
var makeIssue = (params) => {
  const { data, path, errorMaps, issueData } = params;
  const fullPath = [...path, ...issueData.path || []];
  const fullIssue = {
    ...issueData,
    path: fullPath
  };
  if (issueData.message !== void 0) {
    return {
      ...issueData,
      path: fullPath,
      message: issueData.message
    };
  }
  let errorMessage = "";
  const maps = errorMaps.filter((m) => !!m).slice().reverse();
  for (const map of maps) {
    errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;
  }
  return {
    ...issueData,
    path: fullPath,
    message: errorMessage
  };
};
var EMPTY_PATH = [];
function addIssueToContext(ctx, issueData) {
  const overrideMap = getErrorMap();
  const issue = makeIssue({
    issueData,
    data: ctx.data,
    path: ctx.path,
    errorMaps: [
      ctx.common.contextualErrorMap,
      ctx.schemaErrorMap,
      overrideMap,
      overrideMap === errorMap ? void 0 : errorMap
      // then global default map
    ].filter((x) => !!x)
  });
  ctx.common.issues.push(issue);
}
var ParseStatus = class _ParseStatus2 {
  constructor() {
    this.value = "valid";
  }
  dirty() {
    if (this.value === "valid")
      this.value = "dirty";
  }
  abort() {
    if (this.value !== "aborted")
      this.value = "aborted";
  }
  static mergeArray(status, results) {
    const arrayValue = [];
    for (const s of results) {
      if (s.status === "aborted")
        return INVALID;
      if (s.status === "dirty")
        status.dirty();
      arrayValue.push(s.value);
    }
    return { status: status.value, value: arrayValue };
  }
  static async mergeObjectAsync(status, pairs) {
    const syncPairs = [];
    for (const pair of pairs) {
      const key = await pair.key;
      const value = await pair.value;
      syncPairs.push({
        key,
        value
      });
    }
    return _ParseStatus2.mergeObjectSync(status, syncPairs);
  }
  static mergeObjectSync(status, pairs) {
    const finalObject = {};
    for (const pair of pairs) {
      const { key, value } = pair;
      if (key.status === "aborted")
        return INVALID;
      if (value.status === "aborted")
        return INVALID;
      if (key.status === "dirty")
        status.dirty();
      if (value.status === "dirty")
        status.dirty();
      if (key.value !== "__proto__" && (typeof value.value !== "undefined" || pair.alwaysSet)) {
        finalObject[key.value] = value.value;
      }
    }
    return { status: status.value, value: finalObject };
  }
};
var INVALID = Object.freeze({
  status: "aborted"
});
var DIRTY = (value) => ({ status: "dirty", value });
var OK = (value) => ({ status: "valid", value });
var isAborted = (x) => x.status === "aborted";
var isDirty = (x) => x.status === "dirty";
var isValid = (x) => x.status === "valid";
var isAsync = (x) => typeof Promise !== "undefined" && x instanceof Promise;
function __classPrivateFieldGet(receiver, state, kind, f) {
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return state.get(receiver);
}
function __classPrivateFieldSet(receiver, state, value, kind, f) {
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return state.set(receiver, value), value;
}
var errorUtil;
(function(errorUtil2) {
  errorUtil2.errToObj = (message) => typeof message === "string" ? { message } : message || {};
  errorUtil2.toString = (message) => typeof message === "string" ? message : message === null || message === void 0 ? void 0 : message.message;
})(errorUtil || (errorUtil = {}));
var _ZodEnum_cache;
var _ZodNativeEnum_cache;
var ParseInputLazyPath2 = class {
  constructor(parent, value, path, key) {
    this._cachedPath = [];
    this.parent = parent;
    this.data = value;
    this._path = path;
    this._key = key;
  }
  get path() {
    if (!this._cachedPath.length) {
      if (this._key instanceof Array) {
        this._cachedPath.push(...this._path, ...this._key);
      } else {
        this._cachedPath.push(...this._path, this._key);
      }
    }
    return this._cachedPath;
  }
};
var handleResult = (ctx, result) => {
  if (isValid(result)) {
    return { success: true, data: result.value };
  } else {
    if (!ctx.common.issues.length) {
      throw new Error("Validation failed but no issues detected.");
    }
    return {
      success: false,
      get error() {
        if (this._error)
          return this._error;
        const error = new ZodError(ctx.common.issues);
        this._error = error;
        return this._error;
      }
    };
  }
};
function processCreateParams(params) {
  if (!params)
    return {};
  const { errorMap: errorMap2, invalid_type_error, required_error, description } = params;
  if (errorMap2 && (invalid_type_error || required_error)) {
    throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);
  }
  if (errorMap2)
    return { errorMap: errorMap2, description };
  const customMap = (iss, ctx) => {
    var _a, _b;
    const { message } = params;
    if (iss.code === "invalid_enum_value") {
      return { message: message !== null && message !== void 0 ? message : ctx.defaultError };
    }
    if (typeof ctx.data === "undefined") {
      return { message: (_a = message !== null && message !== void 0 ? message : required_error) !== null && _a !== void 0 ? _a : ctx.defaultError };
    }
    if (iss.code !== "invalid_type")
      return { message: ctx.defaultError };
    return { message: (_b = message !== null && message !== void 0 ? message : invalid_type_error) !== null && _b !== void 0 ? _b : ctx.defaultError };
  };
  return { errorMap: customMap, description };
}
var ZodType2 = class {
  constructor(def) {
    this.spa = this.safeParseAsync;
    this._def = def;
    this.parse = this.parse.bind(this);
    this.safeParse = this.safeParse.bind(this);
    this.parseAsync = this.parseAsync.bind(this);
    this.safeParseAsync = this.safeParseAsync.bind(this);
    this.spa = this.spa.bind(this);
    this.refine = this.refine.bind(this);
    this.refinement = this.refinement.bind(this);
    this.superRefine = this.superRefine.bind(this);
    this.optional = this.optional.bind(this);
    this.nullable = this.nullable.bind(this);
    this.nullish = this.nullish.bind(this);
    this.array = this.array.bind(this);
    this.promise = this.promise.bind(this);
    this.or = this.or.bind(this);
    this.and = this.and.bind(this);
    this.transform = this.transform.bind(this);
    this.brand = this.brand.bind(this);
    this.default = this.default.bind(this);
    this.catch = this.catch.bind(this);
    this.describe = this.describe.bind(this);
    this.pipe = this.pipe.bind(this);
    this.readonly = this.readonly.bind(this);
    this.isNullable = this.isNullable.bind(this);
    this.isOptional = this.isOptional.bind(this);
  }
  get description() {
    return this._def.description;
  }
  _getType(input) {
    return getParsedType(input.data);
  }
  _getOrReturnCtx(input, ctx) {
    return ctx || {
      common: input.parent.common,
      data: input.data,
      parsedType: getParsedType(input.data),
      schemaErrorMap: this._def.errorMap,
      path: input.path,
      parent: input.parent
    };
  }
  _processInputParams(input) {
    return {
      status: new ParseStatus(),
      ctx: {
        common: input.parent.common,
        data: input.data,
        parsedType: getParsedType(input.data),
        schemaErrorMap: this._def.errorMap,
        path: input.path,
        parent: input.parent
      }
    };
  }
  _parseSync(input) {
    const result = this._parse(input);
    if (isAsync(result)) {
      throw new Error("Synchronous parse encountered promise.");
    }
    return result;
  }
  _parseAsync(input) {
    const result = this._parse(input);
    return Promise.resolve(result);
  }
  parse(data, params) {
    const result = this.safeParse(data, params);
    if (result.success)
      return result.data;
    throw result.error;
  }
  safeParse(data, params) {
    var _a;
    const ctx = {
      common: {
        issues: [],
        async: (_a = params === null || params === void 0 ? void 0 : params.async) !== null && _a !== void 0 ? _a : false,
        contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap
      },
      path: (params === null || params === void 0 ? void 0 : params.path) || [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data,
      parsedType: getParsedType(data)
    };
    const result = this._parseSync({ data, path: ctx.path, parent: ctx });
    return handleResult(ctx, result);
  }
  async parseAsync(data, params) {
    const result = await this.safeParseAsync(data, params);
    if (result.success)
      return result.data;
    throw result.error;
  }
  async safeParseAsync(data, params) {
    const ctx = {
      common: {
        issues: [],
        contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,
        async: true
      },
      path: (params === null || params === void 0 ? void 0 : params.path) || [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data,
      parsedType: getParsedType(data)
    };
    const maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx });
    const result = await (isAsync(maybeAsyncResult) ? maybeAsyncResult : Promise.resolve(maybeAsyncResult));
    return handleResult(ctx, result);
  }
  refine(check, message) {
    const getIssueProperties = (val) => {
      if (typeof message === "string" || typeof message === "undefined") {
        return { message };
      } else if (typeof message === "function") {
        return message(val);
      } else {
        return message;
      }
    };
    return this._refinement((val, ctx) => {
      const result = check(val);
      const setError = () => ctx.addIssue({
        code: ZodIssueCode.custom,
        ...getIssueProperties(val)
      });
      if (typeof Promise !== "undefined" && result instanceof Promise) {
        return result.then((data) => {
          if (!data) {
            setError();
            return false;
          } else {
            return true;
          }
        });
      }
      if (!result) {
        setError();
        return false;
      } else {
        return true;
      }
    });
  }
  refinement(check, refinementData) {
    return this._refinement((val, ctx) => {
      if (!check(val)) {
        ctx.addIssue(typeof refinementData === "function" ? refinementData(val, ctx) : refinementData);
        return false;
      } else {
        return true;
      }
    });
  }
  _refinement(refinement) {
    return new ZodEffects2({
      schema: this,
      typeName: ZodFirstPartyTypeKind.ZodEffects,
      effect: { type: "refinement", refinement }
    });
  }
  superRefine(refinement) {
    return this._refinement(refinement);
  }
  optional() {
    return ZodOptional2.create(this, this._def);
  }
  nullable() {
    return ZodNullable2.create(this, this._def);
  }
  nullish() {
    return this.nullable().optional();
  }
  array() {
    return ZodArray.create(this, this._def);
  }
  promise() {
    return ZodPromise2.create(this, this._def);
  }
  or(option) {
    return ZodUnion2.create([this, option], this._def);
  }
  and(incoming) {
    return ZodIntersection2.create(this, incoming, this._def);
  }
  transform(transform) {
    return new ZodEffects2({
      ...processCreateParams(this._def),
      schema: this,
      typeName: ZodFirstPartyTypeKind.ZodEffects,
      effect: { type: "transform", transform }
    });
  }
  default(def) {
    const defaultValueFunc = typeof def === "function" ? def : () => def;
    return new ZodDefault2({
      ...processCreateParams(this._def),
      innerType: this,
      defaultValue: defaultValueFunc,
      typeName: ZodFirstPartyTypeKind.ZodDefault
    });
  }
  brand() {
    return new ZodBranded2({
      typeName: ZodFirstPartyTypeKind.ZodBranded,
      type: this,
      ...processCreateParams(this._def)
    });
  }
  catch(def) {
    const catchValueFunc = typeof def === "function" ? def : () => def;
    return new ZodCatch2({
      ...processCreateParams(this._def),
      innerType: this,
      catchValue: catchValueFunc,
      typeName: ZodFirstPartyTypeKind.ZodCatch
    });
  }
  describe(description) {
    const This = this.constructor;
    return new This({
      ...this._def,
      description
    });
  }
  pipe(target) {
    return ZodPipeline.create(this, target);
  }
  readonly() {
    return ZodReadonly2.create(this);
  }
  isOptional() {
    return this.safeParse(void 0).success;
  }
  isNullable() {
    return this.safeParse(null).success;
  }
};
var cuidRegex = /^c[^\s-]{8,}$/i;
var cuid2Regex = /^[0-9a-z]+$/;
var ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/;
var uuidRegex = /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i;
var nanoidRegex = /^[a-z0-9_-]{21}$/i;
var durationRegex = /^[-+]?P(?!$)(?:(?:[-+]?\d+Y)|(?:[-+]?\d+[.,]\d+Y$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:(?:[-+]?\d+W)|(?:[-+]?\d+[.,]\d+W$))?(?:(?:[-+]?\d+D)|(?:[-+]?\d+[.,]\d+D$))?(?:T(?=[\d+-])(?:(?:[-+]?\d+H)|(?:[-+]?\d+[.,]\d+H$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:[-+]?\d+(?:[.,]\d+)?S)?)??$/;
var emailRegex = /^(?!\.)(?!.*\.\.)([A-Z0-9_'+\-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i;
var _emojiRegex = `^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$`;
var emojiRegex;
var ipv4Regex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/;
var ipv6Regex = /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/;
var base64Regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;
var dateRegexSource = `((\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\d|30)|(02)-(0[1-9]|1\\d|2[0-8])))`;
var dateRegex = new RegExp(`^${dateRegexSource}$`);
function timeRegexSource(args) {
  let regex = `([01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d`;
  if (args.precision) {
    regex = `${regex}\\.\\d{${args.precision}}`;
  } else if (args.precision == null) {
    regex = `${regex}(\\.\\d+)?`;
  }
  return regex;
}
function timeRegex(args) {
  return new RegExp(`^${timeRegexSource(args)}$`);
}
function datetimeRegex(args) {
  let regex = `${dateRegexSource}T${timeRegexSource(args)}`;
  const opts = [];
  opts.push(args.local ? `Z?` : `Z`);
  if (args.offset)
    opts.push(`([+-]\\d{2}:?\\d{2})`);
  regex = `${regex}(${opts.join("|")})`;
  return new RegExp(`^${regex}$`);
}
function isValidIP(ip, version) {
  if ((version === "v4" || !version) && ipv4Regex.test(ip)) {
    return true;
  }
  if ((version === "v6" || !version) && ipv6Regex.test(ip)) {
    return true;
  }
  return false;
}
var ZodString = class _ZodString2 extends ZodType2 {
  _parse(input) {
    if (this._def.coerce) {
      input.data = String(input.data);
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.string) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.string,
        received: ctx2.parsedType
      });
      return INVALID;
    }
    const status = new ParseStatus();
    let ctx = void 0;
    for (const check of this._def.checks) {
      if (check.kind === "min") {
        if (input.data.length < check.value) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            minimum: check.value,
            type: "string",
            inclusive: true,
            exact: false,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "max") {
        if (input.data.length > check.value) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            maximum: check.value,
            type: "string",
            inclusive: true,
            exact: false,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "length") {
        const tooBig = input.data.length > check.value;
        const tooSmall = input.data.length < check.value;
        if (tooBig || tooSmall) {
          ctx = this._getOrReturnCtx(input, ctx);
          if (tooBig) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_big,
              maximum: check.value,
              type: "string",
              inclusive: true,
              exact: true,
              message: check.message
            });
          } else if (tooSmall) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_small,
              minimum: check.value,
              type: "string",
              inclusive: true,
              exact: true,
              message: check.message
            });
          }
          status.dirty();
        }
      } else if (check.kind === "email") {
        if (!emailRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "email",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "emoji") {
        if (!emojiRegex) {
          emojiRegex = new RegExp(_emojiRegex, "u");
        }
        if (!emojiRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "emoji",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "uuid") {
        if (!uuidRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "uuid",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "nanoid") {
        if (!nanoidRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "nanoid",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "cuid") {
        if (!cuidRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "cuid",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "cuid2") {
        if (!cuid2Regex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "cuid2",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "ulid") {
        if (!ulidRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "ulid",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "url") {
        try {
          new URL(input.data);
        } catch (_a) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "url",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "regex") {
        check.regex.lastIndex = 0;
        const testResult = check.regex.test(input.data);
        if (!testResult) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "regex",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "trim") {
        input.data = input.data.trim();
      } else if (check.kind === "includes") {
        if (!input.data.includes(check.value, check.position)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: { includes: check.value, position: check.position },
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "toLowerCase") {
        input.data = input.data.toLowerCase();
      } else if (check.kind === "toUpperCase") {
        input.data = input.data.toUpperCase();
      } else if (check.kind === "startsWith") {
        if (!input.data.startsWith(check.value)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: { startsWith: check.value },
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "endsWith") {
        if (!input.data.endsWith(check.value)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: { endsWith: check.value },
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "datetime") {
        const regex = datetimeRegex(check);
        if (!regex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: "datetime",
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "date") {
        const regex = dateRegex;
        if (!regex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: "date",
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "time") {
        const regex = timeRegex(check);
        if (!regex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: "time",
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "duration") {
        if (!durationRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "duration",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "ip") {
        if (!isValidIP(input.data, check.version)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "ip",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "base64") {
        if (!base64Regex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "base64",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else {
        util.assertNever(check);
      }
    }
    return { status: status.value, value: input.data };
  }
  _regex(regex, validation, message) {
    return this.refinement((data) => regex.test(data), {
      validation,
      code: ZodIssueCode.invalid_string,
      ...errorUtil.errToObj(message)
    });
  }
  _addCheck(check) {
    return new _ZodString2({
      ...this._def,
      checks: [...this._def.checks, check]
    });
  }
  email(message) {
    return this._addCheck({ kind: "email", ...errorUtil.errToObj(message) });
  }
  url(message) {
    return this._addCheck({ kind: "url", ...errorUtil.errToObj(message) });
  }
  emoji(message) {
    return this._addCheck({ kind: "emoji", ...errorUtil.errToObj(message) });
  }
  uuid(message) {
    return this._addCheck({ kind: "uuid", ...errorUtil.errToObj(message) });
  }
  nanoid(message) {
    return this._addCheck({ kind: "nanoid", ...errorUtil.errToObj(message) });
  }
  cuid(message) {
    return this._addCheck({ kind: "cuid", ...errorUtil.errToObj(message) });
  }
  cuid2(message) {
    return this._addCheck({ kind: "cuid2", ...errorUtil.errToObj(message) });
  }
  ulid(message) {
    return this._addCheck({ kind: "ulid", ...errorUtil.errToObj(message) });
  }
  base64(message) {
    return this._addCheck({ kind: "base64", ...errorUtil.errToObj(message) });
  }
  ip(options) {
    return this._addCheck({ kind: "ip", ...errorUtil.errToObj(options) });
  }
  datetime(options) {
    var _a, _b;
    if (typeof options === "string") {
      return this._addCheck({
        kind: "datetime",
        precision: null,
        offset: false,
        local: false,
        message: options
      });
    }
    return this._addCheck({
      kind: "datetime",
      precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === "undefined" ? null : options === null || options === void 0 ? void 0 : options.precision,
      offset: (_a = options === null || options === void 0 ? void 0 : options.offset) !== null && _a !== void 0 ? _a : false,
      local: (_b = options === null || options === void 0 ? void 0 : options.local) !== null && _b !== void 0 ? _b : false,
      ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)
    });
  }
  date(message) {
    return this._addCheck({ kind: "date", message });
  }
  time(options) {
    if (typeof options === "string") {
      return this._addCheck({
        kind: "time",
        precision: null,
        message: options
      });
    }
    return this._addCheck({
      kind: "time",
      precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === "undefined" ? null : options === null || options === void 0 ? void 0 : options.precision,
      ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)
    });
  }
  duration(message) {
    return this._addCheck({ kind: "duration", ...errorUtil.errToObj(message) });
  }
  regex(regex, message) {
    return this._addCheck({
      kind: "regex",
      regex,
      ...errorUtil.errToObj(message)
    });
  }
  includes(value, options) {
    return this._addCheck({
      kind: "includes",
      value,
      position: options === null || options === void 0 ? void 0 : options.position,
      ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)
    });
  }
  startsWith(value, message) {
    return this._addCheck({
      kind: "startsWith",
      value,
      ...errorUtil.errToObj(message)
    });
  }
  endsWith(value, message) {
    return this._addCheck({
      kind: "endsWith",
      value,
      ...errorUtil.errToObj(message)
    });
  }
  min(minLength, message) {
    return this._addCheck({
      kind: "min",
      value: minLength,
      ...errorUtil.errToObj(message)
    });
  }
  max(maxLength, message) {
    return this._addCheck({
      kind: "max",
      value: maxLength,
      ...errorUtil.errToObj(message)
    });
  }
  length(len, message) {
    return this._addCheck({
      kind: "length",
      value: len,
      ...errorUtil.errToObj(message)
    });
  }
  /**
   * @deprecated Use z.string().min(1) instead.
   * @see {@link ZodString.min}
   */
  nonempty(message) {
    return this.min(1, errorUtil.errToObj(message));
  }
  trim() {
    return new _ZodString2({
      ...this._def,
      checks: [...this._def.checks, { kind: "trim" }]
    });
  }
  toLowerCase() {
    return new _ZodString2({
      ...this._def,
      checks: [...this._def.checks, { kind: "toLowerCase" }]
    });
  }
  toUpperCase() {
    return new _ZodString2({
      ...this._def,
      checks: [...this._def.checks, { kind: "toUpperCase" }]
    });
  }
  get isDatetime() {
    return !!this._def.checks.find((ch) => ch.kind === "datetime");
  }
  get isDate() {
    return !!this._def.checks.find((ch) => ch.kind === "date");
  }
  get isTime() {
    return !!this._def.checks.find((ch) => ch.kind === "time");
  }
  get isDuration() {
    return !!this._def.checks.find((ch) => ch.kind === "duration");
  }
  get isEmail() {
    return !!this._def.checks.find((ch) => ch.kind === "email");
  }
  get isURL() {
    return !!this._def.checks.find((ch) => ch.kind === "url");
  }
  get isEmoji() {
    return !!this._def.checks.find((ch) => ch.kind === "emoji");
  }
  get isUUID() {
    return !!this._def.checks.find((ch) => ch.kind === "uuid");
  }
  get isNANOID() {
    return !!this._def.checks.find((ch) => ch.kind === "nanoid");
  }
  get isCUID() {
    return !!this._def.checks.find((ch) => ch.kind === "cuid");
  }
  get isCUID2() {
    return !!this._def.checks.find((ch) => ch.kind === "cuid2");
  }
  get isULID() {
    return !!this._def.checks.find((ch) => ch.kind === "ulid");
  }
  get isIP() {
    return !!this._def.checks.find((ch) => ch.kind === "ip");
  }
  get isBase64() {
    return !!this._def.checks.find((ch) => ch.kind === "base64");
  }
  get minLength() {
    let min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      }
    }
    return min;
  }
  get maxLength() {
    let max = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "max") {
        if (max === null || ch.value < max)
          max = ch.value;
      }
    }
    return max;
  }
};
ZodString.create = (params) => {
  var _a;
  return new ZodString({
    checks: [],
    typeName: ZodFirstPartyTypeKind.ZodString,
    coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,
    ...processCreateParams(params)
  });
};
function floatSafeRemainder(val, step) {
  const valDecCount = (val.toString().split(".")[1] || "").length;
  const stepDecCount = (step.toString().split(".")[1] || "").length;
  const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;
  const valInt = parseInt(val.toFixed(decCount).replace(".", ""));
  const stepInt = parseInt(step.toFixed(decCount).replace(".", ""));
  return valInt % stepInt / Math.pow(10, decCount);
}
var ZodNumber = class _ZodNumber2 extends ZodType2 {
  constructor() {
    super(...arguments);
    this.min = this.gte;
    this.max = this.lte;
    this.step = this.multipleOf;
  }
  _parse(input) {
    if (this._def.coerce) {
      input.data = Number(input.data);
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.number) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.number,
        received: ctx2.parsedType
      });
      return INVALID;
    }
    let ctx = void 0;
    const status = new ParseStatus();
    for (const check of this._def.checks) {
      if (check.kind === "int") {
        if (!util.isInteger(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: "integer",
            received: "float",
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "min") {
        const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
        if (tooSmall) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            minimum: check.value,
            type: "number",
            inclusive: check.inclusive,
            exact: false,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "max") {
        const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
        if (tooBig) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            maximum: check.value,
            type: "number",
            inclusive: check.inclusive,
            exact: false,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "multipleOf") {
        if (floatSafeRemainder(input.data, check.value) !== 0) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.not_multiple_of,
            multipleOf: check.value,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "finite") {
        if (!Number.isFinite(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.not_finite,
            message: check.message
          });
          status.dirty();
        }
      } else {
        util.assertNever(check);
      }
    }
    return { status: status.value, value: input.data };
  }
  gte(value, message) {
    return this.setLimit("min", value, true, errorUtil.toString(message));
  }
  gt(value, message) {
    return this.setLimit("min", value, false, errorUtil.toString(message));
  }
  lte(value, message) {
    return this.setLimit("max", value, true, errorUtil.toString(message));
  }
  lt(value, message) {
    return this.setLimit("max", value, false, errorUtil.toString(message));
  }
  setLimit(kind, value, inclusive, message) {
    return new _ZodNumber2({
      ...this._def,
      checks: [
        ...this._def.checks,
        {
          kind,
          value,
          inclusive,
          message: errorUtil.toString(message)
        }
      ]
    });
  }
  _addCheck(check) {
    return new _ZodNumber2({
      ...this._def,
      checks: [...this._def.checks, check]
    });
  }
  int(message) {
    return this._addCheck({
      kind: "int",
      message: errorUtil.toString(message)
    });
  }
  positive(message) {
    return this._addCheck({
      kind: "min",
      value: 0,
      inclusive: false,
      message: errorUtil.toString(message)
    });
  }
  negative(message) {
    return this._addCheck({
      kind: "max",
      value: 0,
      inclusive: false,
      message: errorUtil.toString(message)
    });
  }
  nonpositive(message) {
    return this._addCheck({
      kind: "max",
      value: 0,
      inclusive: true,
      message: errorUtil.toString(message)
    });
  }
  nonnegative(message) {
    return this._addCheck({
      kind: "min",
      value: 0,
      inclusive: true,
      message: errorUtil.toString(message)
    });
  }
  multipleOf(value, message) {
    return this._addCheck({
      kind: "multipleOf",
      value,
      message: errorUtil.toString(message)
    });
  }
  finite(message) {
    return this._addCheck({
      kind: "finite",
      message: errorUtil.toString(message)
    });
  }
  safe(message) {
    return this._addCheck({
      kind: "min",
      inclusive: true,
      value: Number.MIN_SAFE_INTEGER,
      message: errorUtil.toString(message)
    })._addCheck({
      kind: "max",
      inclusive: true,
      value: Number.MAX_SAFE_INTEGER,
      message: errorUtil.toString(message)
    });
  }
  get minValue() {
    let min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      }
    }
    return min;
  }
  get maxValue() {
    let max = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "max") {
        if (max === null || ch.value < max)
          max = ch.value;
      }
    }
    return max;
  }
  get isInt() {
    return !!this._def.checks.find((ch) => ch.kind === "int" || ch.kind === "multipleOf" && util.isInteger(ch.value));
  }
  get isFinite() {
    let max = null, min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "finite" || ch.kind === "int" || ch.kind === "multipleOf") {
        return true;
      } else if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      } else if (ch.kind === "max") {
        if (max === null || ch.value < max)
          max = ch.value;
      }
    }
    return Number.isFinite(min) && Number.isFinite(max);
  }
};
ZodNumber.create = (params) => {
  return new ZodNumber({
    checks: [],
    typeName: ZodFirstPartyTypeKind.ZodNumber,
    coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
    ...processCreateParams(params)
  });
};
var ZodBigInt = class _ZodBigInt2 extends ZodType2 {
  constructor() {
    super(...arguments);
    this.min = this.gte;
    this.max = this.lte;
  }
  _parse(input) {
    if (this._def.coerce) {
      input.data = BigInt(input.data);
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.bigint) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.bigint,
        received: ctx2.parsedType
      });
      return INVALID;
    }
    let ctx = void 0;
    const status = new ParseStatus();
    for (const check of this._def.checks) {
      if (check.kind === "min") {
        const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
        if (tooSmall) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            type: "bigint",
            minimum: check.value,
            inclusive: check.inclusive,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "max") {
        const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
        if (tooBig) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            type: "bigint",
            maximum: check.value,
            inclusive: check.inclusive,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "multipleOf") {
        if (input.data % check.value !== BigInt(0)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.not_multiple_of,
            multipleOf: check.value,
            message: check.message
          });
          status.dirty();
        }
      } else {
        util.assertNever(check);
      }
    }
    return { status: status.value, value: input.data };
  }
  gte(value, message) {
    return this.setLimit("min", value, true, errorUtil.toString(message));
  }
  gt(value, message) {
    return this.setLimit("min", value, false, errorUtil.toString(message));
  }
  lte(value, message) {
    return this.setLimit("max", value, true, errorUtil.toString(message));
  }
  lt(value, message) {
    return this.setLimit("max", value, false, errorUtil.toString(message));
  }
  setLimit(kind, value, inclusive, message) {
    return new _ZodBigInt2({
      ...this._def,
      checks: [
        ...this._def.checks,
        {
          kind,
          value,
          inclusive,
          message: errorUtil.toString(message)
        }
      ]
    });
  }
  _addCheck(check) {
    return new _ZodBigInt2({
      ...this._def,
      checks: [...this._def.checks, check]
    });
  }
  positive(message) {
    return this._addCheck({
      kind: "min",
      value: BigInt(0),
      inclusive: false,
      message: errorUtil.toString(message)
    });
  }
  negative(message) {
    return this._addCheck({
      kind: "max",
      value: BigInt(0),
      inclusive: false,
      message: errorUtil.toString(message)
    });
  }
  nonpositive(message) {
    return this._addCheck({
      kind: "max",
      value: BigInt(0),
      inclusive: true,
      message: errorUtil.toString(message)
    });
  }
  nonnegative(message) {
    return this._addCheck({
      kind: "min",
      value: BigInt(0),
      inclusive: true,
      message: errorUtil.toString(message)
    });
  }
  multipleOf(value, message) {
    return this._addCheck({
      kind: "multipleOf",
      value,
      message: errorUtil.toString(message)
    });
  }
  get minValue() {
    let min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      }
    }
    return min;
  }
  get maxValue() {
    let max = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "max") {
        if (max === null || ch.value < max)
          max = ch.value;
      }
    }
    return max;
  }
};
ZodBigInt.create = (params) => {
  var _a;
  return new ZodBigInt({
    checks: [],
    typeName: ZodFirstPartyTypeKind.ZodBigInt,
    coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,
    ...processCreateParams(params)
  });
};
var ZodBoolean2 = class extends ZodType2 {
  _parse(input) {
    if (this._def.coerce) {
      input.data = Boolean(input.data);
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.boolean) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.boolean,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
};
ZodBoolean2.create = (params) => {
  return new ZodBoolean2({
    typeName: ZodFirstPartyTypeKind.ZodBoolean,
    coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
    ...processCreateParams(params)
  });
};
var ZodDate = class _ZodDate2 extends ZodType2 {
  _parse(input) {
    if (this._def.coerce) {
      input.data = new Date(input.data);
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.date) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.date,
        received: ctx2.parsedType
      });
      return INVALID;
    }
    if (isNaN(input.data.getTime())) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_date
      });
      return INVALID;
    }
    const status = new ParseStatus();
    let ctx = void 0;
    for (const check of this._def.checks) {
      if (check.kind === "min") {
        if (input.data.getTime() < check.value) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            message: check.message,
            inclusive: true,
            exact: false,
            minimum: check.value,
            type: "date"
          });
          status.dirty();
        }
      } else if (check.kind === "max") {
        if (input.data.getTime() > check.value) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            message: check.message,
            inclusive: true,
            exact: false,
            maximum: check.value,
            type: "date"
          });
          status.dirty();
        }
      } else {
        util.assertNever(check);
      }
    }
    return {
      status: status.value,
      value: new Date(input.data.getTime())
    };
  }
  _addCheck(check) {
    return new _ZodDate2({
      ...this._def,
      checks: [...this._def.checks, check]
    });
  }
  min(minDate, message) {
    return this._addCheck({
      kind: "min",
      value: minDate.getTime(),
      message: errorUtil.toString(message)
    });
  }
  max(maxDate, message) {
    return this._addCheck({
      kind: "max",
      value: maxDate.getTime(),
      message: errorUtil.toString(message)
    });
  }
  get minDate() {
    let min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      }
    }
    return min != null ? new Date(min) : null;
  }
  get maxDate() {
    let max = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "max") {
        if (max === null || ch.value < max)
          max = ch.value;
      }
    }
    return max != null ? new Date(max) : null;
  }
};
ZodDate.create = (params) => {
  return new ZodDate({
    checks: [],
    coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
    typeName: ZodFirstPartyTypeKind.ZodDate,
    ...processCreateParams(params)
  });
};
var ZodSymbol2 = class extends ZodType2 {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.symbol) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.symbol,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
};
ZodSymbol2.create = (params) => {
  return new ZodSymbol2({
    typeName: ZodFirstPartyTypeKind.ZodSymbol,
    ...processCreateParams(params)
  });
};
var ZodUndefined2 = class extends ZodType2 {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.undefined) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.undefined,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
};
ZodUndefined2.create = (params) => {
  return new ZodUndefined2({
    typeName: ZodFirstPartyTypeKind.ZodUndefined,
    ...processCreateParams(params)
  });
};
var ZodNull2 = class extends ZodType2 {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.null) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.null,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
};
ZodNull2.create = (params) => {
  return new ZodNull2({
    typeName: ZodFirstPartyTypeKind.ZodNull,
    ...processCreateParams(params)
  });
};
var ZodAny2 = class extends ZodType2 {
  constructor() {
    super(...arguments);
    this._any = true;
  }
  _parse(input) {
    return OK(input.data);
  }
};
ZodAny2.create = (params) => {
  return new ZodAny2({
    typeName: ZodFirstPartyTypeKind.ZodAny,
    ...processCreateParams(params)
  });
};
var ZodUnknown2 = class extends ZodType2 {
  constructor() {
    super(...arguments);
    this._unknown = true;
  }
  _parse(input) {
    return OK(input.data);
  }
};
ZodUnknown2.create = (params) => {
  return new ZodUnknown2({
    typeName: ZodFirstPartyTypeKind.ZodUnknown,
    ...processCreateParams(params)
  });
};
var ZodNever2 = class extends ZodType2 {
  _parse(input) {
    const ctx = this._getOrReturnCtx(input);
    addIssueToContext(ctx, {
      code: ZodIssueCode.invalid_type,
      expected: ZodParsedType.never,
      received: ctx.parsedType
    });
    return INVALID;
  }
};
ZodNever2.create = (params) => {
  return new ZodNever2({
    typeName: ZodFirstPartyTypeKind.ZodNever,
    ...processCreateParams(params)
  });
};
var ZodVoid2 = class extends ZodType2 {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.undefined) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.void,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
};
ZodVoid2.create = (params) => {
  return new ZodVoid2({
    typeName: ZodFirstPartyTypeKind.ZodVoid,
    ...processCreateParams(params)
  });
};
var ZodArray = class _ZodArray2 extends ZodType2 {
  _parse(input) {
    const { ctx, status } = this._processInputParams(input);
    const def = this._def;
    if (ctx.parsedType !== ZodParsedType.array) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.array,
        received: ctx.parsedType
      });
      return INVALID;
    }
    if (def.exactLength !== null) {
      const tooBig = ctx.data.length > def.exactLength.value;
      const tooSmall = ctx.data.length < def.exactLength.value;
      if (tooBig || tooSmall) {
        addIssueToContext(ctx, {
          code: tooBig ? ZodIssueCode.too_big : ZodIssueCode.too_small,
          minimum: tooSmall ? def.exactLength.value : void 0,
          maximum: tooBig ? def.exactLength.value : void 0,
          type: "array",
          inclusive: true,
          exact: true,
          message: def.exactLength.message
        });
        status.dirty();
      }
    }
    if (def.minLength !== null) {
      if (ctx.data.length < def.minLength.value) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_small,
          minimum: def.minLength.value,
          type: "array",
          inclusive: true,
          exact: false,
          message: def.minLength.message
        });
        status.dirty();
      }
    }
    if (def.maxLength !== null) {
      if (ctx.data.length > def.maxLength.value) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_big,
          maximum: def.maxLength.value,
          type: "array",
          inclusive: true,
          exact: false,
          message: def.maxLength.message
        });
        status.dirty();
      }
    }
    if (ctx.common.async) {
      return Promise.all([...ctx.data].map((item, i) => {
        return def.type._parseAsync(new ParseInputLazyPath2(ctx, item, ctx.path, i));
      })).then((result2) => {
        return ParseStatus.mergeArray(status, result2);
      });
    }
    const result = [...ctx.data].map((item, i) => {
      return def.type._parseSync(new ParseInputLazyPath2(ctx, item, ctx.path, i));
    });
    return ParseStatus.mergeArray(status, result);
  }
  get element() {
    return this._def.type;
  }
  min(minLength, message) {
    return new _ZodArray2({
      ...this._def,
      minLength: { value: minLength, message: errorUtil.toString(message) }
    });
  }
  max(maxLength, message) {
    return new _ZodArray2({
      ...this._def,
      maxLength: { value: maxLength, message: errorUtil.toString(message) }
    });
  }
  length(len, message) {
    return new _ZodArray2({
      ...this._def,
      exactLength: { value: len, message: errorUtil.toString(message) }
    });
  }
  nonempty(message) {
    return this.min(1, message);
  }
};
ZodArray.create = (schema, params) => {
  return new ZodArray({
    type: schema,
    minLength: null,
    maxLength: null,
    exactLength: null,
    typeName: ZodFirstPartyTypeKind.ZodArray,
    ...processCreateParams(params)
  });
};
function deepPartialify(schema) {
  if (schema instanceof ZodObject) {
    const newShape = {};
    for (const key in schema.shape) {
      const fieldSchema = schema.shape[key];
      newShape[key] = ZodOptional2.create(deepPartialify(fieldSchema));
    }
    return new ZodObject({
      ...schema._def,
      shape: () => newShape
    });
  } else if (schema instanceof ZodArray) {
    return new ZodArray({
      ...schema._def,
      type: deepPartialify(schema.element)
    });
  } else if (schema instanceof ZodOptional2) {
    return ZodOptional2.create(deepPartialify(schema.unwrap()));
  } else if (schema instanceof ZodNullable2) {
    return ZodNullable2.create(deepPartialify(schema.unwrap()));
  } else if (schema instanceof ZodTuple) {
    return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));
  } else {
    return schema;
  }
}
var ZodObject = class _ZodObject2 extends ZodType2 {
  constructor() {
    super(...arguments);
    this._cached = null;
    this.nonstrict = this.passthrough;
    this.augment = this.extend;
  }
  _getCached() {
    if (this._cached !== null)
      return this._cached;
    const shape = this._def.shape();
    const keys = util.objectKeys(shape);
    return this._cached = { shape, keys };
  }
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.object) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.object,
        received: ctx2.parsedType
      });
      return INVALID;
    }
    const { status, ctx } = this._processInputParams(input);
    const { shape, keys: shapeKeys } = this._getCached();
    const extraKeys = [];
    if (!(this._def.catchall instanceof ZodNever2 && this._def.unknownKeys === "strip")) {
      for (const key in ctx.data) {
        if (!shapeKeys.includes(key)) {
          extraKeys.push(key);
        }
      }
    }
    const pairs = [];
    for (const key of shapeKeys) {
      const keyValidator = shape[key];
      const value = ctx.data[key];
      pairs.push({
        key: { status: "valid", value: key },
        value: keyValidator._parse(new ParseInputLazyPath2(ctx, value, ctx.path, key)),
        alwaysSet: key in ctx.data
      });
    }
    if (this._def.catchall instanceof ZodNever2) {
      const unknownKeys = this._def.unknownKeys;
      if (unknownKeys === "passthrough") {
        for (const key of extraKeys) {
          pairs.push({
            key: { status: "valid", value: key },
            value: { status: "valid", value: ctx.data[key] }
          });
        }
      } else if (unknownKeys === "strict") {
        if (extraKeys.length > 0) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.unrecognized_keys,
            keys: extraKeys
          });
          status.dirty();
        }
      } else if (unknownKeys === "strip")
        ;
      else {
        throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);
      }
    } else {
      const catchall = this._def.catchall;
      for (const key of extraKeys) {
        const value = ctx.data[key];
        pairs.push({
          key: { status: "valid", value: key },
          value: catchall._parse(
            new ParseInputLazyPath2(ctx, value, ctx.path, key)
            //, ctx.child(key), value, getParsedType(value)
          ),
          alwaysSet: key in ctx.data
        });
      }
    }
    if (ctx.common.async) {
      return Promise.resolve().then(async () => {
        const syncPairs = [];
        for (const pair of pairs) {
          const key = await pair.key;
          const value = await pair.value;
          syncPairs.push({
            key,
            value,
            alwaysSet: pair.alwaysSet
          });
        }
        return syncPairs;
      }).then((syncPairs) => {
        return ParseStatus.mergeObjectSync(status, syncPairs);
      });
    } else {
      return ParseStatus.mergeObjectSync(status, pairs);
    }
  }
  get shape() {
    return this._def.shape();
  }
  strict(message) {
    errorUtil.errToObj;
    return new _ZodObject2({
      ...this._def,
      unknownKeys: "strict",
      ...message !== void 0 ? {
        errorMap: (issue, ctx) => {
          var _a, _b, _c, _d;
          const defaultError = (_c = (_b = (_a = this._def).errorMap) === null || _b === void 0 ? void 0 : _b.call(_a, issue, ctx).message) !== null && _c !== void 0 ? _c : ctx.defaultError;
          if (issue.code === "unrecognized_keys")
            return {
              message: (_d = errorUtil.errToObj(message).message) !== null && _d !== void 0 ? _d : defaultError
            };
          return {
            message: defaultError
          };
        }
      } : {}
    });
  }
  strip() {
    return new _ZodObject2({
      ...this._def,
      unknownKeys: "strip"
    });
  }
  passthrough() {
    return new _ZodObject2({
      ...this._def,
      unknownKeys: "passthrough"
    });
  }
  // const AugmentFactory =
  //   <Def extends ZodObjectDef>(def: Def) =>
  //   <Augmentation extends ZodRawShape>(
  //     augmentation: Augmentation
  //   ): ZodObject<
  //     extendShape<ReturnType<Def["shape"]>, Augmentation>,
  //     Def["unknownKeys"],
  //     Def["catchall"]
  //   > => {
  //     return new ZodObject({
  //       ...def,
  //       shape: () => ({
  //         ...def.shape(),
  //         ...augmentation,
  //       }),
  //     }) as any;
  //   };
  extend(augmentation) {
    return new _ZodObject2({
      ...this._def,
      shape: () => ({
        ...this._def.shape(),
        ...augmentation
      })
    });
  }
  /**
   * Prior to zod@1.0.12 there was a bug in the
   * inferred type of merged objects. Please
   * upgrade if you are experiencing issues.
   */
  merge(merging) {
    const merged = new _ZodObject2({
      unknownKeys: merging._def.unknownKeys,
      catchall: merging._def.catchall,
      shape: () => ({
        ...this._def.shape(),
        ...merging._def.shape()
      }),
      typeName: ZodFirstPartyTypeKind.ZodObject
    });
    return merged;
  }
  // merge<
  //   Incoming extends AnyZodObject,
  //   Augmentation extends Incoming["shape"],
  //   NewOutput extends {
  //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation
  //       ? Augmentation[k]["_output"]
  //       : k extends keyof Output
  //       ? Output[k]
  //       : never;
  //   },
  //   NewInput extends {
  //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation
  //       ? Augmentation[k]["_input"]
  //       : k extends keyof Input
  //       ? Input[k]
  //       : never;
  //   }
  // >(
  //   merging: Incoming
  // ): ZodObject<
  //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
  //   Incoming["_def"]["unknownKeys"],
  //   Incoming["_def"]["catchall"],
  //   NewOutput,
  //   NewInput
  // > {
  //   const merged: any = new ZodObject({
  //     unknownKeys: merging._def.unknownKeys,
  //     catchall: merging._def.catchall,
  //     shape: () =>
  //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
  //     typeName: ZodFirstPartyTypeKind.ZodObject,
  //   }) as any;
  //   return merged;
  // }
  setKey(key, schema) {
    return this.augment({ [key]: schema });
  }
  // merge<Incoming extends AnyZodObject>(
  //   merging: Incoming
  // ): //ZodObject<T & Incoming["_shape"], UnknownKeys, Catchall> = (merging) => {
  // ZodObject<
  //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
  //   Incoming["_def"]["unknownKeys"],
  //   Incoming["_def"]["catchall"]
  // > {
  //   // const mergedShape = objectUtil.mergeShapes(
  //   //   this._def.shape(),
  //   //   merging._def.shape()
  //   // );
  //   const merged: any = new ZodObject({
  //     unknownKeys: merging._def.unknownKeys,
  //     catchall: merging._def.catchall,
  //     shape: () =>
  //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
  //     typeName: ZodFirstPartyTypeKind.ZodObject,
  //   }) as any;
  //   return merged;
  // }
  catchall(index) {
    return new _ZodObject2({
      ...this._def,
      catchall: index
    });
  }
  pick(mask) {
    const shape = {};
    util.objectKeys(mask).forEach((key) => {
      if (mask[key] && this.shape[key]) {
        shape[key] = this.shape[key];
      }
    });
    return new _ZodObject2({
      ...this._def,
      shape: () => shape
    });
  }
  omit(mask) {
    const shape = {};
    util.objectKeys(this.shape).forEach((key) => {
      if (!mask[key]) {
        shape[key] = this.shape[key];
      }
    });
    return new _ZodObject2({
      ...this._def,
      shape: () => shape
    });
  }
  /**
   * @deprecated
   */
  deepPartial() {
    return deepPartialify(this);
  }
  partial(mask) {
    const newShape = {};
    util.objectKeys(this.shape).forEach((key) => {
      const fieldSchema = this.shape[key];
      if (mask && !mask[key]) {
        newShape[key] = fieldSchema;
      } else {
        newShape[key] = fieldSchema.optional();
      }
    });
    return new _ZodObject2({
      ...this._def,
      shape: () => newShape
    });
  }
  required(mask) {
    const newShape = {};
    util.objectKeys(this.shape).forEach((key) => {
      if (mask && !mask[key]) {
        newShape[key] = this.shape[key];
      } else {
        const fieldSchema = this.shape[key];
        let newField = fieldSchema;
        while (newField instanceof ZodOptional2) {
          newField = newField._def.innerType;
        }
        newShape[key] = newField;
      }
    });
    return new _ZodObject2({
      ...this._def,
      shape: () => newShape
    });
  }
  keyof() {
    return createZodEnum(util.objectKeys(this.shape));
  }
};
ZodObject.create = (shape, params) => {
  return new ZodObject({
    shape: () => shape,
    unknownKeys: "strip",
    catchall: ZodNever2.create(),
    typeName: ZodFirstPartyTypeKind.ZodObject,
    ...processCreateParams(params)
  });
};
ZodObject.strictCreate = (shape, params) => {
  return new ZodObject({
    shape: () => shape,
    unknownKeys: "strict",
    catchall: ZodNever2.create(),
    typeName: ZodFirstPartyTypeKind.ZodObject,
    ...processCreateParams(params)
  });
};
ZodObject.lazycreate = (shape, params) => {
  return new ZodObject({
    shape,
    unknownKeys: "strip",
    catchall: ZodNever2.create(),
    typeName: ZodFirstPartyTypeKind.ZodObject,
    ...processCreateParams(params)
  });
};
var ZodUnion2 = class extends ZodType2 {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    const options = this._def.options;
    function handleResults(results) {
      for (const result of results) {
        if (result.result.status === "valid") {
          return result.result;
        }
      }
      for (const result of results) {
        if (result.result.status === "dirty") {
          ctx.common.issues.push(...result.ctx.common.issues);
          return result.result;
        }
      }
      const unionErrors = results.map((result) => new ZodError(result.ctx.common.issues));
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_union,
        unionErrors
      });
      return INVALID;
    }
    if (ctx.common.async) {
      return Promise.all(options.map(async (option) => {
        const childCtx = {
          ...ctx,
          common: {
            ...ctx.common,
            issues: []
          },
          parent: null
        };
        return {
          result: await option._parseAsync({
            data: ctx.data,
            path: ctx.path,
            parent: childCtx
          }),
          ctx: childCtx
        };
      })).then(handleResults);
    } else {
      let dirty = void 0;
      const issues = [];
      for (const option of options) {
        const childCtx = {
          ...ctx,
          common: {
            ...ctx.common,
            issues: []
          },
          parent: null
        };
        const result = option._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: childCtx
        });
        if (result.status === "valid") {
          return result;
        } else if (result.status === "dirty" && !dirty) {
          dirty = { result, ctx: childCtx };
        }
        if (childCtx.common.issues.length) {
          issues.push(childCtx.common.issues);
        }
      }
      if (dirty) {
        ctx.common.issues.push(...dirty.ctx.common.issues);
        return dirty.result;
      }
      const unionErrors = issues.map((issues2) => new ZodError(issues2));
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_union,
        unionErrors
      });
      return INVALID;
    }
  }
  get options() {
    return this._def.options;
  }
};
ZodUnion2.create = (types, params) => {
  return new ZodUnion2({
    options: types,
    typeName: ZodFirstPartyTypeKind.ZodUnion,
    ...processCreateParams(params)
  });
};
var getDiscriminator = (type) => {
  if (type instanceof ZodLazy2) {
    return getDiscriminator(type.schema);
  } else if (type instanceof ZodEffects2) {
    return getDiscriminator(type.innerType());
  } else if (type instanceof ZodLiteral2) {
    return [type.value];
  } else if (type instanceof ZodEnum) {
    return type.options;
  } else if (type instanceof ZodNativeEnum2) {
    return util.objectValues(type.enum);
  } else if (type instanceof ZodDefault2) {
    return getDiscriminator(type._def.innerType);
  } else if (type instanceof ZodUndefined2) {
    return [void 0];
  } else if (type instanceof ZodNull2) {
    return [null];
  } else if (type instanceof ZodOptional2) {
    return [void 0, ...getDiscriminator(type.unwrap())];
  } else if (type instanceof ZodNullable2) {
    return [null, ...getDiscriminator(type.unwrap())];
  } else if (type instanceof ZodBranded2) {
    return getDiscriminator(type.unwrap());
  } else if (type instanceof ZodReadonly2) {
    return getDiscriminator(type.unwrap());
  } else if (type instanceof ZodCatch2) {
    return getDiscriminator(type._def.innerType);
  } else {
    return [];
  }
};
var ZodDiscriminatedUnion = class _ZodDiscriminatedUnion2 extends ZodType2 {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.object) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.object,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const discriminator = this.discriminator;
    const discriminatorValue = ctx.data[discriminator];
    const option = this.optionsMap.get(discriminatorValue);
    if (!option) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_union_discriminator,
        options: Array.from(this.optionsMap.keys()),
        path: [discriminator]
      });
      return INVALID;
    }
    if (ctx.common.async) {
      return option._parseAsync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      });
    } else {
      return option._parseSync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      });
    }
  }
  get discriminator() {
    return this._def.discriminator;
  }
  get options() {
    return this._def.options;
  }
  get optionsMap() {
    return this._def.optionsMap;
  }
  /**
   * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.
   * However, it only allows a union of objects, all of which need to share a discriminator property. This property must
   * have a different value for each object in the union.
   * @param discriminator the name of the discriminator property
   * @param types an array of object schemas
   * @param params
   */
  static create(discriminator, options, params) {
    const optionsMap = /* @__PURE__ */ new Map();
    for (const type of options) {
      const discriminatorValues = getDiscriminator(type.shape[discriminator]);
      if (!discriminatorValues.length) {
        throw new Error(`A discriminator value for key \`${discriminator}\` could not be extracted from all schema options`);
      }
      for (const value of discriminatorValues) {
        if (optionsMap.has(value)) {
          throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);
        }
        optionsMap.set(value, type);
      }
    }
    return new _ZodDiscriminatedUnion2({
      typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,
      discriminator,
      options,
      optionsMap,
      ...processCreateParams(params)
    });
  }
};
function mergeValues(a, b) {
  const aType = getParsedType(a);
  const bType = getParsedType(b);
  if (a === b) {
    return { valid: true, data: a };
  } else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {
    const bKeys = util.objectKeys(b);
    const sharedKeys = util.objectKeys(a).filter((key) => bKeys.indexOf(key) !== -1);
    const newObj = { ...a, ...b };
    for (const key of sharedKeys) {
      const sharedValue = mergeValues(a[key], b[key]);
      if (!sharedValue.valid) {
        return { valid: false };
      }
      newObj[key] = sharedValue.data;
    }
    return { valid: true, data: newObj };
  } else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {
    if (a.length !== b.length) {
      return { valid: false };
    }
    const newArray = [];
    for (let index = 0; index < a.length; index++) {
      const itemA = a[index];
      const itemB = b[index];
      const sharedValue = mergeValues(itemA, itemB);
      if (!sharedValue.valid) {
        return { valid: false };
      }
      newArray.push(sharedValue.data);
    }
    return { valid: true, data: newArray };
  } else if (aType === ZodParsedType.date && bType === ZodParsedType.date && +a === +b) {
    return { valid: true, data: a };
  } else {
    return { valid: false };
  }
}
var ZodIntersection2 = class extends ZodType2 {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    const handleParsed = (parsedLeft, parsedRight) => {
      if (isAborted(parsedLeft) || isAborted(parsedRight)) {
        return INVALID;
      }
      const merged = mergeValues(parsedLeft.value, parsedRight.value);
      if (!merged.valid) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_intersection_types
        });
        return INVALID;
      }
      if (isDirty(parsedLeft) || isDirty(parsedRight)) {
        status.dirty();
      }
      return { status: status.value, value: merged.data };
    };
    if (ctx.common.async) {
      return Promise.all([
        this._def.left._parseAsync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        }),
        this._def.right._parseAsync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        })
      ]).then(([left, right]) => handleParsed(left, right));
    } else {
      return handleParsed(this._def.left._parseSync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      }), this._def.right._parseSync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      }));
    }
  }
};
ZodIntersection2.create = (left, right, params) => {
  return new ZodIntersection2({
    left,
    right,
    typeName: ZodFirstPartyTypeKind.ZodIntersection,
    ...processCreateParams(params)
  });
};
var ZodTuple = class _ZodTuple2 extends ZodType2 {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.array) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.array,
        received: ctx.parsedType
      });
      return INVALID;
    }
    if (ctx.data.length < this._def.items.length) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.too_small,
        minimum: this._def.items.length,
        inclusive: true,
        exact: false,
        type: "array"
      });
      return INVALID;
    }
    const rest = this._def.rest;
    if (!rest && ctx.data.length > this._def.items.length) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.too_big,
        maximum: this._def.items.length,
        inclusive: true,
        exact: false,
        type: "array"
      });
      status.dirty();
    }
    const items = [...ctx.data].map((item, itemIndex) => {
      const schema = this._def.items[itemIndex] || this._def.rest;
      if (!schema)
        return null;
      return schema._parse(new ParseInputLazyPath2(ctx, item, ctx.path, itemIndex));
    }).filter((x) => !!x);
    if (ctx.common.async) {
      return Promise.all(items).then((results) => {
        return ParseStatus.mergeArray(status, results);
      });
    } else {
      return ParseStatus.mergeArray(status, items);
    }
  }
  get items() {
    return this._def.items;
  }
  rest(rest) {
    return new _ZodTuple2({
      ...this._def,
      rest
    });
  }
};
ZodTuple.create = (schemas, params) => {
  if (!Array.isArray(schemas)) {
    throw new Error("You must pass an array of schemas to z.tuple([ ... ])");
  }
  return new ZodTuple({
    items: schemas,
    typeName: ZodFirstPartyTypeKind.ZodTuple,
    rest: null,
    ...processCreateParams(params)
  });
};
var ZodRecord = class _ZodRecord2 extends ZodType2 {
  get keySchema() {
    return this._def.keyType;
  }
  get valueSchema() {
    return this._def.valueType;
  }
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.object) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.object,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const pairs = [];
    const keyType = this._def.keyType;
    const valueType = this._def.valueType;
    for (const key in ctx.data) {
      pairs.push({
        key: keyType._parse(new ParseInputLazyPath2(ctx, key, ctx.path, key)),
        value: valueType._parse(new ParseInputLazyPath2(ctx, ctx.data[key], ctx.path, key)),
        alwaysSet: key in ctx.data
      });
    }
    if (ctx.common.async) {
      return ParseStatus.mergeObjectAsync(status, pairs);
    } else {
      return ParseStatus.mergeObjectSync(status, pairs);
    }
  }
  get element() {
    return this._def.valueType;
  }
  static create(first, second, third) {
    if (second instanceof ZodType2) {
      return new _ZodRecord2({
        keyType: first,
        valueType: second,
        typeName: ZodFirstPartyTypeKind.ZodRecord,
        ...processCreateParams(third)
      });
    }
    return new _ZodRecord2({
      keyType: ZodString.create(),
      valueType: first,
      typeName: ZodFirstPartyTypeKind.ZodRecord,
      ...processCreateParams(second)
    });
  }
};
var ZodMap2 = class extends ZodType2 {
  get keySchema() {
    return this._def.keyType;
  }
  get valueSchema() {
    return this._def.valueType;
  }
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.map) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.map,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const keyType = this._def.keyType;
    const valueType = this._def.valueType;
    const pairs = [...ctx.data.entries()].map(([key, value], index) => {
      return {
        key: keyType._parse(new ParseInputLazyPath2(ctx, key, ctx.path, [index, "key"])),
        value: valueType._parse(new ParseInputLazyPath2(ctx, value, ctx.path, [index, "value"]))
      };
    });
    if (ctx.common.async) {
      const finalMap = /* @__PURE__ */ new Map();
      return Promise.resolve().then(async () => {
        for (const pair of pairs) {
          const key = await pair.key;
          const value = await pair.value;
          if (key.status === "aborted" || value.status === "aborted") {
            return INVALID;
          }
          if (key.status === "dirty" || value.status === "dirty") {
            status.dirty();
          }
          finalMap.set(key.value, value.value);
        }
        return { status: status.value, value: finalMap };
      });
    } else {
      const finalMap = /* @__PURE__ */ new Map();
      for (const pair of pairs) {
        const key = pair.key;
        const value = pair.value;
        if (key.status === "aborted" || value.status === "aborted") {
          return INVALID;
        }
        if (key.status === "dirty" || value.status === "dirty") {
          status.dirty();
        }
        finalMap.set(key.value, value.value);
      }
      return { status: status.value, value: finalMap };
    }
  }
};
ZodMap2.create = (keyType, valueType, params) => {
  return new ZodMap2({
    valueType,
    keyType,
    typeName: ZodFirstPartyTypeKind.ZodMap,
    ...processCreateParams(params)
  });
};
var ZodSet = class _ZodSet2 extends ZodType2 {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.set) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.set,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const def = this._def;
    if (def.minSize !== null) {
      if (ctx.data.size < def.minSize.value) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_small,
          minimum: def.minSize.value,
          type: "set",
          inclusive: true,
          exact: false,
          message: def.minSize.message
        });
        status.dirty();
      }
    }
    if (def.maxSize !== null) {
      if (ctx.data.size > def.maxSize.value) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_big,
          maximum: def.maxSize.value,
          type: "set",
          inclusive: true,
          exact: false,
          message: def.maxSize.message
        });
        status.dirty();
      }
    }
    const valueType = this._def.valueType;
    function finalizeSet(elements2) {
      const parsedSet = /* @__PURE__ */ new Set();
      for (const element of elements2) {
        if (element.status === "aborted")
          return INVALID;
        if (element.status === "dirty")
          status.dirty();
        parsedSet.add(element.value);
      }
      return { status: status.value, value: parsedSet };
    }
    const elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath2(ctx, item, ctx.path, i)));
    if (ctx.common.async) {
      return Promise.all(elements).then((elements2) => finalizeSet(elements2));
    } else {
      return finalizeSet(elements);
    }
  }
  min(minSize, message) {
    return new _ZodSet2({
      ...this._def,
      minSize: { value: minSize, message: errorUtil.toString(message) }
    });
  }
  max(maxSize, message) {
    return new _ZodSet2({
      ...this._def,
      maxSize: { value: maxSize, message: errorUtil.toString(message) }
    });
  }
  size(size, message) {
    return this.min(size, message).max(size, message);
  }
  nonempty(message) {
    return this.min(1, message);
  }
};
ZodSet.create = (valueType, params) => {
  return new ZodSet({
    valueType,
    minSize: null,
    maxSize: null,
    typeName: ZodFirstPartyTypeKind.ZodSet,
    ...processCreateParams(params)
  });
};
var ZodFunction = class _ZodFunction2 extends ZodType2 {
  constructor() {
    super(...arguments);
    this.validate = this.implement;
  }
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.function) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.function,
        received: ctx.parsedType
      });
      return INVALID;
    }
    function makeArgsIssue(args, error) {
      return makeIssue({
        data: args,
        path: ctx.path,
        errorMaps: [
          ctx.common.contextualErrorMap,
          ctx.schemaErrorMap,
          getErrorMap(),
          errorMap
        ].filter((x) => !!x),
        issueData: {
          code: ZodIssueCode.invalid_arguments,
          argumentsError: error
        }
      });
    }
    function makeReturnsIssue(returns, error) {
      return makeIssue({
        data: returns,
        path: ctx.path,
        errorMaps: [
          ctx.common.contextualErrorMap,
          ctx.schemaErrorMap,
          getErrorMap(),
          errorMap
        ].filter((x) => !!x),
        issueData: {
          code: ZodIssueCode.invalid_return_type,
          returnTypeError: error
        }
      });
    }
    const params = { errorMap: ctx.common.contextualErrorMap };
    const fn = ctx.data;
    if (this._def.returns instanceof ZodPromise2) {
      const me = this;
      return OK(async function(...args) {
        const error = new ZodError([]);
        const parsedArgs = await me._def.args.parseAsync(args, params).catch((e) => {
          error.addIssue(makeArgsIssue(args, e));
          throw error;
        });
        const result = await Reflect.apply(fn, this, parsedArgs);
        const parsedReturns = await me._def.returns._def.type.parseAsync(result, params).catch((e) => {
          error.addIssue(makeReturnsIssue(result, e));
          throw error;
        });
        return parsedReturns;
      });
    } else {
      const me = this;
      return OK(function(...args) {
        const parsedArgs = me._def.args.safeParse(args, params);
        if (!parsedArgs.success) {
          throw new ZodError([makeArgsIssue(args, parsedArgs.error)]);
        }
        const result = Reflect.apply(fn, this, parsedArgs.data);
        const parsedReturns = me._def.returns.safeParse(result, params);
        if (!parsedReturns.success) {
          throw new ZodError([makeReturnsIssue(result, parsedReturns.error)]);
        }
        return parsedReturns.data;
      });
    }
  }
  parameters() {
    return this._def.args;
  }
  returnType() {
    return this._def.returns;
  }
  args(...items) {
    return new _ZodFunction2({
      ...this._def,
      args: ZodTuple.create(items).rest(ZodUnknown2.create())
    });
  }
  returns(returnType) {
    return new _ZodFunction2({
      ...this._def,
      returns: returnType
    });
  }
  implement(func) {
    const validatedFunc = this.parse(func);
    return validatedFunc;
  }
  strictImplement(func) {
    const validatedFunc = this.parse(func);
    return validatedFunc;
  }
  static create(args, returns, params) {
    return new _ZodFunction2({
      args: args ? args : ZodTuple.create([]).rest(ZodUnknown2.create()),
      returns: returns || ZodUnknown2.create(),
      typeName: ZodFirstPartyTypeKind.ZodFunction,
      ...processCreateParams(params)
    });
  }
};
var ZodLazy2 = class extends ZodType2 {
  get schema() {
    return this._def.getter();
  }
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    const lazySchema = this._def.getter();
    return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });
  }
};
ZodLazy2.create = (getter, params) => {
  return new ZodLazy2({
    getter,
    typeName: ZodFirstPartyTypeKind.ZodLazy,
    ...processCreateParams(params)
  });
};
var ZodLiteral2 = class extends ZodType2 {
  _parse(input) {
    if (input.data !== this._def.value) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        received: ctx.data,
        code: ZodIssueCode.invalid_literal,
        expected: this._def.value
      });
      return INVALID;
    }
    return { status: "valid", value: input.data };
  }
  get value() {
    return this._def.value;
  }
};
ZodLiteral2.create = (value, params) => {
  return new ZodLiteral2({
    value,
    typeName: ZodFirstPartyTypeKind.ZodLiteral,
    ...processCreateParams(params)
  });
};
function createZodEnum(values, params) {
  return new ZodEnum({
    values,
    typeName: ZodFirstPartyTypeKind.ZodEnum,
    ...processCreateParams(params)
  });
}
var ZodEnum = class _ZodEnum2 extends ZodType2 {
  constructor() {
    super(...arguments);
    _ZodEnum_cache.set(this, void 0);
  }
  _parse(input) {
    if (typeof input.data !== "string") {
      const ctx = this._getOrReturnCtx(input);
      const expectedValues = this._def.values;
      addIssueToContext(ctx, {
        expected: util.joinValues(expectedValues),
        received: ctx.parsedType,
        code: ZodIssueCode.invalid_type
      });
      return INVALID;
    }
    if (!__classPrivateFieldGet(this, _ZodEnum_cache)) {
      __classPrivateFieldSet(this, _ZodEnum_cache, new Set(this._def.values));
    }
    if (!__classPrivateFieldGet(this, _ZodEnum_cache).has(input.data)) {
      const ctx = this._getOrReturnCtx(input);
      const expectedValues = this._def.values;
      addIssueToContext(ctx, {
        received: ctx.data,
        code: ZodIssueCode.invalid_enum_value,
        options: expectedValues
      });
      return INVALID;
    }
    return OK(input.data);
  }
  get options() {
    return this._def.values;
  }
  get enum() {
    const enumValues = {};
    for (const val of this._def.values) {
      enumValues[val] = val;
    }
    return enumValues;
  }
  get Values() {
    const enumValues = {};
    for (const val of this._def.values) {
      enumValues[val] = val;
    }
    return enumValues;
  }
  get Enum() {
    const enumValues = {};
    for (const val of this._def.values) {
      enumValues[val] = val;
    }
    return enumValues;
  }
  extract(values, newDef = this._def) {
    return _ZodEnum2.create(values, {
      ...this._def,
      ...newDef
    });
  }
  exclude(values, newDef = this._def) {
    return _ZodEnum2.create(this.options.filter((opt) => !values.includes(opt)), {
      ...this._def,
      ...newDef
    });
  }
};
_ZodEnum_cache = /* @__PURE__ */ new WeakMap();
ZodEnum.create = createZodEnum;
var ZodNativeEnum2 = class extends ZodType2 {
  constructor() {
    super(...arguments);
    _ZodNativeEnum_cache.set(this, void 0);
  }
  _parse(input) {
    const nativeEnumValues = util.getValidEnumValues(this._def.values);
    const ctx = this._getOrReturnCtx(input);
    if (ctx.parsedType !== ZodParsedType.string && ctx.parsedType !== ZodParsedType.number) {
      const expectedValues = util.objectValues(nativeEnumValues);
      addIssueToContext(ctx, {
        expected: util.joinValues(expectedValues),
        received: ctx.parsedType,
        code: ZodIssueCode.invalid_type
      });
      return INVALID;
    }
    if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache)) {
      __classPrivateFieldSet(this, _ZodNativeEnum_cache, new Set(util.getValidEnumValues(this._def.values)));
    }
    if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache).has(input.data)) {
      const expectedValues = util.objectValues(nativeEnumValues);
      addIssueToContext(ctx, {
        received: ctx.data,
        code: ZodIssueCode.invalid_enum_value,
        options: expectedValues
      });
      return INVALID;
    }
    return OK(input.data);
  }
  get enum() {
    return this._def.values;
  }
};
_ZodNativeEnum_cache = /* @__PURE__ */ new WeakMap();
ZodNativeEnum2.create = (values, params) => {
  return new ZodNativeEnum2({
    values,
    typeName: ZodFirstPartyTypeKind.ZodNativeEnum,
    ...processCreateParams(params)
  });
};
var ZodPromise2 = class extends ZodType2 {
  unwrap() {
    return this._def.type;
  }
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.promise && ctx.common.async === false) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.promise,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const promisified = ctx.parsedType === ZodParsedType.promise ? ctx.data : Promise.resolve(ctx.data);
    return OK(promisified.then((data) => {
      return this._def.type.parseAsync(data, {
        path: ctx.path,
        errorMap: ctx.common.contextualErrorMap
      });
    }));
  }
};
ZodPromise2.create = (schema, params) => {
  return new ZodPromise2({
    type: schema,
    typeName: ZodFirstPartyTypeKind.ZodPromise,
    ...processCreateParams(params)
  });
};
var ZodEffects2 = class extends ZodType2 {
  innerType() {
    return this._def.schema;
  }
  sourceType() {
    return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects ? this._def.schema.sourceType() : this._def.schema;
  }
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    const effect = this._def.effect || null;
    const checkCtx = {
      addIssue: (arg) => {
        addIssueToContext(ctx, arg);
        if (arg.fatal) {
          status.abort();
        } else {
          status.dirty();
        }
      },
      get path() {
        return ctx.path;
      }
    };
    checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);
    if (effect.type === "preprocess") {
      const processed = effect.transform(ctx.data, checkCtx);
      if (ctx.common.async) {
        return Promise.resolve(processed).then(async (processed2) => {
          if (status.value === "aborted")
            return INVALID;
          const result = await this._def.schema._parseAsync({
            data: processed2,
            path: ctx.path,
            parent: ctx
          });
          if (result.status === "aborted")
            return INVALID;
          if (result.status === "dirty")
            return DIRTY(result.value);
          if (status.value === "dirty")
            return DIRTY(result.value);
          return result;
        });
      } else {
        if (status.value === "aborted")
          return INVALID;
        const result = this._def.schema._parseSync({
          data: processed,
          path: ctx.path,
          parent: ctx
        });
        if (result.status === "aborted")
          return INVALID;
        if (result.status === "dirty")
          return DIRTY(result.value);
        if (status.value === "dirty")
          return DIRTY(result.value);
        return result;
      }
    }
    if (effect.type === "refinement") {
      const executeRefinement = (acc) => {
        const result = effect.refinement(acc, checkCtx);
        if (ctx.common.async) {
          return Promise.resolve(result);
        }
        if (result instanceof Promise) {
          throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
        }
        return acc;
      };
      if (ctx.common.async === false) {
        const inner = this._def.schema._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
        if (inner.status === "aborted")
          return INVALID;
        if (inner.status === "dirty")
          status.dirty();
        executeRefinement(inner.value);
        return { status: status.value, value: inner.value };
      } else {
        return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((inner) => {
          if (inner.status === "aborted")
            return INVALID;
          if (inner.status === "dirty")
            status.dirty();
          return executeRefinement(inner.value).then(() => {
            return { status: status.value, value: inner.value };
          });
        });
      }
    }
    if (effect.type === "transform") {
      if (ctx.common.async === false) {
        const base = this._def.schema._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
        if (!isValid(base))
          return base;
        const result = effect.transform(base.value, checkCtx);
        if (result instanceof Promise) {
          throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);
        }
        return { status: status.value, value: result };
      } else {
        return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((base) => {
          if (!isValid(base))
            return base;
          return Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({ status: status.value, value: result }));
        });
      }
    }
    util.assertNever(effect);
  }
};
ZodEffects2.create = (schema, effect, params) => {
  return new ZodEffects2({
    schema,
    typeName: ZodFirstPartyTypeKind.ZodEffects,
    effect,
    ...processCreateParams(params)
  });
};
ZodEffects2.createWithPreprocess = (preprocess, schema, params) => {
  return new ZodEffects2({
    schema,
    effect: { type: "preprocess", transform: preprocess },
    typeName: ZodFirstPartyTypeKind.ZodEffects,
    ...processCreateParams(params)
  });
};
var ZodOptional2 = class extends ZodType2 {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType === ZodParsedType.undefined) {
      return OK(void 0);
    }
    return this._def.innerType._parse(input);
  }
  unwrap() {
    return this._def.innerType;
  }
};
ZodOptional2.create = (type, params) => {
  return new ZodOptional2({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodOptional,
    ...processCreateParams(params)
  });
};
var ZodNullable2 = class extends ZodType2 {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType === ZodParsedType.null) {
      return OK(null);
    }
    return this._def.innerType._parse(input);
  }
  unwrap() {
    return this._def.innerType;
  }
};
ZodNullable2.create = (type, params) => {
  return new ZodNullable2({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodNullable,
    ...processCreateParams(params)
  });
};
var ZodDefault2 = class extends ZodType2 {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    let data = ctx.data;
    if (ctx.parsedType === ZodParsedType.undefined) {
      data = this._def.defaultValue();
    }
    return this._def.innerType._parse({
      data,
      path: ctx.path,
      parent: ctx
    });
  }
  removeDefault() {
    return this._def.innerType;
  }
};
ZodDefault2.create = (type, params) => {
  return new ZodDefault2({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodDefault,
    defaultValue: typeof params.default === "function" ? params.default : () => params.default,
    ...processCreateParams(params)
  });
};
var ZodCatch2 = class extends ZodType2 {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    const newCtx = {
      ...ctx,
      common: {
        ...ctx.common,
        issues: []
      }
    };
    const result = this._def.innerType._parse({
      data: newCtx.data,
      path: newCtx.path,
      parent: {
        ...newCtx
      }
    });
    if (isAsync(result)) {
      return result.then((result2) => {
        return {
          status: "valid",
          value: result2.status === "valid" ? result2.value : this._def.catchValue({
            get error() {
              return new ZodError(newCtx.common.issues);
            },
            input: newCtx.data
          })
        };
      });
    } else {
      return {
        status: "valid",
        value: result.status === "valid" ? result.value : this._def.catchValue({
          get error() {
            return new ZodError(newCtx.common.issues);
          },
          input: newCtx.data
        })
      };
    }
  }
  removeCatch() {
    return this._def.innerType;
  }
};
ZodCatch2.create = (type, params) => {
  return new ZodCatch2({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodCatch,
    catchValue: typeof params.catch === "function" ? params.catch : () => params.catch,
    ...processCreateParams(params)
  });
};
var ZodNaN2 = class extends ZodType2 {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.nan) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.nan,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return { status: "valid", value: input.data };
  }
};
ZodNaN2.create = (params) => {
  return new ZodNaN2({
    typeName: ZodFirstPartyTypeKind.ZodNaN,
    ...processCreateParams(params)
  });
};
var BRAND = Symbol("zod_brand");
var ZodBranded2 = class extends ZodType2 {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    const data = ctx.data;
    return this._def.type._parse({
      data,
      path: ctx.path,
      parent: ctx
    });
  }
  unwrap() {
    return this._def.type;
  }
};
var ZodPipeline = class _ZodPipeline2 extends ZodType2 {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.common.async) {
      const handleAsync = async () => {
        const inResult = await this._def.in._parseAsync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
        if (inResult.status === "aborted")
          return INVALID;
        if (inResult.status === "dirty") {
          status.dirty();
          return DIRTY(inResult.value);
        } else {
          return this._def.out._parseAsync({
            data: inResult.value,
            path: ctx.path,
            parent: ctx
          });
        }
      };
      return handleAsync();
    } else {
      const inResult = this._def.in._parseSync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      });
      if (inResult.status === "aborted")
        return INVALID;
      if (inResult.status === "dirty") {
        status.dirty();
        return {
          status: "dirty",
          value: inResult.value
        };
      } else {
        return this._def.out._parseSync({
          data: inResult.value,
          path: ctx.path,
          parent: ctx
        });
      }
    }
  }
  static create(a, b) {
    return new _ZodPipeline2({
      in: a,
      out: b,
      typeName: ZodFirstPartyTypeKind.ZodPipeline
    });
  }
};
var ZodReadonly2 = class extends ZodType2 {
  _parse(input) {
    const result = this._def.innerType._parse(input);
    const freeze = (data) => {
      if (isValid(data)) {
        data.value = Object.freeze(data.value);
      }
      return data;
    };
    return isAsync(result) ? result.then((data) => freeze(data)) : freeze(result);
  }
  unwrap() {
    return this._def.innerType;
  }
};
ZodReadonly2.create = (type, params) => {
  return new ZodReadonly2({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodReadonly,
    ...processCreateParams(params)
  });
};
function custom(check, params = {}, fatal) {
  if (check)
    return ZodAny2.create().superRefine((data, ctx) => {
      var _a, _b;
      if (!check(data)) {
        const p = typeof params === "function" ? params(data) : typeof params === "string" ? { message: params } : params;
        const _fatal = (_b = (_a = p.fatal) !== null && _a !== void 0 ? _a : fatal) !== null && _b !== void 0 ? _b : true;
        const p2 = typeof p === "string" ? { message: p } : p;
        ctx.addIssue({ code: "custom", ...p2, fatal: _fatal });
      }
    });
  return ZodAny2.create();
}
var late = {
  object: ZodObject.lazycreate
};
var ZodFirstPartyTypeKind;
(function(ZodFirstPartyTypeKind2) {
  ZodFirstPartyTypeKind2["ZodString"] = "ZodString";
  ZodFirstPartyTypeKind2["ZodNumber"] = "ZodNumber";
  ZodFirstPartyTypeKind2["ZodNaN"] = "ZodNaN";
  ZodFirstPartyTypeKind2["ZodBigInt"] = "ZodBigInt";
  ZodFirstPartyTypeKind2["ZodBoolean"] = "ZodBoolean";
  ZodFirstPartyTypeKind2["ZodDate"] = "ZodDate";
  ZodFirstPartyTypeKind2["ZodSymbol"] = "ZodSymbol";
  ZodFirstPartyTypeKind2["ZodUndefined"] = "ZodUndefined";
  ZodFirstPartyTypeKind2["ZodNull"] = "ZodNull";
  ZodFirstPartyTypeKind2["ZodAny"] = "ZodAny";
  ZodFirstPartyTypeKind2["ZodUnknown"] = "ZodUnknown";
  ZodFirstPartyTypeKind2["ZodNever"] = "ZodNever";
  ZodFirstPartyTypeKind2["ZodVoid"] = "ZodVoid";
  ZodFirstPartyTypeKind2["ZodArray"] = "ZodArray";
  ZodFirstPartyTypeKind2["ZodObject"] = "ZodObject";
  ZodFirstPartyTypeKind2["ZodUnion"] = "ZodUnion";
  ZodFirstPartyTypeKind2["ZodDiscriminatedUnion"] = "ZodDiscriminatedUnion";
  ZodFirstPartyTypeKind2["ZodIntersection"] = "ZodIntersection";
  ZodFirstPartyTypeKind2["ZodTuple"] = "ZodTuple";
  ZodFirstPartyTypeKind2["ZodRecord"] = "ZodRecord";
  ZodFirstPartyTypeKind2["ZodMap"] = "ZodMap";
  ZodFirstPartyTypeKind2["ZodSet"] = "ZodSet";
  ZodFirstPartyTypeKind2["ZodFunction"] = "ZodFunction";
  ZodFirstPartyTypeKind2["ZodLazy"] = "ZodLazy";
  ZodFirstPartyTypeKind2["ZodLiteral"] = "ZodLiteral";
  ZodFirstPartyTypeKind2["ZodEnum"] = "ZodEnum";
  ZodFirstPartyTypeKind2["ZodEffects"] = "ZodEffects";
  ZodFirstPartyTypeKind2["ZodNativeEnum"] = "ZodNativeEnum";
  ZodFirstPartyTypeKind2["ZodOptional"] = "ZodOptional";
  ZodFirstPartyTypeKind2["ZodNullable"] = "ZodNullable";
  ZodFirstPartyTypeKind2["ZodDefault"] = "ZodDefault";
  ZodFirstPartyTypeKind2["ZodCatch"] = "ZodCatch";
  ZodFirstPartyTypeKind2["ZodPromise"] = "ZodPromise";
  ZodFirstPartyTypeKind2["ZodBranded"] = "ZodBranded";
  ZodFirstPartyTypeKind2["ZodPipeline"] = "ZodPipeline";
  ZodFirstPartyTypeKind2["ZodReadonly"] = "ZodReadonly";
})(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));
var instanceOfType = (cls, params = {
  message: `Input not instance of ${cls.name}`
}) => custom((data) => data instanceof cls, params);
var stringType = ZodString.create;
var numberType = ZodNumber.create;
var nanType = ZodNaN2.create;
var bigIntType = ZodBigInt.create;
var booleanType = ZodBoolean2.create;
var dateType = ZodDate.create;
var symbolType = ZodSymbol2.create;
var undefinedType = ZodUndefined2.create;
var nullType = ZodNull2.create;
var anyType = ZodAny2.create;
var unknownType = ZodUnknown2.create;
var neverType = ZodNever2.create;
var voidType = ZodVoid2.create;
var arrayType = ZodArray.create;
var objectType = ZodObject.create;
var strictObjectType = ZodObject.strictCreate;
var unionType = ZodUnion2.create;
var discriminatedUnionType = ZodDiscriminatedUnion.create;
var intersectionType = ZodIntersection2.create;
var tupleType = ZodTuple.create;
var recordType = ZodRecord.create;
var mapType = ZodMap2.create;
var setType = ZodSet.create;
var functionType = ZodFunction.create;
var lazyType = ZodLazy2.create;
var literalType = ZodLiteral2.create;
var enumType = ZodEnum.create;
var nativeEnumType = ZodNativeEnum2.create;
var promiseType = ZodPromise2.create;
var effectsType = ZodEffects2.create;
var optionalType = ZodOptional2.create;
var nullableType = ZodNullable2.create;
var preprocessType = ZodEffects2.createWithPreprocess;
var pipelineType = ZodPipeline.create;
var ostring = () => stringType().optional();
var onumber = () => numberType().optional();
var oboolean = () => booleanType().optional();
var coerce = {
  string: (arg) => ZodString.create({ ...arg, coerce: true }),
  number: (arg) => ZodNumber.create({ ...arg, coerce: true }),
  boolean: (arg) => ZodBoolean2.create({
    ...arg,
    coerce: true
  }),
  bigint: (arg) => ZodBigInt.create({ ...arg, coerce: true }),
  date: (arg) => ZodDate.create({ ...arg, coerce: true })
};
var NEVER = INVALID;
var z = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  defaultErrorMap: errorMap,
  setErrorMap,
  getErrorMap,
  makeIssue,
  EMPTY_PATH,
  addIssueToContext,
  ParseStatus,
  INVALID,
  DIRTY,
  OK,
  isAborted,
  isDirty,
  isValid,
  isAsync,
  get util() {
    return util;
  },
  get objectUtil() {
    return objectUtil;
  },
  ZodParsedType,
  getParsedType,
  ZodType: ZodType2,
  datetimeRegex,
  ZodString,
  ZodNumber,
  ZodBigInt,
  ZodBoolean: ZodBoolean2,
  ZodDate,
  ZodSymbol: ZodSymbol2,
  ZodUndefined: ZodUndefined2,
  ZodNull: ZodNull2,
  ZodAny: ZodAny2,
  ZodUnknown: ZodUnknown2,
  ZodNever: ZodNever2,
  ZodVoid: ZodVoid2,
  ZodArray,
  ZodObject,
  ZodUnion: ZodUnion2,
  ZodDiscriminatedUnion,
  ZodIntersection: ZodIntersection2,
  ZodTuple,
  ZodRecord,
  ZodMap: ZodMap2,
  ZodSet,
  ZodFunction,
  ZodLazy: ZodLazy2,
  ZodLiteral: ZodLiteral2,
  ZodEnum,
  ZodNativeEnum: ZodNativeEnum2,
  ZodPromise: ZodPromise2,
  ZodEffects: ZodEffects2,
  ZodTransformer: ZodEffects2,
  ZodOptional: ZodOptional2,
  ZodNullable: ZodNullable2,
  ZodDefault: ZodDefault2,
  ZodCatch: ZodCatch2,
  ZodNaN: ZodNaN2,
  BRAND,
  ZodBranded: ZodBranded2,
  ZodPipeline,
  ZodReadonly: ZodReadonly2,
  custom,
  Schema: ZodType2,
  ZodSchema: ZodType2,
  late,
  get ZodFirstPartyTypeKind() {
    return ZodFirstPartyTypeKind;
  },
  coerce,
  any: anyType,
  array: arrayType,
  bigint: bigIntType,
  boolean: booleanType,
  date: dateType,
  discriminatedUnion: discriminatedUnionType,
  effect: effectsType,
  "enum": enumType,
  "function": functionType,
  "instanceof": instanceOfType,
  intersection: intersectionType,
  lazy: lazyType,
  literal: literalType,
  map: mapType,
  nan: nanType,
  nativeEnum: nativeEnumType,
  never: neverType,
  "null": nullType,
  nullable: nullableType,
  number: numberType,
  object: objectType,
  oboolean,
  onumber,
  optional: optionalType,
  ostring,
  pipeline: pipelineType,
  preprocess: preprocessType,
  promise: promiseType,
  record: recordType,
  set: setType,
  strictObject: strictObjectType,
  string: stringType,
  symbol: symbolType,
  transformer: effectsType,
  tuple: tupleType,
  "undefined": undefinedType,
  union: unionType,
  unknown: unknownType,
  "void": voidType,
  NEVER,
  ZodIssueCode,
  quotelessJson,
  ZodError
});
var isZodObjectStrict = (obj) => {
  return typeof (obj === null || obj === void 0 ? void 0 : obj.passthrough) === "function";
};
var zodMerge = (objectA, objectB) => {
  if (isZodObjectStrict(objectA)) {
    if (isZodObjectStrict(objectB)) {
      return objectA.merge(objectB);
    }
    return objectA;
  }
  if (isZodObjectStrict(objectB)) {
    return objectB;
  }
  return Object.assign({}, objectA, objectB);
};
z.object({
  name: z.literal("ZodError"),
  issues: z.array(z.object({
    path: z.array(z.union([z.string(), z.number()])),
    message: z.string().optional(),
    code: z.nativeEnum(z.ZodIssueCode)
  }).catchall(z.any()))
});
var ContractNoBody = Symbol("ContractNoBody");
var isAppRoute = (obj) => {
  return "method" in obj && "path" in obj;
};
var recursivelyApplyOptions = (router, options) => {
  return Object.fromEntries(Object.entries(router).map(([key, value]) => {
    var _a, _b, _c;
    if (isAppRoute(value)) {
      return [
        key,
        {
          ...value,
          path: (options === null || options === void 0 ? void 0 : options.pathPrefix) ? options.pathPrefix + value.path : value.path,
          headers: zodMerge(options === null || options === void 0 ? void 0 : options.baseHeaders, value.headers),
          strictStatusCodes: (_a = value.strictStatusCodes) !== null && _a !== void 0 ? _a : options === null || options === void 0 ? void 0 : options.strictStatusCodes,
          validateResponseOnClient: (_b = value.validateResponseOnClient) !== null && _b !== void 0 ? _b : options === null || options === void 0 ? void 0 : options.validateResponseOnClient,
          responses: {
            ...options === null || options === void 0 ? void 0 : options.commonResponses,
            ...value.responses
          },
          metadata: (options === null || options === void 0 ? void 0 : options.metadata) ? {
            ...options === null || options === void 0 ? void 0 : options.metadata,
            ...(_c = value.metadata) !== null && _c !== void 0 ? _c : {}
          } : value.metadata
        }
      ];
    } else {
      return [key, recursivelyApplyOptions(value, options)];
    }
  }));
};
var ContractPlainTypeRuntimeSymbol = Symbol("ContractPlainType");
var initContract = () => {
  return {
    // @ts-expect-error - this is a type error, but it's not clear how to fix it
    router: (endpoints, options) => recursivelyApplyOptions(endpoints, options),
    query: (args) => args,
    mutation: (args) => args,
    responses: (args) => args,
    response: () => ContractPlainTypeRuntimeSymbol,
    body: () => ContractPlainTypeRuntimeSymbol,
    type: () => ContractPlainTypeRuntimeSymbol,
    otherResponse: ({ contentType, body }) => ({
      contentType,
      body
    }),
    noBody: () => ContractNoBody
  };
};
var c = initContract();
var userContract = c.router({
  createUser: {
    method: "POST",
    path: "/users",
    responses: {
      201: zod_exports.UserSchema,
      400: z.object({ message: z.string() })
    },
    body: zod_exports.UserCreateWithoutRestaurantInputSchema,
    summary: "Create a new user"
  },
  getUsers: {
    method: "GET",
    path: "/users",
    responses: {
      200: z.array(zod_exports.UserSchema),
      404: z.object({ message: z.string() })
    },
    query: z.object({
      skip: z.string().optional(),
      take: z.string().optional(),
      orderBy: z.string().optional()
    }),
    summary: "Get all users"
  },
  getUser: {
    method: "GET",
    path: "/users/:id",
    pathParams: z.object({
      id: z.coerce.number()
    }),
    responses: {
      200: zod_exports.UserSchema,
      404: z.object({ message: z.string() })
    },
    summary: "Get a user by ID"
  },
  updateUser: {
    method: "PUT",
    path: "/users/:id",
    pathParams: z.object({
      id: z.coerce.number()
    }),
    responses: {
      200: zod_exports.UserSchema,
      404: z.object({ message: z.string() })
    },
    body: zod_exports.UserUpdateInputSchema,
    summary: "Update a user"
  },
  deleteUser: {
    method: "DELETE",
    path: "/users/:id",
    pathParams: z.object({
      id: z.coerce.number()
    }),
    responses: {
      200: zod_exports.UserSchema,
      404: z.object({ message: z.string() })
    },
    summary: "Delete a user"
  }
});
var c2 = initContract();
var organizationContract = c2.router({
  createOrganization: {
    method: "POST",
    path: "/organizations",
    responses: {
      201: OrganizationSchema,
      400: z.object({ message: z.string() })
    },
    body: OrganizationCreateSchema,
    summary: "Create a new organization"
  },
  getOrganizations: {
    method: "GET",
    path: "/organizations",
    responses: {
      200: z.array(OrganizationSchema)
    },
    query: z.object({
      skip: z.string().optional(),
      take: z.string().optional(),
      orderBy: z.string().optional()
    }),
    summary: "Get all organizations"
  },
  getOrganization: {
    method: "GET",
    path: "/organizations/:id",
    pathParams: z.object({
      id: z.coerce.number()
    }),
    responses: {
      200: OrganizationSchema,
      404: z.object({ message: z.string() })
    },
    summary: "Get an organization by ID"
  },
  updateOrganization: {
    method: "PUT",
    path: "/organizations/:id",
    pathParams: z.object({
      id: z.coerce.number()
    }),
    responses: {
      200: OrganizationSchema,
      404: z.object({ message: z.string() })
    },
    body: OrganizationUpdateSchema,
    summary: "Update an organization"
  },
  deleteOrganization: {
    method: "DELETE",
    path: "/organizations/:id",
    pathParams: z.object({
      id: z.coerce.number()
    }),
    responses: {
      200: OrganizationSchema,
      404: z.object({ message: z.string() })
    },
    summary: "Delete an organization"
  }
});
var c3 = initContract();
var orderContract = c3.router({
  createOrder: {
    method: "POST",
    path: "/orders",
    responses: {
      201: zod_exports.OrderSchema,
      400: z.object({ message: z.string() })
    },
    body: zod_exports.OrderUncheckedCreateInputSchema,
    summary: "Create a new order"
  },
  getOrders: {
    method: "GET",
    path: "/orders",
    responses: {
      200: z.array(zod_exports.OrderSchema)
    },
    query: z.object({
      skip: z.coerce.number().optional(),
      take: z.coerce.number().optional(),
      orderBy: z.string().optional(),
      restaurantId: z.coerce.number().optional(),
      vendorId: z.coerce.number().optional(),
      status: z.enum(["PENDING", "APPROVED", "ORDERED", "RECEIVED", "CANCELLED"]).optional()
    }),
    summary: "Get all orders"
  },
  getOrder: {
    method: "GET",
    path: "/orders/:id",
    pathParams: z.object({
      id: z.coerce.number()
    }),
    responses: {
      200: zod_exports.OrderSchema,
      404: z.object({ message: z.string() })
    },
    summary: "Get an order by ID"
  },
  updateOrder: {
    method: "PUT",
    path: "/orders/:id",
    pathParams: z.object({
      id: z.coerce.number()
    }),
    responses: {
      200: zod_exports.OrderSchema,
      404: z.object({ message: z.string() })
    },
    body: zod_exports.OrderUncheckedUpdateInputSchema,
    summary: "Update an order"
  },
  deleteOrder: {
    method: "DELETE",
    path: "/orders/:id",
    pathParams: z.object({
      id: z.coerce.number()
    }),
    responses: {
      200: zod_exports.OrderSchema,
      404: z.object({ message: z.string() })
    },
    summary: "Delete an order"
  }
});
var UserRoleEnum = z.enum(["ADMIN", "MANAGER", "CHEF", "STAFF"]);
var UserSchema = z.object({
  id: z.number(),
  email: z.string().email(),
  firstName: z.string(),
  lastName: z.string(),
  passwordHash: z.string(),
  role: UserRoleEnum,
  restaurantId: z.number(),
  createdAt: z.date(),
  updatedAt: z.date()
});
var UserCreateSchema = UserSchema.omit({ id: true, createdAt: true, updatedAt: true });
UserCreateSchema.partial();
zod_exports.ShiftStatusSchema;
zod_exports.ShiftCreateInputSchema;
z.object({
  id: z.number(),
  restaurantId: z.number()
});
z.object({
  id: z.number(),
  inventoryId: z.number(),
  ingredientId: z.number(),
  quantity: z.number(),
  unit: z.string(),
  minQuantity: z.number(),
  lastUpdated: z.date()
});
var RecipeIngredientCreateSchema = z.object({
  ingredientId: z.number(),
  quantity: z.string(),
  unit: z.string()
});
z.object({
  id: z.number(),
  stepNumber: z.number(),
  instruction: z.string(),
  // This will be encrypted
  imageUrl: z.string().nullable(),
  createdAt: z.date().optional().nullable(),
  updatedAt: z.date().optional().nullable(),
  isDeleted: z.boolean(),
  deleted: z.date().nullable()
});
var RecipeInstructionCreateSchema = z.object({
  stepNumber: z.number(),
  instruction: z.string(),
  imageUrl: z.string().optional()
});
var RecipeCreateSchema = z.object({
  name: z.string(),
  imageUrl: z.array(z.string()),
  description: z.string().optional(),
  servings: z.number(),
  cookTime: z.number(),
  restaurantId: z.number(),
  cookBookId: z.number(),
  ingredients: z.array(RecipeIngredientCreateSchema),
  instructions: z.array(RecipeInstructionCreateSchema)
});
z.object({
  id: z.number().optional(),
  name: z.string().optional(),
  imageUrl: z.string().optional() || z.array(z.string()).optional(),
  description: z.string().optional().nullish(),
  servings: z.number(),
  cookTime: z.number(),
  prepTime: z.number(),
  frequency: z.number().optional().nullable(),
  foodCost: z.number().optional().nullable(),
  restaurantId: z.number().optional().nullable(),
  cookBookId: z.number().optional().nullable(),
  isDeleted: z.boolean().default(false).optional(),
  ingredients: z.array(RecipeIngredientCreateSchema),
  instructions: z.array(RecipeInstructionCreateSchema)
});
RecipeCreateSchema.partial();
var OrderItemSchema = z.object({
  id: z.number(),
  orderId: z.number(),
  ingredientId: z.number(),
  quantity: z.number(),
  unit: z.string(),
  price: z.number()
});
var OrderItemCreateSchema = OrderItemSchema.omit({ id: true });
var OrderItemUpdateSchema = OrderItemSchema.partial().omit({ id: true, orderId: true });
var OrderStatusEnum = z.enum(["PENDING", "APPROVED", "ORDERED", "RECEIVED", "CANCELLED"]);
var VendorSchema = z.object({
  id: z.number(),
  name: z.string()
  // Add other relevant fields
});
var OrderSchema = z.object({
  id: z.number(),
  restaurantId: z.number(),
  vendorId: z.number(),
  vendor: VendorSchema,
  status: OrderStatusEnum,
  items: z.array(OrderItemSchema),
  createdAt: z.date(),
  updatedAt: z.date()
});
var OrderCreateSchema = OrderSchema.omit({
  id: true,
  createdAt: true,
  updatedAt: true
});
var OrderUpdateSchema = OrderCreateSchema.partial();
z.object({
  id: z.number(),
  name: z.string(),
  category: z.string()
});
var OrganizationSchema2 = z.object({
  id: z.number(),
  name: z.string(),
  imageUrl: z.string().optional().nullable(),
  createdAt: z.date(),
  updatedAt: z.date()
});
var OrganizationCreateSchema2 = OrganizationSchema2.omit({
  id: true,
  createdAt: true,
  updatedAt: true
});
OrganizationCreateSchema2.partial();
var VendorSchema2 = z.object({
  id: z.number(),
  name: z.string(),
  contact: z.string(),
  email: z.string().email(),
  phone: z.string(),
  orders: z.array(OrderUpdateSchema),
  //   ingredients: z.array(OrderUpdateSchema),
  createdAt: z.date(),
  updatedAt: z.date()
});
var VendorCreateSchema = VendorSchema2.omit({
  id: true,
  createdAt: true,
  updatedAt: true,
  orders: true
  //   ingredients: true
});
var VendorUpdateSchema = VendorCreateSchema.partial();
var HttpStatus = {
  INTERNAL_SERVER_ERROR: 500,
  OK: 200,
  BAD_REQUEST: 400,
  CREATED: 201
};
var MessageSchema = z.object({
  message: z.string()
});
z.object({
  status: z.literal(HttpStatus.INTERNAL_SERVER_ERROR),
  body: MessageSchema
});
z.discriminatedUnion("status", [
  z.object({
    status: z.literal(HttpStatus.OK),
    body: z.object({
      access_token: z.string(),
      session_token: z.string()
    })
  }),
  z.object({
    status: z.literal(HttpStatus.INTERNAL_SERVER_ERROR),
    body: MessageSchema
  })
]);
z.discriminatedUnion("status", [
  z.object({
    status: z.literal(HttpStatus.CREATED),
    body: zod_exports.UserSchema.omit({ passwordHash: true })
  }),
  z.object({
    status: z.literal(HttpStatus.BAD_REQUEST),
    body: MessageSchema
  })
]);
z.discriminatedUnion("status", [
  z.object({
    status: z.literal(HttpStatus.OK),
    body: MessageSchema
  }),
  z.object({
    status: z.literal(HttpStatus.BAD_REQUEST),
    body: MessageSchema
  })
]);
z.discriminatedUnion("status", [
  z.object({
    status: z.literal(HttpStatus.OK),
    body: MessageSchema
  }),
  z.object({
    status: z.literal(HttpStatus.BAD_REQUEST),
    body: MessageSchema
  })
]);
var c4 = initContract();
var orderItemContract = c4.router({
  createOrderItem: {
    method: "POST",
    path: "/order-items",
    responses: {
      201: OrderItemSchema,
      400: z.object({ message: z.string() })
    },
    body: OrderItemCreateSchema,
    summary: "Create a new order item"
  },
  getOrderItems: {
    method: "GET",
    path: "/order-items",
    responses: {
      200: z.array(OrderItemSchema)
    },
    query: z.object({
      orderId: z.string().optional(),
      skip: z.string().optional(),
      take: z.string().optional()
    }),
    summary: "Get all order items"
  },
  getOrderItem: {
    method: "GET",
    path: "/order-items/:id",
    pathParams: z.object({
      id: z.coerce.number()
    }),
    responses: {
      200: OrderItemSchema,
      404: z.object({ message: z.string() })
    },
    summary: "Get an order item by ID"
  },
  updateOrderItem: {
    method: "PUT",
    path: "/order-items/:id",
    pathParams: z.object({
      id: z.coerce.number()
    }),
    responses: {
      200: OrderItemSchema,
      404: z.object({ message: z.string() })
    },
    body: OrderItemUpdateSchema,
    summary: "Update an order item"
  },
  deleteOrderItem: {
    method: "DELETE",
    path: "/order-items/:id",
    pathParams: z.object({
      id: z.coerce.number()
    }),
    responses: {
      200: OrderItemSchema,
      404: z.object({ message: z.string() })
    },
    summary: "Delete an order item"
  }
});
var c5 = initContract();
var restaurantContract = c5.router({
  createRestaurant: {
    method: "POST",
    path: "/restaurants",
    responses: {
      201: zod_exports.RestaurantSchema,
      400: z.object({ message: z.string() })
    },
    body: zod_exports.RestaurantCreateInputSchema,
    summary: "Create a new restaurant"
  },
  getRestaurants: {
    method: "GET",
    path: "/restaurants",
    responses: {
      200: z.array(zod_exports.RestaurantSchema)
    },
    query: z.object({
      skip: z.string().optional(),
      take: z.string().optional(),
      organizationId: z.string().optional()
    }),
    summary: "Get all restaurants"
  },
  getRestaurant: {
    method: "GET",
    path: "/restaurants/:id",
    pathParams: z.object({
      id: z.coerce.number()
    }),
    responses: {
      200: zod_exports.RestaurantSchema,
      404: z.object({ message: z.string() })
    },
    summary: "Get a restaurant by ID"
  },
  updateRestaurant: {
    method: "PUT",
    path: "/restaurants/:id",
    pathParams: z.object({
      id: z.coerce.number()
    }),
    responses: {
      200: zod_exports.RestaurantSchema,
      404: z.object({ message: z.string() })
    },
    body: zod_exports.RestaurantUpdateInputSchema,
    summary: "Update a restaurant"
  },
  deleteRestaurant: {
    method: "DELETE",
    path: "/restaurants/:id",
    pathParams: z.object({
      id: z.coerce.number()
    }),
    responses: {
      200: zod_exports.RestaurantSchema,
      404: z.object({ message: z.string() })
    },
    summary: "Delete a restaurant"
  }
});
var c6 = initContract();
var shiftContract = c6.router({
  createShift: {
    method: "POST",
    path: "/shifts",
    responses: {
      201: zod_exports.ShiftSchema,
      400: z.object({ message: z.string() })
    },
    body: zod_exports.ShiftUncheckedCreateInputSchema,
    summary: "Create a new shift"
  },
  getShifts: {
    method: "GET",
    path: "/shifts",
    responses: {
      200: z.array(zod_exports.ShiftSchema),
      400: z.object({ message: z.string() }),
      500: z.object({ message: z.string() })
    },
    query: z.object({
      skip: z.coerce.number().optional(),
      take: z.coerce.number().optional(),
      userId: z.coerce.number().optional(),
      startTime: z.string().optional().pipe(z.coerce.date()),
      endTime: z.string().optional().pipe(z.coerce.date()),
      status: z.enum(["SCHEDULED", "COMPLETED", "CANCELLED"]).optional()
    }),
    summary: "Get all shifts"
  },
  getShift: {
    method: "GET",
    path: "/shifts/:id",
    pathParams: z.object({
      id: z.coerce.number()
    }),
    responses: {
      200: zod_exports.ShiftSchema,
      404: z.object({ message: z.string() })
    },
    summary: "Get a shift by ID"
  },
  updateShift: {
    method: "PUT",
    path: "/shifts/:id",
    pathParams: z.object({
      id: z.coerce.number()
    }),
    responses: {
      200: zod_exports.ShiftSchema,
      404: z.object({ message: z.string() })
    },
    body: zod_exports.ShiftUncheckedUpdateInputSchema,
    summary: "Update a shift"
  },
  deleteShift: {
    method: "DELETE",
    path: "/shifts/:id",
    pathParams: z.object({
      id: z.coerce.number()
    }),
    responses: {
      200: zod_exports.ShiftSchema,
      404: z.object({ message: z.string() })
    },
    summary: "Delete a shift"
  }
});
var c7 = initContract();
var DeleteIdsSchema = z.object({
  ingredientIds: z.array(z.number()),
  instructionIds: z.array(z.number())
});
var RecipeUpdateRequestSchema = z.object({
  data: zod_exports.RecipeUpdateInputSchema,
  deleteIds: DeleteIdsSchema.optional()
  // Make it optional if deletions are not always present
});
var recipeContract = c7.router({
  // Existing Endpoints
  createRecipe: {
    method: "POST",
    path: "/recipes",
    responses: {
      201: zod_exports.RecipeSchema,
      400: z.object({ message: z.string() })
    },
    body: zod_exports.RecipeCreateInputSchema,
    summary: "Create a new recipe"
  },
  uploadFileS3: {
    method: "POST",
    path: "/recipes/upload",
    contentType: "multipart/form-data",
    responses: {
      201: z.object({
        url: z.string()
        // uploadFileS3: z.object({
        //   name: z.string(),
        //   size: z.number(),
        //   type: z.string(),
        //   url: z.string(),
        // })
      }),
      400: z.object({ message: z.string() })
    },
    body: z.string(),
    summary: "uploads recipe images to s3 bucket"
  },
  getRecipes: {
    method: "GET",
    path: "/recipes",
    responses: {
      200: z.object({ recipes: z.array(zod_exports.RecipeSchema), totalCount: z.number() })
    },
    query: z.object({
      skip: z.coerce.number().optional(),
      take: z.coerce.number().optional(),
      restaurantId: z.coerce.number().optional(),
      searchTerm: z.string().optional()
    }),
    summary: "Get all recipes"
  },
  getRecipe: {
    method: "GET",
    path: "/recipes/:id",
    pathParams: z.object({
      id: z.coerce.number()
    }),
    responses: {
      200: zod_exports.RecipeSchema,
      404: z.object({ message: z.string() })
    },
    summary: "Get a recipe by ID"
  },
  updateRecipe: {
    method: "PUT",
    path: "/recipes/:id",
    pathParams: z.object({
      id: z.coerce.number()
    }),
    responses: {
      200: zod_exports.RecipeSchema,
      400: z.object({ message: z.string() }),
      404: z.object({ message: z.string() })
    },
    body: RecipeUpdateRequestSchema,
    summary: "Update a recipe"
  },
  deleteRecipe: {
    method: "DELETE",
    path: "/recipes/:id",
    pathParams: z.object({
      id: z.coerce.number()
    }),
    responses: {
      200: zod_exports.RecipeSchema,
      404: z.object({ message: z.string() })
    },
    summary: "Delete a recipe"
  },
  // Ingredient Management
  addIngredientToRecipe: {
    method: "POST",
    path: "/recipes/:recipeId/ingredients",
    pathParams: z.object({
      recipeId: z.coerce.number()
    }),
    responses: {
      200: zod_exports.RecipeIngredientSchema,
      400: z.object({ message: z.string() }),
      404: z.object({ message: z.string() })
    },
    body: zod_exports.RecipeIngredientUncheckedCreateInputSchema,
    summary: "Add an ingredient to a recipe"
  },
  removeIngredientFromRecipe: {
    method: "DELETE",
    path: "/recipes/:recipeId/ingredients/:id",
    pathParams: z.object({
      recipeId: z.coerce.number(),
      id: z.coerce.number()
    }),
    responses: {
      200: zod_exports.RecipeIngredientSchema,
      404: z.object({ message: z.string() })
    },
    summary: "Remove an ingredient from a recipe"
  },
  updateIngredientInRecipe: {
    method: "PUT",
    path: "/recipes/:recipeId/ingredients/:id",
    pathParams: z.object({
      recipeId: z.coerce.number(),
      id: z.coerce.number()
    }),
    responses: {
      200: zod_exports.RecipeIngredientSchema,
      400: z.object({ message: z.string() }),
      404: z.object({ message: z.string() })
    },
    body: zod_exports.RecipeIngredientUncheckedUpdateInputSchema,
    summary: "Update an ingredient in a recipe"
  },
  getRecipeIngredients: {
    method: "GET",
    path: "/recipes/:recipeId/ingredients",
    pathParams: z.object({
      recipeId: z.coerce.number()
    }),
    responses: {
      200: z.array(zod_exports.RecipeIngredientSchema),
      404: z.object({ message: z.string() })
    },
    summary: "Get all ingredients for a recipe"
  },
  getRecipeIngredient: {
    method: "GET",
    path: "/recipes/:recipeId/ingredients/:id",
    pathParams: z.object({
      recipeId: z.coerce.number(),
      id: z.coerce.number()
    }),
    responses: {
      200: zod_exports.RecipeIngredientSchema,
      404: z.object({ message: z.string() })
    },
    summary: "Get a specific ingredient from a recipe"
  },
  // Instruction Management
  addInstructionToRecipe: {
    method: "POST",
    path: "/recipes/:recipeId/instructions",
    pathParams: z.object({
      recipeId: z.coerce.number()
    }),
    responses: {
      200: zod_exports.RecipeInstructionSchema,
      400: z.object({ message: z.string() }),
      404: z.object({ message: z.string() })
    },
    body: zod_exports.RecipeInstructionCreateInputSchema,
    summary: "Add an instruction to a recipe"
  },
  removeInstructionFromRecipe: {
    method: "DELETE",
    path: "/recipes/:recipeId/instructions/:id",
    pathParams: z.object({
      recipeId: z.coerce.number(),
      id: z.coerce.number()
    }),
    responses: {
      200: zod_exports.RecipeInstructionSchema,
      404: z.object({ message: z.string() })
    },
    summary: "Remove an instruction from a recipe"
  },
  updateInstructionInRecipe: {
    method: "PUT",
    path: "/recipes/:recipeId/instructions/:id",
    pathParams: z.object({
      recipeId: z.coerce.number(),
      id: z.coerce.number()
    }),
    responses: {
      200: zod_exports.RecipeInstructionSchema,
      400: z.object({ message: z.string() }),
      404: z.object({ message: z.string() })
    },
    body: zod_exports.RecipeInstructionUpdateInputSchema,
    summary: "Update an instruction in a recipe"
  },
  getRecipeInstruction: {
    method: "GET",
    path: "/recipes/:recipeId/instructions/:id",
    pathParams: z.object({
      recipeId: z.coerce.number(),
      id: z.coerce.number()
    }),
    responses: {
      200: zod_exports.RecipeInstructionSchema,
      404: z.object({ message: z.string() })
    },
    summary: "Get a specific instruction from a recipe"
  },
  getRecipeInstructions: {
    method: "GET",
    path: "/recipes/:recipeId/instructions",
    pathParams: z.object({
      recipeId: z.coerce.number()
    }),
    responses: {
      200: z.array(zod_exports.RecipeInstructionSchema),
      404: z.object({ message: z.string() })
    },
    summary: "Get all instructions for a recipe"
  },
  // Food Cost and Pricing
  calculateFoodCost: {
    method: "POST",
    path: "/recipes/:recipeId/calculate-food-cost",
    pathParams: z.object({
      recipeId: z.coerce.number()
    }),
    responses: {
      200: z.object({ totalCost: z.number() }),
      404: z.object({ message: z.string() })
    },
    body: z.object({
      ingredientPrices: z.array(z.object({ ingredientId: z.number(), price: z.number() }))
    }),
    summary: "Calculate the total food cost for a recipe"
  },
  getFoodCostHistory: {
    method: "GET",
    path: "/recipes/:recipeId/food-cost-history",
    pathParams: z.object({
      recipeId: z.coerce.number()
    }),
    responses: {
      200: z.array(zod_exports.FoodCostHistorySchema),
      404: z.object({ message: z.string() })
    },
    summary: "Get the food cost history for a recipe"
  },
  calculateRecipePrice: {
    method: "POST",
    path: "/recipes/:recipeId/calculate-price",
    pathParams: z.object({
      recipeId: z.coerce.number()
    }),
    body: z.object({
      profitMargin: z.number().optional()
      // Profit margin as a decimal (e.g., 0.3 for 30%)
    }),
    responses: {
      200: z.object({ price: z.number() }),
      404: z.object({ message: z.string() })
    },
    summary: "Calculate the selling price for a recipe"
  },
  getRecipePrice: {
    method: "GET",
    path: "/recipes/:recipeId/price",
    pathParams: z.object({
      recipeId: z.coerce.number()
    }),
    query: z.object({
      profitMargin: z.number().optional()
      // Optional profit margin
    }),
    responses: {
      200: z.object({ price: z.number() }),
      404: z.object({ message: z.string() })
    },
    summary: "Get the selling price for a recipe"
  }
});
var c8 = initContract();
var vendorContract = c8.router({
  createVendor: {
    method: "POST",
    path: "/vendors",
    responses: {
      201: VendorSchema2,
      400: z.object({ message: z.string() })
    },
    body: VendorCreateSchema,
    summary: "Create a new vendor"
  },
  getVendors: {
    method: "GET",
    path: "/vendors",
    responses: {
      200: z.array(VendorSchema2)
    },
    query: z.object({
      skip: z.string().optional(),
      take: z.string().optional(),
      name: z.string().optional()
    }),
    summary: "Get all vendors"
  },
  getVendor: {
    method: "GET",
    path: "/vendors/:id",
    pathParams: z.object({
      id: z.coerce.number()
    }),
    responses: {
      200: VendorSchema2,
      404: z.object({ message: z.string() })
    },
    summary: "Get a vendor by ID"
  },
  updateVendor: {
    method: "PUT",
    path: "/vendors/:id",
    pathParams: z.object({
      id: z.coerce.number()
    }),
    responses: {
      200: VendorSchema2,
      404: z.object({ message: z.string() })
    },
    body: VendorUpdateSchema,
    summary: "Update a vendor"
  },
  deleteVendor: {
    method: "DELETE",
    path: "/vendors/:id",
    pathParams: z.object({
      id: z.coerce.number()
    }),
    responses: {
      200: VendorSchema2,
      404: z.object({ message: z.string() })
    },
    summary: "Delete a vendor"
  }
});
var c9 = initContract();
var prepBoardContract = c9.router({
  createPrepBoard: {
    method: "POST",
    path: "/prepBoards",
    responses: {
      201: zod_exports.PrepBoardSchema,
      400: z.object({ message: z.string() })
    },
    body: zod_exports.PrepBoardCreateInputSchema,
    summary: "Create a new prep board"
  },
  getPrepBoards: {
    method: "GET",
    path: "/prepBoards",
    responses: {
      200: z.array(zod_exports.PrepBoardSchema)
    },
    query: z.object({
      skip: z.coerce.number().optional(),
      take: z.coerce.number().optional(),
      where: z.record(z.any()).optional(),
      orderBy: z.record(z.enum(["asc", "desc"])).optional()
    }),
    summary: "Get all prep boards"
  },
  getPrepBoard: {
    method: "GET",
    path: "/prepBoards/:id",
    pathParams: z.object({ id: z.coerce.number() }),
    responses: {
      200: zod_exports.PrepBoardSchema,
      404: z.object({ message: z.string() })
    },
    summary: "Get a prep board by ID"
  },
  updatePrepBoard: {
    method: "PUT",
    path: "/prepBoards/:id",
    pathParams: z.object({ id: z.coerce.number() }),
    responses: {
      200: zod_exports.PrepBoardSchema,
      404: z.object({ message: z.string() })
    },
    body: zod_exports.PrepBoardUpdateInputSchema,
    summary: "Update a prep board"
  },
  deletePrepBoard: {
    method: "DELETE",
    path: "/prepBoards/:id",
    pathParams: z.object({ id: z.coerce.number() }),
    responses: {
      200: z.object({ message: z.string() }),
      404: z.object({ message: z.string() })
    },
    summary: "Delete a prep board"
  }
});
var c10 = initContract();
var authContract = c10.router({
  resendCode: {
    method: "POST",
    path: "/auth/resend-code",
    responses: {
      200: z.object({
        code: z.string()
      }),
      401: z.object({ message: z.string() })
    },
    body: z.object({
      email: z.string().email()
    }),
    summary: "Resend the verifyLoginCode"
  },
  login: {
    method: "POST",
    path: "/auth/login",
    responses: {
      200: z.object({
        code: z.string()
      }),
      401: z.object({ message: z.string() })
    },
    body: z.object({
      email: z.string().email(),
      password: z.string()
    }),
    summary: "User login"
  },
  verifyLoginCode: {
    method: "POST",
    path: "/auth/verify-login",
    responses: {
      200: z.object({
        accessToken: z.string(),
        user: zod_exports.UserSchema.omit({ passwordHash: true })
      }),
      401: z.object({ message: z.string() })
    },
    body: z.object({
      code: z.string()
    }),
    summary: "Verify login code"
  },
  register: {
    method: "POST",
    path: "/auth/register",
    responses: {
      201: zod_exports.UserSchema.omit({ passwordHash: true }),
      400: z.object({ message: z.string() })
    },
    body: zod_exports.UserUncheckedCreateInputSchema,
    summary: "User registration"
  },
  changePassword: {
    method: "POST",
    path: "/auth/change-password/:userId",
    responses: {
      200: z.object({ message: z.string() }),
      400: z.object({ message: z.string() })
    },
    body: z.object({
      oldPassword: z.string(),
      newPassword: z.string()
    }),
    pathParams: z.object({
      userId: z.coerce.number()
    }),
    summary: "Change user password"
  },
  logout: {
    method: "POST",
    path: "/auth/logout",
    responses: {
      200: z.object({ message: z.string() }),
      400: z.object({ message: z.string() })
    },
    body: z.object({
      userId: z.number(),
      accessToken: z.string()
    }),
    summary: "User logout"
  },
  forgotPassword: {
    method: "POST",
    path: "/auth/forgot-password",
    responses: {
      200: z.object({ message: z.string() }),
      400: z.object({ message: z.string() })
    },
    body: z.object({
      email: z.string().email()
    }),
    summary: "Request password reset"
  },
  resetPassword: {
    method: "POST",
    path: "/auth/reset-password",
    responses: {
      200: z.object({ message: z.string() }),
      400: z.object({ message: z.string() })
    },
    body: z.object({
      resetToken: z.string(),
      newPassword: z.string()
    }),
    summary: "Reset password"
  }
});
var c11 = initContract();
var earlyAccessContract = c11.router({
  storeEmail: {
    method: "POST",
    path: "/early-access",
    responses: {
      200: z.object({
        message: z.string()
      }),
      401: z.object({ message: z.string() })
    },
    body: z.object({
      email: z.string().email()
    }),
    summary: "Add potential customer to the database"
  },
  deleteEmail: {
    method: "DELETE",
    path: "/early-access/:id",
    pathParams: z.object({
      id: z.coerce.number()
    }),
    responses: {
      200: z.object({
        email: z.string()
      }),
      401: z.object({ message: z.string() })
    },
    summary: "Delete a potential customer from the database"
  },
  getEmails: {
    method: "GET",
    path: "/early-access",
    responses: {
      201: z.array(zod_exports.EarlyAccessSchema),
      400: z.object({ message: z.string() })
    },
    query: z.object({
      skip: z.string().optional(),
      take: z.string().optional(),
      orderBy: z.string().optional(),
      isEmailSent: z.boolean().optional()
    }),
    summary: "get all potential customers from the database"
  },
  getEmail: {
    method: "GET",
    path: "/early-access/:id",
    pathParams: z.object({
      id: z.coerce.number()
    }),
    responses: {
      200: zod_exports.EarlyAccessSchema,
      404: z.object({ message: z.string() })
    },
    summary: "Get an order by ID"
  }
});
var c12 = initContract();
var menuContract = c12.router({
  createMenu: {
    method: "POST",
    path: "/menus",
    responses: {
      201: zod_exports.MenuSchema,
      400: z.object({ message: z.string() })
    },
    body: z.object({
      name: z.string(),
      restaurantId: z.number()
    }),
    summary: "Create a new menu"
  },
  getMenus: {
    method: "GET",
    path: "/menus",
    responses: {
      200: z.array(zod_exports.MenuSchema)
    },
    query: z.object({
      restaurantId: z.coerce.number().optional(),
      skip: z.coerce.number().optional(),
      take: z.coerce.number().optional()
    }),
    summary: "Get all menus"
  },
  getMenu: {
    method: "GET",
    path: "/menus/:id",
    pathParams: z.object({ id: z.coerce.number() }),
    responses: {
      200: zod_exports.MenuSchema,
      404: z.object({ message: z.string() })
    },
    summary: "Get a menu by ID"
  },
  updateMenu: {
    method: "PUT",
    path: "/menus/:id",
    pathParams: z.object({ id: z.coerce.number() }),
    responses: {
      200: zod_exports.MenuSchema,
      404: z.object({ message: z.string() })
    },
    body: z.object({
      name: z.string().optional()
    }),
    summary: "Update a menu"
  },
  deleteMenu: {
    method: "DELETE",
    path: "/menus/:id",
    pathParams: z.object({ id: z.coerce.number() }),
    responses: {
      200: z.object({ message: z.string() }),
      404: z.object({ message: z.string() })
    },
    summary: "Delete a menu"
  }
});
var c13 = initContract();
var menuItemContract = c13.router({
  createMenuItem: {
    method: "POST",
    path: "/menu-items",
    responses: {
      201: zod_exports.MenuItemSchema,
      400: z.object({ message: z.string() })
    },
    body: zod_exports.MenuItemCreateInputSchema,
    summary: "Create a new menu item"
  },
  getMenuItems: {
    method: "GET",
    path: "/menu-items",
    responses: {
      200: z.array(zod_exports.MenuItemSchema)
    },
    query: z.object({
      menuId: z.coerce.number().optional(),
      skip: z.coerce.number().optional(),
      take: z.coerce.number().optional()
    }),
    summary: "Get all menu items"
  },
  getMenuItem: {
    method: "GET",
    path: "/menu-items/:id",
    pathParams: z.object({
      id: z.coerce.number()
    }),
    responses: {
      200: zod_exports.MenuItemSchema,
      404: z.object({ message: z.string() })
    },
    summary: "Get a menu item by ID"
  },
  updateMenuItem: {
    method: "PUT",
    path: "/menu-items/:id",
    pathParams: z.object({
      id: z.coerce.number()
    }),
    responses: {
      200: zod_exports.MenuItemSchema,
      404: z.object({ message: z.string() })
    },
    body: zod_exports.MenuItemUpdateInputSchema,
    summary: "Update a menu item"
  },
  deleteMenuItem: {
    method: "DELETE",
    path: "/menu-items/:id",
    pathParams: z.object({
      id: z.coerce.number()
    }),
    responses: {
      200: z.object({ message: z.string() }),
      404: z.object({ message: z.string() })
    },
    summary: "Delete a menu item"
  },
  addRecipeToMenuItem: {
    method: "POST",
    path: "/menu-items/recipes",
    responses: {
      200: zod_exports.MenuItemSchema,
      404: z.object({ message: z.string() })
    },
    body: z.object({
      menuItemId: z.coerce.number(),
      recipeId: z.coerce.number()
    }),
    summary: "Add a recipe to a menu item"
  },
  // getMenuItemByRecipeId
  getMenuItemByRecipeId: {
    method: "GET",
    path: "/menu-items/recipes/:recipeId",
    pathParams: z.object({
      recipeId: z.coerce.number()
    }),
    responses: {
      200: zod_exports.MenuItemSchema,
      404: z.object({ message: z.string() })
    },
    summary: "Get a menu item by recipe ID"
  },
  // calculateMenuItemPrice
  calculateMenuItemPrice: {
    method: "GET",
    path: "/menu-items/:menuItemId/price",
    pathParams: z.object({
      menuItemId: z.coerce.number()
    }),
    responses: {
      200: z.number(),
      404: z.object({ message: z.string() })
    },
    summary: "Calculate a menu item price"
  },
  //calculateMenuItemFoodCostPercentage
  calculateMenuItemFoodCostPercentage: {
    method: "GET",
    path: "/menu-items/:menuItemId/food-cost-percentage",
    pathParams: z.object({
      menuItemId: z.coerce.number()
    }),
    responses: {
      200: z.number(),
      404: z.object({ message: z.string() })
    },
    summary: "Calculate a menu item food cost percentage"
  },
  // calculateItemsFoodCostPercentage
  calculateItemsFoodCostPercentage: {
    method: "GET",
    path: "/menu-items/food-cost-percentage",
    query: z.object({
      menuItemIds: z.array(z.coerce.number())
    }),
    responses: {
      200: z.number(),
      404: z.object({ message: z.string() })
    },
    summary: "Calculate items food cost percentage"
  }
});
var c14 = initContract();
var analyticsContract = c14.router({
  getFoodCostHistory: {
    method: "GET",
    path: "/analytics/food-cost-history",
    responses: {
      200: z.array(zod_exports.FoodCostHistorySchema)
    },
    query: z.object({
      recipeId: z.string(),
      startDate: z.string(),
      endDate: z.string()
    }),
    summary: "Get food cost history for a recipe"
  },
  getPrepHistory: {
    method: "GET",
    path: "/analytics/prep-history",
    responses: {
      200: z.array(zod_exports.PrepHistorySchema)
    },
    query: z.object({
      recipeId: z.string(),
      startDate: z.string(),
      endDate: z.string()
    }),
    summary: "Get prep history for a recipe"
  },
  getMenuAnalytics: {
    method: "GET",
    path: "/analytics/menu",
    responses: {
      200: z.object({
        lowestCostItem: zod_exports.MenuItemSchema,
        highestCostItem: zod_exports.MenuItemSchema,
        averageFoodCost: z.number()
      })
    },
    query: z.object({
      menuId: z.string()
    }),
    summary: "Get menu analytics"
  },
  getRecipeAnalytics: {
    method: "GET",
    path: "/analytics/recipe",
    responses: {
      200: z.object({
        averagePrepsPerWeek: z.number(),
        totalPrepCount: z.number(),
        averageFoodCost: z.number(),
        foodCostTrend: z.array(z.object({
          date: z.string(),
          cost: z.number()
        }))
      })
    },
    query: z.object({
      recipeId: z.string(),
      startDate: z.string(),
      endDate: z.string()
    }),
    summary: "Get recipe analytics"
  },
  getRestaurantAnalytics: {
    method: "GET",
    path: "/analytics/restaurant",
    responses: {
      200: z.object({
        totalRecipes: z.number(),
        totalMenuItems: z.number(),
        averageFoodCost: z.number(),
        mostPreparedRecipes: z.array(z.object({
          recipe: zod_exports.RecipeSchema,
          prepCount: z.number()
        })),
        foodCostTrend: z.array(z.object({
          date: z.string(),
          cost: z.number()
        }))
      })
    },
    query: z.object({
      restaurantId: z.string(),
      startDate: z.string(),
      endDate: z.string()
    }),
    summary: "Get restaurant analytics"
  }
});
var c15 = initContract();
var cookbookContract = c15.router({
  createCookBook: {
    method: "POST",
    path: "/cookbooks",
    responses: {
      201: zod_exports.CookBookSchema,
      400: z.object({ message: z.string() })
    },
    body: z.object({
      name: z.string(),
      imageUrl: z.string().optional(),
      category: z.string(),
      restaurantId: z.number().optional()
    }),
    summary: "Create a new cookbook"
  },
  getCookBooks: {
    method: "GET",
    path: "/cookbooks",
    responses: {
      200: z.array(zod_exports.CookBookSchema)
    },
    query: z.object({
      restaurantId: z.coerce.number().optional(),
      skip: z.coerce.number().optional(),
      take: z.coerce.number().optional()
    }),
    summary: "Get all cookbooks"
  },
  getCookBook: {
    method: "GET",
    path: "/cookbooks/:id",
    pathParams: z.object({ id: z.coerce.number() }),
    responses: {
      200: zod_exports.CookBookSchema,
      404: z.object({ message: z.string() })
    },
    summary: "Get a cookbook by ID"
  },
  updateCookBook: {
    method: "PUT",
    path: "/cookbooks/:id",
    pathParams: z.object({ id: z.coerce.number() }),
    responses: {
      200: zod_exports.CookBookSchema,
      404: z.object({ message: z.string() })
    },
    body: z.object({
      name: z.string().optional(),
      imageUrl: z.string().optional(),
      category: z.string().optional(),
      restaurantId: z.number().optional()
    }),
    summary: "Update a cookbook"
  },
  deleteCookBook: {
    method: "DELETE",
    path: "/cookbooks/:id",
    pathParams: z.object({ id: z.coerce.number() }),
    responses: {
      200: z.object({ message: z.string() }),
      404: z.object({ message: z.string() })
    },
    summary: "Delete a cookbook"
  }
});
var c16 = initContract();
var ingredientContract = c16.router({
  createIngredient: {
    method: "POST",
    path: "/ingredients",
    responses: {
      201: zod_exports.IngredientSchema,
      400: z.object({ message: z.string() })
    },
    body: z.object({
      name: z.string(),
      category: z.string(),
      price: z.number()
    }),
    summary: "Create a new ingredient"
  },
  getIngredients: {
    method: "GET",
    path: "/ingredients",
    responses: {
      200: z.array(zod_exports.IngredientSchema)
    },
    query: z.object({
      skip: z.coerce.number().optional(),
      take: z.coerce.number().optional(),
      where: z.record(z.any()).optional(),
      orderBy: z.record(z.enum(["asc", "desc"])).optional()
    }),
    summary: "Get all ingredients"
  },
  getIngredient: {
    method: "GET",
    path: "/ingredients/:id",
    pathParams: z.object({ id: z.coerce.number() }),
    responses: {
      200: zod_exports.IngredientSchema,
      404: z.object({ message: z.string() })
    },
    summary: "Get an ingredient by ID"
  },
  updateIngredient: {
    method: "PUT",
    path: "/ingredients/:id",
    pathParams: z.object({ id: z.coerce.number() }),
    responses: {
      200: zod_exports.IngredientSchema,
      404: z.object({ message: z.string() })
    },
    body: z.object({
      name: z.string().optional(),
      category: z.string().optional(),
      price: z.number().optional()
    }),
    summary: "Update an ingredient"
  },
  deleteIngredient: {
    method: "DELETE",
    path: "/ingredients/:id",
    pathParams: z.object({ id: z.coerce.number() }),
    responses: {
      200: z.object({ message: z.string() }),
      404: z.object({ message: z.string() })
    },
    summary: "Delete an ingredient"
  }
});
var c17 = initContract();
var prepItemContract = c17.router({
  createPrepItem: {
    method: "POST",
    path: "/prepItems",
    responses: {
      201: zod_exports.PrepItemSchema,
      400: z.object({ message: z.string() })
    },
    body: zod_exports.PrepItemCreateInputSchema,
    summary: "Create a new prep item"
  },
  getPrepItems: {
    method: "GET",
    path: "/prepItems",
    responses: {
      200: z.array(zod_exports.PrepItemSchema)
    },
    query: z.object({
      skip: z.coerce.number().optional(),
      take: z.coerce.number().optional(),
      where: z.record(z.any()).optional(),
      orderBy: z.record(z.enum(["asc", "desc"])).optional()
    }),
    summary: "Get all prep items"
  },
  getPrepItem: {
    method: "GET",
    path: "/prepItems/:id",
    pathParams: z.object({ id: z.coerce.number() }),
    responses: {
      200: zod_exports.PrepItemSchema,
      404: z.object({ message: z.string() })
    },
    summary: "Get a prep item by ID"
  },
  updatePrepItem: {
    method: "PUT",
    path: "/prepItems/:id",
    pathParams: z.object({ id: z.coerce.number() }),
    responses: {
      200: zod_exports.PrepItemSchema,
      404: z.object({ message: z.string() })
    },
    body: zod_exports.PrepItemUpdateInputSchema,
    summary: "Update a prep item"
  },
  deletePrepItem: {
    method: "DELETE",
    path: "/prepItems/:id",
    pathParams: z.object({ id: z.coerce.number() }),
    responses: {
      200: z.object({ message: z.string() }),
      404: z.object({ message: z.string() })
    },
    summary: "Delete a prep item"
  }
});
var c18 = initContract();
var contract = c18.router({
  users: userContract,
  orgs: organizationContract,
  orders: orderContract,
  orderItem: orderItemContract,
  restaurant: restaurantContract,
  shifts: shiftContract,
  recipe: recipeContract,
  vendor: vendorContract,
  prepBoard: prepBoardContract,
  auth: authContract,
  earlyAccess: earlyAccessContract,
  menu: menuContract,
  menuItem: menuItemContract,
  analytics: analyticsContract,
  cookbook: cookbookContract,
  ingredient: ingredientContract,
  prepItem: prepItemContract
}, {
  pathPrefix: "/api/v1"
});
var api = initClient(contract, {
  baseUrl: "http://localhost:3000",
  baseHeaders: {}
});

export { api as a };
//# sourceMappingURL=index2-NJef63Gp.js.map
